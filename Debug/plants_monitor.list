
plants_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800cdc8  0800cdc8  0001cdc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d050  0800d050  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800d050  0800d050  0001d050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d058  0800d058  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d058  0800d058  0001d058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d05c  0800d05c  0001d05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800d060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b40  20000060  0800d0c0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ba0  0800d0c0  00022ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a1ca  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052a6  00000000  00000000  0004a29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002110  00000000  00000000  0004f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019a5  00000000  00000000  00051658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e94  00000000  00000000  00052ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000288ab  00000000  00000000  00077e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1653  00000000  00000000  000a073c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000928c  00000000  00000000  00191d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0019b01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cdb0 	.word	0x0800cdb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800cdb0 	.word	0x0800cdb0

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00b fe63 	bl	800cbdc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f32:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f38:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4a:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f82:	f003 f8d9 	bl	8004138 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f8c:	f000 fefa 	bl	8001d84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f9c:	f004 fd08 	bl	80059b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fa6:	f000 feed 	bl	8001d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_ADC1_Init+0xec>)
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb6:	237f      	movs	r3, #127	; 0x7f
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000fc8:	f003 febc 	bl	8004d44 <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fd2:	f000 fed7 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3730      	adds	r7, #48	; 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000007c 	.word	0x2000007c
 8000fe4:	04300002 	.word	0x04300002

08000fe8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09e      	sub	sp, #120	; 0x78
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2250      	movs	r2, #80	; 0x50
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f00b fde7 	bl	800cbdc <memset>
  if(adcHandle->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001016:	d13c      	bne.n	8001092 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800101e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001022:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fcaf 	bl	800798c <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001034:	f000 fea6 	bl	8001d84 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_ADC_MspInit+0xb4>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_ADC_MspInit+0xb4>)
 800103e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_ADC_MspInit+0xb4>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_ADC_MspInit+0xb4>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_ADC_MspInit+0xb4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_ADC_MspInit+0xb4>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ANALOG1_IN_Pin|ANALOG2_IN_Pin;
 8001068:	2303      	movs	r3, #3
 800106a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f004 fe5f 	bl	8005d40 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2105      	movs	r1, #5
 8001086:	2012      	movs	r0, #18
 8001088:	f004 fe32 	bl	8005cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800108c:	2012      	movs	r0, #18
 800108e:	f004 fe49 	bl	8005d24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3778      	adds	r7, #120	; 0x78
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <readADCData>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
uint32_t readADCData(ADC_HandleTypeDef _adcHandle)
{
 80010a0:	b084      	sub	sp, #16
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	f107 0c10 	add.w	ip, r7, #16
 80010ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t analogReadValue = 1234;
 80010b0:	f240 43d2 	movw	r3, #1234	; 0x4d2
 80010b4:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&_adcHandle);
 80010b6:	f107 0010 	add.w	r0, r7, #16
 80010ba:	f003 f9eb 	bl	8004494 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&_adcHandle, 1000)==HAL_OK)
 80010be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010c2:	f107 0010 	add.w	r0, r7, #16
 80010c6:	f003 fae3 	bl	8004690 <HAL_ADC_PollForConversion>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d104      	bne.n	80010da <readADCData+0x3a>
		analogReadValue = (uint32_t) HAL_ADC_GetValue(&_adcHandle);
 80010d0:	f107 0010 	add.w	r0, r7, #16
 80010d4:	f003 fbd0 	bl	8004878 <HAL_ADC_GetValue>
 80010d8:	6078      	str	r0, [r7, #4]


	HAL_ADC_Stop(&_adcHandle);
 80010da:	f107 0010 	add.w	r0, r7, #16
 80010de:	f003 faa3 	bl	8004628 <HAL_ADC_Stop>

	return analogReadValue;
 80010e2:	687b      	ldr	r3, [r7, #4]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ee:	b004      	add	sp, #16
 80010f0:	4770      	bx	lr
	...

080010f4 <SetChannel>:

void SetChannel(uint32_t Channel)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2220      	movs	r2, #32
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f00b fd69 	bl	800cbdc <memset>

	  /** Configure Regular Channel
	    */
	    sConfig.Channel = Channel;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60bb      	str	r3, [r7, #8]
	    sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	60fb      	str	r3, [r7, #12]
	    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
	    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	; 0x7f
 8001118:	617b      	str	r3, [r7, #20]
	    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
	    sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
	    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <SetChannel+0x4c>)
 800112a:	f003 fe0b 	bl	8004d44 <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SetChannel+0x44>
	    {
	      Error_Handler();
 8001134:	f000 fe26 	bl	8001d84 <Error_Handler>
	    }
}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000007c 	.word	0x2000007c

08001144 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UART_Semaphore */
  UART_SemaphoreHandle = osSemaphoreNew(1, 0, &UART_Semaphore_attributes);
 8001148:	4a28      	ldr	r2, [pc, #160]	; (80011ec <MX_FREERTOS_Init+0xa8>)
 800114a:	2100      	movs	r1, #0
 800114c:	2001      	movs	r0, #1
 800114e:	f008 fa4e 	bl	80095ee <osSemaphoreNew>
 8001152:	4603      	mov	r3, r0
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <MX_FREERTOS_Init+0xac>)
 8001156:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Semaphore */
  ADC_SemaphoreHandle = osSemaphoreNew(1, 0, &ADC_Semaphore_attributes);
 8001158:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <MX_FREERTOS_Init+0xb0>)
 800115a:	2100      	movs	r1, #0
 800115c:	2001      	movs	r0, #1
 800115e:	f008 fa46 	bl	80095ee <osSemaphoreNew>
 8001162:	4603      	mov	r3, r0
 8001164:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <MX_FREERTOS_Init+0xb4>)
 8001166:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueToUART */
  queueToUARTHandle = osMessageQueueNew (16, sizeof(SensorData), &queueToUART_attributes);
 8001168:	4a24      	ldr	r2, [pc, #144]	; (80011fc <MX_FREERTOS_Init+0xb8>)
 800116a:	2108      	movs	r1, #8
 800116c:	2010      	movs	r0, #16
 800116e:	f008 fb5d 	bl	800982c <osMessageQueueNew>
 8001172:	4603      	mov	r3, r0
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <MX_FREERTOS_Init+0xbc>)
 8001176:	6013      	str	r3, [r2, #0]

  /* creation of queueToPump */
  queueToPumpHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueToPump_attributes);
 8001178:	4a22      	ldr	r2, [pc, #136]	; (8001204 <MX_FREERTOS_Init+0xc0>)
 800117a:	2102      	movs	r1, #2
 800117c:	2010      	movs	r0, #16
 800117e:	f008 fb55 	bl	800982c <osMessageQueueNew>
 8001182:	4603      	mov	r3, r0
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <MX_FREERTOS_Init+0xc4>)
 8001186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensAnalog01 */
  sensAnalog01Handle = osThreadNew(sensAnalog01Task, NULL, &sensAnalog01_attributes);
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <MX_FREERTOS_Init+0xc8>)
 800118a:	2100      	movs	r1, #0
 800118c:	4820      	ldr	r0, [pc, #128]	; (8001210 <MX_FREERTOS_Init+0xcc>)
 800118e:	f008 f981 	bl	8009494 <osThreadNew>
 8001192:	4603      	mov	r3, r0
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <MX_FREERTOS_Init+0xd0>)
 8001196:	6013      	str	r3, [r2, #0]

  /* creation of sensUART */
  sensUARTHandle = osThreadNew(sensUARTTask, NULL, &sensUART_attributes);
 8001198:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <MX_FREERTOS_Init+0xd4>)
 800119a:	2100      	movs	r1, #0
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <MX_FREERTOS_Init+0xd8>)
 800119e:	f008 f979 	bl	8009494 <osThreadNew>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <MX_FREERTOS_Init+0xdc>)
 80011a6:	6013      	str	r3, [r2, #0]

  /* creation of sensI2C */
  sensI2CHandle = osThreadNew(sensI2CTask, NULL, &sensI2C_attributes);
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <MX_FREERTOS_Init+0xe0>)
 80011aa:	2100      	movs	r1, #0
 80011ac:	481e      	ldr	r0, [pc, #120]	; (8001228 <MX_FREERTOS_Init+0xe4>)
 80011ae:	f008 f971 	bl	8009494 <osThreadNew>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a1d      	ldr	r2, [pc, #116]	; (800122c <MX_FREERTOS_Init+0xe8>)
 80011b6:	6013      	str	r3, [r2, #0]

  /* creation of sensAnalog02 */
  sensAnalog02Handle = osThreadNew(sensAnalog02Task, NULL, &sensAnalog02_attributes);
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <MX_FREERTOS_Init+0xec>)
 80011ba:	2100      	movs	r1, #0
 80011bc:	481d      	ldr	r0, [pc, #116]	; (8001234 <MX_FREERTOS_Init+0xf0>)
 80011be:	f008 f969 	bl	8009494 <osThreadNew>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <MX_FREERTOS_Init+0xf4>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* creation of pumpTask */
  pumpTaskHandle = osThreadNew(StartPumpTask, NULL, &pumpTask_attributes);
 80011c8:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_FREERTOS_Init+0xf8>)
 80011ca:	2100      	movs	r1, #0
 80011cc:	481c      	ldr	r0, [pc, #112]	; (8001240 <MX_FREERTOS_Init+0xfc>)
 80011ce:	f008 f961 	bl	8009494 <osThreadNew>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <MX_FREERTOS_Init+0x100>)
 80011d6:	6013      	str	r3, [r2, #0]

  /* creation of sensGPIO */
  sensGPIOHandle = osThreadNew(sensGPIOTask, NULL, &sensGPIO_attributes);
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_FREERTOS_Init+0x104>)
 80011da:	2100      	movs	r1, #0
 80011dc:	481b      	ldr	r0, [pc, #108]	; (800124c <MX_FREERTOS_Init+0x108>)
 80011de:	f008 f959 	bl	8009494 <osThreadNew>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <MX_FREERTOS_Init+0x10c>)
 80011e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	0800cf9c 	.word	0x0800cf9c
 80011f0:	20000108 	.word	0x20000108
 80011f4:	0800cfac 	.word	0x0800cfac
 80011f8:	2000010c 	.word	0x2000010c
 80011fc:	0800cf6c 	.word	0x0800cf6c
 8001200:	20000100 	.word	0x20000100
 8001204:	0800cf84 	.word	0x0800cf84
 8001208:	20000104 	.word	0x20000104
 800120c:	0800ce94 	.word	0x0800ce94
 8001210:	08001255 	.word	0x08001255
 8001214:	200000e8 	.word	0x200000e8
 8001218:	0800ceb8 	.word	0x0800ceb8
 800121c:	080012d5 	.word	0x080012d5
 8001220:	200000ec 	.word	0x200000ec
 8001224:	0800cedc 	.word	0x0800cedc
 8001228:	0800130d 	.word	0x0800130d
 800122c:	200000f0 	.word	0x200000f0
 8001230:	0800cf00 	.word	0x0800cf00
 8001234:	08001381 	.word	0x08001381
 8001238:	200000f4 	.word	0x200000f4
 800123c:	0800cf24 	.word	0x0800cf24
 8001240:	080013f5 	.word	0x080013f5
 8001244:	200000f8 	.word	0x200000f8
 8001248:	0800cf48 	.word	0x0800cf48
 800124c:	08001411 	.word	0x08001411
 8001250:	200000fc 	.word	0x200000fc

08001254 <sensAnalog01Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sensAnalog01Task */
void sensAnalog01Task(void *argument)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b09d      	sub	sp, #116	; 0x74
 8001258:	af18      	add	r7, sp, #96	; 0x60
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog01Task */
	SensorData analog1task =
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <sensAnalog01Task+0x6c>)
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001266:	e883 0003 	stmia.w	r3, {r0, r1}
	};

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <sensAnalog01Task+0x70>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2164      	movs	r1, #100	; 0x64
 8001270:	4618      	mov	r0, r3
 8001272:	f008 fa45 	bl	8009700 <osSemaphoreAcquire>
	  SetChannel(ADC_CHANNEL_1);
 8001276:	4814      	ldr	r0, [pc, #80]	; (80012c8 <sensAnalog01Task+0x74>)
 8001278:	f7ff ff3c 	bl	80010f4 <SetChannel>
	  analog1task.data = readADCData(hadc1);
 800127c:	4c13      	ldr	r4, [pc, #76]	; (80012cc <sensAnalog01Task+0x78>)
 800127e:	4668      	mov	r0, sp
 8001280:	f104 0310 	add.w	r3, r4, #16
 8001284:	225c      	movs	r2, #92	; 0x5c
 8001286:	4619      	mov	r1, r3
 8001288:	f00b fd2c 	bl	800cce4 <memcpy>
 800128c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001290:	f7ff ff06 	bl	80010a0 <readADCData>
 8001294:	4603      	mov	r3, r0
 8001296:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <sensAnalog01Task+0x70>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f008 fa81 	bl	80097a4 <osSemaphoreRelease>
	  //analog1task.data = 4321;

	  if(osOK==osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog1task, 0, osWaitForever))
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <sensAnalog01Task+0x7c>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	f107 0108 	add.w	r1, r7, #8
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	2200      	movs	r2, #0
 80012b0:	f008 fb30 	bl	8009914 <osMessageQueuePut>
	  {
		  //printf("Sending %d from %d \n \r", analog1task.data, analog1task.id);
	  }


    osDelay(1000);
 80012b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b8:	f008 f97e 	bl	80095b8 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 80012bc:	e7d5      	b.n	800126a <sensAnalog01Task+0x16>
 80012be:	bf00      	nop
 80012c0:	0800ce4c 	.word	0x0800ce4c
 80012c4:	2000010c 	.word	0x2000010c
 80012c8:	04300002 	.word	0x04300002
 80012cc:	2000007c 	.word	0x2000007c
 80012d0:	20000100 	.word	0x20000100

080012d4 <sensUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensUARTTask */
void sensUARTTask(void *argument)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensUARTTask */
	SensorData receivedData;
  /* Infinite loop */
  for(;;)
  {
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <sensUARTTask+0x30>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f107 0108 	add.w	r1, r7, #8
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	2200      	movs	r2, #0
 80012ea:	f008 fb73 	bl	80099d4 <osMessageQueueGet>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f3      	bne.n	80012dc <sensUARTTask+0x8>
	{
		printf("\n %d : %d \n \r", receivedData.id, receivedData.data);
 80012f4:	7a3b      	ldrb	r3, [r7, #8]
 80012f6:	4619      	mov	r1, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <sensUARTTask+0x34>)
 80012fe:	f002 f995 	bl	800362c <printf_>
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 8001302:	e7eb      	b.n	80012dc <sensUARTTask+0x8>
 8001304:	20000100 	.word	0x20000100
 8001308:	0800ce54 	.word	0x0800ce54

0800130c <sensI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensI2CTask */
void sensI2CTask(void *argument)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensI2CTask */
	extern BMP280_t Bmp280;
	float Temp, Pressure;

	SensorData i2ctask = {.id = 3,.data = 0};
 8001314:	2303      	movs	r3, #3
 8001316:	723b      	strb	r3, [r7, #8]
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	BMP280_ReadPressureAndTemperature(&Bmp280, &Pressure, &Temp);
 800131c:	f107 0214 	add.w	r2, r7, #20
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <sensI2CTask+0x6c>)
 8001328:	f000 fa30 	bl	800178c <BMP280_ReadPressureAndTemperature>
	i2ctask.data = Pressure;
 800132c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001334:	ee17 3a90 	vmov	r3, s15
 8001338:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(queueToUARTHandle, (SensorData*)&i2ctask, 0, osWaitForever);
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <sensI2CTask+0x70>)
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	f107 0108 	add.w	r1, r7, #8
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	2200      	movs	r2, #0
 8001348:	f008 fae4 	bl	8009914 <osMessageQueuePut>
	i2ctask.data = Temp;
 800134c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001354:	ee17 3a90 	vmov	r3, s15
 8001358:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(queueToUARTHandle, (SensorData*)&i2ctask, 0, osWaitForever);
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <sensI2CTask+0x70>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	f107 0108 	add.w	r1, r7, #8
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	2200      	movs	r2, #0
 8001368:	f008 fad4 	bl	8009914 <osMessageQueuePut>

	osDelay(1000);
 800136c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001370:	f008 f922 	bl	80095b8 <osDelay>
	BMP280_ReadPressureAndTemperature(&Bmp280, &Pressure, &Temp);
 8001374:	e7d2      	b.n	800131c <sensI2CTask+0x10>
 8001376:	bf00      	nop
 8001378:	20000164 	.word	0x20000164
 800137c:	20000100 	.word	0x20000100

08001380 <sensAnalog02Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensAnalog02Task */
void sensAnalog02Task(void *argument)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b09d      	sub	sp, #116	; 0x74
 8001384:	af18      	add	r7, sp, #96	; 0x60
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog02Task */
	SensorData analog2task =
 8001388:	2302      	movs	r3, #2
 800138a:	723b      	strb	r3, [r7, #8]
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
	};

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <sensAnalog02Task+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2164      	movs	r1, #100	; 0x64
 8001396:	4618      	mov	r0, r3
 8001398:	f008 f9b2 	bl	8009700 <osSemaphoreAcquire>
	  SetChannel(ADC_CHANNEL_2);
 800139c:	4812      	ldr	r0, [pc, #72]	; (80013e8 <sensAnalog02Task+0x68>)
 800139e:	f7ff fea9 	bl	80010f4 <SetChannel>
	  analog2task.data = readADCData(hadc1);
 80013a2:	4c12      	ldr	r4, [pc, #72]	; (80013ec <sensAnalog02Task+0x6c>)
 80013a4:	4668      	mov	r0, sp
 80013a6:	f104 0310 	add.w	r3, r4, #16
 80013aa:	225c      	movs	r2, #92	; 0x5c
 80013ac:	4619      	mov	r1, r3
 80013ae:	f00b fc99 	bl	800cce4 <memcpy>
 80013b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b6:	f7ff fe73 	bl	80010a0 <readADCData>
 80013ba:	4603      	mov	r3, r0
 80013bc:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <sensAnalog02Task+0x64>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 f9ee 	bl	80097a4 <osSemaphoreRelease>
//	  analog2task.data = 1234;
	  if(osOK==osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog2task, 0, osWaitForever))
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <sensAnalog02Task+0x70>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	f107 0108 	add.w	r1, r7, #8
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	2200      	movs	r2, #0
 80013d6:	f008 fa9d 	bl	8009914 <osMessageQueuePut>
	  {
	  //printf("Sending %d from %d \n \r", analog2task.data, analog2task.id);

	  }
	  osDelay(1000);
 80013da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013de:	f008 f8eb 	bl	80095b8 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 80013e2:	e7d5      	b.n	8001390 <sensAnalog02Task+0x10>
 80013e4:	2000010c 	.word	0x2000010c
 80013e8:	08600004 	.word	0x08600004
 80013ec:	2000007c 	.word	0x2000007c
 80013f0:	20000100 	.word	0x20000100

080013f4 <StartPumpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPumpTask */
void StartPumpTask(void *argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPumpTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013fc:	2120      	movs	r1, #32
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f004 fe4f 	bl	80060a4 <HAL_GPIO_TogglePin>
//	  if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))
//		  printf("LED ON \n \r");
//	  else
//		  printf("LED OFF \n \r");

	  osDelay(1000);
 8001406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140a:	f008 f8d5 	bl	80095b8 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800140e:	e7f5      	b.n	80013fc <StartPumpTask+0x8>

08001410 <sensGPIOTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensGPIOTask */
void sensGPIOTask(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensGPIOTask */
	SensorData gpiotask =
 8001418:	2305      	movs	r3, #5
 800141a:	723b      	strb	r3, [r7, #8]
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
				.data = 0
		};
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIO_IN_GPIO_Port, GPIO_IN_Pin))
 8001420:	2108      	movs	r1, #8
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <sensGPIOTask+0x48>)
 8001424:	f004 fe0e 	bl	8006044 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <sensGPIOTask+0x26>
		  gpiotask.data = 1000;
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e002      	b.n	800143c <sensGPIOTask+0x2c>
	  else
		  gpiotask.data = 2000;
 8001436:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800143a:	60fb      	str	r3, [r7, #12]
	  osMessageQueuePut(queueToUARTHandle, (SensorData*)&gpiotask, 0, osWaitForever);
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <sensGPIOTask+0x4c>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	2200      	movs	r2, #0
 800144a:	f008 fa63 	bl	8009914 <osMessageQueuePut>
    osDelay(500);
 800144e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001452:	f008 f8b1 	bl	80095b8 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIO_IN_GPIO_Port, GPIO_IN_Pin))
 8001456:	e7e3      	b.n	8001420 <sensGPIOTask+0x10>
 8001458:	48000800 	.word	0x48000800
 800145c:	20000100 	.word	0x20000100

08001460 <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osSemaphoreAcquire(UART_SemaphoreHandle, 100);
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <_putchar+0x38>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2164      	movs	r1, #100	; 0x64
 8001470:	4618      	mov	r0, r3
 8001472:	f008 f945 	bl	8009700 <osSemaphoreAcquire>
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &character, 1, 1000);
 8001476:	1df9      	adds	r1, r7, #7
 8001478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147c:	2201      	movs	r2, #1
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <_putchar+0x3c>)
 8001480:	f007 f8ce 	bl	8008620 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart5, (uint8_t*) &character, 1, 1000);
	osSemaphoreRelease(UART_SemaphoreHandle);
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <_putchar+0x38>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f008 f98b 	bl	80097a4 <osSemaphoreRelease>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000108 	.word	0x20000108
 800149c:	20000220 	.word	0x20000220

080014a0 <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	b299      	uxth	r1, r3
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	f107 030f 	add.w	r3, r7, #15
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	f004 ffd4 	bl	800647c <HAL_I2C_Mem_Read>

	return Value;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af04      	add	r7, sp, #16
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
 80014ea:	4613      	mov	r3, r2
 80014ec:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	791b      	ldrb	r3, [r3, #4]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	b299      	uxth	r1, r3
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2301      	movs	r3, #1
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	1cbb      	adds	r3, r7, #2
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	f004 fea0 	bl	8006254 <HAL_I2C_Mem_Write>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af04      	add	r7, sp, #16
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	b29b      	uxth	r3, r3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	b299      	uxth	r1, r3
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	b29a      	uxth	r2, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2302      	movs	r3, #2
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2301      	movs	r3, #1
 800154c:	f004 ff96 	bl	800647c <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 8001550:	7b7b      	ldrb	r3, [r7, #13]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7b3b      	ldrb	r3, [r7, #12]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	b29b      	uxth	r3, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af04      	add	r7, sp, #16
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	b29b      	uxth	r3, r3
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	b299      	uxth	r1, r3
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	b29a      	uxth	r2, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2303      	movs	r3, #3
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	f004 ff70 	bl	800647c <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 800159c:	7b3b      	ldrb	r3, [r7, #12]
 800159e:	041a      	lsls	r2, r3, #16
 80015a0:	7b7b      	ldrb	r3, [r7, #13]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	4313      	orrs	r3, r2
 80015a6:	7bba      	ldrb	r2, [r7, #14]
 80015a8:	4313      	orrs	r3, r2
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d901      	bls.n	80015c8 <BMP280_SetMode+0x16>
 80015c4:	2303      	movs	r3, #3
 80015c6:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80015c8:	21f4      	movs	r1, #244	; 0xf4
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff68 	bl	80014a0 <Read8>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	f023 0303 	bic.w	r3, r3, #3
 80015da:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 80015dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	b25a      	sxtb	r2, r3
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	461a      	mov	r2, r3
 80015f4:	21f4      	movs	r1, #244	; 0xf4
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff71 	bl	80014de <Write8>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d901      	bls.n	800161a <BMP280_SetPressureOversampling+0x16>
 8001616:	2305      	movs	r3, #5
 8001618:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800161a:	21f4      	movs	r1, #244	; 0xf4
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff3f 	bl	80014a0 <Read8>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	f023 031c 	bic.w	r3, r3, #28
 800162c:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	b25b      	sxtb	r3, r3
 8001634:	f003 031c 	and.w	r3, r3, #28
 8001638:	b25a      	sxtb	r2, r3
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4313      	orrs	r3, r2
 8001640:	b25b      	sxtb	r3, r3
 8001642:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	461a      	mov	r2, r3
 8001648:	21f4      	movs	r1, #244	; 0xf4
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ff47 	bl	80014de <Write8>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2b05      	cmp	r3, #5
 8001668:	d901      	bls.n	800166e <BMP280_SetTemperatureOversampling+0x16>
 800166a:	2305      	movs	r3, #5
 800166c:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800166e:	21f4      	movs	r1, #244	; 0xf4
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff15 	bl	80014a0 <Read8>
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	b25a      	sxtb	r2, r3
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	4313      	orrs	r3, r2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	461a      	mov	r2, r3
 8001696:	21f4      	movs	r1, #244	; 0xf4
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff20 	bl	80014de <Write8>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 80016ae:	21fa      	movs	r1, #250	; 0xfa
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff59 	bl	8001568 <Read24>
 80016b6:	4603      	mov	r3, r0
 80016b8:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	111b      	asrs	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]

	return Tmp;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 80016d2:	21f7      	movs	r1, #247	; 0xf7
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff47 	bl	8001568 <Read24>
 80016da:	4603      	mov	r3, r0
 80016dc:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	111b      	asrs	r3, r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]

	return Tmp;
 80016e4:	68fb      	ldr	r3, [r7, #12]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ffd4 	bl	80016a6 <BMP280_ReadTemperatureRaw>
 80016fe:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	10da      	asrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	8b5b      	ldrh	r3, [r3, #26]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	12db      	asrs	r3, r3, #11
 8001718:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	111b      	asrs	r3, r3, #4
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	8b52      	ldrh	r2, [r2, #26]
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	1112      	asrs	r2, r2, #4
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	8b49      	ldrh	r1, [r1, #26]
 800172c:	1a52      	subs	r2, r2, r1
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	139b      	asrs	r3, r3, #14
 8001740:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	441a      	add	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1a      	ldr	r2, [r3, #32]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	3380      	adds	r3, #128	; 0x80
 8001758:	121b      	asrs	r3, r3, #8
 800175a:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	f7fe feb1 	bl	80004c4 <__aeabi_i2d>
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <BMP280_ReadTemperature+0x98>)
 8001768:	f7ff f840 	bl	80007ec <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f9f2 	bl	8000b5c <__aeabi_d2f>
 8001778:	4603      	mov	r3, r0
 800177a:	ee07 3a90 	vmov	s15, r3
}
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40590000 	.word	0x40590000

0800178c <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff ffa9 	bl	80016f0 <BMP280_ReadTemperature>
 800179e:	eef0 7a40 	vmov.f32	s15, s0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	105b      	asrs	r3, r3, #1
 80017ae:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80017b2:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	109b      	asrs	r3, r3, #2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	1092      	asrs	r2, r2, #2
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	12db      	asrs	r3, r3, #11
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80017d4:	461a      	mov	r2, r3
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4413      	add	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	109a      	asrs	r2, r3, #2
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	4413      	add	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017fa:	4619      	mov	r1, r3
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	109b      	asrs	r3, r3, #2
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	1092      	asrs	r2, r2, #2
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	135b      	asrs	r3, r3, #13
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	10da      	asrs	r2, r3, #3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001816:	4619      	mov	r1, r3
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	105b      	asrs	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	149b      	asrs	r3, r3, #18
 8001824:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	8b92      	ldrh	r2, [r2, #28]
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	13db      	asrs	r3, r3, #15
 8001836:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 800183e:	2301      	movs	r3, #1
 8001840:	e054      	b.n	80018ec <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff ff41 	bl	80016ca <BMP280_ReadPressureRaw>
 8001848:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f5c3 1280 	rsb	r2, r3, #1048576	; 0x100000
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	131b      	asrs	r3, r3, #12
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f640 4235 	movw	r2, #3125	; 0xc35
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db06      	blt.n	8001874 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005a      	lsls	r2, r3, #1
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e005      	b.n	8001880 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001886:	4619      	mov	r1, r3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	08d2      	lsrs	r2, r2, #3
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	0b5b      	lsrs	r3, r3, #13
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	131b      	asrs	r3, r3, #12
 800189c:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	135b      	asrs	r3, r3, #13
 80018b0:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	4413      	add	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80018be:	4413      	add	r3, r2
 80018c0:	111a      	asrs	r2, r3, #4
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	4413      	add	r3, r2
 80018c6:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 80018c8:	69f8      	ldr	r0, [r7, #28]
 80018ca:	f7fe fdeb 	bl	80004a4 <__aeabi_ui2d>
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <BMP280_ReadPressureAndTemperature+0x168>)
 80018d4:	f7fe ff8a 	bl	80007ec <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f93c 	bl	8000b5c <__aeabi_d2f>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	601a      	str	r2, [r3, #0]

	return 0;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40590000 	.word	0x40590000

080018f8 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001912:	21d0      	movs	r1, #208	; 0xd0
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fdc3 	bl	80014a0 <Read8>
 800191a:	4603      	mov	r3, r0
 800191c:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b58      	cmp	r3, #88	; 0x58
 8001922:	d001      	beq.n	8001928 <BMP280_Init+0x30>
	{
		return 1;
 8001924:	2301      	movs	r3, #1
 8001926:	e06c      	b.n	8001a02 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001928:	2188      	movs	r1, #136	; 0x88
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff fdf6 	bl	800151c <Read16>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001938:	218a      	movs	r1, #138	; 0x8a
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fdee 	bl	800151c <Read16>
 8001940:	4603      	mov	r3, r0
 8001942:	b21a      	sxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001948:	218c      	movs	r1, #140	; 0x8c
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff fde6 	bl	800151c <Read16>
 8001950:	4603      	mov	r3, r0
 8001952:	b21a      	sxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001958:	218e      	movs	r1, #142	; 0x8e
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff fdde 	bl	800151c <Read16>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001968:	2190      	movs	r1, #144	; 0x90
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff fdd6 	bl	800151c <Read16>
 8001970:	4603      	mov	r3, r0
 8001972:	b21a      	sxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001978:	2192      	movs	r1, #146	; 0x92
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fdce 	bl	800151c <Read16>
 8001980:	4603      	mov	r3, r0
 8001982:	b21a      	sxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001988:	2194      	movs	r1, #148	; 0x94
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fdc6 	bl	800151c <Read16>
 8001990:	4603      	mov	r3, r0
 8001992:	b21a      	sxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001998:	2196      	movs	r1, #150	; 0x96
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fdbe 	bl	800151c <Read16>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 80019a8:	2198      	movs	r1, #152	; 0x98
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fdb6 	bl	800151c <Read16>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 80019b8:	219a      	movs	r1, #154	; 0x9a
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff fdae 	bl	800151c <Read16>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 80019c8:	219c      	movs	r1, #156	; 0x9c
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff fda6 	bl	800151c <Read16>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 80019d8:	219e      	movs	r1, #158	; 0x9e
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff fd9e 	bl	800151c <Read16>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 80019e8:	2105      	movs	r1, #5
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fe34 	bl	8001658 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 80019f0:	2105      	movs	r1, #5
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff fe06 	bl	8001604 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 80019f8:	2103      	movs	r1, #3
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fdd9 	bl	80015b2 <BMP280_SetMode>

	return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a34      	ldr	r2, [pc, #208]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a40:	f043 0320 	orr.w	r3, r3, #32
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <MX_GPIO_Init+0x104>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f004 fae7 	bl	8006074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4815      	ldr	r0, [pc, #84]	; (8001b14 <MX_GPIO_Init+0x108>)
 8001abe:	f004 f93f 	bl	8005d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_IN_Pin;
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_IN_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480f      	ldr	r0, [pc, #60]	; (8001b14 <MX_GPIO_Init+0x108>)
 8001ad6:	f004 f933 	bl	8005d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ada:	2320      	movs	r3, #32
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af4:	f004 f924 	bl	8005d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2105      	movs	r1, #5
 8001afc:	2028      	movs	r0, #40	; 0x28
 8001afe:	f004 f8f7 	bl	8005cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b02:	2028      	movs	r0, #40	; 0x28
 8001b04:	f004 f90e 	bl	8005d24 <HAL_NVIC_EnableIRQ>

}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000800 	.word	0x48000800

08001b18 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <MX_I2C2_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <MX_I2C2_Init+0x7c>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b52:	480e      	ldr	r0, [pc, #56]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b54:	f004 fae3 	bl	800611e <HAL_I2C_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b5e:	f000 f911 	bl	8001d84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b62:	2100      	movs	r1, #0
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b66:	f005 f865 	bl	8006c34 <HAL_I2CEx_ConfigAnalogFilter>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b70:	f000 f908 	bl	8001d84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b74:	2100      	movs	r1, #0
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b78:	f005 f8a7 	bl	8006cca <HAL_I2CEx_ConfigDigitalFilter>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b82:	f000 f8ff 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000110 	.word	0x20000110
 8001b90:	40005800 	.word	0x40005800
 8001b94:	30a0a7fb 	.word	0x30a0a7fb

08001b98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b09e      	sub	sp, #120	; 0x78
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2250      	movs	r2, #80	; 0x50
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f00b f80f 	bl	800cbdc <memset>
  if(i2cHandle->Instance==I2C2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_I2C_MspInit+0xe0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d153      	bne.n	8001c70 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f005 fed9 	bl	800798c <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001be0:	f000 f8d0 	bl	8001d84 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c14:	2310      	movs	r3, #16
 8001c16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c18:	2312      	movs	r3, #18
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c24:	2304      	movs	r3, #4
 8001c26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4814      	ldr	r0, [pc, #80]	; (8001c80 <HAL_I2C_MspInit+0xe8>)
 8001c30:	f004 f886 	bl	8005d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3a:	2312      	movs	r3, #18
 8001c3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c46:	2304      	movs	r3, #4
 8001c48:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f004 f874 	bl	8005d40 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3778      	adds	r7, #120	; 0x78
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40005800 	.word	0x40005800
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000800 	.word	0x48000800

08001c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c88:	f001 ff91 	bl	8003bae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8c:	f000 f81c 	bl	8001cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c90:	f7ff febc 	bl	8001a0c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001c94:	f001 fe16 	bl	80038c4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001c98:	f7ff f92e 	bl	8000ef8 <MX_ADC1_Init>
  MX_UART5_Init();
 8001c9c:	f001 fe5c 	bl	8003958 <MX_UART5_Init>
  MX_TIM6_Init();
 8001ca0:	f001 fdba 	bl	8003818 <MX_TIM6_Init>
  MX_I2C2_Init();
 8001ca4:	f7ff ff38 	bl	8001b18 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&Bmp280, &hi2c2, BMP280_ADDRESS);
 8001ca8:	2276      	movs	r2, #118	; 0x76
 8001caa:	4905      	ldr	r1, [pc, #20]	; (8001cc0 <main+0x3c>)
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <main+0x40>)
 8001cae:	f7ff fe23 	bl	80018f8 <BMP280_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cb2:	f007 fba5 	bl	8009400 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001cb6:	f7ff fa45 	bl	8001144 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001cba:	f007 fbc5 	bl	8009448 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <main+0x3a>
 8001cc0:	20000110 	.word	0x20000110
 8001cc4:	20000164 	.word	0x20000164

08001cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b094      	sub	sp, #80	; 0x50
 8001ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cce:	f107 0318 	add.w	r3, r7, #24
 8001cd2:	2238      	movs	r2, #56	; 0x38
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f00a ff80 	bl	800cbdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f005 f83a 	bl	8006d64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d02:	2302      	movs	r3, #2
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d06:	2304      	movs	r3, #4
 8001d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d0a:	2355      	movs	r3, #85	; 0x55
 8001d0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1a:	f107 0318 	add.w	r3, r7, #24
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f005 f8d4 	bl	8006ecc <HAL_RCC_OscConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d2a:	f000 f82b 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2e:	230f      	movs	r3, #15
 8001d30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d32:	2303      	movs	r3, #3
 8001d34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2104      	movs	r1, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 fbd2 	bl	80074f0 <HAL_RCC_ClockConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d52:	f000 f817 	bl	8001d84 <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3750      	adds	r7, #80	; 0x50
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d72:	f001 ff35 	bl	8003be0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40012c00 	.word	0x40012c00

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <Error_Handler+0x8>

08001d8e <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <_out_char+0x1e>
    _putchar(character);
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fb4c 	bl	8001460 <_putchar>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e002      	b.n	8001de6 <_strnlen_s+0x16>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <_strnlen_s+0x28>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	603a      	str	r2, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f3      	bne.n	8001de0 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	1ad3      	subs	r3, r2, r3
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b2f      	cmp	r3, #47	; 0x2f
 8001e18:	d904      	bls.n	8001e24 <_is_digit+0x1a>
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b39      	cmp	r3, #57	; 0x39
 8001e1e:	d801      	bhi.n	8001e24 <_is_digit+0x1a>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <_is_digit+0x1c>
 8001e24:	2300      	movs	r3, #0
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001e44:	e00e      	b.n	8001e64 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6011      	str	r1, [r2, #0]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4403      	add	r3, r0
 8001e60:	3b30      	subs	r3, #48	; 0x30
 8001e62:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ffcd 	bl	8001e0a <_is_digit>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1e7      	bne.n	8001e46 <_atoi+0xe>
  }
  return i;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d125      	bne.n	8001ee8 <_out_rev+0x68>
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d120      	bne.n	8001ee8 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e00a      	b.n	8001ec2 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	1c53      	adds	r3, r2, #1
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	68fc      	ldr	r4, [r7, #12]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	2020      	movs	r0, #32
 8001eba:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d3f0      	bcc.n	8001eac <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001eca:	e00d      	b.n	8001ee8 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed6:	4413      	add	r3, r2
 8001ed8:	7818      	ldrb	r0, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	1c53      	adds	r3, r2, #1
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	68fc      	ldr	r4, [r7, #12]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	47a0      	blx	r4
  while (len) {
 8001ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ee      	bne.n	8001ecc <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001ef8:	e007      	b.n	8001f0a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	1c53      	adds	r3, r2, #1
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	68fc      	ldr	r4, [r7, #12]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	2020      	movs	r0, #32
 8001f08:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d8f1      	bhi.n	8001efa <_out_rev+0x7a>
    }
  }

  return idx;
 8001f16:	687b      	ldr	r3, [r7, #4]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af04      	add	r7, sp, #16
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d136      	bne.n	8001fa6 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d018      	beq.n	8001f70 <_ntoa_format+0x50>
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <_ntoa_format+0x50>
 8001f48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <_ntoa_format+0x3a>
 8001f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <_ntoa_format+0x50>
      width--;
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f60:	e006      	b.n	8001f70 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	61fa      	str	r2, [r7, #28]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2230      	movs	r2, #48	; 0x30
 8001f6e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d20a      	bcs.n	8001f8e <_ntoa_format+0x6e>
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b1f      	cmp	r3, #31
 8001f7c:	d9f1      	bls.n	8001f62 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f7e:	e006      	b.n	8001f8e <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	61fa      	str	r2, [r7, #28]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4413      	add	r3, r2
 8001f8a:	2230      	movs	r2, #48	; 0x30
 8001f8c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <_ntoa_format+0x86>
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d202      	bcs.n	8001fa6 <_ntoa_format+0x86>
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b1f      	cmp	r3, #31
 8001fa4:	d9ec      	bls.n	8001f80 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d058      	beq.n	8002062 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <_ntoa_format+0xc8>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <_ntoa_format+0xc8>
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d003      	beq.n	8001fd0 <_ntoa_format+0xb0>
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10b      	bne.n	8001fe8 <_ntoa_format+0xc8>
      len--;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <_ntoa_format+0xc8>
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d102      	bne.n	8001fe8 <_ntoa_format+0xc8>
        len--;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d10f      	bne.n	800200e <_ntoa_format+0xee>
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <_ntoa_format+0xee>
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b1f      	cmp	r3, #31
 8001ffc:	d807      	bhi.n	800200e <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	61fa      	str	r2, [r7, #28]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4413      	add	r3, r2
 8002008:	2278      	movs	r2, #120	; 0x78
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e01f      	b.n	800204e <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	2b10      	cmp	r3, #16
 8002012:	d10f      	bne.n	8002034 <_ntoa_format+0x114>
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <_ntoa_format+0x114>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	2b1f      	cmp	r3, #31
 8002022:	d807      	bhi.n	8002034 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	61fa      	str	r2, [r7, #28]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4413      	add	r3, r2
 800202e:	2258      	movs	r2, #88	; 0x58
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	e00c      	b.n	800204e <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	2b02      	cmp	r3, #2
 8002038:	d109      	bne.n	800204e <_ntoa_format+0x12e>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b1f      	cmp	r3, #31
 800203e:	d806      	bhi.n	800204e <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	61fa      	str	r2, [r7, #28]
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4413      	add	r3, r2
 800204a:	2262      	movs	r2, #98	; 0x62
 800204c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b1f      	cmp	r3, #31
 8002052:	d806      	bhi.n	8002062 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	61fa      	str	r2, [r7, #28]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4413      	add	r3, r2
 800205e:	2230      	movs	r2, #48	; 0x30
 8002060:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b1f      	cmp	r3, #31
 8002066:	d824      	bhi.n	80020b2 <_ntoa_format+0x192>
    if (negative) {
 8002068:	f897 3020 	ldrb.w	r3, [r7, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	61fa      	str	r2, [r7, #28]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4413      	add	r3, r2
 800207a:	222d      	movs	r2, #45	; 0x2d
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e018      	b.n	80020b2 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	61fa      	str	r2, [r7, #28]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4413      	add	r3, r2
 8002094:	222b      	movs	r2, #43	; 0x2b
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e00b      	b.n	80020b2 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	61fa      	str	r2, [r7, #28]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4413      	add	r3, r2
 80020ae:	2220      	movs	r2, #32
 80020b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80020b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b4:	9303      	str	r3, [sp, #12]
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff fed9 	bl	8001e80 <_out_rev>
 80020ce:	4603      	mov	r3, r0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b096      	sub	sp, #88	; 0x58
 80020dc:	af08      	add	r7, sp, #32
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80020ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80020f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f2:	f023 0310 	bic.w	r3, r3, #16
 80020f6:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80020f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <_ntoa_long+0x30>
 8002102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d032      	beq.n	800216e <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800210c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002110:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002112:	fb01 f202 	mul.w	r2, r1, r2
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800211c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002120:	2b09      	cmp	r3, #9
 8002122:	d804      	bhi.n	800212e <_ntoa_long+0x56>
 8002124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002128:	3330      	adds	r3, #48	; 0x30
 800212a:	b2da      	uxtb	r2, r3
 800212c:	e00d      	b.n	800214a <_ntoa_long+0x72>
 800212e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <_ntoa_long+0x64>
 8002138:	2241      	movs	r2, #65	; 0x41
 800213a:	e000      	b.n	800213e <_ntoa_long+0x66>
 800213c:	2261      	movs	r2, #97	; 0x61
 800213e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002142:	4413      	add	r3, r2
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3b0a      	subs	r3, #10
 8002148:	b2da      	uxtb	r2, r3
 800214a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214c:	1c59      	adds	r1, r3, #1
 800214e:	6379      	str	r1, [r7, #52]	; 0x34
 8002150:	3338      	adds	r3, #56	; 0x38
 8002152:	443b      	add	r3, r7
 8002154:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800215a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <_ntoa_long+0x96>
 8002168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216a:	2b1f      	cmp	r3, #31
 800216c:	d9cc      	bls.n	8002108 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800216e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002170:	9306      	str	r3, [sp, #24]
 8002172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002174:	9305      	str	r3, [sp, #20]
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002178:	9304      	str	r3, [sp, #16]
 800217a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217c:	9303      	str	r3, [sp, #12]
 800217e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fec3 	bl	8001f20 <_ntoa_format>
 800219a:	4603      	mov	r3, r0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3738      	adds	r7, #56	; 0x38
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b096      	sub	sp, #88	; 0x58
 80021a8:	af08      	add	r7, sp, #32
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80021b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021ba:	4313      	orrs	r3, r2
 80021bc:	d103      	bne.n	80021c6 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80021be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c0:	f023 0310 	bic.w	r3, r3, #16
 80021c4:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80021c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <_ntoa_long_long+0x34>
 80021d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021d4:	4313      	orrs	r3, r2
 80021d6:	d037      	beq.n	8002248 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80021d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80021dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021e0:	f7fe fd0c 	bl	8000bfc <__aeabi_uldivmod>
 80021e4:	4613      	mov	r3, r2
 80021e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80021ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	d804      	bhi.n	80021fc <_ntoa_long_long+0x58>
 80021f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021f6:	3330      	adds	r3, #48	; 0x30
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	e00d      	b.n	8002218 <_ntoa_long_long+0x74>
 80021fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <_ntoa_long_long+0x66>
 8002206:	2241      	movs	r2, #65	; 0x41
 8002208:	e000      	b.n	800220c <_ntoa_long_long+0x68>
 800220a:	2261      	movs	r2, #97	; 0x61
 800220c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002210:	4413      	add	r3, r2
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3b0a      	subs	r3, #10
 8002216:	b2da      	uxtb	r2, r3
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	6379      	str	r1, [r7, #52]	; 0x34
 800221e:	3338      	adds	r3, #56	; 0x38
 8002220:	443b      	add	r3, r7
 8002222:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002226:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800222a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800222e:	f7fe fce5 	bl	8000bfc <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800223a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800223e:	4313      	orrs	r3, r2
 8002240:	d002      	beq.n	8002248 <_ntoa_long_long+0xa4>
 8002242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002244:	2b1f      	cmp	r3, #31
 8002246:	d9c7      	bls.n	80021d8 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800224a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800224c:	9206      	str	r2, [sp, #24]
 800224e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002250:	9205      	str	r2, [sp, #20]
 8002252:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002254:	9204      	str	r2, [sp, #16]
 8002256:	9303      	str	r3, [sp, #12]
 8002258:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff fe56 	bl	8001f20 <_ntoa_format>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3738      	adds	r7, #56	; 0x38
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b09d      	sub	sp, #116	; 0x74
 8002284:	af04      	add	r7, sp, #16
 8002286:	6178      	str	r0, [r7, #20]
 8002288:	6139      	str	r1, [r7, #16]
 800228a:	60fa      	str	r2, [r7, #12]
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80022a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022aa:	f7fe fbdd 	bl	8000a68 <__aeabi_dcmpeq>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10f      	bne.n	80022d4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80022b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ba:	9302      	str	r3, [sp, #8]
 80022bc:	2303      	movs	r3, #3
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	4ba7      	ldr	r3, [pc, #668]	; (8002560 <_ftoa+0x2e0>)
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6939      	ldr	r1, [r7, #16]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff fdd8 	bl	8001e80 <_out_rev>
 80022d0:	4603      	mov	r3, r0
 80022d2:	e222      	b.n	800271a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80022dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e0:	f7fe fbcc 	bl	8000a7c <__aeabi_dcmplt>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00f      	beq.n	800230a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80022ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ec:	9303      	str	r3, [sp, #12]
 80022ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	2304      	movs	r3, #4
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	4b9b      	ldr	r3, [pc, #620]	; (8002564 <_ftoa+0x2e4>)
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	6939      	ldr	r1, [r7, #16]
 8002300:	6978      	ldr	r0, [r7, #20]
 8002302:	f7ff fdbd 	bl	8001e80 <_out_rev>
 8002306:	4603      	mov	r3, r0
 8002308:	e207      	b.n	800271a <_ftoa+0x49a>
  if (value > DBL_MAX)
 800230a:	f04f 32ff 	mov.w	r2, #4294967295
 800230e:	4b96      	ldr	r3, [pc, #600]	; (8002568 <_ftoa+0x2e8>)
 8002310:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002314:	f7fe fbd0 	bl	8000ab8 <__aeabi_dcmpgt>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01d      	beq.n	800235a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800231e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <_ftoa+0xac>
 8002328:	4b90      	ldr	r3, [pc, #576]	; (800256c <_ftoa+0x2ec>)
 800232a:	e000      	b.n	800232e <_ftoa+0xae>
 800232c:	4b90      	ldr	r3, [pc, #576]	; (8002570 <_ftoa+0x2f0>)
 800232e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002330:	f002 0204 	and.w	r2, r2, #4
 8002334:	2a00      	cmp	r2, #0
 8002336:	d001      	beq.n	800233c <_ftoa+0xbc>
 8002338:	2204      	movs	r2, #4
 800233a:	e000      	b.n	800233e <_ftoa+0xbe>
 800233c:	2203      	movs	r2, #3
 800233e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002340:	9103      	str	r1, [sp, #12]
 8002342:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002344:	9102      	str	r1, [sp, #8]
 8002346:	9201      	str	r2, [sp, #4]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	6939      	ldr	r1, [r7, #16]
 8002350:	6978      	ldr	r0, [r7, #20]
 8002352:	f7ff fd95 	bl	8001e80 <_out_rev>
 8002356:	4603      	mov	r3, r0
 8002358:	e1df      	b.n	800271a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800235a:	a37d      	add	r3, pc, #500	; (adr r3, 8002550 <_ftoa+0x2d0>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002364:	f7fe fba8 	bl	8000ab8 <__aeabi_dcmpgt>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <_ftoa+0x102>
 800236e:	a37a      	add	r3, pc, #488	; (adr r3, 8002558 <_ftoa+0x2d8>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002378:	f7fe fb80 	bl	8000a7c <__aeabi_dcmplt>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00f      	beq.n	80023a2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	ed97 0b00 	vldr	d0, [r7]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	6978      	ldr	r0, [r7, #20]
 800239a:	f000 f9c9 	bl	8002730 <_etoa>
 800239e:	4603      	mov	r3, r0
 80023a0:	e1bb      	b.n	800271a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023b4:	f7fe fb62 	bl	8000a7c <__aeabi_dcmplt>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00e      	beq.n	80023dc <_ftoa+0x15c>
    negative = true;
 80023be:	2301      	movs	r3, #1
 80023c0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80023c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023c8:	f04f 0000 	mov.w	r0, #0
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	f7fd ff2a 	bl	8000228 <__aeabi_dsub>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80023dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80023e6:	2306      	movs	r3, #6
 80023e8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80023ea:	e00a      	b.n	8002402 <_ftoa+0x182>
    buf[len++] = '0';
 80023ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023f2:	3360      	adds	r3, #96	; 0x60
 80023f4:	443b      	add	r3, r7
 80023f6:	2230      	movs	r2, #48	; 0x30
 80023f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80023fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023fe:	3b01      	subs	r3, #1
 8002400:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002404:	2b1f      	cmp	r3, #31
 8002406:	d802      	bhi.n	800240e <_ftoa+0x18e>
 8002408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800240a:	2b09      	cmp	r3, #9
 800240c:	d8ee      	bhi.n	80023ec <_ftoa+0x16c>
  }

  int whole = (int)value;
 800240e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002412:	f7fe fb5b 	bl	8000acc <__aeabi_d2iz>
 8002416:	4603      	mov	r3, r0
 8002418:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800241a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800241c:	f7fe f852 	bl	80004c4 <__aeabi_i2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002428:	f7fd fefe 	bl	8000228 <__aeabi_dsub>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	4a4f      	ldr	r2, [pc, #316]	; (8002574 <_ftoa+0x2f4>)
 8002436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f8aa 	bl	8000598 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800244c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002450:	f7fe fb64 	bl	8000b1c <__aeabi_d2uiz>
 8002454:	4603      	mov	r3, r0
 8002456:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002458:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800245a:	f7fe f823 	bl	80004a4 <__aeabi_ui2d>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002466:	f7fd fedf 	bl	8000228 <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <_ftoa+0x2f8>)
 8002478:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800247c:	f7fe fb1c 	bl	8000ab8 <__aeabi_dcmpgt>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <_ftoa+0x234>
    ++frac;
 8002486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002488:	3301      	adds	r3, #1
 800248a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800248c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800248e:	f7fe f809 	bl	80004a4 <__aeabi_ui2d>
 8002492:	4a38      	ldr	r2, [pc, #224]	; (8002574 <_ftoa+0x2f4>)
 8002494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f7fe fb01 	bl	8000aa4 <__aeabi_dcmpge>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01a      	beq.n	80024de <_ftoa+0x25e>
      frac = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80024ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ae:	3301      	adds	r3, #1
 80024b0:	657b      	str	r3, [r7, #84]	; 0x54
 80024b2:	e014      	b.n	80024de <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <_ftoa+0x2f8>)
 80024ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80024be:	f7fe fadd 	bl	8000a7c <__aeabi_dcmplt>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80024c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <_ftoa+0x258>
 80024ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80024d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024da:	3301      	adds	r3, #1
 80024dc:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80024de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d14b      	bne.n	800257c <_ftoa+0x2fc>
    diff = value - (double)whole;
 80024e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024e6:	f7fd ffed 	bl	80004c4 <__aeabi_i2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024f2:	f7fd fe99 	bl	8000228 <__aeabi_dsub>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80024fe:	2301      	movs	r3, #1
 8002500:	461c      	mov	r4, r3
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <_ftoa+0x2f8>)
 8002508:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800250c:	f7fe fab6 	bl	8000a7c <__aeabi_dcmplt>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <_ftoa+0x29a>
 8002516:	2300      	movs	r3, #0
 8002518:	461c      	mov	r4, r3
 800251a:	b2e3      	uxtb	r3, r4
 800251c:	f083 0301 	eor.w	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <_ftoa+0x2ba>
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_ftoa+0x2f8>)
 800252c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002530:	f7fe fac2 	bl	8000ab8 <__aeabi_dcmpgt>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d064      	beq.n	8002604 <_ftoa+0x384>
 800253a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8081 	beq.w	8002648 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002548:	3301      	adds	r3, #1
 800254a:	657b      	str	r3, [r7, #84]	; 0x54
 800254c:	e07c      	b.n	8002648 <_ftoa+0x3c8>
 800254e:	bf00      	nop
 8002550:	00000000 	.word	0x00000000
 8002554:	41cdcd65 	.word	0x41cdcd65
 8002558:	00000000 	.word	0x00000000
 800255c:	c1cdcd65 	.word	0xc1cdcd65
 8002560:	0800ce64 	.word	0x0800ce64
 8002564:	0800ce68 	.word	0x0800ce68
 8002568:	7fefffff 	.word	0x7fefffff
 800256c:	0800ce70 	.word	0x0800ce70
 8002570:	0800ce78 	.word	0x0800ce78
 8002574:	0800cfc0 	.word	0x0800cfc0
 8002578:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800257c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002580:	e01f      	b.n	80025c2 <_ftoa+0x342>
      --count;
 8002582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002584:	3b01      	subs	r3, #1
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002588:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800258a:	4b66      	ldr	r3, [pc, #408]	; (8002724 <_ftoa+0x4a4>)
 800258c:	fba3 2301 	umull	r2, r3, r3, r1
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	1aca      	subs	r2, r1, r3
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a0:	1c59      	adds	r1, r3, #1
 80025a2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80025a4:	3230      	adds	r2, #48	; 0x30
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	3360      	adds	r3, #96	; 0x60
 80025aa:	443b      	add	r3, r7
 80025ac:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80025b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b2:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <_ftoa+0x4a4>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	653b      	str	r3, [r7, #80]	; 0x50
 80025bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80025c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c4:	2b1f      	cmp	r3, #31
 80025c6:	d9dc      	bls.n	8002582 <_ftoa+0x302>
 80025c8:	e009      	b.n	80025de <_ftoa+0x35e>
        break;
 80025ca:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80025cc:	e007      	b.n	80025de <_ftoa+0x35e>
      buf[len++] = '0';
 80025ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025d4:	3360      	adds	r3, #96	; 0x60
 80025d6:	443b      	add	r3, r7
 80025d8:	2230      	movs	r2, #48	; 0x30
 80025da:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	2b1f      	cmp	r3, #31
 80025e2:	d804      	bhi.n	80025ee <_ftoa+0x36e>
 80025e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ef      	bne.n	80025ce <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80025ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f0:	2b1f      	cmp	r3, #31
 80025f2:	d829      	bhi.n	8002648 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80025f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025fa:	3360      	adds	r3, #96	; 0x60
 80025fc:	443b      	add	r3, r7
 80025fe:	222e      	movs	r2, #46	; 0x2e
 8002600:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002604:	e020      	b.n	8002648 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002606:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <_ftoa+0x4a8>)
 800260a:	fb83 1302 	smull	r1, r3, r3, r2
 800260e:	1099      	asrs	r1, r3, #2
 8002610:	17d3      	asrs	r3, r2, #31
 8002612:	1ac9      	subs	r1, r1, r3
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	1ad1      	subs	r1, r2, r3
 800261e:	b2ca      	uxtb	r2, r1
 8002620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002622:	1c59      	adds	r1, r3, #1
 8002624:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002626:	3230      	adds	r2, #48	; 0x30
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	3360      	adds	r3, #96	; 0x60
 800262c:	443b      	add	r3, r7
 800262e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002634:	4a3c      	ldr	r2, [pc, #240]	; (8002728 <_ftoa+0x4a8>)
 8002636:	fb82 1203 	smull	r1, r2, r2, r3
 800263a:	1092      	asrs	r2, r2, #2
 800263c:	17db      	asrs	r3, r3, #31
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	657b      	str	r3, [r7, #84]	; 0x54
 8002642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264a:	2b1f      	cmp	r3, #31
 800264c:	d9db      	bls.n	8002606 <_ftoa+0x386>
 800264e:	e000      	b.n	8002652 <_ftoa+0x3d2>
      break;
 8002650:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d123      	bne.n	80026a4 <_ftoa+0x424>
 800265c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01e      	beq.n	80026a4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002668:	2b00      	cmp	r3, #0
 800266a:	d014      	beq.n	8002696 <_ftoa+0x416>
 800266c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <_ftoa+0x3fe>
 8002674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <_ftoa+0x416>
      width--;
 800267e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002680:	3b01      	subs	r3, #1
 8002682:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002684:	e007      	b.n	8002696 <_ftoa+0x416>
      buf[len++] = '0';
 8002686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800268c:	3360      	adds	r3, #96	; 0x60
 800268e:	443b      	add	r3, r7
 8002690:	2230      	movs	r2, #48	; 0x30
 8002692:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002696:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269a:	429a      	cmp	r2, r3
 800269c:	d202      	bcs.n	80026a4 <_ftoa+0x424>
 800269e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a0:	2b1f      	cmp	r3, #31
 80026a2:	d9f0      	bls.n	8002686 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80026a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a6:	2b1f      	cmp	r3, #31
 80026a8:	d827      	bhi.n	80026fa <_ftoa+0x47a>
    if (negative) {
 80026aa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <_ftoa+0x444>
      buf[len++] = '-';
 80026b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026b8:	3360      	adds	r3, #96	; 0x60
 80026ba:	443b      	add	r3, r7
 80026bc:	222d      	movs	r2, #45	; 0x2d
 80026be:	f803 2c48 	strb.w	r2, [r3, #-72]
 80026c2:	e01a      	b.n	80026fa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80026c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80026ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026d4:	3360      	adds	r3, #96	; 0x60
 80026d6:	443b      	add	r3, r7
 80026d8:	222b      	movs	r2, #43	; 0x2b
 80026da:	f803 2c48 	strb.w	r2, [r3, #-72]
 80026de:	e00c      	b.n	80026fa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80026e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <_ftoa+0x47a>
      buf[len++] = ' ';
 80026ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026f0:	3360      	adds	r3, #96	; 0x60
 80026f2:	443b      	add	r3, r7
 80026f4:	2220      	movs	r2, #32
 80026f6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80026fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026fc:	9303      	str	r3, [sp, #12]
 80026fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	f107 0318 	add.w	r3, r7, #24
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	6939      	ldr	r1, [r7, #16]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff fbb4 	bl	8001e80 <_out_rev>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3764      	adds	r7, #100	; 0x64
 800271e:	46bd      	mov	sp, r7
 8002720:	bd90      	pop	{r4, r7, pc}
 8002722:	bf00      	nop
 8002724:	cccccccd 	.word	0xcccccccd
 8002728:	66666667 	.word	0x66666667
 800272c:	00000000 	.word	0x00000000

08002730 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002734:	b09f      	sub	sp, #124	; 0x7c
 8002736:	af06      	add	r7, sp, #24
 8002738:	6278      	str	r0, [r7, #36]	; 0x24
 800273a:	6239      	str	r1, [r7, #32]
 800273c:	61fa      	str	r2, [r7, #28]
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002748:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800274c:	f7fe f98c 	bl	8000a68 <__aeabi_dcmpeq>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d014      	beq.n	8002780 <_etoa+0x50>
 8002756:	f04f 32ff 	mov.w	r2, #4294967295
 800275a:	4bc1      	ldr	r3, [pc, #772]	; (8002a60 <_etoa+0x330>)
 800275c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002760:	f7fe f9aa 	bl	8000ab8 <__aeabi_dcmpgt>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <_etoa+0x50>
 800276a:	f04f 32ff 	mov.w	r2, #4294967295
 800276e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002772:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002776:	f7fe f981 	bl	8000a7c <__aeabi_dcmplt>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d012      	beq.n	80027a6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002780:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002784:	9302      	str	r3, [sp, #8]
 8002786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	ed97 0b04 	vldr	d0, [r7, #16]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	6a39      	ldr	r1, [r7, #32]
 800279c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800279e:	f7ff fd6f 	bl	8002280 <_ftoa>
 80027a2:	4603      	mov	r3, r0
 80027a4:	e23f      	b.n	8002c26 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80027a6:	2301      	movs	r3, #1
 80027a8:	461e      	mov	r6, r3
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b6:	f7fe f961 	bl	8000a7c <__aeabi_dcmplt>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <_etoa+0x94>
 80027c0:	2300      	movs	r3, #0
 80027c2:	461e      	mov	r6, r3
 80027c4:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 80027c8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <_etoa+0xb4>
    value = -value;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	ed97 7b00 	vldr	d7, [r7]
 80027e0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80027e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80027f0:	2306      	movs	r3, #6
 80027f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80027f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80027fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	0d0a      	lsrs	r2, r1, #20
 800280c:	2300      	movs	r3, #0
 800280e:	4613      	mov	r3, r2
 8002810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002814:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002818:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800281a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800281e:	4690      	mov	r8, r2
 8002820:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002824:	4644      	mov	r4, r8
 8002826:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800282a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800282e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002832:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002834:	f7fd fe46 	bl	80004c4 <__aeabi_i2d>
 8002838:	a37d      	add	r3, pc, #500	; (adr r3, 8002a30 <_etoa+0x300>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fd feab 	bl	8000598 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	a37b      	add	r3, pc, #492	; (adr r3, 8002a38 <_etoa+0x308>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f7fd fcec 	bl	800022c <__adddf3>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4614      	mov	r4, r2
 800285a:	461d      	mov	r5, r3
 800285c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <_etoa+0x334>)
 8002866:	f7fd fcdf 	bl	8000228 <__aeabi_dsub>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	a373      	add	r3, pc, #460	; (adr r3, 8002a40 <_etoa+0x310>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fe8e 	bl	8000598 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4620      	mov	r0, r4
 8002882:	4629      	mov	r1, r5
 8002884:	f7fd fcd2 	bl	800022c <__adddf3>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f7fe f91c 	bl	8000acc <__aeabi_d2iz>
 8002894:	4603      	mov	r3, r0
 8002896:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002898:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800289a:	f7fd fe13 	bl	80004c4 <__aeabi_i2d>
 800289e:	a36a      	add	r3, pc, #424	; (adr r3, 8002a48 <_etoa+0x318>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd fe78 	bl	8000598 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <_etoa+0x338>)
 80028b6:	f7fd fcb9 	bl	800022c <__adddf3>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f7fe f903 	bl	8000acc <__aeabi_d2iz>
 80028c6:	4603      	mov	r3, r0
 80028c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80028ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80028cc:	f7fd fdfa 	bl	80004c4 <__aeabi_i2d>
 80028d0:	a35f      	add	r3, pc, #380	; (adr r3, 8002a50 <_etoa+0x320>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd fe5f 	bl	8000598 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4614      	mov	r4, r2
 80028e0:	461d      	mov	r5, r3
 80028e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80028e4:	f7fd fdee 	bl	80004c4 <__aeabi_i2d>
 80028e8:	a35b      	add	r3, pc, #364	; (adr r3, 8002a58 <_etoa+0x328>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f7fd fe53 	bl	8000598 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4620      	mov	r0, r4
 80028f8:	4629      	mov	r1, r5
 80028fa:	f7fd fc95 	bl	8000228 <__aeabi_dsub>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8002906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800290a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800290e:	f7fd fe43 	bl	8000598 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800291a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002920:	17da      	asrs	r2, r3, #31
 8002922:	469a      	mov	sl, r3
 8002924:	4693      	mov	fp, r2
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002932:	2200      	movs	r2, #0
 8002934:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002938:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800293c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	f7fd fc72 	bl	800022c <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4690      	mov	r8, r2
 800294e:	4699      	mov	r9, r3
 8002950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002954:	f04f 0000 	mov.w	r0, #0
 8002958:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800295c:	f7fd fc64 	bl	8000228 <__aeabi_dsub>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4692      	mov	sl, r2
 8002966:	469b      	mov	fp, r3
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <_etoa+0x33c>)
 800296e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002972:	f7fd ff3b 	bl	80007ec <__aeabi_ddiv>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <_etoa+0x340>)
 8002984:	f7fd fc52 	bl	800022c <__adddf3>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002990:	f7fd ff2c 	bl	80007ec <__aeabi_ddiv>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <_etoa+0x344>)
 80029a2:	f7fd fc43 	bl	800022c <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029ae:	f7fd ff1d 	bl	80007ec <__aeabi_ddiv>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4650      	mov	r0, sl
 80029b8:	4659      	mov	r1, fp
 80029ba:	f7fd fc37 	bl	800022c <__adddf3>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4640      	mov	r0, r8
 80029c4:	4649      	mov	r1, r9
 80029c6:	f7fd ff11 	bl	80007ec <__aeabi_ddiv>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <_etoa+0x348>)
 80029d8:	f7fd fc28 	bl	800022c <__adddf3>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4620      	mov	r0, r4
 80029e2:	4629      	mov	r1, r5
 80029e4:	f7fd fdd8 	bl	8000598 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80029f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029f8:	f7fe f840 	bl	8000a7c <__aeabi_dcmplt>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <_etoa+0x2ee>
    expval--;
 8002a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a04:	3b01      	subs	r3, #1
 8002a06:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002a08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <_etoa+0x340>)
 8002a12:	f7fd feeb 	bl	80007ec <__aeabi_ddiv>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a20:	2b63      	cmp	r3, #99	; 0x63
 8002a22:	dc2b      	bgt.n	8002a7c <_etoa+0x34c>
 8002a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a26:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002a2a:	db27      	blt.n	8002a7c <_etoa+0x34c>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e026      	b.n	8002a7e <_etoa+0x34e>
 8002a30:	509f79fb 	.word	0x509f79fb
 8002a34:	3fd34413 	.word	0x3fd34413
 8002a38:	8b60c8b3 	.word	0x8b60c8b3
 8002a3c:	3fc68a28 	.word	0x3fc68a28
 8002a40:	636f4361 	.word	0x636f4361
 8002a44:	3fd287a7 	.word	0x3fd287a7
 8002a48:	0979a371 	.word	0x0979a371
 8002a4c:	400a934f 	.word	0x400a934f
 8002a50:	bbb55516 	.word	0xbbb55516
 8002a54:	40026bb1 	.word	0x40026bb1
 8002a58:	fefa39ef 	.word	0xfefa39ef
 8002a5c:	3fe62e42 	.word	0x3fe62e42
 8002a60:	7fefffff 	.word	0x7fefffff
 8002a64:	3ff80000 	.word	0x3ff80000
 8002a68:	3fe00000 	.word	0x3fe00000
 8002a6c:	402c0000 	.word	0x402c0000
 8002a70:	40240000 	.word	0x40240000
 8002a74:	40180000 	.word	0x40180000
 8002a78:	3ff00000 	.word	0x3ff00000
 8002a7c:	2305      	movs	r3, #5
 8002a7e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d03d      	beq.n	8002b08 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002a8c:	a368      	add	r3, pc, #416	; (adr r3, 8002c30 <_etoa+0x500>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a96:	f7fe f805 	bl	8000aa4 <__aeabi_dcmpge>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d024      	beq.n	8002aea <_etoa+0x3ba>
 8002aa0:	a365      	add	r3, pc, #404	; (adr r3, 8002c38 <_etoa+0x508>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aaa:	f7fd ffe7 	bl	8000a7c <__aeabi_dcmplt>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01a      	beq.n	8002aea <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002aba:	429a      	cmp	r2, r3
 8002abc:	da07      	bge.n	8002ace <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002abe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002acc:	e002      	b.n	8002ad4 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002adc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae8:	e00e      	b.n	8002b08 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <_etoa+0x3d8>
 8002af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <_etoa+0x3d8>
        --prec;
 8002afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002b0e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d904      	bls.n	8002b22 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002b18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b20:	e001      	b.n	8002b26 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <_etoa+0x40c>
 8002b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <_etoa+0x426>
    value /= conv.F;
 8002b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b4a:	f7fd fe4f 	bl	80007ec <__aeabi_ddiv>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002b5a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <_etoa+0x440>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e003      	b.n	8002b78 <_etoa+0x448>
 8002b70:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b74:	ed87 7b02 	vstr	d7, [r7, #8]
 8002b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b80:	9302      	str	r3, [sp, #8]
 8002b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b98:	f7ff fb72 	bl	8002280 <_ftoa>
 8002b9c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03f      	beq.n	8002c24 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <_etoa+0x484>
 8002bb0:	2045      	movs	r0, #69	; 0x45
 8002bb2:	e000      	b.n	8002bb6 <_etoa+0x486>
 8002bb4:	2065      	movs	r0, #101	; 0x65
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	1c53      	adds	r3, r2, #1
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bfb8      	it	lt
 8002bca:	425b      	neglt	r3, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd0:	0fdb      	lsrs	r3, r3, #31
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd6:	3a01      	subs	r2, #1
 8002bd8:	2105      	movs	r1, #5
 8002bda:	9105      	str	r1, [sp, #20]
 8002bdc:	9204      	str	r2, [sp, #16]
 8002bde:	2200      	movs	r2, #0
 8002be0:	9203      	str	r2, [sp, #12]
 8002be2:	220a      	movs	r2, #10
 8002be4:	9202      	str	r2, [sp, #8]
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	9000      	str	r0, [sp, #0]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bf2:	f7ff fa71 	bl	80020d8 <_ntoa_long>
 8002bf6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00f      	beq.n	8002c24 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002c04:	e007      	b.n	8002c16 <_etoa+0x4e6>
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	1c53      	adds	r3, r2, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	6a39      	ldr	r1, [r7, #32]
 8002c12:	2020      	movs	r0, #32
 8002c14:	47a0      	blx	r4
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f0      	bhi.n	8002c06 <_etoa+0x4d6>
    }
  }
  return idx;
 8002c24:	69fb      	ldr	r3, [r7, #28]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3764      	adds	r7, #100	; 0x64
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c30:	eb1c432d 	.word	0xeb1c432d
 8002c34:	3f1a36e2 	.word	0x3f1a36e2
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	412e8480 	.word	0x412e8480

08002c40 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c44:	b0a3      	sub	sp, #140	; 0x8c
 8002c46:	af0a      	add	r7, sp, #40	; 0x28
 8002c48:	6178      	str	r0, [r7, #20]
 8002c4a:	6139      	str	r1, [r7, #16]
 8002c4c:	60fa      	str	r2, [r7, #12]
 8002c4e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 84cf 	bne.w	80035fa <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8002c5c:	4ba8      	ldr	r3, [pc, #672]	; (8002f00 <_vsnprintf+0x2c0>)
 8002c5e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002c60:	f000 bccb 	b.w	80035fa <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b25      	cmp	r3, #37	; 0x25
 8002c6a:	d00d      	beq.n	8002c88 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	7818      	ldrb	r0, [r3, #0]
 8002c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c72:	1c53      	adds	r3, r2, #1
 8002c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c76:	697c      	ldr	r4, [r7, #20]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6939      	ldr	r1, [r7, #16]
 8002c7c:	47a0      	blx	r4
      format++;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
      continue;
 8002c84:	f000 bcb9 	b.w	80035fa <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	3b20      	subs	r3, #32
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d857      	bhi.n	8002d4c <_vsnprintf+0x10c>
 8002c9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <_vsnprintf+0x64>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002d25 	.word	0x08002d25
 8002ca8:	08002d4d 	.word	0x08002d4d
 8002cac:	08002d4d 	.word	0x08002d4d
 8002cb0:	08002d39 	.word	0x08002d39
 8002cb4:	08002d4d 	.word	0x08002d4d
 8002cb8:	08002d4d 	.word	0x08002d4d
 8002cbc:	08002d4d 	.word	0x08002d4d
 8002cc0:	08002d4d 	.word	0x08002d4d
 8002cc4:	08002d4d 	.word	0x08002d4d
 8002cc8:	08002d4d 	.word	0x08002d4d
 8002ccc:	08002d4d 	.word	0x08002d4d
 8002cd0:	08002d11 	.word	0x08002d11
 8002cd4:	08002d4d 	.word	0x08002d4d
 8002cd8:	08002cfd 	.word	0x08002cfd
 8002cdc:	08002d4d 	.word	0x08002d4d
 8002ce0:	08002d4d 	.word	0x08002d4d
 8002ce4:	08002ce9 	.word	0x08002ce9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8002cfa:	e02a      	b.n	8002d52 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	3301      	adds	r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d0e:	e020      	b.n	8002d52 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	2301      	movs	r3, #1
 8002d20:	653b      	str	r3, [r7, #80]	; 0x50
 8002d22:	e016      	b.n	8002d52 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d26:	f043 0308 	orr.w	r3, r3, #8
 8002d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	2301      	movs	r3, #1
 8002d34:	653b      	str	r3, [r7, #80]	; 0x50
 8002d36:	e00c      	b.n	8002d52 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	2301      	movs	r3, #1
 8002d48:	653b      	str	r3, [r7, #80]	; 0x50
 8002d4a:	e002      	b.n	8002d52 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d50:	bf00      	nop
      }
    } while (n);
 8002d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d19c      	bne.n	8002c92 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f852 	bl	8001e0a <_is_digit>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff f861 	bl	8001e38 <_atoi>
 8002d76:	65b8      	str	r0, [r7, #88]	; 0x58
 8002d78:	e01a      	b.n	8002db0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d80:	d116      	bne.n	8002db0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8002d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d86:	1d1a      	adds	r2, r3, #4
 8002d88:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da07      	bge.n	8002da6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8002d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	425b      	negs	r3, r3
 8002da2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002da4:	e001      	b.n	8002daa <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b2e      	cmp	r3, #46	; 0x2e
 8002dba:	d127      	bne.n	8002e0c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8002dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff f81b 	bl	8001e0a <_is_digit>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f82a 	bl	8001e38 <_atoi>
 8002de4:	6578      	str	r0, [r7, #84]	; 0x54
 8002de6:	e011      	b.n	8002e0c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b2a      	cmp	r3, #42	; 0x2a
 8002dee:	d10d      	bne.n	8002e0c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002df4:	1d1a      	adds	r2, r3, #4
 8002df6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002e04:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	3b68      	subs	r3, #104	; 0x68
 8002e12:	2b12      	cmp	r3, #18
 8002e14:	d866      	bhi.n	8002ee4 <_vsnprintf+0x2a4>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <_vsnprintf+0x1dc>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e8f 	.word	0x08002e8f
 8002e20:	08002ee5 	.word	0x08002ee5
 8002e24:	08002ec5 	.word	0x08002ec5
 8002e28:	08002ee5 	.word	0x08002ee5
 8002e2c:	08002e69 	.word	0x08002e69
 8002e30:	08002ee5 	.word	0x08002ee5
 8002e34:	08002ee5 	.word	0x08002ee5
 8002e38:	08002ee5 	.word	0x08002ee5
 8002e3c:	08002ee5 	.word	0x08002ee5
 8002e40:	08002ee5 	.word	0x08002ee5
 8002e44:	08002ee5 	.word	0x08002ee5
 8002e48:	08002ee5 	.word	0x08002ee5
 8002e4c:	08002eb5 	.word	0x08002eb5
 8002e50:	08002ee5 	.word	0x08002ee5
 8002e54:	08002ee5 	.word	0x08002ee5
 8002e58:	08002ee5 	.word	0x08002ee5
 8002e5c:	08002ee5 	.word	0x08002ee5
 8002e60:	08002ee5 	.word	0x08002ee5
 8002e64:	08002ed5 	.word	0x08002ed5
      case 'l' :
        flags |= FLAGS_LONG;
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	3301      	adds	r3, #1
 8002e74:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b6c      	cmp	r3, #108	; 0x6c
 8002e7c:	d134      	bne.n	8002ee8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e84:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002e8c:	e02c      	b.n	8002ee8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e94:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b68      	cmp	r3, #104	; 0x68
 8002ea2:	d123      	bne.n	8002eec <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8002ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002eb2:	e01b      	b.n	8002eec <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eba:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
        break;
 8002ec2:	e014      	b.n	8002eee <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eca:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
        break;
 8002ed2:	e00c      	b.n	8002eee <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
        break;
 8002ee2:	e004      	b.n	8002eee <_vsnprintf+0x2ae>
      default :
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e002      	b.n	8002eee <_vsnprintf+0x2ae>
        break;
 8002ee8:	bf00      	nop
 8002eea:	e000      	b.n	8002eee <_vsnprintf+0x2ae>
        break;
 8002eec:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b67      	cmp	r3, #103	; 0x67
 8002ef4:	f300 80b8 	bgt.w	8003068 <_vsnprintf+0x428>
 8002ef8:	2b25      	cmp	r3, #37	; 0x25
 8002efa:	da27      	bge.n	8002f4c <_vsnprintf+0x30c>
 8002efc:	e370      	b.n	80035e0 <_vsnprintf+0x9a0>
 8002efe:	bf00      	nop
 8002f00:	08001d8f 	.word	0x08001d8f
 8002f04:	3b69      	subs	r3, #105	; 0x69
 8002f06:	2201      	movs	r2, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	f249 0241 	movw	r2, #36929	; 0x9041
 8002f10:	401a      	ands	r2, r3
 8002f12:	2a00      	cmp	r2, #0
 8002f14:	bf14      	ite	ne
 8002f16:	2201      	movne	r2, #1
 8002f18:	2200      	moveq	r2, #0
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	f040 80aa 	bne.w	8003076 <_vsnprintf+0x436>
 8002f22:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2201      	movne	r2, #1
 8002f2c:	2200      	moveq	r2, #0
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	2a00      	cmp	r2, #0
 8002f32:	f040 82fb 	bne.w	800352c <_vsnprintf+0x8ec>
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	2300      	moveq	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 828d 	bne.w	8003464 <_vsnprintf+0x824>
 8002f4a:	e349      	b.n	80035e0 <_vsnprintf+0x9a0>
 8002f4c:	3b25      	subs	r3, #37	; 0x25
 8002f4e:	2b42      	cmp	r3, #66	; 0x42
 8002f50:	f200 8346 	bhi.w	80035e0 <_vsnprintf+0x9a0>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <_vsnprintf+0x31c>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	080035c9 	.word	0x080035c9
 8002f60:	080035e1 	.word	0x080035e1
 8002f64:	080035e1 	.word	0x080035e1
 8002f68:	080035e1 	.word	0x080035e1
 8002f6c:	080035e1 	.word	0x080035e1
 8002f70:	080035e1 	.word	0x080035e1
 8002f74:	080035e1 	.word	0x080035e1
 8002f78:	080035e1 	.word	0x080035e1
 8002f7c:	080035e1 	.word	0x080035e1
 8002f80:	080035e1 	.word	0x080035e1
 8002f84:	080035e1 	.word	0x080035e1
 8002f88:	080035e1 	.word	0x080035e1
 8002f8c:	080035e1 	.word	0x080035e1
 8002f90:	080035e1 	.word	0x080035e1
 8002f94:	080035e1 	.word	0x080035e1
 8002f98:	080035e1 	.word	0x080035e1
 8002f9c:	080035e1 	.word	0x080035e1
 8002fa0:	080035e1 	.word	0x080035e1
 8002fa4:	080035e1 	.word	0x080035e1
 8002fa8:	080035e1 	.word	0x080035e1
 8002fac:	080035e1 	.word	0x080035e1
 8002fb0:	080035e1 	.word	0x080035e1
 8002fb4:	080035e1 	.word	0x080035e1
 8002fb8:	080035e1 	.word	0x080035e1
 8002fbc:	080035e1 	.word	0x080035e1
 8002fc0:	080035e1 	.word	0x080035e1
 8002fc4:	080035e1 	.word	0x080035e1
 8002fc8:	080035e1 	.word	0x080035e1
 8002fcc:	080035e1 	.word	0x080035e1
 8002fd0:	080035e1 	.word	0x080035e1
 8002fd4:	080035e1 	.word	0x080035e1
 8002fd8:	080035e1 	.word	0x080035e1
 8002fdc:	0800337d 	.word	0x0800337d
 8002fe0:	0800332d 	.word	0x0800332d
 8002fe4:	0800337d 	.word	0x0800337d
 8002fe8:	080035e1 	.word	0x080035e1
 8002fec:	080035e1 	.word	0x080035e1
 8002ff0:	080035e1 	.word	0x080035e1
 8002ff4:	080035e1 	.word	0x080035e1
 8002ff8:	080035e1 	.word	0x080035e1
 8002ffc:	080035e1 	.word	0x080035e1
 8003000:	080035e1 	.word	0x080035e1
 8003004:	080035e1 	.word	0x080035e1
 8003008:	080035e1 	.word	0x080035e1
 800300c:	080035e1 	.word	0x080035e1
 8003010:	080035e1 	.word	0x080035e1
 8003014:	080035e1 	.word	0x080035e1
 8003018:	080035e1 	.word	0x080035e1
 800301c:	080035e1 	.word	0x080035e1
 8003020:	080035e1 	.word	0x080035e1
 8003024:	080035e1 	.word	0x080035e1
 8003028:	08003077 	.word	0x08003077
 800302c:	080035e1 	.word	0x080035e1
 8003030:	080035e1 	.word	0x080035e1
 8003034:	080035e1 	.word	0x080035e1
 8003038:	080035e1 	.word	0x080035e1
 800303c:	080035e1 	.word	0x080035e1
 8003040:	080035e1 	.word	0x080035e1
 8003044:	080035e1 	.word	0x080035e1
 8003048:	080035e1 	.word	0x080035e1
 800304c:	080035e1 	.word	0x080035e1
 8003050:	08003077 	.word	0x08003077
 8003054:	080033ed 	.word	0x080033ed
 8003058:	08003077 	.word	0x08003077
 800305c:	0800337d 	.word	0x0800337d
 8003060:	0800332d 	.word	0x0800332d
 8003064:	0800337d 	.word	0x0800337d
 8003068:	2b78      	cmp	r3, #120	; 0x78
 800306a:	f300 82b9 	bgt.w	80035e0 <_vsnprintf+0x9a0>
 800306e:	2b69      	cmp	r3, #105	; 0x69
 8003070:	f6bf af48 	bge.w	8002f04 <_vsnprintf+0x2c4>
 8003074:	e2b4      	b.n	80035e0 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b78      	cmp	r3, #120	; 0x78
 800307c:	d003      	beq.n	8003086 <_vsnprintf+0x446>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b58      	cmp	r3, #88	; 0x58
 8003084:	d102      	bne.n	800308c <_vsnprintf+0x44c>
          base = 16U;
 8003086:	2310      	movs	r3, #16
 8003088:	64bb      	str	r3, [r7, #72]	; 0x48
 800308a:	e013      	b.n	80030b4 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b6f      	cmp	r3, #111	; 0x6f
 8003092:	d102      	bne.n	800309a <_vsnprintf+0x45a>
          base =  8U;
 8003094:	2308      	movs	r3, #8
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
 8003098:	e00c      	b.n	80030b4 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b62      	cmp	r3, #98	; 0x62
 80030a0:	d102      	bne.n	80030a8 <_vsnprintf+0x468>
          base =  2U;
 80030a2:	2302      	movs	r3, #2
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a6:	e005      	b.n	80030b4 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80030a8:	230a      	movs	r3, #10
 80030aa:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80030ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ae:	f023 0310 	bic.w	r3, r3, #16
 80030b2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b58      	cmp	r3, #88	; 0x58
 80030ba:	d103      	bne.n	80030c4 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80030bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030be:	f043 0320 	orr.w	r3, r3, #32
 80030c2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b69      	cmp	r3, #105	; 0x69
 80030ca:	d007      	beq.n	80030dc <_vsnprintf+0x49c>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d003      	beq.n	80030dc <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80030d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d6:	f023 030c 	bic.w	r3, r3, #12
 80030da:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80030dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80030e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b69      	cmp	r3, #105	; 0x69
 80030f4:	d004      	beq.n	8003100 <_vsnprintf+0x4c0>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	f040 8098 	bne.w	8003230 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003106:	2b00      	cmp	r3, #0
 8003108:	d031      	beq.n	800316e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800310a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800310e:	3307      	adds	r3, #7
 8003110:	f023 0307 	bic.w	r3, r3, #7
 8003114:	f103 0208 	add.w	r2, r3, #8
 8003118:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	da06      	bge.n	800313a <_vsnprintf+0x4fa>
 800312c:	2100      	movs	r1, #0
 800312e:	f1d2 0800 	rsbs	r8, r2, #0
 8003132:	eb61 0903 	sbc.w	r9, r1, r3
 8003136:	4642      	mov	r2, r8
 8003138:	464b      	mov	r3, r9
 800313a:	69f9      	ldr	r1, [r7, #28]
 800313c:	0fc9      	lsrs	r1, r1, #31
 800313e:	b2c9      	uxtb	r1, r1
 8003140:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003142:	2400      	movs	r4, #0
 8003144:	4682      	mov	sl, r0
 8003146:	46a3      	mov	fp, r4
 8003148:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800314a:	9008      	str	r0, [sp, #32]
 800314c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800314e:	9007      	str	r0, [sp, #28]
 8003150:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003152:	9006      	str	r0, [sp, #24]
 8003154:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003158:	9102      	str	r1, [sp, #8]
 800315a:	e9cd 2300 	strd	r2, r3, [sp]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003162:	6939      	ldr	r1, [r7, #16]
 8003164:	6978      	ldr	r0, [r7, #20]
 8003166:	f7ff f81d 	bl	80021a4 <_ntoa_long_long>
 800316a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800316c:	e0da      	b.n	8003324 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800316e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8003178:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	2b00      	cmp	r3, #0
 800318a:	bfb8      	it	lt
 800318c:	425b      	neglt	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	0fdb      	lsrs	r3, r3, #31
 8003194:	b2db      	uxtb	r3, r3
 8003196:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003198:	9205      	str	r2, [sp, #20]
 800319a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800319c:	9204      	str	r2, [sp, #16]
 800319e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031a0:	9203      	str	r2, [sp, #12]
 80031a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a4:	9202      	str	r2, [sp, #8]
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	9100      	str	r1, [sp, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ae:	6939      	ldr	r1, [r7, #16]
 80031b0:	6978      	ldr	r0, [r7, #20]
 80031b2:	f7fe ff91 	bl	80020d8 <_ntoa_long>
 80031b6:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80031b8:	e0b4      	b.n	8003324 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80031ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <_vsnprintf+0x594>
 80031c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c8:	1d1a      	adds	r2, r3, #4
 80031ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e012      	b.n	80031fa <_vsnprintf+0x5ba>
 80031d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <_vsnprintf+0x5ae>
 80031de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b21b      	sxth	r3, r3
 80031ec:	e005      	b.n	80031fa <_vsnprintf+0x5ba>
 80031ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031f2:	1d1a      	adds	r2, r3, #4
 80031f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bfb8      	it	lt
 8003202:	425b      	neglt	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	0fdb      	lsrs	r3, r3, #31
 800320a:	b2db      	uxtb	r3, r3
 800320c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800320e:	9205      	str	r2, [sp, #20]
 8003210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003212:	9204      	str	r2, [sp, #16]
 8003214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003216:	9203      	str	r2, [sp, #12]
 8003218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800321a:	9202      	str	r2, [sp, #8]
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	9100      	str	r1, [sp, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003224:	6939      	ldr	r1, [r7, #16]
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7fe ff56 	bl	80020d8 <_ntoa_long>
 800322c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800322e:	e079      	b.n	8003324 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003236:	2b00      	cmp	r3, #0
 8003238:	d022      	beq.n	8003280 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800323a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800323e:	3307      	adds	r3, #7
 8003240:	f023 0307 	bic.w	r3, r3, #7
 8003244:	f103 0208 	add.w	r2, r3, #8
 8003248:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003252:	2000      	movs	r0, #0
 8003254:	460d      	mov	r5, r1
 8003256:	4606      	mov	r6, r0
 8003258:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800325a:	9108      	str	r1, [sp, #32]
 800325c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800325e:	9107      	str	r1, [sp, #28]
 8003260:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003262:	9106      	str	r1, [sp, #24]
 8003264:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003268:	2100      	movs	r1, #0
 800326a:	9102      	str	r1, [sp, #8]
 800326c:	e9cd 2300 	strd	r2, r3, [sp]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003274:	6939      	ldr	r1, [r7, #16]
 8003276:	6978      	ldr	r0, [r7, #20]
 8003278:	f7fe ff94 	bl	80021a4 <_ntoa_long_long>
 800327c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800327e:	e051      	b.n	8003324 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d018      	beq.n	80032bc <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800328a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003298:	9205      	str	r2, [sp, #20]
 800329a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800329c:	9204      	str	r2, [sp, #16]
 800329e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032a0:	9203      	str	r2, [sp, #12]
 80032a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a4:	9202      	str	r2, [sp, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	9201      	str	r2, [sp, #4]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032b0:	6939      	ldr	r1, [r7, #16]
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7fe ff10 	bl	80020d8 <_ntoa_long>
 80032b8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80032ba:	e033      	b.n	8003324 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80032bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <_vsnprintf+0x696>
 80032c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032ca:	1d1a      	adds	r2, r3, #4
 80032cc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e012      	b.n	80032fc <_vsnprintf+0x6bc>
 80032d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <_vsnprintf+0x6b0>
 80032e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032e4:	1d1a      	adds	r2, r3, #4
 80032e6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	e005      	b.n	80032fc <_vsnprintf+0x6bc>
 80032f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032f4:	1d1a      	adds	r2, r3, #4
 80032f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80032fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003300:	9305      	str	r3, [sp, #20]
 8003302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003304:	9304      	str	r3, [sp, #16]
 8003306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003308:	9303      	str	r3, [sp, #12]
 800330a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	2300      	movs	r3, #0
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800331a:	6939      	ldr	r1, [r7, #16]
 800331c:	6978      	ldr	r0, [r7, #20]
 800331e:	f7fe fedb 	bl	80020d8 <_ntoa_long>
 8003322:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3301      	adds	r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
        break;
 800332a:	e166      	b.n	80035fa <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b46      	cmp	r3, #70	; 0x46
 8003332:	d103      	bne.n	800333c <_vsnprintf+0x6fc>
 8003334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003336:	f043 0320 	orr.w	r3, r3, #32
 800333a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800333c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003340:	3307      	adds	r3, #7
 8003342:	f023 0307 	bic.w	r3, r3, #7
 8003346:	f103 0208 	add.w	r2, r3, #8
 800334a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800334e:	ed93 7b00 	vldr	d7, [r3]
 8003352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003354:	9302      	str	r3, [sp, #8]
 8003356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	eeb0 0a47 	vmov.f32	s0, s14
 8003362:	eef0 0a67 	vmov.f32	s1, s15
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800336a:	6939      	ldr	r1, [r7, #16]
 800336c:	6978      	ldr	r0, [r7, #20]
 800336e:	f7fe ff87 	bl	8002280 <_ftoa>
 8003372:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	3301      	adds	r3, #1
 8003378:	60bb      	str	r3, [r7, #8]
        break;
 800337a:	e13e      	b.n	80035fa <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b67      	cmp	r3, #103	; 0x67
 8003382:	d003      	beq.n	800338c <_vsnprintf+0x74c>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b47      	cmp	r3, #71	; 0x47
 800338a:	d103      	bne.n	8003394 <_vsnprintf+0x754>
 800338c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003392:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b45      	cmp	r3, #69	; 0x45
 800339a:	d003      	beq.n	80033a4 <_vsnprintf+0x764>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b47      	cmp	r3, #71	; 0x47
 80033a2:	d103      	bne.n	80033ac <_vsnprintf+0x76c>
 80033a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a6:	f043 0320 	orr.w	r3, r3, #32
 80033aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80033ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b0:	3307      	adds	r3, #7
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	f103 0208 	add.w	r2, r3, #8
 80033ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80033be:	ed93 7b00 	vldr	d7, [r3]
 80033c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	eeb0 0a47 	vmov.f32	s0, s14
 80033d2:	eef0 0a67 	vmov.f32	s1, s15
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033da:	6939      	ldr	r1, [r7, #16]
 80033dc:	6978      	ldr	r0, [r7, #20]
 80033de:	f7ff f9a7 	bl	8002730 <_etoa>
 80033e2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3301      	adds	r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
        break;
 80033ea:	e106      	b.n	80035fa <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80033ec:	2301      	movs	r3, #1
 80033ee:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80033f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10e      	bne.n	8003418 <_vsnprintf+0x7d8>
          while (l++ < width) {
 80033fa:	e007      	b.n	800340c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 80033fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033fe:	1c53      	adds	r3, r2, #1
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003402:	697c      	ldr	r4, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6939      	ldr	r1, [r7, #16]
 8003408:	2020      	movs	r0, #32
 800340a:	47a0      	blx	r4
          while (l++ < width) {
 800340c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	647a      	str	r2, [r7, #68]	; 0x44
 8003412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003414:	429a      	cmp	r2, r3
 8003416:	d8f1      	bhi.n	80033fc <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800341c:	1d1a      	adds	r2, r3, #4
 800341e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	b2d8      	uxtb	r0, r3
 8003426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003428:	1c53      	adds	r3, r2, #1
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800342c:	697c      	ldr	r4, [r7, #20]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6939      	ldr	r1, [r7, #16]
 8003432:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <_vsnprintf+0x81c>
          while (l++ < width) {
 800343e:	e007      	b.n	8003450 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003442:	1c53      	adds	r3, r2, #1
 8003444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003446:	697c      	ldr	r4, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6939      	ldr	r1, [r7, #16]
 800344c:	2020      	movs	r0, #32
 800344e:	47a0      	blx	r4
          while (l++ < width) {
 8003450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	647a      	str	r2, [r7, #68]	; 0x44
 8003456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003458:	429a      	cmp	r2, r3
 800345a:	d8f1      	bhi.n	8003440 <_vsnprintf+0x800>
          }
        }
        format++;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	3301      	adds	r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
        break;
 8003462:	e0ca      	b.n	80035fa <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003468:	1d1a      	adds	r2, r3, #4
 800346a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <_vsnprintf+0x83c>
 8003478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347a:	e001      	b.n	8003480 <_vsnprintf+0x840>
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
 8003480:	4619      	mov	r1, r3
 8003482:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003484:	f7fe fca4 	bl	8001dd0 <_strnlen_s>
 8003488:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800348a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8003494:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003498:	4293      	cmp	r3, r2
 800349a:	bf28      	it	cs
 800349c:	4613      	movcs	r3, r2
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80034a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11a      	bne.n	80034e0 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80034aa:	e007      	b.n	80034bc <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80034ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034ae:	1c53      	adds	r3, r2, #1
 80034b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b2:	697c      	ldr	r4, [r7, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6939      	ldr	r1, [r7, #16]
 80034b8:	2020      	movs	r0, #32
 80034ba:	47a0      	blx	r4
          while (l++ < width) {
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d8f1      	bhi.n	80034ac <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80034c8:	e00a      	b.n	80034e0 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 80034ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	643a      	str	r2, [r7, #64]	; 0x40
 80034d0:	7818      	ldrb	r0, [r3, #0]
 80034d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d4:	1c53      	adds	r3, r2, #1
 80034d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d8:	697c      	ldr	r4, [r7, #20]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6939      	ldr	r1, [r7, #16]
 80034de:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80034e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <_vsnprintf+0x8bc>
 80034e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0eb      	beq.n	80034ca <_vsnprintf+0x88a>
 80034f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f4:	1e5a      	subs	r2, r3, #1
 80034f6:	657a      	str	r2, [r7, #84]	; 0x54
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e6      	bne.n	80034ca <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80034fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8003506:	e007      	b.n	8003518 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800350a:	1c53      	adds	r3, r2, #1
 800350c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800350e:	697c      	ldr	r4, [r7, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6939      	ldr	r1, [r7, #16]
 8003514:	2020      	movs	r0, #32
 8003516:	47a0      	blx	r4
          while (l++ < width) {
 8003518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800351e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003520:	429a      	cmp	r2, r3
 8003522:	d8f1      	bhi.n	8003508 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	3301      	adds	r3, #1
 8003528:	60bb      	str	r3, [r7, #8]
        break;
 800352a:	e066      	b.n	80035fa <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800352c:	2308      	movs	r3, #8
 800352e:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003536:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800353e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003542:	2b00      	cmp	r3, #0
 8003544:	d023      	beq.n	800358e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003546:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800354a:	1d1a      	adds	r2, r3, #4
 800354c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	2300      	movs	r3, #0
 8003556:	603a      	str	r2, [r7, #0]
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355c:	9308      	str	r3, [sp, #32]
 800355e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003560:	9307      	str	r3, [sp, #28]
 8003562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003564:	9306      	str	r3, [sp, #24]
 8003566:	f04f 0210 	mov.w	r2, #16
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003572:	2300      	movs	r3, #0
 8003574:	9302      	str	r3, [sp, #8]
 8003576:	e9d7 3400 	ldrd	r3, r4, [r7]
 800357a:	e9cd 3400 	strd	r3, r4, [sp]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003582:	6939      	ldr	r1, [r7, #16]
 8003584:	6978      	ldr	r0, [r7, #20]
 8003586:	f7fe fe0d 	bl	80021a4 <_ntoa_long_long>
 800358a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800358c:	e018      	b.n	80035c0 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800358e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359e:	9305      	str	r3, [sp, #20]
 80035a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a2:	9304      	str	r3, [sp, #16]
 80035a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a6:	9303      	str	r3, [sp, #12]
 80035a8:	2310      	movs	r3, #16
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	2300      	movs	r3, #0
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	9200      	str	r2, [sp, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b6:	6939      	ldr	r1, [r7, #16]
 80035b8:	6978      	ldr	r0, [r7, #20]
 80035ba:	f7fe fd8d 	bl	80020d8 <_ntoa_long>
 80035be:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	3301      	adds	r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]
        break;
 80035c6:	e018      	b.n	80035fa <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80035c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ca:	1c53      	adds	r3, r2, #1
 80035cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ce:	697c      	ldr	r4, [r7, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6939      	ldr	r1, [r7, #16]
 80035d4:	2025      	movs	r0, #37	; 0x25
 80035d6:	47a0      	blx	r4
        format++;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	3301      	adds	r3, #1
 80035dc:	60bb      	str	r3, [r7, #8]
        break;
 80035de:	e00c      	b.n	80035fa <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	7818      	ldrb	r0, [r3, #0]
 80035e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035e6:	1c53      	adds	r3, r2, #1
 80035e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ea:	697c      	ldr	r4, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6939      	ldr	r1, [r7, #16]
 80035f0:	47a0      	blx	r4
        format++;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
        break;
 80035f8:	bf00      	nop
  while (*format)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f47f ab30 	bne.w	8002c64 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <_vsnprintf+0x9d2>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	e000      	b.n	8003614 <_vsnprintf+0x9d4>
 8003612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003614:	697c      	ldr	r4, [r7, #20]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	2000      	movs	r0, #0
 800361c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800361e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003620:	4618      	mov	r0, r3
 8003622:	3764      	adds	r7, #100	; 0x64
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362a:	bf00      	nop

0800362c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800362c:	b40f      	push	{r0, r1, r2, r3}
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800363a:	1d39      	adds	r1, r7, #4
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f04f 32ff 	mov.w	r2, #4294967295
 8003646:	4806      	ldr	r0, [pc, #24]	; (8003660 <printf_+0x34>)
 8003648:	f7ff fafa 	bl	8002c40 <_vsnprintf>
 800364c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800365a:	b004      	add	sp, #16
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	08001dab 	.word	0x08001dab

08003664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_MspInit+0x50>)
 800366c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366e:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <HAL_MspInit+0x50>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6613      	str	r3, [r2, #96]	; 0x60
 8003676:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_MspInit+0x50>)
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <HAL_MspInit+0x50>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <HAL_MspInit+0x50>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	6593      	str	r3, [r2, #88]	; 0x58
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_MspInit+0x50>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	210f      	movs	r1, #15
 800369e:	f06f 0001 	mvn.w	r0, #1
 80036a2:	f002 fb25 	bl	8005cf0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80036a6:	f003 fc01 	bl	8006eac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80036c8:	4b2c      	ldr	r3, [pc, #176]	; (800377c <HAL_InitTick+0xc4>)
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036cc:	4a2b      	ldr	r2, [pc, #172]	; (800377c <HAL_InitTick+0xc4>)
 80036ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036d2:	6613      	str	r3, [r2, #96]	; 0x60
 80036d4:	4b29      	ldr	r3, [pc, #164]	; (800377c <HAL_InitTick+0xc4>)
 80036d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036e0:	f107 020c 	add.w	r2, r7, #12
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f004 f8d6 	bl	800789c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80036f0:	f004 f8be 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 80036f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	4a21      	ldr	r2, [pc, #132]	; (8003780 <HAL_InitTick+0xc8>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9b      	lsrs	r3, r3, #18
 8003700:	3b01      	subs	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003704:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <HAL_InitTick+0xcc>)
 8003706:	4a20      	ldr	r2, [pc, #128]	; (8003788 <HAL_InitTick+0xd0>)
 8003708:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <HAL_InitTick+0xcc>)
 800370c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003710:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003712:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <HAL_InitTick+0xcc>)
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HAL_InitTick+0xcc>)
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371e:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_InitTick+0xcc>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003724:	4817      	ldr	r0, [pc, #92]	; (8003784 <HAL_InitTick+0xcc>)
 8003726:	f004 fb6d 	bl	8007e04 <HAL_TIM_Base_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003734:	2b00      	cmp	r3, #0
 8003736:	d11b      	bne.n	8003770 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003738:	4812      	ldr	r0, [pc, #72]	; (8003784 <HAL_InitTick+0xcc>)
 800373a:	f004 fbbb 	bl	8007eb4 <HAL_TIM_Base_Start_IT>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003748:	2b00      	cmp	r3, #0
 800374a:	d111      	bne.n	8003770 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800374c:	2019      	movs	r0, #25
 800374e:	f002 fae9 	bl	8005d24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0f      	cmp	r3, #15
 8003756:	d808      	bhi.n	800376a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003758:	2200      	movs	r2, #0
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	2019      	movs	r0, #25
 800375e:	f002 fac7 	bl	8005cf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003762:	4a0a      	ldr	r2, [pc, #40]	; (800378c <HAL_InitTick+0xd4>)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	e002      	b.n	8003770 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003774:	4618      	mov	r0, r3
 8003776:	3730      	adds	r7, #48	; 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40021000 	.word	0x40021000
 8003780:	431bde83 	.word	0x431bde83
 8003784:	20000188 	.word	0x20000188
 8003788:	40012c00 	.word	0x40012c00
 800378c:	20000004 	.word	0x20000004

08003790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003794:	e7fe      	b.n	8003794 <NMI_Handler+0x4>

08003796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379a:	e7fe      	b.n	800379a <HardFault_Handler+0x4>

0800379c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a0:	e7fe      	b.n	80037a0 <MemManage_Handler+0x4>

080037a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037a6:	e7fe      	b.n	80037a6 <BusFault_Handler+0x4>

080037a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037ac:	e7fe      	b.n	80037ac <UsageFault_Handler+0x4>

080037ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <ADC1_2_IRQHandler+0x10>)
 80037c2:	f001 f867 	bl	8004894 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000007c 	.word	0x2000007c

080037d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80037d6:	f004 fbdd 	bl	8007f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000188 	.word	0x20000188

080037e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80037e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037ec:	f002 fc74 	bl	80060d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <SystemInit+0x20>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	4a05      	ldr	r2, [pc, #20]	; (8003814 <SystemInit+0x20>)
 8003800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <MX_TIM6_Init+0x64>)
 800382a:	4a15      	ldr	r2, [pc, #84]	; (8003880 <MX_TIM6_Init+0x68>)
 800382c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800382e:	4b13      	ldr	r3, [pc, #76]	; (800387c <MX_TIM6_Init+0x64>)
 8003830:	2200      	movs	r2, #0
 8003832:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <MX_TIM6_Init+0x64>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 169;
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <MX_TIM6_Init+0x64>)
 800383c:	22a9      	movs	r2, #169	; 0xa9
 800383e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <MX_TIM6_Init+0x64>)
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003846:	480d      	ldr	r0, [pc, #52]	; (800387c <MX_TIM6_Init+0x64>)
 8003848:	f004 fadc 	bl	8007e04 <HAL_TIM_Base_Init>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003852:	f7fe fa97 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800385e:	1d3b      	adds	r3, r7, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4806      	ldr	r0, [pc, #24]	; (800387c <MX_TIM6_Init+0x64>)
 8003864:	f004 fdb8 	bl	80083d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800386e:	f7fe fa89 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200001d4 	.word	0x200001d4
 8003880:	40001000 	.word	0x40001000

08003884 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <HAL_TIM_Base_MspInit+0x38>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10b      	bne.n	80038ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_TIM_Base_MspInit+0x3c>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <HAL_TIM_Base_MspInit+0x3c>)
 800389c:	f043 0310 	orr.w	r3, r3, #16
 80038a0:	6593      	str	r3, [r2, #88]	; 0x58
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_TIM_Base_MspInit+0x3c>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40001000 	.word	0x40001000
 80038c0:	40021000 	.word	0x40021000

080038c4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart5;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80038c8:	4b21      	ldr	r3, [pc, #132]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038ca:	4a22      	ldr	r2, [pc, #136]	; (8003954 <MX_LPUART1_UART_Init+0x90>)
 80038cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80038dc:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80038e2:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038ea:	220c      	movs	r2, #12
 80038ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038f4:	4b16      	ldr	r3, [pc, #88]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 8003902:	2200      	movs	r2, #0
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003906:	4812      	ldr	r0, [pc, #72]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 8003908:	f004 fe3a 	bl	8008580 <HAL_UART_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003912:	f7fe fa37 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003916:	2100      	movs	r1, #0
 8003918:	480d      	ldr	r0, [pc, #52]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 800391a:	f005 fc63 	bl	80091e4 <HAL_UARTEx_SetTxFifoThreshold>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003924:	f7fe fa2e 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003928:	2100      	movs	r1, #0
 800392a:	4809      	ldr	r0, [pc, #36]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 800392c:	f005 fc98 	bl	8009260 <HAL_UARTEx_SetRxFifoThreshold>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003936:	f7fe fa25 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800393a:	4805      	ldr	r0, [pc, #20]	; (8003950 <MX_LPUART1_UART_Init+0x8c>)
 800393c:	f005 fc19 	bl	8009172 <HAL_UARTEx_DisableFifoMode>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003946:	f7fe fa1d 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000220 	.word	0x20000220
 8003954:	40008000 	.word	0x40008000

08003958 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800395c:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <MX_UART5_Init+0x90>)
 800395e:	4a23      	ldr	r2, [pc, #140]	; (80039ec <MX_UART5_Init+0x94>)
 8003960:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003962:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <MX_UART5_Init+0x90>)
 8003964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003968:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800396a:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <MX_UART5_Init+0x90>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <MX_UART5_Init+0x90>)
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003976:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <MX_UART5_Init+0x90>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <MX_UART5_Init+0x90>)
 800397e:	220c      	movs	r2, #12
 8003980:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003982:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <MX_UART5_Init+0x90>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003988:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <MX_UART5_Init+0x90>)
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800398e:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <MX_UART5_Init+0x90>)
 8003990:	2200      	movs	r2, #0
 8003992:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <MX_UART5_Init+0x90>)
 8003996:	2200      	movs	r2, #0
 8003998:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <MX_UART5_Init+0x90>)
 800399c:	2200      	movs	r2, #0
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80039a0:	4811      	ldr	r0, [pc, #68]	; (80039e8 <MX_UART5_Init+0x90>)
 80039a2:	f004 fded 	bl	8008580 <HAL_UART_Init>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80039ac:	f7fe f9ea 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039b0:	2100      	movs	r1, #0
 80039b2:	480d      	ldr	r0, [pc, #52]	; (80039e8 <MX_UART5_Init+0x90>)
 80039b4:	f005 fc16 	bl	80091e4 <HAL_UARTEx_SetTxFifoThreshold>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80039be:	f7fe f9e1 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039c2:	2100      	movs	r1, #0
 80039c4:	4808      	ldr	r0, [pc, #32]	; (80039e8 <MX_UART5_Init+0x90>)
 80039c6:	f005 fc4b 	bl	8009260 <HAL_UARTEx_SetRxFifoThreshold>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80039d0:	f7fe f9d8 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80039d4:	4804      	ldr	r0, [pc, #16]	; (80039e8 <MX_UART5_Init+0x90>)
 80039d6:	f005 fbcc 	bl	8009172 <HAL_UARTEx_DisableFifoMode>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80039e0:	f7fe f9d0 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200002b4 	.word	0x200002b4
 80039ec:	40005000 	.word	0x40005000

080039f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b0a0      	sub	sp, #128	; 0x80
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a08:	f107 031c 	add.w	r3, r7, #28
 8003a0c:	2250      	movs	r2, #80	; 0x50
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f009 f8e3 	bl	800cbdc <memset>
  if(uartHandle->Instance==LPUART1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a4b      	ldr	r2, [pc, #300]	; (8003b48 <HAL_UART_MspInit+0x158>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d137      	bne.n	8003a90 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a20:	2320      	movs	r3, #32
 8003a22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a24:	2300      	movs	r3, #0
 8003a26:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 ffad 	bl	800798c <HAL_RCCEx_PeriphCLKConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a38:	f7fe f9a4 	bl	8001d84 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a3c:	4b43      	ldr	r3, [pc, #268]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003a48:	4b40      	ldr	r3, [pc, #256]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a54:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a58:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a60:	4b3a      	ldr	r3, [pc, #232]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	2302      	movs	r3, #2
 8003a72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a84:	4619      	mov	r1, r3
 8003a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8a:	f002 f959 	bl	8005d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003a8e:	e057      	b.n	8003b40 <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==UART5)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2e      	ldr	r2, [pc, #184]	; (8003b50 <HAL_UART_MspInit+0x160>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d152      	bne.n	8003b40 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aa2:	f107 031c 	add.w	r3, r7, #28
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 ff70 	bl	800798c <HAL_RCCEx_PeriphCLKConfig>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003ab2:	f7fe f967 	bl	8001d84 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ab6:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ada:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003aec:	f043 0308 	orr.w	r3, r3, #8
 8003af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_UART_MspInit+0x15c>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003b10:	2305      	movs	r3, #5
 8003b12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b18:	4619      	mov	r1, r3
 8003b1a:	480e      	ldr	r0, [pc, #56]	; (8003b54 <HAL_UART_MspInit+0x164>)
 8003b1c:	f002 f910 	bl	8005d40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b20:	2304      	movs	r3, #4
 8003b22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b24:	2302      	movs	r3, #2
 8003b26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003b30:	2305      	movs	r3, #5
 8003b32:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4807      	ldr	r0, [pc, #28]	; (8003b58 <HAL_UART_MspInit+0x168>)
 8003b3c:	f002 f900 	bl	8005d40 <HAL_GPIO_Init>
}
 8003b40:	bf00      	nop
 8003b42:	3780      	adds	r7, #128	; 0x80
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40008000 	.word	0x40008000
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40005000 	.word	0x40005000
 8003b54:	48000800 	.word	0x48000800
 8003b58:	48000c00 	.word	0x48000c00

08003b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b5c:	480d      	ldr	r0, [pc, #52]	; (8003b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b60:	f7ff fe48 	bl	80037f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b64:	480c      	ldr	r0, [pc, #48]	; (8003b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b66:	490d      	ldr	r1, [pc, #52]	; (8003b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b68:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <LoopForever+0xe>)
  movs r3, #0
 8003b6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b6c:	e002      	b.n	8003b74 <LoopCopyDataInit>

08003b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b72:	3304      	adds	r3, #4

08003b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b78:	d3f9      	bcc.n	8003b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ba8 <LoopForever+0x16>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b80:	e001      	b.n	8003b86 <LoopFillZerobss>

08003b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b84:	3204      	adds	r2, #4

08003b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b88:	d3fb      	bcc.n	8003b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b8a:	f009 f885 	bl	800cc98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b8e:	f7fe f879 	bl	8001c84 <main>

08003b92 <LoopForever>:

LoopForever:
    b LoopForever
 8003b92:	e7fe      	b.n	8003b92 <LoopForever>
  ldr   r0, =_estack
 8003b94:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b9c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003ba0:	0800d060 	.word	0x0800d060
  ldr r2, =_sbss
 8003ba4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003ba8:	20002ba0 	.word	0x20002ba0

08003bac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bac:	e7fe      	b.n	8003bac <ADC3_IRQHandler>

08003bae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb8:	2003      	movs	r0, #3
 8003bba:	f002 f88e 	bl	8005cda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bbe:	200f      	movs	r0, #15
 8003bc0:	f7ff fd7a 	bl	80036b8 <HAL_InitTick>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	71fb      	strb	r3, [r7, #7]
 8003bce:	e001      	b.n	8003bd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bd0:	f7ff fd48 	bl	8003664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bd4:	79fb      	ldrb	r3, [r7, #7]

}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_IncTick+0x1c>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_IncTick+0x20>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4413      	add	r3, r2
 8003bee:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <HAL_IncTick+0x1c>)
 8003bf0:	6013      	str	r3, [r2, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	20000348 	.word	0x20000348
 8003c00:	20000008 	.word	0x20000008

08003c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return uwTick;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_GetTick+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000348 	.word	0x20000348

08003c1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3360      	adds	r3, #96	; 0x60
 8003c96:	461a      	mov	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <LL_ADC_SetOffset+0x44>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	03fff000 	.word	0x03fff000

08003ccc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3360      	adds	r3, #96	; 0x60
 8003cda:	461a      	mov	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3360      	adds	r3, #96	; 0x60
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3360      	adds	r3, #96	; 0x60
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3360      	adds	r3, #96	; 0x60
 8003d74:	461a      	mov	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	615a      	str	r2, [r3, #20]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b087      	sub	sp, #28
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3330      	adds	r3, #48	; 0x30
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	4413      	add	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	211f      	movs	r1, #31
 8003e12:	fa01 f303 	lsl.w	r3, r1, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	401a      	ands	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	f003 011f 	and.w	r1, r3, #31
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3314      	adds	r3, #20
 8003e74:	461a      	mov	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	0e5b      	lsrs	r3, r3, #25
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	4413      	add	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	0d1b      	lsrs	r3, r3, #20
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2107      	movs	r1, #7
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	401a      	ands	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	0d1b      	lsrs	r3, r3, #20
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f003 0318 	and.w	r3, r3, #24
 8003ede:	4908      	ldr	r1, [pc, #32]	; (8003f00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ee0:	40d9      	lsrs	r1, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	0007ffff 	.word	0x0007ffff

08003f04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 031f 	and.w	r3, r3, #31
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6093      	str	r3, [r2, #8]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f74:	d101      	bne.n	8003f7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003f98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc4:	d101      	bne.n	8003fca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004014:	f043 0202 	orr.w	r2, r3, #2
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <LL_ADC_IsEnabled+0x18>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <LL_ADC_IsEnabled+0x1a>
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d101      	bne.n	8004066 <LL_ADC_IsDisableOngoing+0x18>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <LL_ADC_IsDisableOngoing+0x1a>
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004084:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004088:	f043 0204 	orr.w	r2, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040b0:	f043 0210 	orr.w	r2, r3, #16
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d101      	bne.n	80040dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b08      	cmp	r3, #8
 8004124:	d101      	bne.n	800412a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e19b      	b.n	800448a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fc ff41 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fef1 	bl	8003f60 <LL_ADC_IsDeepPowerDownEnabled>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fed7 	bl	8003f3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff ff0c 	bl	8003fb0 <LL_ADC_IsInternalRegulatorEnabled>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d115      	bne.n	80041ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fef0 	bl	8003f88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041a8:	4b97      	ldr	r3, [pc, #604]	; (8004408 <HAL_ADC_Init+0x2d0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	099b      	lsrs	r3, r3, #6
 80041ae:	4a97      	ldr	r2, [pc, #604]	; (800440c <HAL_ADC_Init+0x2d4>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80041bc:	e002      	b.n	80041c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f9      	bne.n	80041be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff feee 	bl	8003fb0 <LL_ADC_IsInternalRegulatorEnabled>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10d      	bne.n	80041f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041de:	f043 0210 	orr.w	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	f043 0201 	orr.w	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff62 	bl	80040c4 <LL_ADC_REG_IsConversionOngoing>
 8004200:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 8134 	bne.w	8004478 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 8130 	bne.w	8004478 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004220:	f043 0202 	orr.w	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fefb 	bl	8004028 <LL_ADC_IsEnabled>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d137      	bne.n	80042a8 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004240:	d004      	beq.n	800424c <HAL_ADC_Init+0x114>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a72      	ldr	r2, [pc, #456]	; (8004410 <HAL_ADC_Init+0x2d8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10f      	bne.n	800426c <HAL_ADC_Init+0x134>
 800424c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004250:	f7ff feea 	bl	8004028 <LL_ADC_IsEnabled>
 8004254:	4604      	mov	r4, r0
 8004256:	486e      	ldr	r0, [pc, #440]	; (8004410 <HAL_ADC_Init+0x2d8>)
 8004258:	f7ff fee6 	bl	8004028 <LL_ADC_IsEnabled>
 800425c:	4603      	mov	r3, r0
 800425e:	4323      	orrs	r3, r4
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e008      	b.n	800427e <HAL_ADC_Init+0x146>
 800426c:	4869      	ldr	r0, [pc, #420]	; (8004414 <HAL_ADC_Init+0x2dc>)
 800426e:	f7ff fedb 	bl	8004028 <LL_ADC_IsEnabled>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d012      	beq.n	80042a8 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800428a:	d004      	beq.n	8004296 <HAL_ADC_Init+0x15e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a5f      	ldr	r2, [pc, #380]	; (8004410 <HAL_ADC_Init+0x2d8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <HAL_ADC_Init+0x162>
 8004296:	4a60      	ldr	r2, [pc, #384]	; (8004418 <HAL_ADC_Init+0x2e0>)
 8004298:	e000      	b.n	800429c <HAL_ADC_Init+0x164>
 800429a:	4a60      	ldr	r2, [pc, #384]	; (800441c <HAL_ADC_Init+0x2e4>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f7ff fcba 	bl	8003c1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	7f5b      	ldrb	r3, [r3, #29]
 80042ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80042b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80042be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d106      	bne.n	80042e4 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	3b01      	subs	r3, #1
 80042dc:	045b      	lsls	r3, r3, #17
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <HAL_ADC_Init+0x2e8>)
 8004308:	4013      	ands	r3, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	430b      	orrs	r3, r1
 8004312:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff feef 	bl	8004112 <LL_ADC_INJ_IsConversionOngoing>
 8004334:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d17b      	bne.n	8004434 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d178      	bne.n	8004434 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004346:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800434e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435e:	f023 0302 	bic.w	r3, r3, #2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	430b      	orrs	r3, r1
 800436a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004382:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800438c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6911      	ldr	r1, [r2, #16]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	430b      	orrs	r3, r1
 800439e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80043a2:	e013      	b.n	80043cc <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80043c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d126      	bne.n	8004424 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043ec:	4311      	orrs	r1, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043f8:	430a      	orrs	r2, r1
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	611a      	str	r2, [r3, #16]
 8004406:	e015      	b.n	8004434 <HAL_ADC_Init+0x2fc>
 8004408:	20000000 	.word	0x20000000
 800440c:	053e2d63 	.word	0x053e2d63
 8004410:	50000100 	.word	0x50000100
 8004414:	50000400 	.word	0x50000400
 8004418:	50000300 	.word	0x50000300
 800441c:	50000700 	.word	0x50000700
 8004420:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10c      	bne.n	8004456 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f023 010f 	bic.w	r1, r3, #15
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	1e5a      	subs	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
 8004454:	e007      	b.n	8004466 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 020f 	bic.w	r2, r2, #15
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	65da      	str	r2, [r3, #92]	; 0x5c
 8004476:	e007      	b.n	8004488 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	f043 0210 	orr.w	r2, r3, #16
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004488:	7ffb      	ldrb	r3, [r7, #31]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3724      	adds	r7, #36	; 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	bf00      	nop

08004494 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044a4:	d004      	beq.n	80044b0 <HAL_ADC_Start+0x1c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a5c      	ldr	r2, [pc, #368]	; (800461c <HAL_ADC_Start+0x188>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_ADC_Start+0x20>
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_ADC_Start+0x18c>)
 80044b2:	e000      	b.n	80044b6 <HAL_ADC_Start+0x22>
 80044b4:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <HAL_ADC_Start+0x190>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fd24 	bl	8003f04 <LL_ADC_GetMultimode>
 80044bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fdfe 	bl	80040c4 <LL_ADC_REG_IsConversionOngoing>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 809f 	bne.w	800460e <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_ADC_Start+0x4a>
 80044da:	2302      	movs	r3, #2
 80044dc:	e09a      	b.n	8004614 <HAL_ADC_Start+0x180>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 f914 	bl	8005714 <ADC_Enable>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 8086 	bne.w	8004604 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a42      	ldr	r2, [pc, #264]	; (800461c <HAL_ADC_Start+0x188>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d002      	beq.n	800451c <HAL_ADC_Start+0x88>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	e001      	b.n	8004520 <HAL_ADC_Start+0x8c>
 800451c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	4293      	cmp	r3, r2
 8004526:	d002      	beq.n	800452e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	d106      	bne.n	8004556 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454c:	f023 0206 	bic.w	r2, r3, #6
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
 8004554:	e002      	b.n	800455c <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	221c      	movs	r2, #28
 8004562:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2a      	ldr	r2, [pc, #168]	; (800461c <HAL_ADC_Start+0x188>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d002      	beq.n	800457c <HAL_ADC_Start+0xe8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	e001      	b.n	8004580 <HAL_ADC_Start+0xec>
 800457c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	4293      	cmp	r3, r2
 8004586:	d008      	beq.n	800459a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b05      	cmp	r3, #5
 8004592:	d002      	beq.n	800459a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b09      	cmp	r3, #9
 8004598:	d114      	bne.n	80045c4 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fd59 	bl	8004074 <LL_ADC_REG_StartConversion>
 80045c2:	e026      	b.n	8004612 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <HAL_ADC_Start+0x188>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d002      	beq.n	80045e0 <HAL_ADC_Start+0x14c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	e001      	b.n	80045e4 <HAL_ADC_Start+0x150>
 80045e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00f      	beq.n	8004612 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	65da      	str	r2, [r3, #92]	; 0x5c
 8004602:	e006      	b.n	8004612 <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800460c:	e001      	b.n	8004612 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800460e:	2302      	movs	r3, #2
 8004610:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004612:	7dfb      	ldrb	r3, [r7, #23]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	50000100 	.word	0x50000100
 8004620:	50000300 	.word	0x50000300
 8004624:	50000700 	.word	0x50000700

08004628 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_ADC_Stop+0x16>
 800463a:	2302      	movs	r3, #2
 800463c:	e023      	b.n	8004686 <HAL_ADC_Stop+0x5e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004646:	2103      	movs	r1, #3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 ffa7 	bl	800559c <ADC_ConversionStop>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d111      	bne.n	800467c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f001 f8f1 	bl	8005840 <ADC_Disable>
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	f043 0201 	orr.w	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046a2:	d004      	beq.n	80046ae <HAL_ADC_PollForConversion+0x1e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a70      	ldr	r2, [pc, #448]	; (800486c <HAL_ADC_PollForConversion+0x1dc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_ADC_PollForConversion+0x22>
 80046ae:	4b70      	ldr	r3, [pc, #448]	; (8004870 <HAL_ADC_PollForConversion+0x1e0>)
 80046b0:	e000      	b.n	80046b4 <HAL_ADC_PollForConversion+0x24>
 80046b2:	4b70      	ldr	r3, [pc, #448]	; (8004874 <HAL_ADC_PollForConversion+0x1e4>)
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fc25 	bl	8003f04 <LL_ADC_GetMultimode>
 80046ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d102      	bne.n	80046ca <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80046c4:	2308      	movs	r3, #8
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e037      	b.n	800473a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d002      	beq.n	80046dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b09      	cmp	r3, #9
 80046da:	d111      	bne.n	8004700 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0b3      	b.n	8004862 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80046fa:	2304      	movs	r3, #4
 80046fc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80046fe:	e01c      	b.n	800473a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004708:	d004      	beq.n	8004714 <HAL_ADC_PollForConversion+0x84>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a57      	ldr	r2, [pc, #348]	; (800486c <HAL_ADC_PollForConversion+0x1dc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_ADC_PollForConversion+0x88>
 8004714:	4b56      	ldr	r3, [pc, #344]	; (8004870 <HAL_ADC_PollForConversion+0x1e0>)
 8004716:	e000      	b.n	800471a <HAL_ADC_PollForConversion+0x8a>
 8004718:	4b56      	ldr	r3, [pc, #344]	; (8004874 <HAL_ADC_PollForConversion+0x1e4>)
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fc00 	bl	8003f20 <LL_ADC_GetMultiDMATransfer>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e095      	b.n	8004862 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004736:	2304      	movs	r3, #4
 8004738:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800473a:	f7ff fa63 	bl	8003c04 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004740:	e021      	b.n	8004786 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d01d      	beq.n	8004786 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800474a:	f7ff fa5b 	bl	8003c04 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <HAL_ADC_PollForConversion+0xd0>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d112      	bne.n	8004786 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004772:	f043 0204 	orr.w	r2, r3, #4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e06d      	b.n	8004862 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0d6      	beq.n	8004742 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004798:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fb0b 	bl	8003dc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01c      	beq.n	80047ea <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	7f5b      	ldrb	r3, [r3, #29]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d118      	bne.n	80047ea <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d111      	bne.n	80047ea <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1f      	ldr	r2, [pc, #124]	; (800486c <HAL_ADC_PollForConversion+0x1dc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d002      	beq.n	80047fa <HAL_ADC_PollForConversion+0x16a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	e001      	b.n	80047fe <HAL_ADC_PollForConversion+0x16e>
 80047fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	4293      	cmp	r3, r2
 8004804:	d008      	beq.n	8004818 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b05      	cmp	r3, #5
 8004810:	d002      	beq.n	8004818 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b09      	cmp	r3, #9
 8004816:	d104      	bne.n	8004822 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e00d      	b.n	800483e <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a11      	ldr	r2, [pc, #68]	; (800486c <HAL_ADC_PollForConversion+0x1dc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d002      	beq.n	8004832 <HAL_ADC_PollForConversion+0x1a2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	e001      	b.n	8004836 <HAL_ADC_PollForConversion+0x1a6>
 8004832:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004836:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d104      	bne.n	800484e <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2208      	movs	r2, #8
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e008      	b.n	8004860 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	220c      	movs	r2, #12
 800485e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	50000100 	.word	0x50000100
 8004870:	50000300 	.word	0x50000300
 8004874:	50000700 	.word	0x50000700

08004878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800489c:	2300      	movs	r3, #0
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048b8:	d004      	beq.n	80048c4 <HAL_ADC_IRQHandler+0x30>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a87      	ldr	r2, [pc, #540]	; (8004adc <HAL_ADC_IRQHandler+0x248>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_ADC_IRQHandler+0x34>
 80048c4:	4b86      	ldr	r3, [pc, #536]	; (8004ae0 <HAL_ADC_IRQHandler+0x24c>)
 80048c6:	e000      	b.n	80048ca <HAL_ADC_IRQHandler+0x36>
 80048c8:	4b86      	ldr	r3, [pc, #536]	; (8004ae4 <HAL_ADC_IRQHandler+0x250>)
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fb1a 	bl	8003f04 <LL_ADC_GetMultimode>
 80048d0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d017      	beq.n	800490c <HAL_ADC_IRQHandler+0x78>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d012      	beq.n	800490c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d105      	bne.n	80048fe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f001 f84b 	bl	800599a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2202      	movs	r2, #2
 800490a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d004      	beq.n	8004920 <HAL_ADC_IRQHandler+0x8c>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8085 	beq.w	8004a36 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d07f      	beq.n	8004a36 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d105      	bne.n	800494e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004946:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fa34 	bl	8003dc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d064      	beq.n	8004a28 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <HAL_ADC_IRQHandler+0x248>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d002      	beq.n	800496e <HAL_ADC_IRQHandler+0xda>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	e001      	b.n	8004972 <HAL_ADC_IRQHandler+0xde>
 800496e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	4293      	cmp	r3, r2
 8004978:	d008      	beq.n	800498c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b05      	cmp	r3, #5
 8004984:	d002      	beq.n	800498c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b09      	cmp	r3, #9
 800498a:	d104      	bne.n	8004996 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	e00d      	b.n	80049b2 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a50      	ldr	r2, [pc, #320]	; (8004adc <HAL_ADC_IRQHandler+0x248>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d002      	beq.n	80049a6 <HAL_ADC_IRQHandler+0x112>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	e001      	b.n	80049aa <HAL_ADC_IRQHandler+0x116>
 80049a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049aa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d135      	bne.n	8004a28 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d12e      	bne.n	8004a28 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fb78 	bl	80040c4 <LL_ADC_REG_IsConversionOngoing>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d11a      	bne.n	8004a10 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 020c 	bic.w	r2, r2, #12
 80049e8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d112      	bne.n	8004a28 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a0e:	e00b      	b.n	8004a28 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a14:	f043 0210 	orr.w	r2, r3, #16
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	f043 0201 	orr.w	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f96d 	bl	8004d08 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	220c      	movs	r2, #12
 8004a34:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <HAL_ADC_IRQHandler+0x1b6>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a1 	beq.w	8004b98 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 809b 	beq.w	8004b98 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff f9dd 	bl	8003e3e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004a84:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff f998 	bl	8003dc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a90:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a11      	ldr	r2, [pc, #68]	; (8004adc <HAL_ADC_IRQHandler+0x248>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d002      	beq.n	8004aa2 <HAL_ADC_IRQHandler+0x20e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	e001      	b.n	8004aa6 <HAL_ADC_IRQHandler+0x212>
 8004aa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d008      	beq.n	8004ac0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d002      	beq.n	8004ac0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d104      	bne.n	8004aca <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	623b      	str	r3, [r7, #32]
 8004ac8:	e014      	b.n	8004af4 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a03      	ldr	r2, [pc, #12]	; (8004adc <HAL_ADC_IRQHandler+0x248>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_ADC_IRQHandler+0x254>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	e008      	b.n	8004aec <HAL_ADC_IRQHandler+0x258>
 8004ada:	bf00      	nop
 8004adc:	50000100 	.word	0x50000100
 8004ae0:	50000300 	.word	0x50000300
 8004ae4:	50000700 	.word	0x50000700
 8004ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004aec:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d047      	beq.n	8004b8a <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <HAL_ADC_IRQHandler+0x280>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d03f      	beq.n	8004b8a <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d13a      	bne.n	8004b8a <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d133      	bne.n	8004b8a <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d12e      	bne.n	8004b8a <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff faee 	bl	8004112 <LL_ADC_INJ_IsConversionOngoing>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d11a      	bne.n	8004b72 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b4a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d112      	bne.n	8004b8a <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	f043 0201 	orr.w	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b70:	e00b      	b.n	8004b8a <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fedd 	bl	800594a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2260      	movs	r2, #96	; 0x60
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_ADC_IRQHandler+0x332>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f8af 	bl	8004d1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d012      	beq.n	8004bf6 <HAL_ADC_IRQHandler+0x362>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fec3 	bl	8005972 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bf4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d012      	beq.n	8004c26 <HAL_ADC_IRQHandler+0x392>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 feb5 	bl	8005986 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d043      	beq.n	8004cb8 <HAL_ADC_IRQHandler+0x424>
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f003 0310 	and.w	r3, r3, #16
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03e      	beq.n	8004cb8 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8004c42:	2301      	movs	r3, #1
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
 8004c46:	e021      	b.n	8004c8c <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d015      	beq.n	8004c7a <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c56:	d004      	beq.n	8004c62 <HAL_ADC_IRQHandler+0x3ce>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a27      	ldr	r2, [pc, #156]	; (8004cfc <HAL_ADC_IRQHandler+0x468>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_ADC_IRQHandler+0x3d2>
 8004c62:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <HAL_ADC_IRQHandler+0x46c>)
 8004c64:	e000      	b.n	8004c68 <HAL_ADC_IRQHandler+0x3d4>
 8004c66:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <HAL_ADC_IRQHandler+0x470>)
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff f959 	bl	8003f20 <LL_ADC_GetMultiDMATransfer>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8004c74:	2301      	movs	r3, #1
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
 8004c78:	e008      	b.n	8004c8c <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10e      	bne.n	8004cb0 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca2:	f043 0202 	orr.w	r2, r3, #2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f840 	bl	8004d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <HAL_ADC_IRQHandler+0x460>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cdc:	f043 0208 	orr.w	r2, r3, #8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fe35 	bl	800595e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004cf4:	bf00      	nop
 8004cf6:	3728      	adds	r7, #40	; 0x28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	50000100 	.word	0x50000100
 8004d00:	50000300 	.word	0x50000300
 8004d04:	50000700 	.word	0x50000700

08004d08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0b6      	sub	sp, #216	; 0xd8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d102      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x24>
 8004d62:	2302      	movs	r3, #2
 8004d64:	f000 bc04 	b.w	8005570 <HAL_ADC_ConfigChannel+0x82c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff f9a5 	bl	80040c4 <LL_ADC_REG_IsConversionOngoing>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 83e8 	bne.w	8005552 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f7ff f829 	bl	8003de6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff f993 	bl	80040c4 <LL_ADC_REG_IsConversionOngoing>
 8004d9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff f9b3 	bl	8004112 <LL_ADC_INJ_IsConversionOngoing>
 8004dac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004db0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 81d9 	bne.w	800516c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 81d4 	bne.w	800516c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dcc:	d10f      	bne.n	8004dee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f7ff f843 	bl	8003e64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe ffd7 	bl	8003d9a <LL_ADC_SetSamplingTimeCommonConfig>
 8004dec:	e00e      	b.n	8004e0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6819      	ldr	r1, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f7ff f832 	bl	8003e64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe ffc7 	bl	8003d9a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	08db      	lsrs	r3, r3, #3
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d022      	beq.n	8004e74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6919      	ldr	r1, [r3, #16]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e3e:	f7fe ff21 	bl	8003c84 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6919      	ldr	r1, [r3, #16]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7fe ff6d 	bl	8003d2e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d102      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x126>
 8004e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e68:	e000      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x128>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f7fe ff79 	bl	8003d64 <LL_ADC_SetOffsetSaturation>
 8004e72:	e17b      	b.n	800516c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe ff26 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x15c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe ff1b 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 8004e96:	4603      	mov	r3, r0
 8004e98:	0e9b      	lsrs	r3, r3, #26
 8004e9a:	f003 021f 	and.w	r2, r3, #31
 8004e9e:	e01e      	b.n	8004ede <HAL_ADC_ConfigChannel+0x19a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe ff10 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004eb6:	fa93 f3a3 	rbit	r3, r3
 8004eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ec6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004ece:	2320      	movs	r3, #32
 8004ed0:	e004      	b.n	8004edc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ed6:	fab3 f383 	clz	r3, r3
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x1b2>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	0e9b      	lsrs	r3, r3, #26
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	e018      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x1e4>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f02:	fa93 f3a3 	rbit	r3, r3
 8004f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004f12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	e004      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004f1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d106      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fedf 	bl	8003cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2101      	movs	r1, #1
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe fec3 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x222>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2101      	movs	r1, #1
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe feb8 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	0e9b      	lsrs	r3, r3, #26
 8004f60:	f003 021f 	and.w	r2, r3, #31
 8004f64:	e01e      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x260>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fe fead 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f7c:	fa93 f3a3 	rbit	r3, r3
 8004f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004f84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004f8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004f94:	2320      	movs	r3, #32
 8004f96:	e004      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f9c:	fab3 f383 	clz	r3, r3
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x278>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	0e9b      	lsrs	r3, r3, #26
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	e018      	b.n	8004fee <HAL_ADC_ConfigChannel+0x2aa>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fc8:	fa93 f3a3 	rbit	r3, r3
 8004fcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	e004      	b.n	8004fee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d106      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fe7c 	bl	8003cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2102      	movs	r1, #2
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fe60 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 800500c:	4603      	mov	r3, r0
 800500e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <HAL_ADC_ConfigChannel+0x2e8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2102      	movs	r1, #2
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fe55 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 8005022:	4603      	mov	r3, r0
 8005024:	0e9b      	lsrs	r3, r3, #26
 8005026:	f003 021f 	and.w	r2, r3, #31
 800502a:	e01e      	b.n	800506a <HAL_ADC_ConfigChannel+0x326>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2102      	movs	r1, #2
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fe4a 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 8005038:	4603      	mov	r3, r0
 800503a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005042:	fa93 f3a3 	rbit	r3, r3
 8005046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800504a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800504e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005052:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800505a:	2320      	movs	r3, #32
 800505c:	e004      	b.n	8005068 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800505e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005062:	fab3 f383 	clz	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005072:	2b00      	cmp	r3, #0
 8005074:	d105      	bne.n	8005082 <HAL_ADC_ConfigChannel+0x33e>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	0e9b      	lsrs	r3, r3, #26
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	e016      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x36c>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005096:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800509a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80050a2:	2320      	movs	r3, #32
 80050a4:	e004      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80050a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050aa:	fab3 f383 	clz	r3, r3
 80050ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d106      	bne.n	80050c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2102      	movs	r1, #2
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe fe1b 	bl	8003cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2103      	movs	r1, #3
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fdff 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <HAL_ADC_ConfigChannel+0x3aa>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2103      	movs	r1, #3
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fdf4 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 80050e4:	4603      	mov	r3, r0
 80050e6:	0e9b      	lsrs	r3, r3, #26
 80050e8:	f003 021f 	and.w	r2, r3, #31
 80050ec:	e017      	b.n	800511e <HAL_ADC_ConfigChannel+0x3da>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2103      	movs	r1, #3
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fe fde9 	bl	8003ccc <LL_ADC_GetOffsetChannel>
 80050fa:	4603      	mov	r3, r0
 80050fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005100:	fa93 f3a3 	rbit	r3, r3
 8005104:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005108:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800510a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005110:	2320      	movs	r3, #32
 8005112:	e003      	b.n	800511c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005116:	fab3 f383 	clz	r3, r3
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005126:	2b00      	cmp	r3, #0
 8005128:	d105      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x3f2>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	0e9b      	lsrs	r3, r3, #26
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	e011      	b.n	800515a <HAL_ADC_ConfigChannel+0x416>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800513e:	fa93 f3a3 	rbit	r3, r3
 8005142:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005146:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800514e:	2320      	movs	r3, #32
 8005150:	e003      	b.n	800515a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	fab3 f383 	clz	r3, r3
 8005158:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800515a:	429a      	cmp	r2, r3
 800515c:	d106      	bne.n	800516c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	2103      	movs	r1, #3
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fdc6 	bl	8003cf8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe ff59 	bl	8004028 <LL_ADC_IsEnabled>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 813d 	bne.w	80053f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	461a      	mov	r2, r3
 800518c:	f7fe fe96 	bl	8003ebc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4aa2      	ldr	r2, [pc, #648]	; (8005420 <HAL_ADC_ConfigChannel+0x6dc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	f040 812e 	bne.w	80053f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x480>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	0e9b      	lsrs	r3, r3, #26
 80051b2:	3301      	adds	r3, #1
 80051b4:	f003 031f 	and.w	r3, r3, #31
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	bf94      	ite	ls
 80051bc:	2301      	movls	r3, #1
 80051be:	2300      	movhi	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e019      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x4b4>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80051d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80051d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80051dc:	2320      	movs	r3, #32
 80051de:	e003      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80051e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051e2:	fab3 f383 	clz	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2b09      	cmp	r3, #9
 80051f0:	bf94      	ite	ls
 80051f2:	2301      	movls	r3, #1
 80051f4:	2300      	movhi	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d079      	beq.n	80052f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x4d4>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	0e9b      	lsrs	r3, r3, #26
 800520e:	3301      	adds	r3, #1
 8005210:	069b      	lsls	r3, r3, #26
 8005212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005216:	e015      	b.n	8005244 <HAL_ADC_ConfigChannel+0x500>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005228:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800522a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005230:	2320      	movs	r3, #32
 8005232:	e003      	b.n	800523c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	3301      	adds	r3, #1
 800523e:	069b      	lsls	r3, r3, #26
 8005240:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_ADC_ConfigChannel+0x520>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	3301      	adds	r3, #1
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	e017      	b.n	8005294 <HAL_ADC_ConfigChannel+0x550>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526c:	fa93 f3a3 	rbit	r3, r3
 8005270:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800527c:	2320      	movs	r3, #32
 800527e:	e003      	b.n	8005288 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005282:	fab3 f383 	clz	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3301      	adds	r3, #1
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	ea42 0103 	orr.w	r1, r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x576>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	0e9b      	lsrs	r3, r3, #26
 80052aa:	3301      	adds	r3, #1
 80052ac:	f003 021f 	and.w	r2, r3, #31
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	051b      	lsls	r3, r3, #20
 80052b8:	e018      	b.n	80052ec <HAL_ADC_ConfigChannel+0x5a8>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	fa93 f3a3 	rbit	r3, r3
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80052cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80052d2:	2320      	movs	r3, #32
 80052d4:	e003      	b.n	80052de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80052d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d8:	fab3 f383 	clz	r3, r3
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	3301      	adds	r3, #1
 80052e0:	f003 021f 	and.w	r2, r3, #31
 80052e4:	4613      	mov	r3, r2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	4413      	add	r3, r2
 80052ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052ec:	430b      	orrs	r3, r1
 80052ee:	e07e      	b.n	80053ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d107      	bne.n	800530c <HAL_ADC_ConfigChannel+0x5c8>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	0e9b      	lsrs	r3, r3, #26
 8005302:	3301      	adds	r3, #1
 8005304:	069b      	lsls	r3, r3, #26
 8005306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800530a:	e015      	b.n	8005338 <HAL_ADC_ConfigChannel+0x5f4>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005324:	2320      	movs	r3, #32
 8005326:	e003      	b.n	8005330 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	fab3 f383 	clz	r3, r3
 800532e:	b2db      	uxtb	r3, r3
 8005330:	3301      	adds	r3, #1
 8005332:	069b      	lsls	r3, r3, #26
 8005334:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x614>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0e9b      	lsrs	r3, r3, #26
 800534a:	3301      	adds	r3, #1
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2101      	movs	r1, #1
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	e017      	b.n	8005388 <HAL_ADC_ConfigChannel+0x644>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	fa93 f3a3 	rbit	r3, r3
 8005364:	61fb      	str	r3, [r7, #28]
  return result;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005370:	2320      	movs	r3, #32
 8005372:	e003      	b.n	800537c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	fab3 f383 	clz	r3, r3
 800537a:	b2db      	uxtb	r3, r3
 800537c:	3301      	adds	r3, #1
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2101      	movs	r1, #1
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	ea42 0103 	orr.w	r1, r2, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x670>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	0e9b      	lsrs	r3, r3, #26
 800539e:	3301      	adds	r3, #1
 80053a0:	f003 021f 	and.w	r2, r3, #31
 80053a4:	4613      	mov	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	3b1e      	subs	r3, #30
 80053ac:	051b      	lsls	r3, r3, #20
 80053ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053b2:	e01b      	b.n	80053ec <HAL_ADC_ConfigChannel+0x6a8>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	fa93 f3a3 	rbit	r3, r3
 80053c0:	613b      	str	r3, [r7, #16]
  return result;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80053cc:	2320      	movs	r3, #32
 80053ce:	e003      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	fab3 f383 	clz	r3, r3
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	3301      	adds	r3, #1
 80053da:	f003 021f 	and.w	r2, r3, #31
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	3b1e      	subs	r3, #30
 80053e6:	051b      	lsls	r3, r3, #20
 80053e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7fe fd36 	bl	8003e64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <HAL_ADC_ConfigChannel+0x6e0>)
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80af 	beq.w	8005564 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800540e:	d004      	beq.n	800541a <HAL_ADC_ConfigChannel+0x6d6>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <HAL_ADC_ConfigChannel+0x6e4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10a      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x6ec>
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <HAL_ADC_ConfigChannel+0x6e8>)
 800541c:	e009      	b.n	8005432 <HAL_ADC_ConfigChannel+0x6ee>
 800541e:	bf00      	nop
 8005420:	407f0000 	.word	0x407f0000
 8005424:	80080000 	.word	0x80080000
 8005428:	50000100 	.word	0x50000100
 800542c:	50000300 	.word	0x50000300
 8005430:	4b51      	ldr	r3, [pc, #324]	; (8005578 <HAL_ADC_ConfigChannel+0x834>)
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fc18 	bl	8003c68 <LL_ADC_GetCommonPathInternalCh>
 8005438:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a4e      	ldr	r2, [pc, #312]	; (800557c <HAL_ADC_ConfigChannel+0x838>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_ADC_ConfigChannel+0x70c>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a4d      	ldr	r2, [pc, #308]	; (8005580 <HAL_ADC_ConfigChannel+0x83c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d134      	bne.n	80054ba <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d12e      	bne.n	80054ba <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005464:	d17e      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800546e:	d004      	beq.n	800547a <HAL_ADC_ConfigChannel+0x736>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a43      	ldr	r2, [pc, #268]	; (8005584 <HAL_ADC_ConfigChannel+0x840>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_ADC_ConfigChannel+0x73a>
 800547a:	4a43      	ldr	r2, [pc, #268]	; (8005588 <HAL_ADC_ConfigChannel+0x844>)
 800547c:	e000      	b.n	8005480 <HAL_ADC_ConfigChannel+0x73c>
 800547e:	4a3e      	ldr	r2, [pc, #248]	; (8005578 <HAL_ADC_ConfigChannel+0x834>)
 8005480:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f7fe fbd9 	bl	8003c42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005490:	4b3e      	ldr	r3, [pc, #248]	; (800558c <HAL_ADC_ConfigChannel+0x848>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	4a3e      	ldr	r2, [pc, #248]	; (8005590 <HAL_ADC_ConfigChannel+0x84c>)
 8005498:	fba2 2303 	umull	r2, r3, r2, r3
 800549c:	099b      	lsrs	r3, r3, #6
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	4613      	mov	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054aa:	e002      	b.n	80054b2 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f9      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054b8:	e054      	b.n	8005564 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a35      	ldr	r2, [pc, #212]	; (8005594 <HAL_ADC_ConfigChannel+0x850>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d120      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d11a      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054d8:	d144      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054e2:	d004      	beq.n	80054ee <HAL_ADC_ConfigChannel+0x7aa>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_ADC_ConfigChannel+0x840>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x7ae>
 80054ee:	4a26      	ldr	r2, [pc, #152]	; (8005588 <HAL_ADC_ConfigChannel+0x844>)
 80054f0:	e000      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x7b0>
 80054f2:	4a21      	ldr	r2, [pc, #132]	; (8005578 <HAL_ADC_ConfigChannel+0x834>)
 80054f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f7fe fb9f 	bl	8003c42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005504:	e02e      	b.n	8005564 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a23      	ldr	r2, [pc, #140]	; (8005598 <HAL_ADC_ConfigChannel+0x854>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d129      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d123      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a18      	ldr	r2, [pc, #96]	; (8005584 <HAL_ADC_ConfigChannel+0x840>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01e      	beq.n	8005564 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800552e:	d004      	beq.n	800553a <HAL_ADC_ConfigChannel+0x7f6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <HAL_ADC_ConfigChannel+0x840>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <HAL_ADC_ConfigChannel+0x7fa>
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <HAL_ADC_ConfigChannel+0x844>)
 800553c:	e000      	b.n	8005540 <HAL_ADC_ConfigChannel+0x7fc>
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <HAL_ADC_ConfigChannel+0x834>)
 8005540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005544:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7fe fb79 	bl	8003c42 <LL_ADC_SetCommonPathInternalCh>
 8005550:	e008      	b.n	8005564 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800556c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005570:	4618      	mov	r0, r3
 8005572:	37d8      	adds	r7, #216	; 0xd8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	50000700 	.word	0x50000700
 800557c:	c3210000 	.word	0xc3210000
 8005580:	90c00010 	.word	0x90c00010
 8005584:	50000100 	.word	0x50000100
 8005588:	50000300 	.word	0x50000300
 800558c:	20000000 	.word	0x20000000
 8005590:	053e2d63 	.word	0x053e2d63
 8005594:	c7520000 	.word	0xc7520000
 8005598:	cb840000 	.word	0xcb840000

0800559c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fd86 	bl	80040c4 <LL_ADC_REG_IsConversionOngoing>
 80055b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fda7 	bl	8004112 <LL_ADC_INJ_IsConversionOngoing>
 80055c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d103      	bne.n	80055d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8098 	beq.w	8005704 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d02a      	beq.n	8005638 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	7f5b      	ldrb	r3, [r3, #29]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d126      	bne.n	8005638 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	7f1b      	ldrb	r3, [r3, #28]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d122      	bne.n	8005638 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80055f2:	2301      	movs	r3, #1
 80055f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80055f6:	e014      	b.n	8005622 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4a45      	ldr	r2, [pc, #276]	; (8005710 <ADC_ConversionStop+0x174>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d90d      	bls.n	800561c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005604:	f043 0210 	orr.w	r2, r3, #16
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	f043 0201 	orr.w	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e074      	b.n	8005706 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	3301      	adds	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d1e3      	bne.n	80055f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2240      	movs	r2, #64	; 0x40
 8005636:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d014      	beq.n	8005668 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fd3e 	bl	80040c4 <LL_ADC_REG_IsConversionOngoing>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fcfb 	bl	800404e <LL_ADC_IsDisableOngoing>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe fd1a 	bl	800409c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d014      	beq.n	8005698 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe fd4d 	bl	8004112 <LL_ADC_INJ_IsConversionOngoing>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fce3 	bl	800404e <LL_ADC_IsDisableOngoing>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fd29 	bl	80040ea <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d005      	beq.n	80056aa <ADC_ConversionStop+0x10e>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d105      	bne.n	80056b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80056a4:	230c      	movs	r3, #12
 80056a6:	617b      	str	r3, [r7, #20]
        break;
 80056a8:	e005      	b.n	80056b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80056aa:	2308      	movs	r3, #8
 80056ac:	617b      	str	r3, [r7, #20]
        break;
 80056ae:	e002      	b.n	80056b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80056b0:	2304      	movs	r3, #4
 80056b2:	617b      	str	r3, [r7, #20]
        break;
 80056b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80056b6:	f7fe faa5 	bl	8003c04 <HAL_GetTick>
 80056ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80056bc:	e01b      	b.n	80056f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80056be:	f7fe faa1 	bl	8003c04 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d914      	bls.n	80056f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	f043 0210 	orr.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e007      	b.n	8005706 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	4013      	ands	r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1dc      	bne.n	80056be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	a33fffff 	.word	0xa33fffff

08005714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800571c:	2300      	movs	r3, #0
 800571e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe fc7f 	bl	8004028 <LL_ADC_IsEnabled>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d176      	bne.n	800581e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <ADC_Enable+0x114>)
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005742:	f043 0210 	orr.w	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574e:	f043 0201 	orr.w	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e062      	b.n	8005820 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fc3a 	bl	8003fd8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800576c:	d004      	beq.n	8005778 <ADC_Enable+0x64>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2e      	ldr	r2, [pc, #184]	; (800582c <ADC_Enable+0x118>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <ADC_Enable+0x68>
 8005778:	4b2d      	ldr	r3, [pc, #180]	; (8005830 <ADC_Enable+0x11c>)
 800577a:	e000      	b.n	800577e <ADC_Enable+0x6a>
 800577c:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <ADC_Enable+0x120>)
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe fa72 	bl	8003c68 <LL_ADC_GetCommonPathInternalCh>
 8005784:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800578a:	2b00      	cmp	r3, #0
 800578c:	d013      	beq.n	80057b6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800578e:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <ADC_Enable+0x124>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	099b      	lsrs	r3, r3, #6
 8005794:	4a29      	ldr	r2, [pc, #164]	; (800583c <ADC_Enable+0x128>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	099b      	lsrs	r3, r3, #6
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80057a8:	e002      	b.n	80057b0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f9      	bne.n	80057aa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80057b6:	f7fe fa25 	bl	8003c04 <HAL_GetTick>
 80057ba:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057bc:	e028      	b.n	8005810 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fc30 	bl	8004028 <LL_ADC_IsEnabled>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fc00 	bl	8003fd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057d8:	f7fe fa14 	bl	8003c04 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d914      	bls.n	8005810 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d00d      	beq.n	8005810 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f8:	f043 0210 	orr.w	r2, r3, #16
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005804:	f043 0201 	orr.w	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d1cf      	bne.n	80057be <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	8000003f 	.word	0x8000003f
 800582c:	50000100 	.word	0x50000100
 8005830:	50000300 	.word	0x50000300
 8005834:	50000700 	.word	0x50000700
 8005838:	20000000 	.word	0x20000000
 800583c:	053e2d63 	.word	0x053e2d63

08005840 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe fbfe 	bl	800404e <LL_ADC_IsDisableOngoing>
 8005852:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fbe5 	bl	8004028 <LL_ADC_IsEnabled>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d047      	beq.n	80058f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d144      	bne.n	80058f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 030d 	and.w	r3, r3, #13
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10c      	bne.n	8005892 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fbbf 	bl	8004000 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2203      	movs	r2, #3
 8005888:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800588a:	f7fe f9bb 	bl	8003c04 <HAL_GetTick>
 800588e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005890:	e029      	b.n	80058e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005896:	f043 0210 	orr.w	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e023      	b.n	80058f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80058ae:	f7fe f9a9 	bl	8003c04 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d914      	bls.n	80058e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00d      	beq.n	80058e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ce:	f043 0210 	orr.w	r2, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058da:	f043 0201 	orr.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e007      	b.n	80058f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1dc      	bne.n	80058ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <LL_ADC_IsEnabled>:
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <LL_ADC_IsEnabled+0x18>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <LL_ADC_IsEnabled+0x1a>
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <LL_ADC_REG_IsConversionOngoing>:
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b04      	cmp	r3, #4
 8005936:	d101      	bne.n	800593c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b0a1      	sub	sp, #132	; 0x84
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e0cb      	b.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80059d6:	2300      	movs	r3, #0
 80059d8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80059da:	2300      	movs	r3, #0
 80059dc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059e6:	d102      	bne.n	80059ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80059e8:	4b61      	ldr	r3, [pc, #388]	; (8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	e001      	b.n	80059f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10b      	bne.n	8005a10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0aa      	b.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff ff86 	bl	8005924 <LL_ADC_REG_IsConversionOngoing>
 8005a18:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff ff80 	bl	8005924 <LL_ADC_REG_IsConversionOngoing>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 808c 	bne.w	8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 8088 	bne.w	8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a3c:	d004      	beq.n	8005a48 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a4b      	ldr	r2, [pc, #300]	; (8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005a48:	4b4a      	ldr	r3, [pc, #296]	; (8005b74 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8005a4a:	e000      	b.n	8005a4e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005a4c:	4b4a      	ldr	r3, [pc, #296]	; (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005a4e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d041      	beq.n	8005adc <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	6859      	ldr	r1, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a6a:	035b      	lsls	r3, r3, #13
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a7c:	d004      	beq.n	8005a88 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a3b      	ldr	r2, [pc, #236]	; (8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10f      	bne.n	8005aa8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005a88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005a8c:	f7ff ff37 	bl	80058fe <LL_ADC_IsEnabled>
 8005a90:	4604      	mov	r4, r0
 8005a92:	4837      	ldr	r0, [pc, #220]	; (8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a94:	f7ff ff33 	bl	80058fe <LL_ADC_IsEnabled>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4323      	orrs	r3, r4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e008      	b.n	8005aba <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005aa8:	4834      	ldr	r0, [pc, #208]	; (8005b7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005aaa:	f7ff ff28 	bl	80058fe <LL_ADC_IsEnabled>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d04c      	beq.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ac6:	f023 030f 	bic.w	r3, r3, #15
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	6811      	ldr	r1, [r2, #0]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	6892      	ldr	r2, [r2, #8]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ada:	e03d      	b.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af0:	d004      	beq.n	8005afc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1e      	ldr	r2, [pc, #120]	; (8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d10f      	bne.n	8005b1c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8005afc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005b00:	f7ff fefd 	bl	80058fe <LL_ADC_IsEnabled>
 8005b04:	4604      	mov	r4, r0
 8005b06:	481a      	ldr	r0, [pc, #104]	; (8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005b08:	f7ff fef9 	bl	80058fe <LL_ADC_IsEnabled>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4323      	orrs	r3, r4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	e008      	b.n	8005b2e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005b1c:	4817      	ldr	r0, [pc, #92]	; (8005b7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005b1e:	f7ff feee 	bl	80058fe <LL_ADC_IsEnabled>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d012      	beq.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b3a:	f023 030f 	bic.w	r3, r3, #15
 8005b3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005b40:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b42:	e009      	b.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b48:	f043 0220 	orr.w	r2, r3, #32
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005b56:	e000      	b.n	8005b5a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005b62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3784      	adds	r7, #132	; 0x84
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd90      	pop	{r4, r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	50000100 	.word	0x50000100
 8005b74:	50000300 	.word	0x50000300
 8005b78:	50000700 	.word	0x50000700
 8005b7c:	50000400 	.word	0x50000400

08005b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b90:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bb2:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	60d3      	str	r3, [r2, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	e000ed00 	.word	0xe000ed00

08005bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bcc:	4b04      	ldr	r3, [pc, #16]	; (8005be0 <__NVIC_GetPriorityGrouping+0x18>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	f003 0307 	and.w	r3, r3, #7
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	e000ed00 	.word	0xe000ed00

08005be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	db0b      	blt.n	8005c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	f003 021f 	and.w	r2, r3, #31
 8005bfc:	4907      	ldr	r1, [pc, #28]	; (8005c1c <__NVIC_EnableIRQ+0x38>)
 8005bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2001      	movs	r0, #1
 8005c06:	fa00 f202 	lsl.w	r2, r0, r2
 8005c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	e000e100 	.word	0xe000e100

08005c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	db0a      	blt.n	8005c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	490c      	ldr	r1, [pc, #48]	; (8005c6c <__NVIC_SetPriority+0x4c>)
 8005c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3e:	0112      	lsls	r2, r2, #4
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	440b      	add	r3, r1
 8005c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c48:	e00a      	b.n	8005c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4908      	ldr	r1, [pc, #32]	; (8005c70 <__NVIC_SetPriority+0x50>)
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	3b04      	subs	r3, #4
 8005c58:	0112      	lsls	r2, r2, #4
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	761a      	strb	r2, [r3, #24]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	e000e100 	.word	0xe000e100
 8005c70:	e000ed00 	.word	0xe000ed00

08005c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b089      	sub	sp, #36	; 0x24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f1c3 0307 	rsb	r3, r3, #7
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	bf28      	it	cs
 8005c92:	2304      	movcs	r3, #4
 8005c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	2b06      	cmp	r3, #6
 8005c9c:	d902      	bls.n	8005ca4 <NVIC_EncodePriority+0x30>
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3b03      	subs	r3, #3
 8005ca2:	e000      	b.n	8005ca6 <NVIC_EncodePriority+0x32>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43da      	mvns	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	43d9      	mvns	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ccc:	4313      	orrs	r3, r2
         );
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3724      	adds	r7, #36	; 0x24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff ff4c 	bl	8005b80 <__NVIC_SetPriorityGrouping>
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cfe:	f7ff ff63 	bl	8005bc8 <__NVIC_GetPriorityGrouping>
 8005d02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	6978      	ldr	r0, [r7, #20]
 8005d0a:	f7ff ffb3 	bl	8005c74 <NVIC_EncodePriority>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff ff82 	bl	8005c20 <__NVIC_SetPriority>
}
 8005d1c:	bf00      	nop
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff ff56 	bl	8005be4 <__NVIC_EnableIRQ>
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d4e:	e15a      	b.n	8006006 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	2101      	movs	r1, #1
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 814c 	beq.w	8006000 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d005      	beq.n	8005d80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d130      	bne.n	8005de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4013      	ands	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005db6:	2201      	movs	r2, #1
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	f003 0201 	and.w	r2, r3, #1
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d017      	beq.n	8005e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	2203      	movs	r2, #3
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d123      	bne.n	8005e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	08da      	lsrs	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3208      	adds	r2, #8
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	220f      	movs	r2, #15
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43db      	mvns	r3, r3
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	08da      	lsrs	r2, r3, #3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3208      	adds	r2, #8
 8005e6c:	6939      	ldr	r1, [r7, #16]
 8005e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f003 0203 	and.w	r2, r3, #3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80a6 	beq.w	8006000 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eb4:	4b5b      	ldr	r3, [pc, #364]	; (8006024 <HAL_GPIO_Init+0x2e4>)
 8005eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb8:	4a5a      	ldr	r2, [pc, #360]	; (8006024 <HAL_GPIO_Init+0x2e4>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	6613      	str	r3, [r2, #96]	; 0x60
 8005ec0:	4b58      	ldr	r3, [pc, #352]	; (8006024 <HAL_GPIO_Init+0x2e4>)
 8005ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ecc:	4a56      	ldr	r2, [pc, #344]	; (8006028 <HAL_GPIO_Init+0x2e8>)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	089b      	lsrs	r3, r3, #2
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f003 0303 	and.w	r3, r3, #3
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	220f      	movs	r2, #15
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4013      	ands	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ef6:	d01f      	beq.n	8005f38 <HAL_GPIO_Init+0x1f8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a4c      	ldr	r2, [pc, #304]	; (800602c <HAL_GPIO_Init+0x2ec>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d019      	beq.n	8005f34 <HAL_GPIO_Init+0x1f4>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a4b      	ldr	r2, [pc, #300]	; (8006030 <HAL_GPIO_Init+0x2f0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_GPIO_Init+0x1f0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a4a      	ldr	r2, [pc, #296]	; (8006034 <HAL_GPIO_Init+0x2f4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00d      	beq.n	8005f2c <HAL_GPIO_Init+0x1ec>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a49      	ldr	r2, [pc, #292]	; (8006038 <HAL_GPIO_Init+0x2f8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <HAL_GPIO_Init+0x1e8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a48      	ldr	r2, [pc, #288]	; (800603c <HAL_GPIO_Init+0x2fc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d101      	bne.n	8005f24 <HAL_GPIO_Init+0x1e4>
 8005f20:	2305      	movs	r3, #5
 8005f22:	e00a      	b.n	8005f3a <HAL_GPIO_Init+0x1fa>
 8005f24:	2306      	movs	r3, #6
 8005f26:	e008      	b.n	8005f3a <HAL_GPIO_Init+0x1fa>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	e006      	b.n	8005f3a <HAL_GPIO_Init+0x1fa>
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e004      	b.n	8005f3a <HAL_GPIO_Init+0x1fa>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e002      	b.n	8005f3a <HAL_GPIO_Init+0x1fa>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <HAL_GPIO_Init+0x1fa>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	f002 0203 	and.w	r2, r2, #3
 8005f40:	0092      	lsls	r2, r2, #2
 8005f42:	4093      	lsls	r3, r2
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f4a:	4937      	ldr	r1, [pc, #220]	; (8006028 <HAL_GPIO_Init+0x2e8>)
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	3302      	adds	r3, #2
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f58:	4b39      	ldr	r3, [pc, #228]	; (8006040 <HAL_GPIO_Init+0x300>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	43db      	mvns	r3, r3
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4013      	ands	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f7c:	4a30      	ldr	r2, [pc, #192]	; (8006040 <HAL_GPIO_Init+0x300>)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f82:	4b2f      	ldr	r3, [pc, #188]	; (8006040 <HAL_GPIO_Init+0x300>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fa6:	4a26      	ldr	r2, [pc, #152]	; (8006040 <HAL_GPIO_Init+0x300>)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fac:	4b24      	ldr	r3, [pc, #144]	; (8006040 <HAL_GPIO_Init+0x300>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_GPIO_Init+0x300>)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <HAL_GPIO_Init+0x300>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ffa:	4a11      	ldr	r2, [pc, #68]	; (8006040 <HAL_GPIO_Init+0x300>)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3301      	adds	r3, #1
 8006004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	fa22 f303 	lsr.w	r3, r2, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	f47f ae9d 	bne.w	8005d50 <HAL_GPIO_Init+0x10>
  }
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40021000 	.word	0x40021000
 8006028:	40010000 	.word	0x40010000
 800602c:	48000400 	.word	0x48000400
 8006030:	48000800 	.word	0x48000800
 8006034:	48000c00 	.word	0x48000c00
 8006038:	48001000 	.word	0x48001000
 800603c:	48001400 	.word	0x48001400
 8006040:	40010400 	.word	0x40010400

08006044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	887b      	ldrh	r3, [r7, #2]
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
 8006060:	e001      	b.n	8006066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	807b      	strh	r3, [r7, #2]
 8006080:	4613      	mov	r3, r2
 8006082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006084:	787b      	ldrb	r3, [r7, #1]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800608a:	887a      	ldrh	r2, [r7, #2]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006090:	e002      	b.n	8006098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006092:	887a      	ldrh	r2, [r7, #2]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060b6:	887a      	ldrh	r2, [r7, #2]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4013      	ands	r3, r2
 80060bc:	041a      	lsls	r2, r3, #16
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	43d9      	mvns	r1, r3
 80060c2:	887b      	ldrh	r3, [r7, #2]
 80060c4:	400b      	ands	r3, r1
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	619a      	str	r2, [r3, #24]
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d006      	beq.n	80060fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060ee:	4a05      	ldr	r2, [pc, #20]	; (8006104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f806 	bl	8006108 <HAL_GPIO_EXTI_Callback>
  }
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	40010400 	.word	0x40010400

08006108 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e08d      	b.n	800624c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7fb fd27 	bl	8001b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2224      	movs	r2, #36	; 0x24
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0201 	bic.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800616e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800617e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d107      	bne.n	8006198 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006194:	609a      	str	r2, [r3, #8]
 8006196:	e006      	b.n	80061a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80061a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d108      	bne.n	80061c0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	e007      	b.n	80061d0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69d9      	ldr	r1, [r3, #28]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	4603      	mov	r3, r0
 8006264:	817b      	strh	r3, [r7, #10]
 8006266:	460b      	mov	r3, r1
 8006268:	813b      	strh	r3, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b20      	cmp	r3, #32
 8006278:	f040 80f9 	bne.w	800646e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_I2C_Mem_Write+0x34>
 8006282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d105      	bne.n	8006294 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0ed      	b.n	8006470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_I2C_Mem_Write+0x4e>
 800629e:	2302      	movs	r3, #2
 80062a0:	e0e6      	b.n	8006470 <HAL_I2C_Mem_Write+0x21c>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062aa:	f7fd fcab 	bl	8003c04 <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2319      	movs	r3, #25
 80062b6:	2201      	movs	r2, #1
 80062b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fac3 	bl	8006848 <I2C_WaitOnFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0d1      	b.n	8006470 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2221      	movs	r2, #33	; 0x21
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2240      	movs	r2, #64	; 0x40
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a3a      	ldr	r2, [r7, #32]
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062f4:	88f8      	ldrh	r0, [r7, #6]
 80062f6:	893a      	ldrh	r2, [r7, #8]
 80062f8:	8979      	ldrh	r1, [r7, #10]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4603      	mov	r3, r0
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f9d3 	bl	80066b0 <I2C_RequestMemoryWrite>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0a9      	b.n	8006470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	2bff      	cmp	r3, #255	; 0xff
 8006324:	d90e      	bls.n	8006344 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	22ff      	movs	r2, #255	; 0xff
 800632a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006330:	b2da      	uxtb	r2, r3
 8006332:	8979      	ldrh	r1, [r7, #10]
 8006334:	2300      	movs	r3, #0
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fc47 	bl	8006bd0 <I2C_TransferConfig>
 8006342:	e00f      	b.n	8006364 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	b2da      	uxtb	r2, r3
 8006354:	8979      	ldrh	r1, [r7, #10]
 8006356:	2300      	movs	r3, #0
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fc36 	bl	8006bd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fac6 	bl	80068fa <I2C_WaitOnTXISFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e07b      	b.n	8006470 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d034      	beq.n	800641c <HAL_I2C_Mem_Write+0x1c8>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d130      	bne.n	800641c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	2200      	movs	r2, #0
 80063c2:	2180      	movs	r1, #128	; 0x80
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fa3f 	bl	8006848 <I2C_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e04d      	b.n	8006470 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2bff      	cmp	r3, #255	; 0xff
 80063dc:	d90e      	bls.n	80063fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	22ff      	movs	r2, #255	; 0xff
 80063e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	8979      	ldrh	r1, [r7, #10]
 80063ec:	2300      	movs	r3, #0
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fbeb 	bl	8006bd0 <I2C_TransferConfig>
 80063fa:	e00f      	b.n	800641c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	b2da      	uxtb	r2, r3
 800640c:	8979      	ldrh	r1, [r7, #10]
 800640e:	2300      	movs	r3, #0
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fbda 	bl	8006bd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d19e      	bne.n	8006364 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 faac 	bl	8006988 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e01a      	b.n	8006470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2220      	movs	r2, #32
 8006440:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6859      	ldr	r1, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <HAL_I2C_Mem_Write+0x224>)
 800644e:	400b      	ands	r3, r1
 8006450:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e000      	b.n	8006470 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800646e:	2302      	movs	r3, #2
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	fe00e800 	.word	0xfe00e800

0800647c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4603      	mov	r3, r0
 800648c:	817b      	strh	r3, [r7, #10]
 800648e:	460b      	mov	r3, r1
 8006490:	813b      	strh	r3, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b20      	cmp	r3, #32
 80064a0:	f040 80fd 	bne.w	800669e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <HAL_I2C_Mem_Read+0x34>
 80064aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d105      	bne.n	80064bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0f1      	b.n	80066a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_I2C_Mem_Read+0x4e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e0ea      	b.n	80066a0 <HAL_I2C_Mem_Read+0x224>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064d2:	f7fd fb97 	bl	8003c04 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2319      	movs	r3, #25
 80064de:	2201      	movs	r2, #1
 80064e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f9af 	bl	8006848 <I2C_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0d5      	b.n	80066a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2222      	movs	r2, #34	; 0x22
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800651c:	88f8      	ldrh	r0, [r7, #6]
 800651e:	893a      	ldrh	r2, [r7, #8]
 8006520:	8979      	ldrh	r1, [r7, #10]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4603      	mov	r3, r0
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f913 	bl	8006758 <I2C_RequestMemoryRead>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0ad      	b.n	80066a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	2bff      	cmp	r3, #255	; 0xff
 800654c:	d90e      	bls.n	800656c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	22ff      	movs	r2, #255	; 0xff
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006558:	b2da      	uxtb	r2, r3
 800655a:	8979      	ldrh	r1, [r7, #10]
 800655c:	4b52      	ldr	r3, [pc, #328]	; (80066a8 <HAL_I2C_Mem_Read+0x22c>)
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fb33 	bl	8006bd0 <I2C_TransferConfig>
 800656a:	e00f      	b.n	800658c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657a:	b2da      	uxtb	r2, r3
 800657c:	8979      	ldrh	r1, [r7, #10]
 800657e:	4b4a      	ldr	r3, [pc, #296]	; (80066a8 <HAL_I2C_Mem_Read+0x22c>)
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fb22 	bl	8006bd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	2200      	movs	r2, #0
 8006594:	2104      	movs	r1, #4
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f956 	bl	8006848 <I2C_WaitOnFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e07c      	b.n	80066a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d034      	beq.n	800664c <HAL_I2C_Mem_Read+0x1d0>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d130      	bne.n	800664c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	2200      	movs	r2, #0
 80065f2:	2180      	movs	r1, #128	; 0x80
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f927 	bl	8006848 <I2C_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e04d      	b.n	80066a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	2bff      	cmp	r3, #255	; 0xff
 800660c:	d90e      	bls.n	800662c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	22ff      	movs	r2, #255	; 0xff
 8006612:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006618:	b2da      	uxtb	r2, r3
 800661a:	8979      	ldrh	r1, [r7, #10]
 800661c:	2300      	movs	r3, #0
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fad3 	bl	8006bd0 <I2C_TransferConfig>
 800662a:	e00f      	b.n	800664c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663a:	b2da      	uxtb	r2, r3
 800663c:	8979      	ldrh	r1, [r7, #10]
 800663e:	2300      	movs	r3, #0
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fac2 	bl	8006bd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d19a      	bne.n	800658c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f994 	bl	8006988 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e01a      	b.n	80066a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2220      	movs	r2, #32
 8006670:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <HAL_I2C_Mem_Read+0x230>)
 800667e:	400b      	ands	r3, r1
 8006680:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	e000      	b.n	80066a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800669e:	2302      	movs	r3, #2
  }
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	80002400 	.word	0x80002400
 80066ac:	fe00e800 	.word	0xfe00e800

080066b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	4608      	mov	r0, r1
 80066ba:	4611      	mov	r1, r2
 80066bc:	461a      	mov	r2, r3
 80066be:	4603      	mov	r3, r0
 80066c0:	817b      	strh	r3, [r7, #10]
 80066c2:	460b      	mov	r3, r1
 80066c4:	813b      	strh	r3, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	8979      	ldrh	r1, [r7, #10]
 80066d0:	4b20      	ldr	r3, [pc, #128]	; (8006754 <I2C_RequestMemoryWrite+0xa4>)
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fa79 	bl	8006bd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f909 	bl	80068fa <I2C_WaitOnTXISFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e02c      	b.n	800674c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066f2:	88fb      	ldrh	r3, [r7, #6]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d105      	bne.n	8006704 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066f8:	893b      	ldrh	r3, [r7, #8]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	629a      	str	r2, [r3, #40]	; 0x28
 8006702:	e015      	b.n	8006730 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006704:	893b      	ldrh	r3, [r7, #8]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	b29b      	uxth	r3, r3
 800670a:	b2da      	uxtb	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	69b9      	ldr	r1, [r7, #24]
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f8ef 	bl	80068fa <I2C_WaitOnTXISFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e012      	b.n	800674c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006726:	893b      	ldrh	r3, [r7, #8]
 8006728:	b2da      	uxtb	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2200      	movs	r2, #0
 8006738:	2180      	movs	r1, #128	; 0x80
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f884 	bl	8006848 <I2C_WaitOnFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	80002000 	.word	0x80002000

08006758 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	817b      	strh	r3, [r7, #10]
 800676a:	460b      	mov	r3, r1
 800676c:	813b      	strh	r3, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	8979      	ldrh	r1, [r7, #10]
 8006778:	4b20      	ldr	r3, [pc, #128]	; (80067fc <I2C_RequestMemoryRead+0xa4>)
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	2300      	movs	r3, #0
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 fa26 	bl	8006bd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	69b9      	ldr	r1, [r7, #24]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f8b6 	bl	80068fa <I2C_WaitOnTXISFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e02c      	b.n	80067f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006798:	88fb      	ldrh	r3, [r7, #6]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d105      	bne.n	80067aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800679e:	893b      	ldrh	r3, [r7, #8]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	629a      	str	r2, [r3, #40]	; 0x28
 80067a8:	e015      	b.n	80067d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067aa:	893b      	ldrh	r3, [r7, #8]
 80067ac:	0a1b      	lsrs	r3, r3, #8
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	69b9      	ldr	r1, [r7, #24]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f89c 	bl	80068fa <I2C_WaitOnTXISFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e012      	b.n	80067f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067cc:	893b      	ldrh	r3, [r7, #8]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2200      	movs	r2, #0
 80067de:	2140      	movs	r1, #64	; 0x40
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f831 	bl	8006848 <I2C_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	80002000 	.word	0x80002000

08006800 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b02      	cmp	r3, #2
 8006814:	d103      	bne.n	800681e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	d007      	beq.n	800683c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	619a      	str	r2, [r3, #24]
  }
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006858:	e03b      	b.n	80068d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f8d6 	bl	8006a10 <I2C_IsErrorOccurred>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e041      	b.n	80068f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d02d      	beq.n	80068d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006876:	f7fd f9c5 	bl	8003c04 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d302      	bcc.n	800688c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d122      	bne.n	80068d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4013      	ands	r3, r2
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	bf0c      	ite	eq
 800689c:	2301      	moveq	r3, #1
 800689e:	2300      	movne	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d113      	bne.n	80068d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	f043 0220 	orr.w	r2, r3, #32
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e00f      	b.n	80068f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699a      	ldr	r2, [r3, #24]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4013      	ands	r3, r2
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	bf0c      	ite	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	2300      	movne	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d0b4      	beq.n	800685a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006906:	e033      	b.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f87f 	bl	8006a10 <I2C_IsErrorOccurred>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e031      	b.n	8006980 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006922:	d025      	beq.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006924:	f7fd f96e 	bl	8003c04 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	d302      	bcc.n	800693a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d11a      	bne.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b02      	cmp	r3, #2
 8006946:	d013      	beq.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	f043 0220 	orr.w	r2, r3, #32
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e007      	b.n	8006980 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b02      	cmp	r3, #2
 800697c:	d1c4      	bne.n	8006908 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006994:	e02f      	b.n	80069f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f838 	bl	8006a10 <I2C_IsErrorOccurred>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e02d      	b.n	8006a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069aa:	f7fd f92b 	bl	8003c04 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d302      	bcc.n	80069c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11a      	bne.n	80069f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d013      	beq.n	80069f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	f043 0220 	orr.w	r2, r3, #32
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e007      	b.n	8006a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d1c8      	bne.n	8006996 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d068      	beq.n	8006b0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2210      	movs	r2, #16
 8006a42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a44:	e049      	b.n	8006ada <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d045      	beq.n	8006ada <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fd f8d9 	bl	8003c04 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <I2C_IsErrorOccurred+0x54>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d13a      	bne.n	8006ada <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a86:	d121      	bne.n	8006acc <I2C_IsErrorOccurred+0xbc>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a8e:	d01d      	beq.n	8006acc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006a90:	7cfb      	ldrb	r3, [r7, #19]
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d01a      	beq.n	8006acc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aa4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006aa6:	f7fd f8ad 	bl	8003c04 <HAL_GetTick>
 8006aaa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006aac:	e00e      	b.n	8006acc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006aae:	f7fd f8a9 	bl	8003c04 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b19      	cmp	r3, #25
 8006aba:	d907      	bls.n	8006acc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f043 0320 	orr.w	r3, r3, #32
 8006ac2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006aca:	e006      	b.n	8006ada <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d1e9      	bne.n	8006aae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d003      	beq.n	8006af0 <I2C_IsErrorOccurred+0xe0>
 8006ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0aa      	beq.n	8006a46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2220      	movs	r2, #32
 8006afe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	f043 0304 	orr.w	r3, r3, #4
 8006b06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	f043 0308 	orr.w	r3, r3, #8
 8006b48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	f043 0302 	orr.w	r3, r3, #2
 8006b6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01c      	beq.n	8006bbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff fe3b 	bl	8006800 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6859      	ldr	r1, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <I2C_IsErrorOccurred+0x1bc>)
 8006b96:	400b      	ands	r3, r1
 8006b98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3728      	adds	r7, #40	; 0x28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	fe00e800 	.word	0xfe00e800

08006bd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	607b      	str	r3, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	4613      	mov	r3, r2
 8006be0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006be2:	897b      	ldrh	r3, [r7, #10]
 8006be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006be8:	7a7b      	ldrb	r3, [r7, #9]
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bf0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	0d5b      	lsrs	r3, r3, #21
 8006c0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c0e:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <I2C_TransferConfig+0x60>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	43db      	mvns	r3, r3
 8006c14:	ea02 0103 	and.w	r1, r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	03ff63ff 	.word	0x03ff63ff

08006c34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d138      	bne.n	8006cbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e032      	b.n	8006cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2224      	movs	r2, #36	; 0x24
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6819      	ldr	r1, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0201 	orr.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e000      	b.n	8006cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
  }
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d139      	bne.n	8006d54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e033      	b.n	8006d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2224      	movs	r2, #36	; 0x24
 8006cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0201 	bic.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e000      	b.n	8006d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d54:	2302      	movs	r3, #2
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d141      	bne.n	8006df6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d72:	4b4b      	ldr	r3, [pc, #300]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d7e:	d131      	bne.n	8006de4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d80:	4b47      	ldr	r3, [pc, #284]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d86:	4a46      	ldr	r2, [pc, #280]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d90:	4b43      	ldr	r3, [pc, #268]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d98:	4a41      	ldr	r2, [pc, #260]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006da0:	4b40      	ldr	r3, [pc, #256]	; (8006ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2232      	movs	r2, #50	; 0x32
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	4a3f      	ldr	r2, [pc, #252]	; (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	0c9b      	lsrs	r3, r3, #18
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006db6:	e002      	b.n	8006dbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dbe:	4b38      	ldr	r3, [pc, #224]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dca:	d102      	bne.n	8006dd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f2      	bne.n	8006db8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dd2:	4b33      	ldr	r3, [pc, #204]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dde:	d158      	bne.n	8006e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e057      	b.n	8006e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006de4:	4b2e      	ldr	r3, [pc, #184]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dea:	4a2d      	ldr	r2, [pc, #180]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006df4:	e04d      	b.n	8006e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dfc:	d141      	bne.n	8006e82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dfe:	4b28      	ldr	r3, [pc, #160]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0a:	d131      	bne.n	8006e70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e0c:	4b24      	ldr	r3, [pc, #144]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e12:	4a23      	ldr	r2, [pc, #140]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e1c:	4b20      	ldr	r3, [pc, #128]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e24:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2232      	movs	r2, #50	; 0x32
 8006e32:	fb02 f303 	mul.w	r3, r2, r3
 8006e36:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e38:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3c:	0c9b      	lsrs	r3, r3, #18
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e42:	e002      	b.n	8006e4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e56:	d102      	bne.n	8006e5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f2      	bne.n	8006e44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e5e:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d112      	bne.n	8006e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e011      	b.n	8006e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e76:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006e80:	e007      	b.n	8006e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e8a:	4a05      	ldr	r2, [pc, #20]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40007000 	.word	0x40007000
 8006ea4:	20000000 	.word	0x20000000
 8006ea8:	431bde83 	.word	0x431bde83

08006eac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4a04      	ldr	r2, [pc, #16]	; (8006ec8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006eba:	6093      	str	r3, [r2, #8]
}
 8006ebc:	bf00      	nop
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40007000 	.word	0x40007000

08006ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e2fe      	b.n	80074dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d075      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eea:	4b97      	ldr	r3, [pc, #604]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 030c 	and.w	r3, r3, #12
 8006ef2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ef4:	4b94      	ldr	r3, [pc, #592]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b0c      	cmp	r3, #12
 8006f02:	d102      	bne.n	8006f0a <HAL_RCC_OscConfig+0x3e>
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d002      	beq.n	8006f10 <HAL_RCC_OscConfig+0x44>
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d10b      	bne.n	8006f28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f10:	4b8d      	ldr	r3, [pc, #564]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d05b      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x108>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d157      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e2d9      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f30:	d106      	bne.n	8006f40 <HAL_RCC_OscConfig+0x74>
 8006f32:	4b85      	ldr	r3, [pc, #532]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a84      	ldr	r2, [pc, #528]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	e01d      	b.n	8006f7c <HAL_RCC_OscConfig+0xb0>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f48:	d10c      	bne.n	8006f64 <HAL_RCC_OscConfig+0x98>
 8006f4a:	4b7f      	ldr	r3, [pc, #508]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7e      	ldr	r2, [pc, #504]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4b7c      	ldr	r3, [pc, #496]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a7b      	ldr	r2, [pc, #492]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e00b      	b.n	8006f7c <HAL_RCC_OscConfig+0xb0>
 8006f64:	4b78      	ldr	r3, [pc, #480]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a77      	ldr	r2, [pc, #476]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	4b75      	ldr	r3, [pc, #468]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a74      	ldr	r2, [pc, #464]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d013      	beq.n	8006fac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fc fe3e 	bl	8003c04 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f8c:	f7fc fe3a 	bl	8003c04 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b64      	cmp	r3, #100	; 0x64
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e29e      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f9e:	4b6a      	ldr	r3, [pc, #424]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0xc0>
 8006faa:	e014      	b.n	8006fd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fac:	f7fc fe2a 	bl	8003c04 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb4:	f7fc fe26 	bl	8003c04 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b64      	cmp	r3, #100	; 0x64
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e28a      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fc6:	4b60      	ldr	r3, [pc, #384]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f0      	bne.n	8006fb4 <HAL_RCC_OscConfig+0xe8>
 8006fd2:	e000      	b.n	8006fd6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d075      	beq.n	80070ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fe2:	4b59      	ldr	r3, [pc, #356]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 030c 	and.w	r3, r3, #12
 8006fea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fec:	4b56      	ldr	r3, [pc, #344]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b0c      	cmp	r3, #12
 8006ffa:	d102      	bne.n	8007002 <HAL_RCC_OscConfig+0x136>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d002      	beq.n	8007008 <HAL_RCC_OscConfig+0x13c>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d11f      	bne.n	8007048 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007008:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCC_OscConfig+0x154>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e25d      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007020:	4b49      	ldr	r3, [pc, #292]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	4946      	ldr	r1, [pc, #280]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007034:	4b45      	ldr	r3, [pc, #276]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f7fc fb3d 	bl	80036b8 <HAL_InitTick>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d043      	beq.n	80070cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e249      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d023      	beq.n	8007098 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007050:	4b3d      	ldr	r3, [pc, #244]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a3c      	ldr	r2, [pc, #240]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800705a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705c:	f7fc fdd2 	bl	8003c04 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007064:	f7fc fdce 	bl	8003c04 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e232      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007076:	4b34      	ldr	r3, [pc, #208]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007082:	4b31      	ldr	r3, [pc, #196]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	061b      	lsls	r3, r3, #24
 8007090:	492d      	ldr	r1, [pc, #180]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007092:	4313      	orrs	r3, r2
 8007094:	604b      	str	r3, [r1, #4]
 8007096:	e01a      	b.n	80070ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007098:	4b2b      	ldr	r3, [pc, #172]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a2a      	ldr	r2, [pc, #168]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 800709e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a4:	f7fc fdae 	bl	8003c04 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ac:	f7fc fdaa 	bl	8003c04 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e20e      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070be:	4b22      	ldr	r3, [pc, #136]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f0      	bne.n	80070ac <HAL_RCC_OscConfig+0x1e0>
 80070ca:	e000      	b.n	80070ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d041      	beq.n	800715e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01c      	beq.n	800711c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070e2:	4b19      	ldr	r3, [pc, #100]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 80070e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070e8:	4a17      	ldr	r2, [pc, #92]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 80070ea:	f043 0301 	orr.w	r3, r3, #1
 80070ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f2:	f7fc fd87 	bl	8003c04 <HAL_GetTick>
 80070f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070fa:	f7fc fd83 	bl	8003c04 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e1e7      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 800710e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0ef      	beq.n	80070fa <HAL_RCC_OscConfig+0x22e>
 800711a:	e020      	b.n	800715e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 800711e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007124:	f023 0301 	bic.w	r3, r3, #1
 8007128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712c:	f7fc fd6a 	bl	8003c04 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007132:	e00d      	b.n	8007150 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007134:	f7fc fd66 	bl	8003c04 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d906      	bls.n	8007150 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e1ca      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
 8007146:	bf00      	nop
 8007148:	40021000 	.word	0x40021000
 800714c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007150:	4b8c      	ldr	r3, [pc, #560]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1ea      	bne.n	8007134 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80a6 	beq.w	80072b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800716c:	2300      	movs	r3, #0
 800716e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007170:	4b84      	ldr	r3, [pc, #528]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_RCC_OscConfig+0x2b4>
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <HAL_RCC_OscConfig+0x2b6>
 8007180:	2300      	movs	r3, #0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00d      	beq.n	80071a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007186:	4b7f      	ldr	r3, [pc, #508]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	4a7e      	ldr	r2, [pc, #504]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007190:	6593      	str	r3, [r2, #88]	; 0x58
 8007192:	4b7c      	ldr	r3, [pc, #496]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800719e:	2301      	movs	r3, #1
 80071a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a2:	4b79      	ldr	r3, [pc, #484]	; (8007388 <HAL_RCC_OscConfig+0x4bc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d118      	bne.n	80071e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071ae:	4b76      	ldr	r3, [pc, #472]	; (8007388 <HAL_RCC_OscConfig+0x4bc>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a75      	ldr	r2, [pc, #468]	; (8007388 <HAL_RCC_OscConfig+0x4bc>)
 80071b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ba:	f7fc fd23 	bl	8003c04 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c2:	f7fc fd1f 	bl	8003c04 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e183      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071d4:	4b6c      	ldr	r3, [pc, #432]	; (8007388 <HAL_RCC_OscConfig+0x4bc>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0f0      	beq.n	80071c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d108      	bne.n	80071fa <HAL_RCC_OscConfig+0x32e>
 80071e8:	4b66      	ldr	r3, [pc, #408]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ee:	4a65      	ldr	r2, [pc, #404]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071f8:	e024      	b.n	8007244 <HAL_RCC_OscConfig+0x378>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	2b05      	cmp	r3, #5
 8007200:	d110      	bne.n	8007224 <HAL_RCC_OscConfig+0x358>
 8007202:	4b60      	ldr	r3, [pc, #384]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007208:	4a5e      	ldr	r2, [pc, #376]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800720a:	f043 0304 	orr.w	r3, r3, #4
 800720e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007212:	4b5c      	ldr	r3, [pc, #368]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007218:	4a5a      	ldr	r2, [pc, #360]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007222:	e00f      	b.n	8007244 <HAL_RCC_OscConfig+0x378>
 8007224:	4b57      	ldr	r3, [pc, #348]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722a:	4a56      	ldr	r2, [pc, #344]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007234:	4b53      	ldr	r3, [pc, #332]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	4a52      	ldr	r2, [pc, #328]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800723c:	f023 0304 	bic.w	r3, r3, #4
 8007240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d016      	beq.n	800727a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724c:	f7fc fcda 	bl	8003c04 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007252:	e00a      	b.n	800726a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007254:	f7fc fcd6 	bl	8003c04 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e138      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800726a:	4b46      	ldr	r3, [pc, #280]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0ed      	beq.n	8007254 <HAL_RCC_OscConfig+0x388>
 8007278:	e015      	b.n	80072a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727a:	f7fc fcc3 	bl	8003c04 <HAL_GetTick>
 800727e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007280:	e00a      	b.n	8007298 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007282:	f7fc fcbf 	bl	8003c04 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	4293      	cmp	r3, r2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e121      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007298:	4b3a      	ldr	r3, [pc, #232]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ed      	bne.n	8007282 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072a6:	7ffb      	ldrb	r3, [r7, #31]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d105      	bne.n	80072b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ac:	4b35      	ldr	r3, [pc, #212]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 80072ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b0:	4a34      	ldr	r2, [pc, #208]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 80072b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d03c      	beq.n	800733e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01c      	beq.n	8007306 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072cc:	4b2d      	ldr	r3, [pc, #180]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 80072ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072d2:	4a2c      	ldr	r2, [pc, #176]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072dc:	f7fc fc92 	bl	8003c04 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072e4:	f7fc fc8e 	bl	8003c04 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e0f2      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072f6:	4b23      	ldr	r3, [pc, #140]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 80072f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0ef      	beq.n	80072e4 <HAL_RCC_OscConfig+0x418>
 8007304:	e01b      	b.n	800733e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007306:	4b1f      	ldr	r3, [pc, #124]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800730c:	4a1d      	ldr	r2, [pc, #116]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007316:	f7fc fc75 	bl	8003c04 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800731e:	f7fc fc71 	bl	8003c04 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e0d5      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007330:	4b14      	ldr	r3, [pc, #80]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1ef      	bne.n	800731e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 80c9 	beq.w	80074da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007348:	4b0e      	ldr	r3, [pc, #56]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 030c 	and.w	r3, r3, #12
 8007350:	2b0c      	cmp	r3, #12
 8007352:	f000 8083 	beq.w	800745c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d15e      	bne.n	800741c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a08      	ldr	r2, [pc, #32]	; (8007384 <HAL_RCC_OscConfig+0x4b8>)
 8007364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736a:	f7fc fc4b 	bl	8003c04 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007370:	e00c      	b.n	800738c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007372:	f7fc fc47 	bl	8003c04 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d905      	bls.n	800738c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e0ab      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
 8007384:	40021000 	.word	0x40021000
 8007388:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800738c:	4b55      	ldr	r3, [pc, #340]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1ec      	bne.n	8007372 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007398:	4b52      	ldr	r3, [pc, #328]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	4b52      	ldr	r3, [pc, #328]	; (80074e8 <HAL_RCC_OscConfig+0x61c>)
 800739e:	4013      	ands	r3, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6a11      	ldr	r1, [r2, #32]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073a8:	3a01      	subs	r2, #1
 80073aa:	0112      	lsls	r2, r2, #4
 80073ac:	4311      	orrs	r1, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80073b2:	0212      	lsls	r2, r2, #8
 80073b4:	4311      	orrs	r1, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073ba:	0852      	lsrs	r2, r2, #1
 80073bc:	3a01      	subs	r2, #1
 80073be:	0552      	lsls	r2, r2, #21
 80073c0:	4311      	orrs	r1, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073c6:	0852      	lsrs	r2, r2, #1
 80073c8:	3a01      	subs	r2, #1
 80073ca:	0652      	lsls	r2, r2, #25
 80073cc:	4311      	orrs	r1, r2
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073d2:	06d2      	lsls	r2, r2, #27
 80073d4:	430a      	orrs	r2, r1
 80073d6:	4943      	ldr	r1, [pc, #268]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073dc:	4b41      	ldr	r3, [pc, #260]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a40      	ldr	r2, [pc, #256]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 80073e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073e8:	4b3e      	ldr	r3, [pc, #248]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	4a3d      	ldr	r2, [pc, #244]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 80073ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f4:	f7fc fc06 	bl	8003c04 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073fc:	f7fc fc02 	bl	8003c04 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e066      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800740e:	4b35      	ldr	r3, [pc, #212]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0f0      	beq.n	80073fc <HAL_RCC_OscConfig+0x530>
 800741a:	e05e      	b.n	80074da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800741c:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a30      	ldr	r2, [pc, #192]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 8007422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007428:	f7fc fbec 	bl	8003c04 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007430:	f7fc fbe8 	bl	8003c04 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e04c      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007442:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f0      	bne.n	8007430 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800744e:	4b25      	ldr	r3, [pc, #148]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	4924      	ldr	r1, [pc, #144]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <HAL_RCC_OscConfig+0x620>)
 8007456:	4013      	ands	r3, r2
 8007458:	60cb      	str	r3, [r1, #12]
 800745a:	e03e      	b.n	80074da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e039      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007468:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <HAL_RCC_OscConfig+0x618>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f003 0203 	and.w	r2, r3, #3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	429a      	cmp	r2, r3
 800747a:	d12c      	bne.n	80074d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	3b01      	subs	r3, #1
 8007488:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800748a:	429a      	cmp	r2, r3
 800748c:	d123      	bne.n	80074d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800749a:	429a      	cmp	r2, r3
 800749c:	d11b      	bne.n	80074d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d113      	bne.n	80074d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	3b01      	subs	r3, #1
 80074bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074be:	429a      	cmp	r2, r3
 80074c0:	d109      	bne.n	80074d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074cc:	085b      	lsrs	r3, r3, #1
 80074ce:	3b01      	subs	r3, #1
 80074d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d001      	beq.n	80074da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40021000 	.word	0x40021000
 80074e8:	019f800c 	.word	0x019f800c
 80074ec:	feeefffc 	.word	0xfeeefffc

080074f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e11e      	b.n	8007746 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007508:	4b91      	ldr	r3, [pc, #580]	; (8007750 <HAL_RCC_ClockConfig+0x260>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d910      	bls.n	8007538 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007516:	4b8e      	ldr	r3, [pc, #568]	; (8007750 <HAL_RCC_ClockConfig+0x260>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 020f 	bic.w	r2, r3, #15
 800751e:	498c      	ldr	r1, [pc, #560]	; (8007750 <HAL_RCC_ClockConfig+0x260>)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	4313      	orrs	r3, r2
 8007524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007526:	4b8a      	ldr	r3, [pc, #552]	; (8007750 <HAL_RCC_ClockConfig+0x260>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d001      	beq.n	8007538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e106      	b.n	8007746 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d073      	beq.n	800762c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2b03      	cmp	r3, #3
 800754a:	d129      	bne.n	80075a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800754c:	4b81      	ldr	r3, [pc, #516]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e0f4      	b.n	8007746 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800755c:	f000 f9d0 	bl	8007900 <RCC_GetSysClockFreqFromPLLSource>
 8007560:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	4a7c      	ldr	r2, [pc, #496]	; (8007758 <HAL_RCC_ClockConfig+0x268>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d93f      	bls.n	80075ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800756a:	4b7a      	ldr	r3, [pc, #488]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800757e:	2b00      	cmp	r3, #0
 8007580:	d033      	beq.n	80075ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007586:	2b00      	cmp	r3, #0
 8007588:	d12f      	bne.n	80075ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800758a:	4b72      	ldr	r3, [pc, #456]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007592:	4a70      	ldr	r2, [pc, #448]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 8007594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007598:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800759a:	2380      	movs	r3, #128	; 0x80
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e024      	b.n	80075ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d107      	bne.n	80075b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075a8:	4b6a      	ldr	r3, [pc, #424]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0c6      	b.n	8007746 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075b8:	4b66      	ldr	r3, [pc, #408]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0be      	b.n	8007746 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80075c8:	f000 f8ce 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 80075cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4a61      	ldr	r2, [pc, #388]	; (8007758 <HAL_RCC_ClockConfig+0x268>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d909      	bls.n	80075ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075d6:	4b5f      	ldr	r3, [pc, #380]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075de:	4a5d      	ldr	r2, [pc, #372]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 80075e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80075e6:	2380      	movs	r3, #128	; 0x80
 80075e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075ea:	4b5a      	ldr	r3, [pc, #360]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 0203 	bic.w	r2, r3, #3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	4957      	ldr	r1, [pc, #348]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075fc:	f7fc fb02 	bl	8003c04 <HAL_GetTick>
 8007600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007602:	e00a      	b.n	800761a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007604:	f7fc fafe 	bl	8003c04 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007612:	4293      	cmp	r3, r2
 8007614:	d901      	bls.n	800761a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e095      	b.n	8007746 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761a:	4b4e      	ldr	r3, [pc, #312]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 020c 	and.w	r2, r3, #12
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	429a      	cmp	r2, r3
 800762a:	d1eb      	bne.n	8007604 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d023      	beq.n	8007680 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007644:	4b43      	ldr	r3, [pc, #268]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	4a42      	ldr	r2, [pc, #264]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800764a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800764e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800765c:	4b3d      	ldr	r3, [pc, #244]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007664:	4a3b      	ldr	r2, [pc, #236]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 8007666:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800766a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800766c:	4b39      	ldr	r3, [pc, #228]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	4936      	ldr	r1, [pc, #216]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800767a:	4313      	orrs	r3, r2
 800767c:	608b      	str	r3, [r1, #8]
 800767e:	e008      	b.n	8007692 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d105      	bne.n	8007692 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007686:	4b33      	ldr	r3, [pc, #204]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	4a32      	ldr	r2, [pc, #200]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 800768c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007690:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007692:	4b2f      	ldr	r3, [pc, #188]	; (8007750 <HAL_RCC_ClockConfig+0x260>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	429a      	cmp	r2, r3
 800769e:	d21d      	bcs.n	80076dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a0:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <HAL_RCC_ClockConfig+0x260>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f023 020f 	bic.w	r2, r3, #15
 80076a8:	4929      	ldr	r1, [pc, #164]	; (8007750 <HAL_RCC_ClockConfig+0x260>)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076b0:	f7fc faa8 	bl	8003c04 <HAL_GetTick>
 80076b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076b6:	e00a      	b.n	80076ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b8:	f7fc faa4 	bl	8003c04 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e03b      	b.n	8007746 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ce:	4b20      	ldr	r3, [pc, #128]	; (8007750 <HAL_RCC_ClockConfig+0x260>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 030f 	and.w	r3, r3, #15
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d1ed      	bne.n	80076b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076e8:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4917      	ldr	r1, [pc, #92]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0308 	and.w	r3, r3, #8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	490f      	ldr	r1, [pc, #60]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800771a:	f000 f825 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 800771e:	4602      	mov	r2, r0
 8007720:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <HAL_RCC_ClockConfig+0x264>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	490c      	ldr	r1, [pc, #48]	; (800775c <HAL_RCC_ClockConfig+0x26c>)
 800772c:	5ccb      	ldrb	r3, [r1, r3]
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <HAL_RCC_ClockConfig+0x270>)
 8007738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800773a:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <HAL_RCC_ClockConfig+0x274>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7fb ffba 	bl	80036b8 <HAL_InitTick>
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40022000 	.word	0x40022000
 8007754:	40021000 	.word	0x40021000
 8007758:	04c4b400 	.word	0x04c4b400
 800775c:	0800d010 	.word	0x0800d010
 8007760:	20000000 	.word	0x20000000
 8007764:	20000004 	.word	0x20000004

08007768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800776e:	4b2c      	ldr	r3, [pc, #176]	; (8007820 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 030c 	and.w	r3, r3, #12
 8007776:	2b04      	cmp	r3, #4
 8007778:	d102      	bne.n	8007780 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800777a:	4b2a      	ldr	r3, [pc, #168]	; (8007824 <HAL_RCC_GetSysClockFreq+0xbc>)
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	e047      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007780:	4b27      	ldr	r3, [pc, #156]	; (8007820 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 030c 	and.w	r3, r3, #12
 8007788:	2b08      	cmp	r3, #8
 800778a:	d102      	bne.n	8007792 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800778c:	4b26      	ldr	r3, [pc, #152]	; (8007828 <HAL_RCC_GetSysClockFreq+0xc0>)
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	e03e      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007792:	4b23      	ldr	r3, [pc, #140]	; (8007820 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
 800779a:	2b0c      	cmp	r3, #12
 800779c:	d136      	bne.n	800780c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800779e:	4b20      	ldr	r3, [pc, #128]	; (8007820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077a8:	4b1d      	ldr	r3, [pc, #116]	; (8007820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	3301      	adds	r3, #1
 80077b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d10c      	bne.n	80077d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077bc:	4a1a      	ldr	r2, [pc, #104]	; (8007828 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	4a16      	ldr	r2, [pc, #88]	; (8007820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077c6:	68d2      	ldr	r2, [r2, #12]
 80077c8:	0a12      	lsrs	r2, r2, #8
 80077ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077ce:	fb02 f303 	mul.w	r3, r2, r3
 80077d2:	617b      	str	r3, [r7, #20]
      break;
 80077d4:	e00c      	b.n	80077f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077d6:	4a13      	ldr	r2, [pc, #76]	; (8007824 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	fbb2 f3f3 	udiv	r3, r2, r3
 80077de:	4a10      	ldr	r2, [pc, #64]	; (8007820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e0:	68d2      	ldr	r2, [r2, #12]
 80077e2:	0a12      	lsrs	r2, r2, #8
 80077e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077e8:	fb02 f303 	mul.w	r3, r2, r3
 80077ec:	617b      	str	r3, [r7, #20]
      break;
 80077ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077f0:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	0e5b      	lsrs	r3, r3, #25
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	3301      	adds	r3, #1
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	e001      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007810:	693b      	ldr	r3, [r7, #16]
}
 8007812:	4618      	mov	r0, r3
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40021000 	.word	0x40021000
 8007824:	00f42400 	.word	0x00f42400
 8007828:	016e3600 	.word	0x016e3600

0800782c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <HAL_RCC_GetHCLKFreq+0x14>)
 8007832:	681b      	ldr	r3, [r3, #0]
}
 8007834:	4618      	mov	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000000 	.word	0x20000000

08007844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007848:	f7ff fff0 	bl	800782c <HAL_RCC_GetHCLKFreq>
 800784c:	4602      	mov	r2, r0
 800784e:	4b06      	ldr	r3, [pc, #24]	; (8007868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	0a1b      	lsrs	r3, r3, #8
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4904      	ldr	r1, [pc, #16]	; (800786c <HAL_RCC_GetPCLK1Freq+0x28>)
 800785a:	5ccb      	ldrb	r3, [r1, r3]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40021000 	.word	0x40021000
 800786c:	0800d020 	.word	0x0800d020

08007870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007874:	f7ff ffda 	bl	800782c <HAL_RCC_GetHCLKFreq>
 8007878:	4602      	mov	r2, r0
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	0adb      	lsrs	r3, r3, #11
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	4904      	ldr	r1, [pc, #16]	; (8007898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007886:	5ccb      	ldrb	r3, [r1, r3]
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007890:	4618      	mov	r0, r3
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40021000 	.word	0x40021000
 8007898:	0800d020 	.word	0x0800d020

0800789c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	220f      	movs	r2, #15
 80078aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80078ac:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <HAL_RCC_GetClockConfig+0x5c>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f003 0203 	and.w	r2, r3, #3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80078b8:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <HAL_RCC_GetClockConfig+0x5c>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80078c4:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <HAL_RCC_GetClockConfig+0x5c>)
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80078d0:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <HAL_RCC_GetClockConfig+0x5c>)
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	08db      	lsrs	r3, r3, #3
 80078d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80078de:	4b07      	ldr	r3, [pc, #28]	; (80078fc <HAL_RCC_GetClockConfig+0x60>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 020f 	and.w	r2, r3, #15
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	601a      	str	r2, [r3, #0]
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40021000 	.word	0x40021000
 80078fc:	40022000 	.word	0x40022000

08007900 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007906:	4b1e      	ldr	r3, [pc, #120]	; (8007980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007910:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	091b      	lsrs	r3, r3, #4
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	3301      	adds	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2b03      	cmp	r3, #3
 8007922:	d10c      	bne.n	800793e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007924:	4a17      	ldr	r2, [pc, #92]	; (8007984 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	4a14      	ldr	r2, [pc, #80]	; (8007980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800792e:	68d2      	ldr	r2, [r2, #12]
 8007930:	0a12      	lsrs	r2, r2, #8
 8007932:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007936:	fb02 f303 	mul.w	r3, r2, r3
 800793a:	617b      	str	r3, [r7, #20]
    break;
 800793c:	e00c      	b.n	8007958 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800793e:	4a12      	ldr	r2, [pc, #72]	; (8007988 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	fbb2 f3f3 	udiv	r3, r2, r3
 8007946:	4a0e      	ldr	r2, [pc, #56]	; (8007980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007948:	68d2      	ldr	r2, [r2, #12]
 800794a:	0a12      	lsrs	r2, r2, #8
 800794c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007950:	fb02 f303 	mul.w	r3, r2, r3
 8007954:	617b      	str	r3, [r7, #20]
    break;
 8007956:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	0e5b      	lsrs	r3, r3, #25
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	3301      	adds	r3, #1
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007972:	687b      	ldr	r3, [r7, #4]
}
 8007974:	4618      	mov	r0, r3
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40021000 	.word	0x40021000
 8007984:	016e3600 	.word	0x016e3600
 8007988:	00f42400 	.word	0x00f42400

0800798c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007994:	2300      	movs	r3, #0
 8007996:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007998:	2300      	movs	r3, #0
 800799a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 8098 	beq.w	8007ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079aa:	2300      	movs	r3, #0
 80079ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ae:	4b43      	ldr	r3, [pc, #268]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ba:	4b40      	ldr	r3, [pc, #256]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079be:	4a3f      	ldr	r2, [pc, #252]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c4:	6593      	str	r3, [r2, #88]	; 0x58
 80079c6:	4b3d      	ldr	r3, [pc, #244]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ce:	60bb      	str	r3, [r7, #8]
 80079d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079d2:	2301      	movs	r3, #1
 80079d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079d6:	4b3a      	ldr	r3, [pc, #232]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a39      	ldr	r2, [pc, #228]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079e2:	f7fc f90f 	bl	8003c04 <HAL_GetTick>
 80079e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079e8:	e009      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ea:	f7fc f90b 	bl	8003c04 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d902      	bls.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	74fb      	strb	r3, [r7, #19]
        break;
 80079fc:	e005      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079fe:	4b30      	ldr	r3, [pc, #192]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0ef      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a0a:	7cfb      	ldrb	r3, [r7, #19]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d159      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a10:	4b2a      	ldr	r3, [pc, #168]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d01e      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d019      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a2c:	4b23      	ldr	r3, [pc, #140]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a38:	4b20      	ldr	r3, [pc, #128]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	4a1f      	ldr	r2, [pc, #124]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a48:	4b1c      	ldr	r3, [pc, #112]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4e:	4a1b      	ldr	r2, [pc, #108]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a58:	4a18      	ldr	r2, [pc, #96]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d016      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6a:	f7fc f8cb 	bl	8003c04 <HAL_GetTick>
 8007a6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a70:	e00b      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a72:	f7fc f8c7 	bl	8003c04 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d902      	bls.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	74fb      	strb	r3, [r7, #19]
            break;
 8007a88:	e006      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a8a:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0ec      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007a98:	7cfb      	ldrb	r3, [r7, #19]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10b      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a9e:	4b07      	ldr	r3, [pc, #28]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aac:	4903      	ldr	r1, [pc, #12]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007ab4:	e008      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ab6:	7cfb      	ldrb	r3, [r7, #19]
 8007ab8:	74bb      	strb	r3, [r7, #18]
 8007aba:	e005      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac4:	7cfb      	ldrb	r3, [r7, #19]
 8007ac6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ac8:	7c7b      	ldrb	r3, [r7, #17]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d105      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ace:	4ba7      	ldr	r3, [pc, #668]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad2:	4aa6      	ldr	r2, [pc, #664]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ad8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ae6:	4ba1      	ldr	r3, [pc, #644]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aec:	f023 0203 	bic.w	r2, r3, #3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	499d      	ldr	r1, [pc, #628]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b08:	4b98      	ldr	r3, [pc, #608]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0e:	f023 020c 	bic.w	r2, r3, #12
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	4995      	ldr	r1, [pc, #596]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b2a:	4b90      	ldr	r3, [pc, #576]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	498c      	ldr	r1, [pc, #560]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b4c:	4b87      	ldr	r3, [pc, #540]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	4984      	ldr	r1, [pc, #528]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0310 	and.w	r3, r3, #16
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b6e:	4b7f      	ldr	r3, [pc, #508]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	497b      	ldr	r1, [pc, #492]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b90:	4b76      	ldr	r3, [pc, #472]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	4973      	ldr	r1, [pc, #460]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bb2:	4b6e      	ldr	r3, [pc, #440]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	496a      	ldr	r1, [pc, #424]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bd4:	4b65      	ldr	r3, [pc, #404]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	4962      	ldr	r1, [pc, #392]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bf6:	4b5d      	ldr	r3, [pc, #372]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	4959      	ldr	r1, [pc, #356]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c18:	4b54      	ldr	r3, [pc, #336]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	4951      	ldr	r1, [pc, #324]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d015      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c3a:	4b4c      	ldr	r3, [pc, #304]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	4948      	ldr	r1, [pc, #288]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c58:	d105      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c5a:	4b44      	ldr	r3, [pc, #272]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	4a43      	ldr	r2, [pc, #268]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c64:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d015      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c72:	4b3e      	ldr	r3, [pc, #248]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c80:	493a      	ldr	r1, [pc, #232]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c90:	d105      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c92:	4b36      	ldr	r3, [pc, #216]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	4a35      	ldr	r2, [pc, #212]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c9c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d015      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007caa:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	492c      	ldr	r1, [pc, #176]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cc8:	d105      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cca:	4b28      	ldr	r3, [pc, #160]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	4a27      	ldr	r2, [pc, #156]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cd4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d015      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ce2:	4b22      	ldr	r3, [pc, #136]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	491e      	ldr	r1, [pc, #120]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d00:	d105      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d02:	4b1a      	ldr	r3, [pc, #104]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	4a19      	ldr	r2, [pc, #100]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d0c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d015      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d1a:	4b14      	ldr	r3, [pc, #80]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d28:	4910      	ldr	r1, [pc, #64]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d38:	d105      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d3a:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	4a0b      	ldr	r2, [pc, #44]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d018      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d52:	4b06      	ldr	r3, [pc, #24]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	4902      	ldr	r1, [pc, #8]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	e001      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007d6c:	40021000 	.word	0x40021000
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d76:	d105      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d78:	4b21      	ldr	r3, [pc, #132]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	4a20      	ldr	r2, [pc, #128]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d015      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007d90:	4b1b      	ldr	r3, [pc, #108]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	4918      	ldr	r1, [pc, #96]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dae:	d105      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007db0:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4a12      	ldr	r2, [pc, #72]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d015      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007dc8:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd6:	490a      	ldr	r1, [pc, #40]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007de6:	d105      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	4a04      	ldr	r2, [pc, #16]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007df2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007df4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	40021000 	.word	0x40021000

08007e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e049      	b.n	8007eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fb fd2a 	bl	8003884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4619      	mov	r1, r3
 8007e42:	4610      	mov	r0, r2
 8007e44:	f000 fa1e 	bl	8008284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d001      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e04f      	b.n	8007f6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0201 	orr.w	r2, r2, #1
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a23      	ldr	r2, [pc, #140]	; (8007f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01d      	beq.n	8007f2a <HAL_TIM_Base_Start_IT+0x76>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef6:	d018      	beq.n	8007f2a <HAL_TIM_Base_Start_IT+0x76>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1f      	ldr	r2, [pc, #124]	; (8007f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d013      	beq.n	8007f2a <HAL_TIM_Base_Start_IT+0x76>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1e      	ldr	r2, [pc, #120]	; (8007f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00e      	beq.n	8007f2a <HAL_TIM_Base_Start_IT+0x76>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1c      	ldr	r2, [pc, #112]	; (8007f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d009      	beq.n	8007f2a <HAL_TIM_Base_Start_IT+0x76>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d004      	beq.n	8007f2a <HAL_TIM_Base_Start_IT+0x76>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a19      	ldr	r2, [pc, #100]	; (8007f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d115      	bne.n	8007f56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	4b17      	ldr	r3, [pc, #92]	; (8007f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	d015      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xb4>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f42:	d011      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f54:	e008      	b.n	8007f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f042 0201 	orr.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	e000      	b.n	8007f6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	40012c00 	.word	0x40012c00
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40013400 	.word	0x40013400
 8007f88:	40014000 	.word	0x40014000
 8007f8c:	40015000 	.word	0x40015000
 8007f90:	00010007 	.word	0x00010007

08007f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d020      	beq.n	8007ff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01b      	beq.n	8007ff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0202 	mvn.w	r2, #2
 8007fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f931 	bl	8008246 <HAL_TIM_IC_CaptureCallback>
 8007fe4:	e005      	b.n	8007ff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f923 	bl	8008232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f934 	bl	800825a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d020      	beq.n	8008044 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01b      	beq.n	8008044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f06f 0204 	mvn.w	r2, #4
 8008014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2202      	movs	r2, #2
 800801a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f90b 	bl	8008246 <HAL_TIM_IC_CaptureCallback>
 8008030:	e005      	b.n	800803e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f8fd 	bl	8008232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f90e 	bl	800825a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d020      	beq.n	8008090 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01b      	beq.n	8008090 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0208 	mvn.w	r2, #8
 8008060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2204      	movs	r2, #4
 8008066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f8e5 	bl	8008246 <HAL_TIM_IC_CaptureCallback>
 800807c:	e005      	b.n	800808a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8d7 	bl	8008232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f8e8 	bl	800825a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	2b00      	cmp	r3, #0
 8008098:	d020      	beq.n	80080dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01b      	beq.n	80080dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0210 	mvn.w	r2, #16
 80080ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2208      	movs	r2, #8
 80080b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f8bf 	bl	8008246 <HAL_TIM_IC_CaptureCallback>
 80080c8:	e005      	b.n	80080d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f8b1 	bl	8008232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f8c2 	bl	800825a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00c      	beq.n	8008100 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0201 	mvn.w	r2, #1
 80080f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7f9 fe30 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008106:	2b00      	cmp	r3, #0
 8008108:	d104      	bne.n	8008114 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00c      	beq.n	800812e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811a:	2b00      	cmp	r3, #0
 800811c:	d007      	beq.n	800812e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f9ed 	bl	8008508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00c      	beq.n	8008152 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800814a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9e5 	bl	800851c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800816e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f87c 	bl	800826e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00c      	beq.n	800819a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f06f 0220 	mvn.w	r2, #32
 8008192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f9ad 	bl	80084f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00c      	beq.n	80081be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80081b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f9b9 	bl	8008530 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00c      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80081da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f9b1 	bl	8008544 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00c      	beq.n	8008206 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80081fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f9a9 	bl	8008558 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00c      	beq.n	800822a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f9a1 	bl	800856c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008262:	bf00      	nop
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
	...

08008284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a48      	ldr	r2, [pc, #288]	; (80083b8 <TIM_Base_SetConfig+0x134>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a2:	d00f      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a45      	ldr	r2, [pc, #276]	; (80083bc <TIM_Base_SetConfig+0x138>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00b      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a44      	ldr	r2, [pc, #272]	; (80083c0 <TIM_Base_SetConfig+0x13c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d007      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a43      	ldr	r2, [pc, #268]	; (80083c4 <TIM_Base_SetConfig+0x140>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a42      	ldr	r2, [pc, #264]	; (80083c8 <TIM_Base_SetConfig+0x144>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d108      	bne.n	80082d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a37      	ldr	r2, [pc, #220]	; (80083b8 <TIM_Base_SetConfig+0x134>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d01f      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e4:	d01b      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a34      	ldr	r2, [pc, #208]	; (80083bc <TIM_Base_SetConfig+0x138>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d017      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a33      	ldr	r2, [pc, #204]	; (80083c0 <TIM_Base_SetConfig+0x13c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d013      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a32      	ldr	r2, [pc, #200]	; (80083c4 <TIM_Base_SetConfig+0x140>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00f      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a32      	ldr	r2, [pc, #200]	; (80083cc <TIM_Base_SetConfig+0x148>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00b      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a31      	ldr	r2, [pc, #196]	; (80083d0 <TIM_Base_SetConfig+0x14c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d007      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a30      	ldr	r2, [pc, #192]	; (80083d4 <TIM_Base_SetConfig+0x150>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d003      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a2b      	ldr	r2, [pc, #172]	; (80083c8 <TIM_Base_SetConfig+0x144>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d108      	bne.n	8008330 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4313      	orrs	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <TIM_Base_SetConfig+0x134>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d013      	beq.n	8008384 <TIM_Base_SetConfig+0x100>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a19      	ldr	r2, [pc, #100]	; (80083c4 <TIM_Base_SetConfig+0x140>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00f      	beq.n	8008384 <TIM_Base_SetConfig+0x100>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a19      	ldr	r2, [pc, #100]	; (80083cc <TIM_Base_SetConfig+0x148>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00b      	beq.n	8008384 <TIM_Base_SetConfig+0x100>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a18      	ldr	r2, [pc, #96]	; (80083d0 <TIM_Base_SetConfig+0x14c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d007      	beq.n	8008384 <TIM_Base_SetConfig+0x100>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a17      	ldr	r2, [pc, #92]	; (80083d4 <TIM_Base_SetConfig+0x150>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_Base_SetConfig+0x100>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a12      	ldr	r2, [pc, #72]	; (80083c8 <TIM_Base_SetConfig+0x144>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d103      	bne.n	800838c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b01      	cmp	r3, #1
 800839c:	d105      	bne.n	80083aa <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f023 0201 	bic.w	r2, r3, #1
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	611a      	str	r2, [r3, #16]
  }
}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40000400 	.word	0x40000400
 80083c0:	40000800 	.word	0x40000800
 80083c4:	40013400 	.word	0x40013400
 80083c8:	40015000 	.word	0x40015000
 80083cc:	40014000 	.word	0x40014000
 80083d0:	40014400 	.word	0x40014400
 80083d4:	40014800 	.word	0x40014800

080083d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e06f      	b.n	80084d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a31      	ldr	r2, [pc, #196]	; (80084dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d009      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a30      	ldr	r2, [pc, #192]	; (80084e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d004      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a2e      	ldr	r2, [pc, #184]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008434:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a1e      	ldr	r2, [pc, #120]	; (80084dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d01d      	beq.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008470:	d018      	beq.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a1c      	ldr	r2, [pc, #112]	; (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d013      	beq.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1a      	ldr	r2, [pc, #104]	; (80084ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00e      	beq.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a15      	ldr	r2, [pc, #84]	; (80084e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d009      	beq.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a16      	ldr	r2, [pc, #88]	; (80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d004      	beq.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a11      	ldr	r2, [pc, #68]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d10c      	bne.n	80084be <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40013400 	.word	0x40013400
 80084e4:	40015000 	.word	0x40015000
 80084e8:	40000400 	.word	0x40000400
 80084ec:	40000800 	.word	0x40000800
 80084f0:	40014000 	.word	0x40014000

080084f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e042      	b.n	8008618 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008598:	2b00      	cmp	r3, #0
 800859a:	d106      	bne.n	80085aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fb fa23 	bl	80039f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2224      	movs	r2, #36	; 0x24
 80085ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0201 	bic.w	r2, r2, #1
 80085c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fbb2 	bl	8008d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f8b3 	bl	800873c <UART_SetConfig>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e01b      	b.n	8008618 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0201 	orr.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fc31 	bl	8008e78 <UART_CheckIdleState>
 8008616:	4603      	mov	r3, r0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	4613      	mov	r3, r2
 800862e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008636:	2b20      	cmp	r3, #32
 8008638:	d17b      	bne.n	8008732 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <HAL_UART_Transmit+0x26>
 8008640:	88fb      	ldrh	r3, [r7, #6]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e074      	b.n	8008734 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2221      	movs	r2, #33	; 0x21
 8008656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800865a:	f7fb fad3 	bl	8003c04 <HAL_GetTick>
 800865e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	88fa      	ldrh	r2, [r7, #6]
 800866c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008678:	d108      	bne.n	800868c <HAL_UART_Transmit+0x6c>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d104      	bne.n	800868c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e003      	b.n	8008694 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008690:	2300      	movs	r3, #0
 8008692:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008694:	e030      	b.n	80086f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2200      	movs	r2, #0
 800869e:	2180      	movs	r1, #128	; 0x80
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 fc93 	bl	8008fcc <UART_WaitOnFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e03d      	b.n	8008734 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	3302      	adds	r3, #2
 80086d2:	61bb      	str	r3, [r7, #24]
 80086d4:	e007      	b.n	80086e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	781a      	ldrb	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	3301      	adds	r3, #1
 80086e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1c8      	bne.n	8008696 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2200      	movs	r2, #0
 800870c:	2140      	movs	r1, #64	; 0x40
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f000 fc5c 	bl	8008fcc <UART_WaitOnFlagUntilTimeout>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d005      	beq.n	8008726 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2220      	movs	r2, #32
 800871e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e006      	b.n	8008734 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	e000      	b.n	8008734 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008732:	2302      	movs	r3, #2
  }
}
 8008734:	4618      	mov	r0, r3
 8008736:	3720      	adds	r7, #32
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800873c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008740:	b08c      	sub	sp, #48	; 0x30
 8008742:	af00      	add	r7, sp, #0
 8008744:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	431a      	orrs	r2, r3
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	431a      	orrs	r2, r3
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	4313      	orrs	r3, r2
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	4baa      	ldr	r3, [pc, #680]	; (8008a14 <UART_SetConfig+0x2d8>)
 800876c:	4013      	ands	r3, r2
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	6812      	ldr	r2, [r2, #0]
 8008772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008774:	430b      	orrs	r3, r1
 8008776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a9f      	ldr	r2, [pc, #636]	; (8008a18 <UART_SetConfig+0x2dc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a4:	4313      	orrs	r3, r2
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80087b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087bc:	430b      	orrs	r3, r1
 80087be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	f023 010f 	bic.w	r1, r3, #15
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a90      	ldr	r2, [pc, #576]	; (8008a1c <UART_SetConfig+0x2e0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d125      	bne.n	800882c <UART_SetConfig+0xf0>
 80087e0:	4b8f      	ldr	r3, [pc, #572]	; (8008a20 <UART_SetConfig+0x2e4>)
 80087e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d81a      	bhi.n	8008824 <UART_SetConfig+0xe8>
 80087ee:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <UART_SetConfig+0xb8>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008805 	.word	0x08008805
 80087f8:	08008815 	.word	0x08008815
 80087fc:	0800880d 	.word	0x0800880d
 8008800:	0800881d 	.word	0x0800881d
 8008804:	2301      	movs	r3, #1
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880a:	e116      	b.n	8008a3a <UART_SetConfig+0x2fe>
 800880c:	2302      	movs	r3, #2
 800880e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008812:	e112      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008814:	2304      	movs	r3, #4
 8008816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881a:	e10e      	b.n	8008a3a <UART_SetConfig+0x2fe>
 800881c:	2308      	movs	r3, #8
 800881e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008822:	e10a      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008824:	2310      	movs	r3, #16
 8008826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800882a:	e106      	b.n	8008a3a <UART_SetConfig+0x2fe>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a7c      	ldr	r2, [pc, #496]	; (8008a24 <UART_SetConfig+0x2e8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d138      	bne.n	80088a8 <UART_SetConfig+0x16c>
 8008836:	4b7a      	ldr	r3, [pc, #488]	; (8008a20 <UART_SetConfig+0x2e4>)
 8008838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883c:	f003 030c 	and.w	r3, r3, #12
 8008840:	2b0c      	cmp	r3, #12
 8008842:	d82d      	bhi.n	80088a0 <UART_SetConfig+0x164>
 8008844:	a201      	add	r2, pc, #4	; (adr r2, 800884c <UART_SetConfig+0x110>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	08008881 	.word	0x08008881
 8008850:	080088a1 	.word	0x080088a1
 8008854:	080088a1 	.word	0x080088a1
 8008858:	080088a1 	.word	0x080088a1
 800885c:	08008891 	.word	0x08008891
 8008860:	080088a1 	.word	0x080088a1
 8008864:	080088a1 	.word	0x080088a1
 8008868:	080088a1 	.word	0x080088a1
 800886c:	08008889 	.word	0x08008889
 8008870:	080088a1 	.word	0x080088a1
 8008874:	080088a1 	.word	0x080088a1
 8008878:	080088a1 	.word	0x080088a1
 800887c:	08008899 	.word	0x08008899
 8008880:	2300      	movs	r3, #0
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008886:	e0d8      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008888:	2302      	movs	r3, #2
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800888e:	e0d4      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008896:	e0d0      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889e:	e0cc      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a6:	e0c8      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a5e      	ldr	r2, [pc, #376]	; (8008a28 <UART_SetConfig+0x2ec>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d125      	bne.n	80088fe <UART_SetConfig+0x1c2>
 80088b2:	4b5b      	ldr	r3, [pc, #364]	; (8008a20 <UART_SetConfig+0x2e4>)
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088bc:	2b30      	cmp	r3, #48	; 0x30
 80088be:	d016      	beq.n	80088ee <UART_SetConfig+0x1b2>
 80088c0:	2b30      	cmp	r3, #48	; 0x30
 80088c2:	d818      	bhi.n	80088f6 <UART_SetConfig+0x1ba>
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d00a      	beq.n	80088de <UART_SetConfig+0x1a2>
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d814      	bhi.n	80088f6 <UART_SetConfig+0x1ba>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <UART_SetConfig+0x19a>
 80088d0:	2b10      	cmp	r3, #16
 80088d2:	d008      	beq.n	80088e6 <UART_SetConfig+0x1aa>
 80088d4:	e00f      	b.n	80088f6 <UART_SetConfig+0x1ba>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088dc:	e0ad      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80088de:	2302      	movs	r3, #2
 80088e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e4:	e0a9      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80088e6:	2304      	movs	r3, #4
 80088e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ec:	e0a5      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80088ee:	2308      	movs	r3, #8
 80088f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088f4:	e0a1      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80088f6:	2310      	movs	r3, #16
 80088f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fc:	e09d      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a4a      	ldr	r2, [pc, #296]	; (8008a2c <UART_SetConfig+0x2f0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d125      	bne.n	8008954 <UART_SetConfig+0x218>
 8008908:	4b45      	ldr	r3, [pc, #276]	; (8008a20 <UART_SetConfig+0x2e4>)
 800890a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800890e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008912:	2bc0      	cmp	r3, #192	; 0xc0
 8008914:	d016      	beq.n	8008944 <UART_SetConfig+0x208>
 8008916:	2bc0      	cmp	r3, #192	; 0xc0
 8008918:	d818      	bhi.n	800894c <UART_SetConfig+0x210>
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d00a      	beq.n	8008934 <UART_SetConfig+0x1f8>
 800891e:	2b80      	cmp	r3, #128	; 0x80
 8008920:	d814      	bhi.n	800894c <UART_SetConfig+0x210>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <UART_SetConfig+0x1f0>
 8008926:	2b40      	cmp	r3, #64	; 0x40
 8008928:	d008      	beq.n	800893c <UART_SetConfig+0x200>
 800892a:	e00f      	b.n	800894c <UART_SetConfig+0x210>
 800892c:	2300      	movs	r3, #0
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008932:	e082      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008934:	2302      	movs	r3, #2
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893a:	e07e      	b.n	8008a3a <UART_SetConfig+0x2fe>
 800893c:	2304      	movs	r3, #4
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008942:	e07a      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008944:	2308      	movs	r3, #8
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800894a:	e076      	b.n	8008a3a <UART_SetConfig+0x2fe>
 800894c:	2310      	movs	r3, #16
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008952:	e072      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a35      	ldr	r2, [pc, #212]	; (8008a30 <UART_SetConfig+0x2f4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d12a      	bne.n	80089b4 <UART_SetConfig+0x278>
 800895e:	4b30      	ldr	r3, [pc, #192]	; (8008a20 <UART_SetConfig+0x2e4>)
 8008960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800896c:	d01a      	beq.n	80089a4 <UART_SetConfig+0x268>
 800896e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008972:	d81b      	bhi.n	80089ac <UART_SetConfig+0x270>
 8008974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008978:	d00c      	beq.n	8008994 <UART_SetConfig+0x258>
 800897a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800897e:	d815      	bhi.n	80089ac <UART_SetConfig+0x270>
 8008980:	2b00      	cmp	r3, #0
 8008982:	d003      	beq.n	800898c <UART_SetConfig+0x250>
 8008984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008988:	d008      	beq.n	800899c <UART_SetConfig+0x260>
 800898a:	e00f      	b.n	80089ac <UART_SetConfig+0x270>
 800898c:	2300      	movs	r3, #0
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008992:	e052      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008994:	2302      	movs	r3, #2
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800899a:	e04e      	b.n	8008a3a <UART_SetConfig+0x2fe>
 800899c:	2304      	movs	r3, #4
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089a2:	e04a      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80089a4:	2308      	movs	r3, #8
 80089a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089aa:	e046      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80089ac:	2310      	movs	r3, #16
 80089ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089b2:	e042      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a17      	ldr	r2, [pc, #92]	; (8008a18 <UART_SetConfig+0x2dc>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d13a      	bne.n	8008a34 <UART_SetConfig+0x2f8>
 80089be:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <UART_SetConfig+0x2e4>)
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089cc:	d01a      	beq.n	8008a04 <UART_SetConfig+0x2c8>
 80089ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089d2:	d81b      	bhi.n	8008a0c <UART_SetConfig+0x2d0>
 80089d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d8:	d00c      	beq.n	80089f4 <UART_SetConfig+0x2b8>
 80089da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089de:	d815      	bhi.n	8008a0c <UART_SetConfig+0x2d0>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <UART_SetConfig+0x2b0>
 80089e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e8:	d008      	beq.n	80089fc <UART_SetConfig+0x2c0>
 80089ea:	e00f      	b.n	8008a0c <UART_SetConfig+0x2d0>
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089f2:	e022      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80089f4:	2302      	movs	r3, #2
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089fa:	e01e      	b.n	8008a3a <UART_SetConfig+0x2fe>
 80089fc:	2304      	movs	r3, #4
 80089fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a02:	e01a      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008a04:	2308      	movs	r3, #8
 8008a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a0a:	e016      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a12:	e012      	b.n	8008a3a <UART_SetConfig+0x2fe>
 8008a14:	cfff69f3 	.word	0xcfff69f3
 8008a18:	40008000 	.word	0x40008000
 8008a1c:	40013800 	.word	0x40013800
 8008a20:	40021000 	.word	0x40021000
 8008a24:	40004400 	.word	0x40004400
 8008a28:	40004800 	.word	0x40004800
 8008a2c:	40004c00 	.word	0x40004c00
 8008a30:	40005000 	.word	0x40005000
 8008a34:	2310      	movs	r3, #16
 8008a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4aae      	ldr	r2, [pc, #696]	; (8008cf8 <UART_SetConfig+0x5bc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	f040 8097 	bne.w	8008b74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d823      	bhi.n	8008a96 <UART_SetConfig+0x35a>
 8008a4e:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <UART_SetConfig+0x318>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a97 	.word	0x08008a97
 8008a5c:	08008a81 	.word	0x08008a81
 8008a60:	08008a97 	.word	0x08008a97
 8008a64:	08008a87 	.word	0x08008a87
 8008a68:	08008a97 	.word	0x08008a97
 8008a6c:	08008a97 	.word	0x08008a97
 8008a70:	08008a97 	.word	0x08008a97
 8008a74:	08008a8f 	.word	0x08008a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a78:	f7fe fee4 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 8008a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a7e:	e010      	b.n	8008aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a80:	4b9e      	ldr	r3, [pc, #632]	; (8008cfc <UART_SetConfig+0x5c0>)
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a84:	e00d      	b.n	8008aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a86:	f7fe fe6f 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 8008a8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a8c:	e009      	b.n	8008aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a94:	e005      	b.n	8008aa2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 8130 	beq.w	8008d0a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	4a94      	ldr	r2, [pc, #592]	; (8008d00 <UART_SetConfig+0x5c4>)
 8008ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	4413      	add	r3, r2
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d305      	bcc.n	8008ada <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d903      	bls.n	8008ae2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ae0:	e113      	b.n	8008d0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	60bb      	str	r3, [r7, #8]
 8008ae8:	60fa      	str	r2, [r7, #12]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	4a84      	ldr	r2, [pc, #528]	; (8008d00 <UART_SetConfig+0x5c4>)
 8008af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2200      	movs	r2, #0
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b04:	f7f8 f87a 	bl	8000bfc <__aeabi_uldivmod>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4619      	mov	r1, r3
 8008b10:	f04f 0200 	mov.w	r2, #0
 8008b14:	f04f 0300 	mov.w	r3, #0
 8008b18:	020b      	lsls	r3, r1, #8
 8008b1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b1e:	0202      	lsls	r2, r0, #8
 8008b20:	6979      	ldr	r1, [r7, #20]
 8008b22:	6849      	ldr	r1, [r1, #4]
 8008b24:	0849      	lsrs	r1, r1, #1
 8008b26:	2000      	movs	r0, #0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	eb12 0804 	adds.w	r8, r2, r4
 8008b30:	eb43 0905 	adc.w	r9, r3, r5
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	469a      	mov	sl, r3
 8008b3c:	4693      	mov	fp, r2
 8008b3e:	4652      	mov	r2, sl
 8008b40:	465b      	mov	r3, fp
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f8 f859 	bl	8000bfc <__aeabi_uldivmod>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4613      	mov	r3, r2
 8008b50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b58:	d308      	bcc.n	8008b6c <UART_SetConfig+0x430>
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b60:	d204      	bcs.n	8008b6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6a3a      	ldr	r2, [r7, #32]
 8008b68:	60da      	str	r2, [r3, #12]
 8008b6a:	e0ce      	b.n	8008d0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b72:	e0ca      	b.n	8008d0a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b7c:	d166      	bne.n	8008c4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b82:	2b08      	cmp	r3, #8
 8008b84:	d827      	bhi.n	8008bd6 <UART_SetConfig+0x49a>
 8008b86:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <UART_SetConfig+0x450>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008bb1 	.word	0x08008bb1
 8008b90:	08008bb9 	.word	0x08008bb9
 8008b94:	08008bc1 	.word	0x08008bc1
 8008b98:	08008bd7 	.word	0x08008bd7
 8008b9c:	08008bc7 	.word	0x08008bc7
 8008ba0:	08008bd7 	.word	0x08008bd7
 8008ba4:	08008bd7 	.word	0x08008bd7
 8008ba8:	08008bd7 	.word	0x08008bd7
 8008bac:	08008bcf 	.word	0x08008bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bb0:	f7fe fe48 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 8008bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bb6:	e014      	b.n	8008be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb8:	f7fe fe5a 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 8008bbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bbe:	e010      	b.n	8008be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bc0:	4b4e      	ldr	r3, [pc, #312]	; (8008cfc <UART_SetConfig+0x5c0>)
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bc4:	e00d      	b.n	8008be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bc6:	f7fe fdcf 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 8008bca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bcc:	e009      	b.n	8008be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bd4:	e005      	b.n	8008be2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8090 	beq.w	8008d0a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	4a44      	ldr	r2, [pc, #272]	; (8008d00 <UART_SetConfig+0x5c4>)
 8008bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bfc:	005a      	lsls	r2, r3, #1
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	085b      	lsrs	r3, r3, #1
 8008c04:	441a      	add	r2, r3
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	2b0f      	cmp	r3, #15
 8008c14:	d916      	bls.n	8008c44 <UART_SetConfig+0x508>
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c1c:	d212      	bcs.n	8008c44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	f023 030f 	bic.w	r3, r3, #15
 8008c26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	085b      	lsrs	r3, r3, #1
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	8bfb      	ldrh	r3, [r7, #30]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	8bfa      	ldrh	r2, [r7, #30]
 8008c40:	60da      	str	r2, [r3, #12]
 8008c42:	e062      	b.n	8008d0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c4a:	e05e      	b.n	8008d0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d828      	bhi.n	8008ca6 <UART_SetConfig+0x56a>
 8008c54:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <UART_SetConfig+0x520>)
 8008c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008c81 	.word	0x08008c81
 8008c60:	08008c89 	.word	0x08008c89
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	08008ca7 	.word	0x08008ca7
 8008c6c:	08008c97 	.word	0x08008c97
 8008c70:	08008ca7 	.word	0x08008ca7
 8008c74:	08008ca7 	.word	0x08008ca7
 8008c78:	08008ca7 	.word	0x08008ca7
 8008c7c:	08008c9f 	.word	0x08008c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c80:	f7fe fde0 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 8008c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c86:	e014      	b.n	8008cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c88:	f7fe fdf2 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 8008c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c8e:	e010      	b.n	8008cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c90:	4b1a      	ldr	r3, [pc, #104]	; (8008cfc <UART_SetConfig+0x5c0>)
 8008c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c94:	e00d      	b.n	8008cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c96:	f7fe fd67 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 8008c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c9c:	e009      	b.n	8008cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ca4:	e005      	b.n	8008cb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008cb0:	bf00      	nop
    }

    if (pclk != 0U)
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d028      	beq.n	8008d0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	4a10      	ldr	r2, [pc, #64]	; (8008d00 <UART_SetConfig+0x5c4>)
 8008cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	441a      	add	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	2b0f      	cmp	r3, #15
 8008ce0:	d910      	bls.n	8008d04 <UART_SetConfig+0x5c8>
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce8:	d20c      	bcs.n	8008d04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	60da      	str	r2, [r3, #12]
 8008cf4:	e009      	b.n	8008d0a <UART_SetConfig+0x5ce>
 8008cf6:	bf00      	nop
 8008cf8:	40008000 	.word	0x40008000
 8008cfc:	00f42400 	.word	0x00f42400
 8008d00:	0800d028 	.word	0x0800d028
      }
      else
      {
        ret = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2200      	movs	r2, #0
 8008d24:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008d26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3730      	adds	r7, #48	; 0x30
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	f003 0308 	and.w	r3, r3, #8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00a      	beq.n	8008d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00a      	beq.n	8008de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e32:	d10a      	bne.n	8008e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b098      	sub	sp, #96	; 0x60
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e88:	f7fa febc 	bl	8003c04 <HAL_GetTick>
 8008e8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d12f      	bne.n	8008efc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f88e 	bl	8008fcc <UART_WaitOnFlagUntilTimeout>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d022      	beq.n	8008efc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eca:	653b      	str	r3, [r7, #80]	; 0x50
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e6      	bne.n	8008eb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e063      	b.n	8008fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d149      	bne.n	8008f9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f12:	2200      	movs	r2, #0
 8008f14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f857 	bl	8008fcc <UART_WaitOnFlagUntilTimeout>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d03c      	beq.n	8008f9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	623b      	str	r3, [r7, #32]
   return(result);
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f42:	633b      	str	r3, [r7, #48]	; 0x30
 8008f44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e6      	bne.n	8008f24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f76:	61fa      	str	r2, [r7, #28]
 8008f78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	69b9      	ldr	r1, [r7, #24]
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	617b      	str	r3, [r7, #20]
   return(result);
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e5      	bne.n	8008f56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e012      	b.n	8008fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3758      	adds	r7, #88	; 0x58
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	603b      	str	r3, [r7, #0]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fdc:	e04f      	b.n	800907e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe4:	d04b      	beq.n	800907e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe6:	f7fa fe0d 	bl	8003c04 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d302      	bcc.n	8008ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e04e      	b.n	800909e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d037      	beq.n	800907e <UART_WaitOnFlagUntilTimeout+0xb2>
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b80      	cmp	r3, #128	; 0x80
 8009012:	d034      	beq.n	800907e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b40      	cmp	r3, #64	; 0x40
 8009018:	d031      	beq.n	800907e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	f003 0308 	and.w	r3, r3, #8
 8009024:	2b08      	cmp	r3, #8
 8009026:	d110      	bne.n	800904a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2208      	movs	r2, #8
 800902e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f838 	bl	80090a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2208      	movs	r2, #8
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e029      	b.n	800909e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009058:	d111      	bne.n	800907e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f81e 	bl	80090a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e00f      	b.n	800909e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	69da      	ldr	r2, [r3, #28]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4013      	ands	r3, r2
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	429a      	cmp	r2, r3
 800908c:	bf0c      	ite	eq
 800908e:	2301      	moveq	r3, #1
 8009090:	2300      	movne	r3, #0
 8009092:	b2db      	uxtb	r3, r3
 8009094:	461a      	mov	r2, r3
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	429a      	cmp	r2, r3
 800909a:	d0a0      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b095      	sub	sp, #84	; 0x54
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090cc:	643b      	str	r3, [r7, #64]	; 0x40
 80090ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e6      	bne.n	80090ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f6:	f023 0301 	bic.w	r3, r3, #1
 80090fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800910a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e3      	bne.n	80090e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800911c:	2b01      	cmp	r3, #1
 800911e:	d118      	bne.n	8009152 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	60bb      	str	r3, [r7, #8]
   return(result);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f023 0310 	bic.w	r3, r3, #16
 8009134:	647b      	str	r3, [r7, #68]	; 0x44
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800913e:	61bb      	str	r3, [r7, #24]
 8009140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6979      	ldr	r1, [r7, #20]
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	613b      	str	r3, [r7, #16]
   return(result);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e6      	bne.n	8009120 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2220      	movs	r2, #32
 8009156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009166:	bf00      	nop
 8009168:	3754      	adds	r7, #84	; 0x54
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_UARTEx_DisableFifoMode+0x16>
 8009184:	2302      	movs	r3, #2
 8009186:	e027      	b.n	80091d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2224      	movs	r2, #36	; 0x24
 8009194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0201 	bic.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d101      	bne.n	80091fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091f8:	2302      	movs	r3, #2
 80091fa:	e02d      	b.n	8009258 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2224      	movs	r2, #36	; 0x24
 8009208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0201 	bic.w	r2, r2, #1
 8009222:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f84f 	bl	80092dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2220      	movs	r2, #32
 800924a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009274:	2302      	movs	r3, #2
 8009276:	e02d      	b.n	80092d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2224      	movs	r2, #36	; 0x24
 8009284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0201 	bic.w	r2, r2, #1
 800929e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f811 	bl	80092dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d108      	bne.n	80092fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092fc:	e031      	b.n	8009362 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092fe:	2308      	movs	r3, #8
 8009300:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009302:	2308      	movs	r3, #8
 8009304:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	0e5b      	lsrs	r3, r3, #25
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 0307 	and.w	r3, r3, #7
 8009314:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	0f5b      	lsrs	r3, r3, #29
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	7b3a      	ldrb	r2, [r7, #12]
 800932a:	4911      	ldr	r1, [pc, #68]	; (8009370 <UARTEx_SetNbDataToProcess+0x94>)
 800932c:	5c8a      	ldrb	r2, [r1, r2]
 800932e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009332:	7b3a      	ldrb	r2, [r7, #12]
 8009334:	490f      	ldr	r1, [pc, #60]	; (8009374 <UARTEx_SetNbDataToProcess+0x98>)
 8009336:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009338:	fb93 f3f2 	sdiv	r3, r3, r2
 800933c:	b29a      	uxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	7b7a      	ldrb	r2, [r7, #13]
 8009348:	4909      	ldr	r1, [pc, #36]	; (8009370 <UARTEx_SetNbDataToProcess+0x94>)
 800934a:	5c8a      	ldrb	r2, [r1, r2]
 800934c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009350:	7b7a      	ldrb	r2, [r7, #13]
 8009352:	4908      	ldr	r1, [pc, #32]	; (8009374 <UARTEx_SetNbDataToProcess+0x98>)
 8009354:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009356:	fb93 f3f2 	sdiv	r3, r3, r2
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009362:	bf00      	nop
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	0800d040 	.word	0x0800d040
 8009374:	0800d048 	.word	0x0800d048

08009378 <__NVIC_SetPriority>:
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	6039      	str	r1, [r7, #0]
 8009382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009388:	2b00      	cmp	r3, #0
 800938a:	db0a      	blt.n	80093a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	b2da      	uxtb	r2, r3
 8009390:	490c      	ldr	r1, [pc, #48]	; (80093c4 <__NVIC_SetPriority+0x4c>)
 8009392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009396:	0112      	lsls	r2, r2, #4
 8009398:	b2d2      	uxtb	r2, r2
 800939a:	440b      	add	r3, r1
 800939c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80093a0:	e00a      	b.n	80093b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	4908      	ldr	r1, [pc, #32]	; (80093c8 <__NVIC_SetPriority+0x50>)
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	f003 030f 	and.w	r3, r3, #15
 80093ae:	3b04      	subs	r3, #4
 80093b0:	0112      	lsls	r2, r2, #4
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	440b      	add	r3, r1
 80093b6:	761a      	strb	r2, [r3, #24]
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	e000e100 	.word	0xe000e100
 80093c8:	e000ed00 	.word	0xe000ed00

080093cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <SysTick_Handler+0x1c>)
 80093d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80093d4:	f002 fa9a 	bl	800b90c <xTaskGetSchedulerState>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d001      	beq.n	80093e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80093de:	f003 f983 	bl	800c6e8 <xPortSysTickHandler>
  }
}
 80093e2:	bf00      	nop
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	e000e010 	.word	0xe000e010

080093ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80093f0:	2100      	movs	r1, #0
 80093f2:	f06f 0004 	mvn.w	r0, #4
 80093f6:	f7ff ffbf 	bl	8009378 <__NVIC_SetPriority>
#endif
}
 80093fa:	bf00      	nop
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009406:	f3ef 8305 	mrs	r3, IPSR
 800940a:	603b      	str	r3, [r7, #0]
  return(result);
 800940c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009412:	f06f 0305 	mvn.w	r3, #5
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	e00c      	b.n	8009434 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800941a:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <osKernelInitialize+0x44>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d105      	bne.n	800942e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009422:	4b08      	ldr	r3, [pc, #32]	; (8009444 <osKernelInitialize+0x44>)
 8009424:	2201      	movs	r2, #1
 8009426:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009428:	2300      	movs	r3, #0
 800942a:	607b      	str	r3, [r7, #4]
 800942c:	e002      	b.n	8009434 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800942e:	f04f 33ff 	mov.w	r3, #4294967295
 8009432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009434:	687b      	ldr	r3, [r7, #4]
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	2000034c 	.word	0x2000034c

08009448 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800944e:	f3ef 8305 	mrs	r3, IPSR
 8009452:	603b      	str	r3, [r7, #0]
  return(result);
 8009454:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <osKernelStart+0x1a>
    stat = osErrorISR;
 800945a:	f06f 0305 	mvn.w	r3, #5
 800945e:	607b      	str	r3, [r7, #4]
 8009460:	e010      	b.n	8009484 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009462:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <osKernelStart+0x48>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d109      	bne.n	800947e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800946a:	f7ff ffbf 	bl	80093ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800946e:	4b08      	ldr	r3, [pc, #32]	; (8009490 <osKernelStart+0x48>)
 8009470:	2202      	movs	r2, #2
 8009472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009474:	f001 fdee 	bl	800b054 <vTaskStartScheduler>
      stat = osOK;
 8009478:	2300      	movs	r3, #0
 800947a:	607b      	str	r3, [r7, #4]
 800947c:	e002      	b.n	8009484 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800947e:	f04f 33ff 	mov.w	r3, #4294967295
 8009482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009484:	687b      	ldr	r3, [r7, #4]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	2000034c 	.word	0x2000034c

08009494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009494:	b580      	push	{r7, lr}
 8009496:	b08e      	sub	sp, #56	; 0x38
 8009498:	af04      	add	r7, sp, #16
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80094a0:	2300      	movs	r3, #0
 80094a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094a4:	f3ef 8305 	mrs	r3, IPSR
 80094a8:	617b      	str	r3, [r7, #20]
  return(result);
 80094aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d17e      	bne.n	80095ae <osThreadNew+0x11a>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d07b      	beq.n	80095ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80094b6:	2380      	movs	r3, #128	; 0x80
 80094b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80094ba:	2318      	movs	r3, #24
 80094bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80094c2:	f04f 33ff 	mov.w	r3, #4294967295
 80094c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d045      	beq.n	800955a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <osThreadNew+0x48>
        name = attr->name;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <osThreadNew+0x6e>
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	2b38      	cmp	r3, #56	; 0x38
 80094f4:	d805      	bhi.n	8009502 <osThreadNew+0x6e>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <osThreadNew+0x72>
        return (NULL);
 8009502:	2300      	movs	r3, #0
 8009504:	e054      	b.n	80095b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	089b      	lsrs	r3, r3, #2
 8009514:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00e      	beq.n	800953c <osThreadNew+0xa8>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	2ba7      	cmp	r3, #167	; 0xa7
 8009524:	d90a      	bls.n	800953c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800952a:	2b00      	cmp	r3, #0
 800952c:	d006      	beq.n	800953c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <osThreadNew+0xa8>
        mem = 1;
 8009536:	2301      	movs	r3, #1
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	e010      	b.n	800955e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10c      	bne.n	800955e <osThreadNew+0xca>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d108      	bne.n	800955e <osThreadNew+0xca>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <osThreadNew+0xca>
          mem = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	e001      	b.n	800955e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d110      	bne.n	8009586 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800956c:	9202      	str	r2, [sp, #8]
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	6a3a      	ldr	r2, [r7, #32]
 8009578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f001 fb7e 	bl	800ac7c <xTaskCreateStatic>
 8009580:	4603      	mov	r3, r0
 8009582:	613b      	str	r3, [r7, #16]
 8009584:	e013      	b.n	80095ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d110      	bne.n	80095ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	b29a      	uxth	r2, r3
 8009590:	f107 0310 	add.w	r3, r7, #16
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f001 fbc9 	bl	800ad36 <xTaskCreate>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d001      	beq.n	80095ae <osThreadNew+0x11a>
            hTask = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80095ae:	693b      	ldr	r3, [r7, #16]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3728      	adds	r7, #40	; 0x28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095c0:	f3ef 8305 	mrs	r3, IPSR
 80095c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80095c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <osDelay+0x1c>
    stat = osErrorISR;
 80095cc:	f06f 0305 	mvn.w	r3, #5
 80095d0:	60fb      	str	r3, [r7, #12]
 80095d2:	e007      	b.n	80095e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f001 fd04 	bl	800afec <vTaskDelay>
    }
  }

  return (stat);
 80095e4:	68fb      	ldr	r3, [r7, #12]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b08a      	sub	sp, #40	; 0x28
 80095f2:	af02      	add	r7, sp, #8
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fe:	f3ef 8305 	mrs	r3, IPSR
 8009602:	613b      	str	r3, [r7, #16]
  return(result);
 8009604:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009606:	2b00      	cmp	r3, #0
 8009608:	d175      	bne.n	80096f6 <osSemaphoreNew+0x108>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d072      	beq.n	80096f6 <osSemaphoreNew+0x108>
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d86e      	bhi.n	80096f6 <osSemaphoreNew+0x108>
    mem = -1;
 8009618:	f04f 33ff 	mov.w	r3, #4294967295
 800961c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d015      	beq.n	8009650 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <osSemaphoreNew+0x4c>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	2b4f      	cmp	r3, #79	; 0x4f
 8009632:	d902      	bls.n	800963a <osSemaphoreNew+0x4c>
        mem = 1;
 8009634:	2301      	movs	r3, #1
 8009636:	61bb      	str	r3, [r7, #24]
 8009638:	e00c      	b.n	8009654 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d108      	bne.n	8009654 <osSemaphoreNew+0x66>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d104      	bne.n	8009654 <osSemaphoreNew+0x66>
          mem = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	61bb      	str	r3, [r7, #24]
 800964e:	e001      	b.n	8009654 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965a:	d04c      	beq.n	80096f6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d128      	bne.n	80096b4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d10a      	bne.n	800967e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	2203      	movs	r2, #3
 800966e:	9200      	str	r2, [sp, #0]
 8009670:	2200      	movs	r2, #0
 8009672:	2100      	movs	r1, #0
 8009674:	2001      	movs	r0, #1
 8009676:	f000 fb5b 	bl	8009d30 <xQueueGenericCreateStatic>
 800967a:	61f8      	str	r0, [r7, #28]
 800967c:	e005      	b.n	800968a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800967e:	2203      	movs	r2, #3
 8009680:	2100      	movs	r1, #0
 8009682:	2001      	movs	r0, #1
 8009684:	f000 fbcc 	bl	8009e20 <xQueueGenericCreate>
 8009688:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d022      	beq.n	80096d6 <osSemaphoreNew+0xe8>
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01f      	beq.n	80096d6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009696:	2300      	movs	r3, #0
 8009698:	2200      	movs	r2, #0
 800969a:	2100      	movs	r1, #0
 800969c:	69f8      	ldr	r0, [r7, #28]
 800969e:	f000 fc87 	bl	8009fb0 <xQueueGenericSend>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d016      	beq.n	80096d6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80096a8:	69f8      	ldr	r0, [r7, #28]
 80096aa:	f001 f913 	bl	800a8d4 <vQueueDelete>
            hSemaphore = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	e010      	b.n	80096d6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d108      	bne.n	80096cc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	461a      	mov	r2, r3
 80096c0:	68b9      	ldr	r1, [r7, #8]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 fc09 	bl	8009eda <xQueueCreateCountingSemaphoreStatic>
 80096c8:	61f8      	str	r0, [r7, #28]
 80096ca:	e004      	b.n	80096d6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80096cc:	68b9      	ldr	r1, [r7, #8]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fc3a 	bl	8009f48 <xQueueCreateCountingSemaphore>
 80096d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00c      	beq.n	80096f6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <osSemaphoreNew+0xfc>
          name = attr->name;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	617b      	str	r3, [r7, #20]
 80096e8:	e001      	b.n	80096ee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80096ee:	6979      	ldr	r1, [r7, #20]
 80096f0:	69f8      	ldr	r0, [r7, #28]
 80096f2:	f001 fa3b 	bl	800ab6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80096f6:	69fb      	ldr	r3, [r7, #28]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3720      	adds	r7, #32
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d103      	bne.n	8009720 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009718:	f06f 0303 	mvn.w	r3, #3
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	e039      	b.n	8009794 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009720:	f3ef 8305 	mrs	r3, IPSR
 8009724:	60fb      	str	r3, [r7, #12]
  return(result);
 8009726:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009728:	2b00      	cmp	r3, #0
 800972a:	d022      	beq.n	8009772 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009732:	f06f 0303 	mvn.w	r3, #3
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	e02c      	b.n	8009794 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800973a:	2300      	movs	r3, #0
 800973c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800973e:	f107 0308 	add.w	r3, r7, #8
 8009742:	461a      	mov	r2, r3
 8009744:	2100      	movs	r1, #0
 8009746:	6938      	ldr	r0, [r7, #16]
 8009748:	f001 f844 	bl	800a7d4 <xQueueReceiveFromISR>
 800974c:	4603      	mov	r3, r0
 800974e:	2b01      	cmp	r3, #1
 8009750:	d003      	beq.n	800975a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009752:	f06f 0302 	mvn.w	r3, #2
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	e01c      	b.n	8009794 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d019      	beq.n	8009794 <osSemaphoreAcquire+0x94>
 8009760:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <osSemaphoreAcquire+0xa0>)
 8009762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	e010      	b.n	8009794 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6938      	ldr	r0, [r7, #16]
 8009776:	f000 ff21 	bl	800a5bc <xQueueSemaphoreTake>
 800977a:	4603      	mov	r3, r0
 800977c:	2b01      	cmp	r3, #1
 800977e:	d009      	beq.n	8009794 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d003      	beq.n	800978e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009786:	f06f 0301 	mvn.w	r3, #1
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e002      	b.n	8009794 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800978e:	f06f 0302 	mvn.w	r3, #2
 8009792:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009794:	697b      	ldr	r3, [r7, #20]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d103      	bne.n	80097c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80097ba:	f06f 0303 	mvn.w	r3, #3
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	e02c      	b.n	800981c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097c2:	f3ef 8305 	mrs	r3, IPSR
 80097c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80097c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d01a      	beq.n	8009804 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80097d2:	f107 0308 	add.w	r3, r7, #8
 80097d6:	4619      	mov	r1, r3
 80097d8:	6938      	ldr	r0, [r7, #16]
 80097da:	f000 fd82 	bl	800a2e2 <xQueueGiveFromISR>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d003      	beq.n	80097ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80097e4:	f06f 0302 	mvn.w	r3, #2
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	e017      	b.n	800981c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d014      	beq.n	800981c <osSemaphoreRelease+0x78>
 80097f2:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <osSemaphoreRelease+0x84>)
 80097f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	e00b      	b.n	800981c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009804:	2300      	movs	r3, #0
 8009806:	2200      	movs	r2, #0
 8009808:	2100      	movs	r1, #0
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f000 fbd0 	bl	8009fb0 <xQueueGenericSend>
 8009810:	4603      	mov	r3, r0
 8009812:	2b01      	cmp	r3, #1
 8009814:	d002      	beq.n	800981c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009816:	f06f 0302 	mvn.w	r3, #2
 800981a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800981c:	697b      	ldr	r3, [r7, #20]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	; 0x28
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800983c:	f3ef 8305 	mrs	r3, IPSR
 8009840:	613b      	str	r3, [r7, #16]
  return(result);
 8009842:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009844:	2b00      	cmp	r3, #0
 8009846:	d15f      	bne.n	8009908 <osMessageQueueNew+0xdc>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d05c      	beq.n	8009908 <osMessageQueueNew+0xdc>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d059      	beq.n	8009908 <osMessageQueueNew+0xdc>
    mem = -1;
 8009854:	f04f 33ff 	mov.w	r3, #4294967295
 8009858:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d029      	beq.n	80098b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d012      	beq.n	800988e <osMessageQueueNew+0x62>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b4f      	cmp	r3, #79	; 0x4f
 800986e:	d90e      	bls.n	800988e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	695a      	ldr	r2, [r3, #20]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	429a      	cmp	r2, r3
 8009886:	d302      	bcc.n	800988e <osMessageQueueNew+0x62>
        mem = 1;
 8009888:	2301      	movs	r3, #1
 800988a:	61bb      	str	r3, [r7, #24]
 800988c:	e014      	b.n	80098b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d110      	bne.n	80098b8 <osMessageQueueNew+0x8c>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10c      	bne.n	80098b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d108      	bne.n	80098b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d104      	bne.n	80098b8 <osMessageQueueNew+0x8c>
          mem = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	e001      	b.n	80098b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d10b      	bne.n	80098d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	2100      	movs	r1, #0
 80098c8:	9100      	str	r1, [sp, #0]
 80098ca:	68b9      	ldr	r1, [r7, #8]
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fa2f 	bl	8009d30 <xQueueGenericCreateStatic>
 80098d2:	61f8      	str	r0, [r7, #28]
 80098d4:	e008      	b.n	80098e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d105      	bne.n	80098e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80098dc:	2200      	movs	r2, #0
 80098de:	68b9      	ldr	r1, [r7, #8]
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 fa9d 	bl	8009e20 <xQueueGenericCreate>
 80098e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00c      	beq.n	8009908 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <osMessageQueueNew+0xd0>
        name = attr->name;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	e001      	b.n	8009900 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009900:	6979      	ldr	r1, [r7, #20]
 8009902:	69f8      	ldr	r0, [r7, #28]
 8009904:	f001 f932 	bl	800ab6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009908:	69fb      	ldr	r3, [r7, #28]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3720      	adds	r7, #32
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	603b      	str	r3, [r7, #0]
 8009920:	4613      	mov	r3, r2
 8009922:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800992c:	f3ef 8305 	mrs	r3, IPSR
 8009930:	617b      	str	r3, [r7, #20]
  return(result);
 8009932:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009934:	2b00      	cmp	r3, #0
 8009936:	d028      	beq.n	800998a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <osMessageQueuePut+0x36>
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <osMessageQueuePut+0x36>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800994a:	f06f 0303 	mvn.w	r3, #3
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	e038      	b.n	80099c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009956:	f107 0210 	add.w	r2, r7, #16
 800995a:	2300      	movs	r3, #0
 800995c:	68b9      	ldr	r1, [r7, #8]
 800995e:	69b8      	ldr	r0, [r7, #24]
 8009960:	f000 fc24 	bl	800a1ac <xQueueGenericSendFromISR>
 8009964:	4603      	mov	r3, r0
 8009966:	2b01      	cmp	r3, #1
 8009968:	d003      	beq.n	8009972 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800996a:	f06f 0302 	mvn.w	r3, #2
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e028      	b.n	80099c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d025      	beq.n	80099c4 <osMessageQueuePut+0xb0>
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <osMessageQueuePut+0xbc>)
 800997a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	e01c      	b.n	80099c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <osMessageQueuePut+0x82>
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009996:	f06f 0303 	mvn.w	r3, #3
 800999a:	61fb      	str	r3, [r7, #28]
 800999c:	e012      	b.n	80099c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800999e:	2300      	movs	r3, #0
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	69b8      	ldr	r0, [r7, #24]
 80099a6:	f000 fb03 	bl	8009fb0 <xQueueGenericSend>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d009      	beq.n	80099c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80099b6:	f06f 0301 	mvn.w	r3, #1
 80099ba:	61fb      	str	r3, [r7, #28]
 80099bc:	e002      	b.n	80099c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80099be:	f06f 0302 	mvn.w	r3, #2
 80099c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80099c4:	69fb      	ldr	r3, [r7, #28]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	e000ed04 	.word	0xe000ed04

080099d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099ea:	f3ef 8305 	mrs	r3, IPSR
 80099ee:	617b      	str	r3, [r7, #20]
  return(result);
 80099f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d028      	beq.n	8009a48 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <osMessageQueueGet+0x34>
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <osMessageQueueGet+0x34>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009a08:	f06f 0303 	mvn.w	r3, #3
 8009a0c:	61fb      	str	r3, [r7, #28]
 8009a0e:	e037      	b.n	8009a80 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009a14:	f107 0310 	add.w	r3, r7, #16
 8009a18:	461a      	mov	r2, r3
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	69b8      	ldr	r0, [r7, #24]
 8009a1e:	f000 fed9 	bl	800a7d4 <xQueueReceiveFromISR>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d003      	beq.n	8009a30 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009a28:	f06f 0302 	mvn.w	r3, #2
 8009a2c:	61fb      	str	r3, [r7, #28]
 8009a2e:	e027      	b.n	8009a80 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d024      	beq.n	8009a80 <osMessageQueueGet+0xac>
 8009a36:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <osMessageQueueGet+0xb8>)
 8009a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	e01b      	b.n	8009a80 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <osMessageQueueGet+0x80>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d103      	bne.n	8009a5c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a54:	f06f 0303 	mvn.w	r3, #3
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	e011      	b.n	8009a80 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	69b8      	ldr	r0, [r7, #24]
 8009a62:	f000 fccb 	bl	800a3fc <xQueueReceive>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d009      	beq.n	8009a80 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009a72:	f06f 0301 	mvn.w	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e002      	b.n	8009a80 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009a7a:	f06f 0302 	mvn.w	r3, #2
 8009a7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a80:	69fb      	ldr	r3, [r7, #28]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3720      	adds	r7, #32
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	e000ed04 	.word	0xe000ed04

08009a90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4a07      	ldr	r2, [pc, #28]	; (8009abc <vApplicationGetIdleTaskMemory+0x2c>)
 8009aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	4a06      	ldr	r2, [pc, #24]	; (8009ac0 <vApplicationGetIdleTaskMemory+0x30>)
 8009aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2280      	movs	r2, #128	; 0x80
 8009aac:	601a      	str	r2, [r3, #0]
}
 8009aae:	bf00      	nop
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	20000350 	.word	0x20000350
 8009ac0:	200003f8 	.word	0x200003f8

08009ac4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4a07      	ldr	r2, [pc, #28]	; (8009af0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ad4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	4a06      	ldr	r2, [pc, #24]	; (8009af4 <vApplicationGetTimerTaskMemory+0x30>)
 8009ada:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ae2:	601a      	str	r2, [r3, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	200005f8 	.word	0x200005f8
 8009af4:	200006a0 	.word	0x200006a0

08009af8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f103 0208 	add.w	r2, r3, #8
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f103 0208 	add.w	r2, r3, #8
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f103 0208 	add.w	r2, r3, #8
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b52:	b480      	push	{r7}
 8009b54:	b085      	sub	sp, #20
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	1c5a      	adds	r2, r3, #1
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	601a      	str	r2, [r3, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b085      	sub	sp, #20
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb0:	d103      	bne.n	8009bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e00c      	b.n	8009bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e002      	b.n	8009bc8 <vListInsert+0x2e>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d2f6      	bcs.n	8009bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	601a      	str	r2, [r3, #0]
}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6892      	ldr	r2, [r2, #8]
 8009c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6852      	ldr	r2, [r2, #4]
 8009c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d103      	bne.n	8009c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	1e5a      	subs	r2, r3, #1
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10a      	bne.n	8009c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c8a:	f002 fc9b 	bl	800c5c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c9a:	fb01 f303 	mul.w	r3, r1, r3
 8009c9e:	441a      	add	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	68f9      	ldr	r1, [r7, #12]
 8009cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cc0:	fb01 f303 	mul.w	r3, r1, r3
 8009cc4:	441a      	add	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	22ff      	movs	r2, #255	; 0xff
 8009cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	22ff      	movs	r2, #255	; 0xff
 8009cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d114      	bne.n	8009d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01a      	beq.n	8009d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3310      	adds	r3, #16
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 fc4b 	bl	800b588 <xTaskRemoveFromEventList>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d012      	beq.n	8009d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <xQueueGenericReset+0xcc>)
 8009cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	e009      	b.n	8009d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3310      	adds	r3, #16
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fef2 	bl	8009af8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3324      	adds	r3, #36	; 0x24
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff feed 	bl	8009af8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d1e:	f002 fc81 	bl	800c624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d22:	2301      	movs	r3, #1
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08e      	sub	sp, #56	; 0x38
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10a      	bne.n	8009d5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d56:	bf00      	nop
 8009d58:	e7fe      	b.n	8009d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10a      	bne.n	8009d76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <xQueueGenericCreateStatic+0x52>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <xQueueGenericCreateStatic+0x56>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e000      	b.n	8009d88 <xQueueGenericCreateStatic+0x58>
 8009d86:	2300      	movs	r3, #0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	623b      	str	r3, [r7, #32]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <xQueueGenericCreateStatic+0x7e>
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <xQueueGenericCreateStatic+0x82>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <xQueueGenericCreateStatic+0x84>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	61fb      	str	r3, [r7, #28]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dce:	2350      	movs	r3, #80	; 0x50
 8009dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	2b50      	cmp	r3, #80	; 0x50
 8009dd6:	d00a      	beq.n	8009dee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	61bb      	str	r3, [r7, #24]
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009dee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00d      	beq.n	8009e16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	68b9      	ldr	r1, [r7, #8]
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 f83f 	bl	8009e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3730      	adds	r7, #48	; 0x30
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08a      	sub	sp, #40	; 0x28
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	613b      	str	r3, [r7, #16]
}
 8009e46:	bf00      	nop
 8009e48:	e7fe      	b.n	8009e48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	3350      	adds	r3, #80	; 0x50
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f002 fcd5 	bl	800c808 <pvPortMalloc>
 8009e5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d011      	beq.n	8009e8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	3350      	adds	r3, #80	; 0x50
 8009e6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e78:	79fa      	ldrb	r2, [r7, #7]
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f805 	bl	8009e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3720      	adds	r7, #32
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d103      	bne.n	8009eb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	e002      	b.n	8009eb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	69b8      	ldr	r0, [r7, #24]
 8009ec6:	f7ff fecb 	bl	8009c60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	78fa      	ldrb	r2, [r7, #3]
 8009ece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b08a      	sub	sp, #40	; 0x28
 8009ede:	af02      	add	r7, sp, #8
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	61bb      	str	r3, [r7, #24]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d90a      	bls.n	8009f20 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	617b      	str	r3, [r7, #20]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f20:	2302      	movs	r3, #2
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	2100      	movs	r1, #0
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff ff00 	bl	8009d30 <xQueueGenericCreateStatic>
 8009f30:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f3e:	69fb      	ldr	r3, [r7, #28]
	}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3720      	adds	r7, #32
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	613b      	str	r3, [r7, #16]
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d90a      	bls.n	8009f8c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60fb      	str	r3, [r7, #12]
}
 8009f88:	bf00      	nop
 8009f8a:	e7fe      	b.n	8009f8a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	2100      	movs	r1, #0
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ff45 	bl	8009e20 <xQueueGenericCreate>
 8009f96:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009fa4:	697b      	ldr	r3, [r7, #20]
	}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08e      	sub	sp, #56	; 0x38
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xQueueGenericSend+0x32>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <xQueueGenericSend+0x40>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <xQueueGenericSend+0x44>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e000      	b.n	8009ff6 <xQueueGenericSend+0x46>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <xQueueGenericSend+0x60>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d103      	bne.n	800a01e <xQueueGenericSend+0x6e>
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <xQueueGenericSend+0x72>
 800a01e:	2301      	movs	r3, #1
 800a020:	e000      	b.n	800a024 <xQueueGenericSend+0x74>
 800a022:	2300      	movs	r3, #0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <xQueueGenericSend+0x8e>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	623b      	str	r3, [r7, #32]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a03e:	f001 fc65 	bl	800b90c <xTaskGetSchedulerState>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d102      	bne.n	800a04e <xQueueGenericSend+0x9e>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <xQueueGenericSend+0xa2>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <xQueueGenericSend+0xa4>
 800a052:	2300      	movs	r3, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xQueueGenericSend+0xbe>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	61fb      	str	r3, [r7, #28]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a06e:	f002 faa9 	bl	800c5c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d302      	bcc.n	800a084 <xQueueGenericSend+0xd4>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b02      	cmp	r3, #2
 800a082:	d129      	bne.n	800a0d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a08a:	f000 fc5e 	bl	800a94a <prvCopyDataToQueue>
 800a08e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	d010      	beq.n	800a0ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	3324      	adds	r3, #36	; 0x24
 800a09c:	4618      	mov	r0, r3
 800a09e:	f001 fa73 	bl	800b588 <xTaskRemoveFromEventList>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d013      	beq.n	800a0d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0a8:	4b3f      	ldr	r3, [pc, #252]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	e00a      	b.n	800a0d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d007      	beq.n	800a0d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0c0:	4b39      	ldr	r3, [pc, #228]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0d0:	f002 faa8 	bl	800c624 <vPortExitCritical>
				return pdPASS;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e063      	b.n	800a1a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d103      	bne.n	800a0e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0de:	f002 faa1 	bl	800c624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e05c      	b.n	800a1a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ec:	f107 0314 	add.w	r3, r7, #20
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 faad 	bl	800b650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0fa:	f002 fa93 	bl	800c624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0fe:	f001 f819 	bl	800b134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a102:	f002 fa5f 	bl	800c5c4 <vPortEnterCritical>
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a10c:	b25b      	sxtb	r3, r3
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a112:	d103      	bne.n	800a11c <xQueueGenericSend+0x16c>
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a122:	b25b      	sxtb	r3, r3
 800a124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a128:	d103      	bne.n	800a132 <xQueueGenericSend+0x182>
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a132:	f002 fa77 	bl	800c624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a136:	1d3a      	adds	r2, r7, #4
 800a138:	f107 0314 	add.w	r3, r7, #20
 800a13c:	4611      	mov	r1, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f001 fa9c 	bl	800b67c <xTaskCheckForTimeOut>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d124      	bne.n	800a194 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a14a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14c:	f000 fcf5 	bl	800ab3a <prvIsQueueFull>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d018      	beq.n	800a188 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	3310      	adds	r3, #16
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 f9c2 	bl	800b4e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a166:	f000 fc80 	bl	800aa6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a16a:	f000 fff1 	bl	800b150 <xTaskResumeAll>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	f47f af7c 	bne.w	800a06e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a176:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	e772      	b.n	800a06e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18a:	f000 fc6e 	bl	800aa6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a18e:	f000 ffdf 	bl	800b150 <xTaskResumeAll>
 800a192:	e76c      	b.n	800a06e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a196:	f000 fc68 	bl	800aa6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19a:	f000 ffd9 	bl	800b150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a19e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3738      	adds	r7, #56	; 0x38
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b090      	sub	sp, #64	; 0x40
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <xQueueGenericSendFromISR+0x3c>
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <xQueueGenericSendFromISR+0x40>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e000      	b.n	800a1ee <xQueueGenericSendFromISR+0x42>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a204:	bf00      	nop
 800a206:	e7fe      	b.n	800a206 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d103      	bne.n	800a216 <xQueueGenericSendFromISR+0x6a>
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <xQueueGenericSendFromISR+0x6e>
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <xQueueGenericSendFromISR+0x70>
 800a21a:	2300      	movs	r3, #0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	623b      	str	r3, [r7, #32]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a236:	f002 faa7 	bl	800c788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a23a:	f3ef 8211 	mrs	r2, BASEPRI
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	61fa      	str	r2, [r7, #28]
 800a250:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a252:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a254:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <xQueueGenericSendFromISR+0xbc>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d12f      	bne.n	800a2c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a27e:	f000 fb64 	bl	800a94a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a282:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28a:	d112      	bne.n	800a2b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d016      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	3324      	adds	r3, #36	; 0x24
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 f975 	bl	800b588 <xTaskRemoveFromEventList>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00e      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00b      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	e007      	b.n	800a2c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	b25a      	sxtb	r2, r3
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2c6:	e001      	b.n	800a2cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3740      	adds	r7, #64	; 0x40
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08e      	sub	sp, #56	; 0x38
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	623b      	str	r3, [r7, #32]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00a      	beq.n	800a32a <xQueueGiveFromISR+0x48>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	61fb      	str	r3, [r7, #28]
}
 800a326:	bf00      	nop
 800a328:	e7fe      	b.n	800a328 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <xQueueGiveFromISR+0x58>
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <xQueueGiveFromISR+0x5c>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xQueueGiveFromISR+0x5e>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	61bb      	str	r3, [r7, #24]
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a35a:	f002 fa15 	bl	800c788 <vPortValidateInterruptPriority>
	__asm volatile
 800a35e:	f3ef 8211 	mrs	r2, BASEPRI
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	617a      	str	r2, [r7, #20]
 800a374:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a376:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a386:	429a      	cmp	r2, r3
 800a388:	d22b      	bcs.n	800a3e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a39c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a4:	d112      	bne.n	800a3cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d016      	beq.n	800a3dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	3324      	adds	r3, #36	; 0x24
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f001 f8e8 	bl	800b588 <xTaskRemoveFromEventList>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00e      	beq.n	800a3dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00b      	beq.n	800a3dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	e007      	b.n	800a3dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	b25a      	sxtb	r2, r3
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e0:	e001      	b.n	800a3e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f383 8811 	msr	BASEPRI, r3
}
 800a3f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3738      	adds	r7, #56	; 0x38
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b08c      	sub	sp, #48	; 0x30
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a408:	2300      	movs	r3, #0
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <xQueueReceive+0x30>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	623b      	str	r3, [r7, #32]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d103      	bne.n	800a43a <xQueueReceive+0x3e>
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <xQueueReceive+0x42>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <xQueueReceive+0x44>
 800a43e:	2300      	movs	r3, #0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <xQueueReceive+0x5e>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	61fb      	str	r3, [r7, #28]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a45a:	f001 fa57 	bl	800b90c <xTaskGetSchedulerState>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d102      	bne.n	800a46a <xQueueReceive+0x6e>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <xQueueReceive+0x72>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <xQueueReceive+0x74>
 800a46e:	2300      	movs	r3, #0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xQueueReceive+0x8e>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	61bb      	str	r3, [r7, #24]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a48a:	f002 f89b 	bl	800c5c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	d01f      	beq.n	800a4da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a49e:	f000 fabe 	bl	800aa1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	1e5a      	subs	r2, r3, #1
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00f      	beq.n	800a4d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f001 f866 	bl	800b588 <xTaskRemoveFromEventList>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d007      	beq.n	800a4d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4c2:	4b3d      	ldr	r3, [pc, #244]	; (800a5b8 <xQueueReceive+0x1bc>)
 800a4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4d2:	f002 f8a7 	bl	800c624 <vPortExitCritical>
				return pdPASS;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e069      	b.n	800a5ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4e0:	f002 f8a0 	bl	800c624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e062      	b.n	800a5ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4ee:	f107 0310 	add.w	r3, r7, #16
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 f8ac 	bl	800b650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4fc:	f002 f892 	bl	800c624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a500:	f000 fe18 	bl	800b134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a504:	f002 f85e 	bl	800c5c4 <vPortEnterCritical>
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a50e:	b25b      	sxtb	r3, r3
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a514:	d103      	bne.n	800a51e <xQueueReceive+0x122>
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a524:	b25b      	sxtb	r3, r3
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	d103      	bne.n	800a534 <xQueueReceive+0x138>
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a534:	f002 f876 	bl	800c624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a538:	1d3a      	adds	r2, r7, #4
 800a53a:	f107 0310 	add.w	r3, r7, #16
 800a53e:	4611      	mov	r1, r2
 800a540:	4618      	mov	r0, r3
 800a542:	f001 f89b 	bl	800b67c <xTaskCheckForTimeOut>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d123      	bne.n	800a594 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a54e:	f000 fade 	bl	800ab0e <prvIsQueueEmpty>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d017      	beq.n	800a588 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	3324      	adds	r3, #36	; 0x24
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	4611      	mov	r1, r2
 800a560:	4618      	mov	r0, r3
 800a562:	f000 ffc1 	bl	800b4e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a568:	f000 fa7f 	bl	800aa6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a56c:	f000 fdf0 	bl	800b150 <xTaskResumeAll>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d189      	bne.n	800a48a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a576:	4b10      	ldr	r3, [pc, #64]	; (800a5b8 <xQueueReceive+0x1bc>)
 800a578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	e780      	b.n	800a48a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58a:	f000 fa6e 	bl	800aa6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a58e:	f000 fddf 	bl	800b150 <xTaskResumeAll>
 800a592:	e77a      	b.n	800a48a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a596:	f000 fa68 	bl	800aa6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a59a:	f000 fdd9 	bl	800b150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a0:	f000 fab5 	bl	800ab0e <prvIsQueueEmpty>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f43f af6f 	beq.w	800a48a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3730      	adds	r7, #48	; 0x30
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	e000ed04 	.word	0xe000ed04

0800a5bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08e      	sub	sp, #56	; 0x38
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10a      	bne.n	800a5ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	623b      	str	r3, [r7, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	61fb      	str	r3, [r7, #28]
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a60c:	f001 f97e 	bl	800b90c <xTaskGetSchedulerState>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <xQueueSemaphoreTake+0x60>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <xQueueSemaphoreTake+0x64>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <xQueueSemaphoreTake+0x66>
 800a620:	2300      	movs	r3, #0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	61bb      	str	r3, [r7, #24]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a63c:	f001 ffc2 	bl	800c5c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d024      	beq.n	800a696 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	1e5a      	subs	r2, r3, #1
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d104      	bne.n	800a666 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a65c:	f001 facc 	bl	800bbf8 <pvTaskIncrementMutexHeldCount>
 800a660:	4602      	mov	r2, r0
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00f      	beq.n	800a68e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	3310      	adds	r3, #16
 800a672:	4618      	mov	r0, r3
 800a674:	f000 ff88 	bl	800b588 <xTaskRemoveFromEventList>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a67e:	4b54      	ldr	r3, [pc, #336]	; (800a7d0 <xQueueSemaphoreTake+0x214>)
 800a680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a68e:	f001 ffc9 	bl	800c624 <vPortExitCritical>
				return pdPASS;
 800a692:	2301      	movs	r3, #1
 800a694:	e097      	b.n	800a7c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d111      	bne.n	800a6c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00a      	beq.n	800a6b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	617b      	str	r3, [r7, #20]
}
 800a6b4:	bf00      	nop
 800a6b6:	e7fe      	b.n	800a6b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6b8:	f001 ffb4 	bl	800c624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e082      	b.n	800a7c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d106      	bne.n	800a6d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 ffc0 	bl	800b650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6d4:	f001 ffa6 	bl	800c624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6d8:	f000 fd2c 	bl	800b134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6dc:	f001 ff72 	bl	800c5c4 <vPortEnterCritical>
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6e6:	b25b      	sxtb	r3, r3
 800a6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ec:	d103      	bne.n	800a6f6 <xQueueSemaphoreTake+0x13a>
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6fc:	b25b      	sxtb	r3, r3
 800a6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a702:	d103      	bne.n	800a70c <xQueueSemaphoreTake+0x150>
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	2200      	movs	r2, #0
 800a708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a70c:	f001 ff8a 	bl	800c624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a710:	463a      	mov	r2, r7
 800a712:	f107 030c 	add.w	r3, r7, #12
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 ffaf 	bl	800b67c <xTaskCheckForTimeOut>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d132      	bne.n	800a78a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a726:	f000 f9f2 	bl	800ab0e <prvIsQueueEmpty>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d026      	beq.n	800a77e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d109      	bne.n	800a74c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a738:	f001 ff44 	bl	800c5c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	4618      	mov	r0, r3
 800a742:	f001 f901 	bl	800b948 <xTaskPriorityInherit>
 800a746:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a748:	f001 ff6c 	bl	800c624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fec7 	bl	800b4e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a75a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a75c:	f000 f985 	bl	800aa6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a760:	f000 fcf6 	bl	800b150 <xTaskResumeAll>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	f47f af68 	bne.w	800a63c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a76c:	4b18      	ldr	r3, [pc, #96]	; (800a7d0 <xQueueSemaphoreTake+0x214>)
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	e75e      	b.n	800a63c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a77e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a780:	f000 f973 	bl	800aa6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a784:	f000 fce4 	bl	800b150 <xTaskResumeAll>
 800a788:	e758      	b.n	800a63c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a78a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a78c:	f000 f96d 	bl	800aa6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a790:	f000 fcde 	bl	800b150 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a796:	f000 f9ba 	bl	800ab0e <prvIsQueueEmpty>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f43f af4d 	beq.w	800a63c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00d      	beq.n	800a7c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a7a8:	f001 ff0c 	bl	800c5c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a7ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ae:	f000 f8b4 	bl	800a91a <prvGetDisinheritPriorityAfterTimeout>
 800a7b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f001 f99a 	bl	800baf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a7c0:	f001 ff30 	bl	800c624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3738      	adds	r7, #56	; 0x38
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	; 0x38
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10a      	bne.n	800a800 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	623b      	str	r3, [r7, #32]
}
 800a7fc:	bf00      	nop
 800a7fe:	e7fe      	b.n	800a7fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <xQueueReceiveFromISR+0x3a>
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <xQueueReceiveFromISR+0x3e>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <xQueueReceiveFromISR+0x40>
 800a812:	2300      	movs	r3, #0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10a      	bne.n	800a82e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	61fb      	str	r3, [r7, #28]
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a82e:	f001 ffab 	bl	800c788 <vPortValidateInterruptPriority>
	__asm volatile
 800a832:	f3ef 8211 	mrs	r2, BASEPRI
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	61ba      	str	r2, [r7, #24]
 800a848:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a84a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a84c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a852:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	2b00      	cmp	r3, #0
 800a858:	d02f      	beq.n	800a8ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a864:	68b9      	ldr	r1, [r7, #8]
 800a866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a868:	f000 f8d9 	bl	800aa1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87c:	d112      	bne.n	800a8a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d016      	beq.n	800a8b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	3310      	adds	r3, #16
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fe7c 	bl	800b588 <xTaskRemoveFromEventList>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00e      	beq.n	800a8b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	e007      	b.n	800a8b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	b25a      	sxtb	r2, r3
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8b8:	e001      	b.n	800a8be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f383 8811 	msr	BASEPRI, r3
}
 800a8c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3738      	adds	r7, #56	; 0x38
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <vQueueDelete+0x28>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	60bb      	str	r3, [r7, #8]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 f95f 	bl	800abc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f002 f847 	bl	800c9a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a912:	bf00      	nop
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	2b00      	cmp	r3, #0
 800a928:	d006      	beq.n	800a938 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	e001      	b.n	800a93c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a93c:	68fb      	ldr	r3, [r7, #12]
	}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b086      	sub	sp, #24
 800a94e:	af00      	add	r7, sp, #0
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a956:	2300      	movs	r3, #0
 800a958:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10d      	bne.n	800a984 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d14d      	bne.n	800aa0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	4618      	mov	r0, r3
 800a976:	f001 f84f 	bl	800ba18 <xTaskPriorityDisinherit>
 800a97a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	609a      	str	r2, [r3, #8]
 800a982:	e043      	b.n	800aa0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d119      	bne.n	800a9be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6858      	ldr	r0, [r3, #4]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a992:	461a      	mov	r2, r3
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	f002 f9a5 	bl	800cce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	441a      	add	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d32b      	bcc.n	800aa0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	605a      	str	r2, [r3, #4]
 800a9bc:	e026      	b.n	800aa0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68d8      	ldr	r0, [r3, #12]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	f002 f98b 	bl	800cce4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	68da      	ldr	r2, [r3, #12]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	425b      	negs	r3, r3
 800a9d8:	441a      	add	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	68da      	ldr	r2, [r3, #12]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d207      	bcs.n	800a9fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	425b      	negs	r3, r3
 800a9f4:	441a      	add	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d105      	bne.n	800aa0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d002      	beq.n	800aa0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa14:	697b      	ldr	r3, [r7, #20]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d018      	beq.n	800aa62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	441a      	add	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68da      	ldr	r2, [r3, #12]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d303      	bcc.n	800aa52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68d9      	ldr	r1, [r3, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	6838      	ldr	r0, [r7, #0]
 800aa5e:	f002 f941 	bl	800cce4 <memcpy>
	}
}
 800aa62:	bf00      	nop
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa72:	f001 fda7 	bl	800c5c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa7e:	e011      	b.n	800aaa4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d012      	beq.n	800aaae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3324      	adds	r3, #36	; 0x24
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fd7b 	bl	800b588 <xTaskRemoveFromEventList>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa98:	f000 fe52 	bl	800b740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dce9      	bgt.n	800aa80 <prvUnlockQueue+0x16>
 800aaac:	e000      	b.n	800aab0 <prvUnlockQueue+0x46>
					break;
 800aaae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	22ff      	movs	r2, #255	; 0xff
 800aab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aab8:	f001 fdb4 	bl	800c624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aabc:	f001 fd82 	bl	800c5c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aac6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aac8:	e011      	b.n	800aaee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d012      	beq.n	800aaf8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3310      	adds	r3, #16
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fd56 	bl	800b588 <xTaskRemoveFromEventList>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aae2:	f000 fe2d 	bl	800b740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	dce9      	bgt.n	800aaca <prvUnlockQueue+0x60>
 800aaf6:	e000      	b.n	800aafa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aaf8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	22ff      	movs	r2, #255	; 0xff
 800aafe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab02:	f001 fd8f 	bl	800c624 <vPortExitCritical>
}
 800ab06:	bf00      	nop
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab16:	f001 fd55 	bl	800c5c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d102      	bne.n	800ab28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab22:	2301      	movs	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	e001      	b.n	800ab2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab2c:	f001 fd7a 	bl	800c624 <vPortExitCritical>

	return xReturn;
 800ab30:	68fb      	ldr	r3, [r7, #12]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b084      	sub	sp, #16
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab42:	f001 fd3f 	bl	800c5c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d102      	bne.n	800ab58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab52:	2301      	movs	r3, #1
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	e001      	b.n	800ab5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab5c:	f001 fd62 	bl	800c624 <vPortExitCritical>

	return xReturn;
 800ab60:	68fb      	ldr	r3, [r7, #12]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
	...

0800ab6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab76:	2300      	movs	r3, #0
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	e014      	b.n	800aba6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab7c:	4a0f      	ldr	r2, [pc, #60]	; (800abbc <vQueueAddToRegistry+0x50>)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10b      	bne.n	800aba0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab88:	490c      	ldr	r1, [pc, #48]	; (800abbc <vQueueAddToRegistry+0x50>)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab92:	4a0a      	ldr	r2, [pc, #40]	; (800abbc <vQueueAddToRegistry+0x50>)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	4413      	add	r3, r2
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab9e:	e006      	b.n	800abae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3301      	adds	r3, #1
 800aba4:	60fb      	str	r3, [r7, #12]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b07      	cmp	r3, #7
 800abaa:	d9e7      	bls.n	800ab7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	20000aa0 	.word	0x20000aa0

0800abc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	e016      	b.n	800abfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800abce:	4a10      	ldr	r2, [pc, #64]	; (800ac10 <vQueueUnregisterQueue+0x50>)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	4413      	add	r3, r2
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d10b      	bne.n	800abf6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800abde:	4a0c      	ldr	r2, [pc, #48]	; (800ac10 <vQueueUnregisterQueue+0x50>)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2100      	movs	r1, #0
 800abe4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800abe8:	4a09      	ldr	r2, [pc, #36]	; (800ac10 <vQueueUnregisterQueue+0x50>)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	4413      	add	r3, r2
 800abf0:	2200      	movs	r2, #0
 800abf2:	605a      	str	r2, [r3, #4]
				break;
 800abf4:	e006      	b.n	800ac04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3301      	adds	r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b07      	cmp	r3, #7
 800ac00:	d9e5      	bls.n	800abce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac02:	bf00      	nop
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	20000aa0 	.word	0x20000aa0

0800ac14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac24:	f001 fcce 	bl	800c5c4 <vPortEnterCritical>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac2e:	b25b      	sxtb	r3, r3
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d103      	bne.n	800ac3e <vQueueWaitForMessageRestricted+0x2a>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac44:	b25b      	sxtb	r3, r3
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d103      	bne.n	800ac54 <vQueueWaitForMessageRestricted+0x40>
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac54:	f001 fce6 	bl	800c624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	3324      	adds	r3, #36	; 0x24
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 fc61 	bl	800b530 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f7ff fefb 	bl	800aa6a <prvUnlockQueue>
	}
 800ac74:	bf00      	nop
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08e      	sub	sp, #56	; 0x38
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	623b      	str	r3, [r7, #32]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <xTaskCreateStatic+0x46>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	61fb      	str	r3, [r7, #28]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acc2:	23a8      	movs	r3, #168	; 0xa8
 800acc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2ba8      	cmp	r3, #168	; 0xa8
 800acca:	d00a      	beq.n	800ace2 <xTaskCreateStatic+0x66>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	61bb      	str	r3, [r7, #24]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ace2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ace4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01e      	beq.n	800ad28 <xTaskCreateStatic+0xac>
 800acea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01b      	beq.n	800ad28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	2202      	movs	r2, #2
 800acfe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad02:	2300      	movs	r3, #0
 800ad04:	9303      	str	r3, [sp, #12]
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	9302      	str	r3, [sp, #8]
 800ad0a:	f107 0314 	add.w	r3, r7, #20
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f000 f850 	bl	800adc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad22:	f000 f8f3 	bl	800af0c <prvAddNewTaskToReadyList>
 800ad26:	e001      	b.n	800ad2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad2c:	697b      	ldr	r3, [r7, #20]
	}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3728      	adds	r7, #40	; 0x28
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b08c      	sub	sp, #48	; 0x30
 800ad3a:	af04      	add	r7, sp, #16
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	603b      	str	r3, [r7, #0]
 800ad42:	4613      	mov	r3, r2
 800ad44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f001 fd5c 	bl	800c808 <pvPortMalloc>
 800ad50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00e      	beq.n	800ad76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad58:	20a8      	movs	r0, #168	; 0xa8
 800ad5a:	f001 fd55 	bl	800c808 <pvPortMalloc>
 800ad5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	631a      	str	r2, [r3, #48]	; 0x30
 800ad6c:	e005      	b.n	800ad7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad6e:	6978      	ldr	r0, [r7, #20]
 800ad70:	f001 fe16 	bl	800c9a0 <vPortFree>
 800ad74:	e001      	b.n	800ad7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d017      	beq.n	800adb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad88:	88fa      	ldrh	r2, [r7, #6]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9303      	str	r3, [sp, #12]
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	9302      	str	r3, [sp, #8]
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	68b9      	ldr	r1, [r7, #8]
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 f80e 	bl	800adc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ada4:	69f8      	ldr	r0, [r7, #28]
 800ada6:	f000 f8b1 	bl	800af0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adaa:	2301      	movs	r3, #1
 800adac:	61bb      	str	r3, [r7, #24]
 800adae:	e002      	b.n	800adb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adb0:	f04f 33ff 	mov.w	r3, #4294967295
 800adb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adb6:	69bb      	ldr	r3, [r7, #24]
	}
 800adb8:	4618      	mov	r0, r3
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	461a      	mov	r2, r3
 800add8:	21a5      	movs	r1, #165	; 0xa5
 800adda:	f001 feff 	bl	800cbdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ade8:	3b01      	subs	r3, #1
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	f023 0307 	bic.w	r3, r3, #7
 800adf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	f003 0307 	and.w	r3, r3, #7
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	617b      	str	r3, [r7, #20]
}
 800ae14:	bf00      	nop
 800ae16:	e7fe      	b.n	800ae16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01f      	beq.n	800ae5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae1e:	2300      	movs	r3, #0
 800ae20:	61fb      	str	r3, [r7, #28]
 800ae22:	e012      	b.n	800ae4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	4413      	add	r3, r2
 800ae2a:	7819      	ldrb	r1, [r3, #0]
 800ae2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	4413      	add	r3, r2
 800ae32:	3334      	adds	r3, #52	; 0x34
 800ae34:	460a      	mov	r2, r1
 800ae36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d006      	beq.n	800ae52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	3301      	adds	r3, #1
 800ae48:	61fb      	str	r3, [r7, #28]
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	2b0f      	cmp	r3, #15
 800ae4e:	d9e9      	bls.n	800ae24 <prvInitialiseNewTask+0x64>
 800ae50:	e000      	b.n	800ae54 <prvInitialiseNewTask+0x94>
			{
				break;
 800ae52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae5c:	e003      	b.n	800ae66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae68:	2b37      	cmp	r3, #55	; 0x37
 800ae6a:	d901      	bls.n	800ae70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae6c:	2337      	movs	r3, #55	; 0x37
 800ae6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	2200      	movs	r2, #0
 800ae80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	3304      	adds	r3, #4
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe fe56 	bl	8009b38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	3318      	adds	r3, #24
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe fe51 	bl	8009b38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebe:	3354      	adds	r3, #84	; 0x54
 800aec0:	224c      	movs	r2, #76	; 0x4c
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 fe89 	bl	800cbdc <memset>
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	4a0c      	ldr	r2, [pc, #48]	; (800af00 <prvInitialiseNewTask+0x140>)
 800aece:	659a      	str	r2, [r3, #88]	; 0x58
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	4a0c      	ldr	r2, [pc, #48]	; (800af04 <prvInitialiseNewTask+0x144>)
 800aed4:	65da      	str	r2, [r3, #92]	; 0x5c
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	4a0b      	ldr	r2, [pc, #44]	; (800af08 <prvInitialiseNewTask+0x148>)
 800aeda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aedc:	683a      	ldr	r2, [r7, #0]
 800aede:	68f9      	ldr	r1, [r7, #12]
 800aee0:	69b8      	ldr	r0, [r7, #24]
 800aee2:	f001 fa3f 	bl	800c364 <pxPortInitialiseStack>
 800aee6:	4602      	mov	r2, r0
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aef6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aef8:	bf00      	nop
 800aefa:	3720      	adds	r7, #32
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20002a60 	.word	0x20002a60
 800af04:	20002ac8 	.word	0x20002ac8
 800af08:	20002b30 	.word	0x20002b30

0800af0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af14:	f001 fb56 	bl	800c5c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af18:	4b2d      	ldr	r3, [pc, #180]	; (800afd0 <prvAddNewTaskToReadyList+0xc4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3301      	adds	r3, #1
 800af1e:	4a2c      	ldr	r2, [pc, #176]	; (800afd0 <prvAddNewTaskToReadyList+0xc4>)
 800af20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af22:	4b2c      	ldr	r3, [pc, #176]	; (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d109      	bne.n	800af3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af2a:	4a2a      	ldr	r2, [pc, #168]	; (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af30:	4b27      	ldr	r3, [pc, #156]	; (800afd0 <prvAddNewTaskToReadyList+0xc4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d110      	bne.n	800af5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af38:	f000 fc26 	bl	800b788 <prvInitialiseTaskLists>
 800af3c:	e00d      	b.n	800af5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af3e:	4b26      	ldr	r3, [pc, #152]	; (800afd8 <prvAddNewTaskToReadyList+0xcc>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d109      	bne.n	800af5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af46:	4b23      	ldr	r3, [pc, #140]	; (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	429a      	cmp	r2, r3
 800af52:	d802      	bhi.n	800af5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af54:	4a1f      	ldr	r2, [pc, #124]	; (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af5a:	4b20      	ldr	r3, [pc, #128]	; (800afdc <prvAddNewTaskToReadyList+0xd0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3301      	adds	r3, #1
 800af60:	4a1e      	ldr	r2, [pc, #120]	; (800afdc <prvAddNewTaskToReadyList+0xd0>)
 800af62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af64:	4b1d      	ldr	r3, [pc, #116]	; (800afdc <prvAddNewTaskToReadyList+0xd0>)
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af70:	4b1b      	ldr	r3, [pc, #108]	; (800afe0 <prvAddNewTaskToReadyList+0xd4>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d903      	bls.n	800af80 <prvAddNewTaskToReadyList+0x74>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	4a18      	ldr	r2, [pc, #96]	; (800afe0 <prvAddNewTaskToReadyList+0xd4>)
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4a15      	ldr	r2, [pc, #84]	; (800afe4 <prvAddNewTaskToReadyList+0xd8>)
 800af8e:	441a      	add	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3304      	adds	r3, #4
 800af94:	4619      	mov	r1, r3
 800af96:	4610      	mov	r0, r2
 800af98:	f7fe fddb 	bl	8009b52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af9c:	f001 fb42 	bl	800c624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afa0:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <prvAddNewTaskToReadyList+0xcc>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00e      	beq.n	800afc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afa8:	4b0a      	ldr	r3, [pc, #40]	; (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d207      	bcs.n	800afc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afb6:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <prvAddNewTaskToReadyList+0xdc>)
 800afb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20000fb4 	.word	0x20000fb4
 800afd4:	20000ae0 	.word	0x20000ae0
 800afd8:	20000fc0 	.word	0x20000fc0
 800afdc:	20000fd0 	.word	0x20000fd0
 800afe0:	20000fbc 	.word	0x20000fbc
 800afe4:	20000ae4 	.word	0x20000ae4
 800afe8:	e000ed04 	.word	0xe000ed04

0800afec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aff4:	2300      	movs	r3, #0
 800aff6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d017      	beq.n	800b02e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800affe:	4b13      	ldr	r3, [pc, #76]	; (800b04c <vTaskDelay+0x60>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <vTaskDelay+0x30>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	60bb      	str	r3, [r7, #8]
}
 800b018:	bf00      	nop
 800b01a:	e7fe      	b.n	800b01a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b01c:	f000 f88a 	bl	800b134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b020:	2100      	movs	r1, #0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fdfc 	bl	800bc20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b028:	f000 f892 	bl	800b150 <xTaskResumeAll>
 800b02c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d107      	bne.n	800b044 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b034:	4b06      	ldr	r3, [pc, #24]	; (800b050 <vTaskDelay+0x64>)
 800b036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b044:	bf00      	nop
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20000fdc 	.word	0x20000fdc
 800b050:	e000ed04 	.word	0xe000ed04

0800b054 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08a      	sub	sp, #40	; 0x28
 800b058:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b05e:	2300      	movs	r3, #0
 800b060:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b062:	463a      	mov	r2, r7
 800b064:	1d39      	adds	r1, r7, #4
 800b066:	f107 0308 	add.w	r3, r7, #8
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fe fd10 	bl	8009a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	9202      	str	r2, [sp, #8]
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	2300      	movs	r3, #0
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	2300      	movs	r3, #0
 800b080:	460a      	mov	r2, r1
 800b082:	4924      	ldr	r1, [pc, #144]	; (800b114 <vTaskStartScheduler+0xc0>)
 800b084:	4824      	ldr	r0, [pc, #144]	; (800b118 <vTaskStartScheduler+0xc4>)
 800b086:	f7ff fdf9 	bl	800ac7c <xTaskCreateStatic>
 800b08a:	4603      	mov	r3, r0
 800b08c:	4a23      	ldr	r2, [pc, #140]	; (800b11c <vTaskStartScheduler+0xc8>)
 800b08e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b090:	4b22      	ldr	r3, [pc, #136]	; (800b11c <vTaskStartScheduler+0xc8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b098:	2301      	movs	r3, #1
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	e001      	b.n	800b0a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d102      	bne.n	800b0ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0a8:	f000 fe0e 	bl	800bcc8 <xTimerCreateTimerTask>
 800b0ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d11b      	bne.n	800b0ec <vTaskStartScheduler+0x98>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	613b      	str	r3, [r7, #16]
}
 800b0c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0c8:	4b15      	ldr	r3, [pc, #84]	; (800b120 <vTaskStartScheduler+0xcc>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3354      	adds	r3, #84	; 0x54
 800b0ce:	4a15      	ldr	r2, [pc, #84]	; (800b124 <vTaskStartScheduler+0xd0>)
 800b0d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0d2:	4b15      	ldr	r3, [pc, #84]	; (800b128 <vTaskStartScheduler+0xd4>)
 800b0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0da:	4b14      	ldr	r3, [pc, #80]	; (800b12c <vTaskStartScheduler+0xd8>)
 800b0dc:	2201      	movs	r2, #1
 800b0de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0e0:	4b13      	ldr	r3, [pc, #76]	; (800b130 <vTaskStartScheduler+0xdc>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0e6:	f001 f9cb 	bl	800c480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0ea:	e00e      	b.n	800b10a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f2:	d10a      	bne.n	800b10a <vTaskStartScheduler+0xb6>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	60fb      	str	r3, [r7, #12]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <vTaskStartScheduler+0xb4>
}
 800b10a:	bf00      	nop
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	0800ce7c 	.word	0x0800ce7c
 800b118:	0800b759 	.word	0x0800b759
 800b11c:	20000fd8 	.word	0x20000fd8
 800b120:	20000ae0 	.word	0x20000ae0
 800b124:	2000005c 	.word	0x2000005c
 800b128:	20000fd4 	.word	0x20000fd4
 800b12c:	20000fc0 	.word	0x20000fc0
 800b130:	20000fb8 	.word	0x20000fb8

0800b134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b134:	b480      	push	{r7}
 800b136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <vTaskSuspendAll+0x18>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3301      	adds	r3, #1
 800b13e:	4a03      	ldr	r2, [pc, #12]	; (800b14c <vTaskSuspendAll+0x18>)
 800b140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b142:	bf00      	nop
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	20000fdc 	.word	0x20000fdc

0800b150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b15e:	4b42      	ldr	r3, [pc, #264]	; (800b268 <xTaskResumeAll+0x118>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10a      	bne.n	800b17c <xTaskResumeAll+0x2c>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	603b      	str	r3, [r7, #0]
}
 800b178:	bf00      	nop
 800b17a:	e7fe      	b.n	800b17a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b17c:	f001 fa22 	bl	800c5c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b180:	4b39      	ldr	r3, [pc, #228]	; (800b268 <xTaskResumeAll+0x118>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3b01      	subs	r3, #1
 800b186:	4a38      	ldr	r2, [pc, #224]	; (800b268 <xTaskResumeAll+0x118>)
 800b188:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b18a:	4b37      	ldr	r3, [pc, #220]	; (800b268 <xTaskResumeAll+0x118>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d162      	bne.n	800b258 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b192:	4b36      	ldr	r3, [pc, #216]	; (800b26c <xTaskResumeAll+0x11c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d05e      	beq.n	800b258 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b19a:	e02f      	b.n	800b1fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b19c:	4b34      	ldr	r3, [pc, #208]	; (800b270 <xTaskResumeAll+0x120>)
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3318      	adds	r3, #24
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fe fd2f 	bl	8009c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fd2a 	bl	8009c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1bc:	4b2d      	ldr	r3, [pc, #180]	; (800b274 <xTaskResumeAll+0x124>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d903      	bls.n	800b1cc <xTaskResumeAll+0x7c>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	4a2a      	ldr	r2, [pc, #168]	; (800b274 <xTaskResumeAll+0x124>)
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4a27      	ldr	r2, [pc, #156]	; (800b278 <xTaskResumeAll+0x128>)
 800b1da:	441a      	add	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	f7fe fcb5 	bl	8009b52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ec:	4b23      	ldr	r3, [pc, #140]	; (800b27c <xTaskResumeAll+0x12c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d302      	bcc.n	800b1fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b1f6:	4b22      	ldr	r3, [pc, #136]	; (800b280 <xTaskResumeAll+0x130>)
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1fc:	4b1c      	ldr	r3, [pc, #112]	; (800b270 <xTaskResumeAll+0x120>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1cb      	bne.n	800b19c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b20a:	f000 fb5f 	bl	800b8cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b20e:	4b1d      	ldr	r3, [pc, #116]	; (800b284 <xTaskResumeAll+0x134>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d010      	beq.n	800b23c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b21a:	f000 f847 	bl	800b2ac <xTaskIncrementTick>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b224:	4b16      	ldr	r3, [pc, #88]	; (800b280 <xTaskResumeAll+0x130>)
 800b226:	2201      	movs	r2, #1
 800b228:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1f1      	bne.n	800b21a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b236:	4b13      	ldr	r3, [pc, #76]	; (800b284 <xTaskResumeAll+0x134>)
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b23c:	4b10      	ldr	r3, [pc, #64]	; (800b280 <xTaskResumeAll+0x130>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d009      	beq.n	800b258 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b244:	2301      	movs	r3, #1
 800b246:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b248:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <xTaskResumeAll+0x138>)
 800b24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b258:	f001 f9e4 	bl	800c624 <vPortExitCritical>

	return xAlreadyYielded;
 800b25c:	68bb      	ldr	r3, [r7, #8]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20000fdc 	.word	0x20000fdc
 800b26c:	20000fb4 	.word	0x20000fb4
 800b270:	20000f74 	.word	0x20000f74
 800b274:	20000fbc 	.word	0x20000fbc
 800b278:	20000ae4 	.word	0x20000ae4
 800b27c:	20000ae0 	.word	0x20000ae0
 800b280:	20000fc8 	.word	0x20000fc8
 800b284:	20000fc4 	.word	0x20000fc4
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b292:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <xTaskGetTickCount+0x1c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b298:	687b      	ldr	r3, [r7, #4]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	20000fb8 	.word	0x20000fb8

0800b2ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2b6:	4b4f      	ldr	r3, [pc, #316]	; (800b3f4 <xTaskIncrementTick+0x148>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f040 808f 	bne.w	800b3de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2c0:	4b4d      	ldr	r3, [pc, #308]	; (800b3f8 <xTaskIncrementTick+0x14c>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2c8:	4a4b      	ldr	r2, [pc, #300]	; (800b3f8 <xTaskIncrementTick+0x14c>)
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d120      	bne.n	800b316 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2d4:	4b49      	ldr	r3, [pc, #292]	; (800b3fc <xTaskIncrementTick+0x150>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	603b      	str	r3, [r7, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <xTaskIncrementTick+0x46>
 800b2f4:	4b41      	ldr	r3, [pc, #260]	; (800b3fc <xTaskIncrementTick+0x150>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	4b41      	ldr	r3, [pc, #260]	; (800b400 <xTaskIncrementTick+0x154>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a3f      	ldr	r2, [pc, #252]	; (800b3fc <xTaskIncrementTick+0x150>)
 800b300:	6013      	str	r3, [r2, #0]
 800b302:	4a3f      	ldr	r2, [pc, #252]	; (800b400 <xTaskIncrementTick+0x154>)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	4b3e      	ldr	r3, [pc, #248]	; (800b404 <xTaskIncrementTick+0x158>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3301      	adds	r3, #1
 800b30e:	4a3d      	ldr	r2, [pc, #244]	; (800b404 <xTaskIncrementTick+0x158>)
 800b310:	6013      	str	r3, [r2, #0]
 800b312:	f000 fadb 	bl	800b8cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b316:	4b3c      	ldr	r3, [pc, #240]	; (800b408 <xTaskIncrementTick+0x15c>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d349      	bcc.n	800b3b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b320:	4b36      	ldr	r3, [pc, #216]	; (800b3fc <xTaskIncrementTick+0x150>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d104      	bne.n	800b334 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b32a:	4b37      	ldr	r3, [pc, #220]	; (800b408 <xTaskIncrementTick+0x15c>)
 800b32c:	f04f 32ff 	mov.w	r2, #4294967295
 800b330:	601a      	str	r2, [r3, #0]
					break;
 800b332:	e03f      	b.n	800b3b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b334:	4b31      	ldr	r3, [pc, #196]	; (800b3fc <xTaskIncrementTick+0x150>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d203      	bcs.n	800b354 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b34c:	4a2e      	ldr	r2, [pc, #184]	; (800b408 <xTaskIncrementTick+0x15c>)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b352:	e02f      	b.n	800b3b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	3304      	adds	r3, #4
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe fc57 	bl	8009c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b362:	2b00      	cmp	r3, #0
 800b364:	d004      	beq.n	800b370 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	3318      	adds	r3, #24
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fc4e 	bl	8009c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b374:	4b25      	ldr	r3, [pc, #148]	; (800b40c <xTaskIncrementTick+0x160>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d903      	bls.n	800b384 <xTaskIncrementTick+0xd8>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	4a22      	ldr	r2, [pc, #136]	; (800b40c <xTaskIncrementTick+0x160>)
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a1f      	ldr	r2, [pc, #124]	; (800b410 <xTaskIncrementTick+0x164>)
 800b392:	441a      	add	r2, r3
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	3304      	adds	r3, #4
 800b398:	4619      	mov	r1, r3
 800b39a:	4610      	mov	r0, r2
 800b39c:	f7fe fbd9 	bl	8009b52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a4:	4b1b      	ldr	r3, [pc, #108]	; (800b414 <xTaskIncrementTick+0x168>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d3b8      	bcc.n	800b320 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3b2:	e7b5      	b.n	800b320 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3b4:	4b17      	ldr	r3, [pc, #92]	; (800b414 <xTaskIncrementTick+0x168>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ba:	4915      	ldr	r1, [pc, #84]	; (800b410 <xTaskIncrementTick+0x164>)
 800b3bc:	4613      	mov	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	440b      	add	r3, r1
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d901      	bls.n	800b3d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3d0:	4b11      	ldr	r3, [pc, #68]	; (800b418 <xTaskIncrementTick+0x16c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d007      	beq.n	800b3e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	e004      	b.n	800b3e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b3de:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <xTaskIncrementTick+0x170>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	4a0d      	ldr	r2, [pc, #52]	; (800b41c <xTaskIncrementTick+0x170>)
 800b3e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b3e8:	697b      	ldr	r3, [r7, #20]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20000fdc 	.word	0x20000fdc
 800b3f8:	20000fb8 	.word	0x20000fb8
 800b3fc:	20000f6c 	.word	0x20000f6c
 800b400:	20000f70 	.word	0x20000f70
 800b404:	20000fcc 	.word	0x20000fcc
 800b408:	20000fd4 	.word	0x20000fd4
 800b40c:	20000fbc 	.word	0x20000fbc
 800b410:	20000ae4 	.word	0x20000ae4
 800b414:	20000ae0 	.word	0x20000ae0
 800b418:	20000fc8 	.word	0x20000fc8
 800b41c:	20000fc4 	.word	0x20000fc4

0800b420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b426:	4b2a      	ldr	r3, [pc, #168]	; (800b4d0 <vTaskSwitchContext+0xb0>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b42e:	4b29      	ldr	r3, [pc, #164]	; (800b4d4 <vTaskSwitchContext+0xb4>)
 800b430:	2201      	movs	r2, #1
 800b432:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b434:	e046      	b.n	800b4c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b436:	4b27      	ldr	r3, [pc, #156]	; (800b4d4 <vTaskSwitchContext+0xb4>)
 800b438:	2200      	movs	r2, #0
 800b43a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b43c:	4b26      	ldr	r3, [pc, #152]	; (800b4d8 <vTaskSwitchContext+0xb8>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	e010      	b.n	800b466 <vTaskSwitchContext+0x46>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10a      	bne.n	800b460 <vTaskSwitchContext+0x40>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	607b      	str	r3, [r7, #4]
}
 800b45c:	bf00      	nop
 800b45e:	e7fe      	b.n	800b45e <vTaskSwitchContext+0x3e>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3b01      	subs	r3, #1
 800b464:	60fb      	str	r3, [r7, #12]
 800b466:	491d      	ldr	r1, [pc, #116]	; (800b4dc <vTaskSwitchContext+0xbc>)
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	4613      	mov	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	440b      	add	r3, r1
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0e4      	beq.n	800b444 <vTaskSwitchContext+0x24>
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4a15      	ldr	r2, [pc, #84]	; (800b4dc <vTaskSwitchContext+0xbc>)
 800b486:	4413      	add	r3, r2
 800b488:	60bb      	str	r3, [r7, #8]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	685a      	ldr	r2, [r3, #4]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	605a      	str	r2, [r3, #4]
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	3308      	adds	r3, #8
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d104      	bne.n	800b4aa <vTaskSwitchContext+0x8a>
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	605a      	str	r2, [r3, #4]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	4a0b      	ldr	r2, [pc, #44]	; (800b4e0 <vTaskSwitchContext+0xc0>)
 800b4b2:	6013      	str	r3, [r2, #0]
 800b4b4:	4a08      	ldr	r2, [pc, #32]	; (800b4d8 <vTaskSwitchContext+0xb8>)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4ba:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <vTaskSwitchContext+0xc0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3354      	adds	r3, #84	; 0x54
 800b4c0:	4a08      	ldr	r2, [pc, #32]	; (800b4e4 <vTaskSwitchContext+0xc4>)
 800b4c2:	6013      	str	r3, [r2, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	20000fdc 	.word	0x20000fdc
 800b4d4:	20000fc8 	.word	0x20000fc8
 800b4d8:	20000fbc 	.word	0x20000fbc
 800b4dc:	20000ae4 	.word	0x20000ae4
 800b4e0:	20000ae0 	.word	0x20000ae0
 800b4e4:	2000005c 	.word	0x2000005c

0800b4e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10a      	bne.n	800b50e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	60fb      	str	r3, [r7, #12]
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b50e:	4b07      	ldr	r3, [pc, #28]	; (800b52c <vTaskPlaceOnEventList+0x44>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3318      	adds	r3, #24
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7fe fb3f 	bl	8009b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b51c:	2101      	movs	r1, #1
 800b51e:	6838      	ldr	r0, [r7, #0]
 800b520:	f000 fb7e 	bl	800bc20 <prvAddCurrentTaskToDelayedList>
}
 800b524:	bf00      	nop
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20000ae0 	.word	0x20000ae0

0800b530 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	617b      	str	r3, [r7, #20]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b558:	4b0a      	ldr	r3, [pc, #40]	; (800b584 <vTaskPlaceOnEventListRestricted+0x54>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3318      	adds	r3, #24
 800b55e:	4619      	mov	r1, r3
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f7fe faf6 	bl	8009b52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b56c:	f04f 33ff 	mov.w	r3, #4294967295
 800b570:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	68b8      	ldr	r0, [r7, #8]
 800b576:	f000 fb53 	bl	800bc20 <prvAddCurrentTaskToDelayedList>
	}
 800b57a:	bf00      	nop
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20000ae0 	.word	0x20000ae0

0800b588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10a      	bne.n	800b5b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	60fb      	str	r3, [r7, #12]
}
 800b5b0:	bf00      	nop
 800b5b2:	e7fe      	b.n	800b5b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	3318      	adds	r3, #24
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe fb27 	bl	8009c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5be:	4b1e      	ldr	r3, [pc, #120]	; (800b638 <xTaskRemoveFromEventList+0xb0>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d11d      	bne.n	800b602 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe fb1e 	bl	8009c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d4:	4b19      	ldr	r3, [pc, #100]	; (800b63c <xTaskRemoveFromEventList+0xb4>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d903      	bls.n	800b5e4 <xTaskRemoveFromEventList+0x5c>
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	4a16      	ldr	r2, [pc, #88]	; (800b63c <xTaskRemoveFromEventList+0xb4>)
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4a13      	ldr	r2, [pc, #76]	; (800b640 <xTaskRemoveFromEventList+0xb8>)
 800b5f2:	441a      	add	r2, r3
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	f7fe faa9 	bl	8009b52 <vListInsertEnd>
 800b600:	e005      	b.n	800b60e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	3318      	adds	r3, #24
 800b606:	4619      	mov	r1, r3
 800b608:	480e      	ldr	r0, [pc, #56]	; (800b644 <xTaskRemoveFromEventList+0xbc>)
 800b60a:	f7fe faa2 	bl	8009b52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b612:	4b0d      	ldr	r3, [pc, #52]	; (800b648 <xTaskRemoveFromEventList+0xc0>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b618:	429a      	cmp	r2, r3
 800b61a:	d905      	bls.n	800b628 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b61c:	2301      	movs	r3, #1
 800b61e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b620:	4b0a      	ldr	r3, [pc, #40]	; (800b64c <xTaskRemoveFromEventList+0xc4>)
 800b622:	2201      	movs	r2, #1
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	e001      	b.n	800b62c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b628:	2300      	movs	r3, #0
 800b62a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b62c:	697b      	ldr	r3, [r7, #20]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20000fdc 	.word	0x20000fdc
 800b63c:	20000fbc 	.word	0x20000fbc
 800b640:	20000ae4 	.word	0x20000ae4
 800b644:	20000f74 	.word	0x20000f74
 800b648:	20000ae0 	.word	0x20000ae0
 800b64c:	20000fc8 	.word	0x20000fc8

0800b650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b658:	4b06      	ldr	r3, [pc, #24]	; (800b674 <vTaskInternalSetTimeOutState+0x24>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b660:	4b05      	ldr	r3, [pc, #20]	; (800b678 <vTaskInternalSetTimeOutState+0x28>)
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	605a      	str	r2, [r3, #4]
}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	20000fcc 	.word	0x20000fcc
 800b678:	20000fb8 	.word	0x20000fb8

0800b67c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10a      	bne.n	800b6a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	613b      	str	r3, [r7, #16]
}
 800b69e:	bf00      	nop
 800b6a0:	e7fe      	b.n	800b6a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10a      	bne.n	800b6be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	60fb      	str	r3, [r7, #12]
}
 800b6ba:	bf00      	nop
 800b6bc:	e7fe      	b.n	800b6bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b6be:	f000 ff81 	bl	800c5c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6c2:	4b1d      	ldr	r3, [pc, #116]	; (800b738 <xTaskCheckForTimeOut+0xbc>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d102      	bne.n	800b6e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	61fb      	str	r3, [r7, #28]
 800b6e0:	e023      	b.n	800b72a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b15      	ldr	r3, [pc, #84]	; (800b73c <xTaskCheckForTimeOut+0xc0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d007      	beq.n	800b6fe <xTaskCheckForTimeOut+0x82>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	69ba      	ldr	r2, [r7, #24]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	61fb      	str	r3, [r7, #28]
 800b6fc:	e015      	b.n	800b72a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	429a      	cmp	r2, r3
 800b706:	d20b      	bcs.n	800b720 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff9b 	bl	800b650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	e004      	b.n	800b72a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b726:	2301      	movs	r3, #1
 800b728:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b72a:	f000 ff7b 	bl	800c624 <vPortExitCritical>

	return xReturn;
 800b72e:	69fb      	ldr	r3, [r7, #28]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3720      	adds	r7, #32
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	20000fb8 	.word	0x20000fb8
 800b73c:	20000fcc 	.word	0x20000fcc

0800b740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b744:	4b03      	ldr	r3, [pc, #12]	; (800b754 <vTaskMissedYield+0x14>)
 800b746:	2201      	movs	r2, #1
 800b748:	601a      	str	r2, [r3, #0]
}
 800b74a:	bf00      	nop
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	20000fc8 	.word	0x20000fc8

0800b758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b760:	f000 f852 	bl	800b808 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b764:	4b06      	ldr	r3, [pc, #24]	; (800b780 <prvIdleTask+0x28>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d9f9      	bls.n	800b760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b76c:	4b05      	ldr	r3, [pc, #20]	; (800b784 <prvIdleTask+0x2c>)
 800b76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b77c:	e7f0      	b.n	800b760 <prvIdleTask+0x8>
 800b77e:	bf00      	nop
 800b780:	20000ae4 	.word	0x20000ae4
 800b784:	e000ed04 	.word	0xe000ed04

0800b788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b78e:	2300      	movs	r3, #0
 800b790:	607b      	str	r3, [r7, #4]
 800b792:	e00c      	b.n	800b7ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	4613      	mov	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4a12      	ldr	r2, [pc, #72]	; (800b7e8 <prvInitialiseTaskLists+0x60>)
 800b7a0:	4413      	add	r3, r2
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe f9a8 	bl	8009af8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	607b      	str	r3, [r7, #4]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b37      	cmp	r3, #55	; 0x37
 800b7b2:	d9ef      	bls.n	800b794 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7b4:	480d      	ldr	r0, [pc, #52]	; (800b7ec <prvInitialiseTaskLists+0x64>)
 800b7b6:	f7fe f99f 	bl	8009af8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7ba:	480d      	ldr	r0, [pc, #52]	; (800b7f0 <prvInitialiseTaskLists+0x68>)
 800b7bc:	f7fe f99c 	bl	8009af8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7c0:	480c      	ldr	r0, [pc, #48]	; (800b7f4 <prvInitialiseTaskLists+0x6c>)
 800b7c2:	f7fe f999 	bl	8009af8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7c6:	480c      	ldr	r0, [pc, #48]	; (800b7f8 <prvInitialiseTaskLists+0x70>)
 800b7c8:	f7fe f996 	bl	8009af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7cc:	480b      	ldr	r0, [pc, #44]	; (800b7fc <prvInitialiseTaskLists+0x74>)
 800b7ce:	f7fe f993 	bl	8009af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7d2:	4b0b      	ldr	r3, [pc, #44]	; (800b800 <prvInitialiseTaskLists+0x78>)
 800b7d4:	4a05      	ldr	r2, [pc, #20]	; (800b7ec <prvInitialiseTaskLists+0x64>)
 800b7d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <prvInitialiseTaskLists+0x7c>)
 800b7da:	4a05      	ldr	r2, [pc, #20]	; (800b7f0 <prvInitialiseTaskLists+0x68>)
 800b7dc:	601a      	str	r2, [r3, #0]
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20000ae4 	.word	0x20000ae4
 800b7ec:	20000f44 	.word	0x20000f44
 800b7f0:	20000f58 	.word	0x20000f58
 800b7f4:	20000f74 	.word	0x20000f74
 800b7f8:	20000f88 	.word	0x20000f88
 800b7fc:	20000fa0 	.word	0x20000fa0
 800b800:	20000f6c 	.word	0x20000f6c
 800b804:	20000f70 	.word	0x20000f70

0800b808 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b80e:	e019      	b.n	800b844 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b810:	f000 fed8 	bl	800c5c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b814:	4b10      	ldr	r3, [pc, #64]	; (800b858 <prvCheckTasksWaitingTermination+0x50>)
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3304      	adds	r3, #4
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe f9f3 	bl	8009c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b826:	4b0d      	ldr	r3, [pc, #52]	; (800b85c <prvCheckTasksWaitingTermination+0x54>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	4a0b      	ldr	r2, [pc, #44]	; (800b85c <prvCheckTasksWaitingTermination+0x54>)
 800b82e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b830:	4b0b      	ldr	r3, [pc, #44]	; (800b860 <prvCheckTasksWaitingTermination+0x58>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3b01      	subs	r3, #1
 800b836:	4a0a      	ldr	r2, [pc, #40]	; (800b860 <prvCheckTasksWaitingTermination+0x58>)
 800b838:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b83a:	f000 fef3 	bl	800c624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f810 	bl	800b864 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b844:	4b06      	ldr	r3, [pc, #24]	; (800b860 <prvCheckTasksWaitingTermination+0x58>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1e1      	bne.n	800b810 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b84c:	bf00      	nop
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20000f88 	.word	0x20000f88
 800b85c:	20000fb4 	.word	0x20000fb4
 800b860:	20000f9c 	.word	0x20000f9c

0800b864 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3354      	adds	r3, #84	; 0x54
 800b870:	4618      	mov	r0, r3
 800b872:	f001 f9bb 	bl	800cbec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d108      	bne.n	800b892 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b884:	4618      	mov	r0, r3
 800b886:	f001 f88b 	bl	800c9a0 <vPortFree>
				vPortFree( pxTCB );
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 f888 	bl	800c9a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b890:	e018      	b.n	800b8c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d103      	bne.n	800b8a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f001 f87f 	bl	800c9a0 <vPortFree>
	}
 800b8a2:	e00f      	b.n	800b8c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d00a      	beq.n	800b8c4 <prvDeleteTCB+0x60>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	60fb      	str	r3, [r7, #12]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <prvDeleteTCB+0x5e>
	}
 800b8c4:	bf00      	nop
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <prvResetNextTaskUnblockTime+0x38>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d104      	bne.n	800b8e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <prvResetNextTaskUnblockTime+0x3c>)
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8e4:	e008      	b.n	800b8f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e6:	4b07      	ldr	r3, [pc, #28]	; (800b904 <prvResetNextTaskUnblockTime+0x38>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4a04      	ldr	r2, [pc, #16]	; (800b908 <prvResetNextTaskUnblockTime+0x3c>)
 800b8f6:	6013      	str	r3, [r2, #0]
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	20000f6c 	.word	0x20000f6c
 800b908:	20000fd4 	.word	0x20000fd4

0800b90c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b912:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <xTaskGetSchedulerState+0x34>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b91a:	2301      	movs	r3, #1
 800b91c:	607b      	str	r3, [r7, #4]
 800b91e:	e008      	b.n	800b932 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b920:	4b08      	ldr	r3, [pc, #32]	; (800b944 <xTaskGetSchedulerState+0x38>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b928:	2302      	movs	r3, #2
 800b92a:	607b      	str	r3, [r7, #4]
 800b92c:	e001      	b.n	800b932 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b92e:	2300      	movs	r3, #0
 800b930:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b932:	687b      	ldr	r3, [r7, #4]
	}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	20000fc0 	.word	0x20000fc0
 800b944:	20000fdc 	.word	0x20000fdc

0800b948 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b954:	2300      	movs	r3, #0
 800b956:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d051      	beq.n	800ba02 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b962:	4b2a      	ldr	r3, [pc, #168]	; (800ba0c <xTaskPriorityInherit+0xc4>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b968:	429a      	cmp	r2, r3
 800b96a:	d241      	bcs.n	800b9f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	2b00      	cmp	r3, #0
 800b972:	db06      	blt.n	800b982 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b974:	4b25      	ldr	r3, [pc, #148]	; (800ba0c <xTaskPriorityInherit+0xc4>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	6959      	ldr	r1, [r3, #20]
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4a1f      	ldr	r2, [pc, #124]	; (800ba10 <xTaskPriorityInherit+0xc8>)
 800b994:	4413      	add	r3, r2
 800b996:	4299      	cmp	r1, r3
 800b998:	d122      	bne.n	800b9e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe f934 	bl	8009c0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9a4:	4b19      	ldr	r3, [pc, #100]	; (800ba0c <xTaskPriorityInherit+0xc4>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b2:	4b18      	ldr	r3, [pc, #96]	; (800ba14 <xTaskPriorityInherit+0xcc>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d903      	bls.n	800b9c2 <xTaskPriorityInherit+0x7a>
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	4a15      	ldr	r2, [pc, #84]	; (800ba14 <xTaskPriorityInherit+0xcc>)
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4a10      	ldr	r2, [pc, #64]	; (800ba10 <xTaskPriorityInherit+0xc8>)
 800b9d0:	441a      	add	r2, r3
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4610      	mov	r0, r2
 800b9da:	f7fe f8ba 	bl	8009b52 <vListInsertEnd>
 800b9de:	e004      	b.n	800b9ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9e0:	4b0a      	ldr	r3, [pc, #40]	; (800ba0c <xTaskPriorityInherit+0xc4>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	e008      	b.n	800ba02 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <xTaskPriorityInherit+0xc4>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d201      	bcs.n	800ba02 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba02:	68fb      	ldr	r3, [r7, #12]
	}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20000ae0 	.word	0x20000ae0
 800ba10:	20000ae4 	.word	0x20000ae4
 800ba14:	20000fbc 	.word	0x20000fbc

0800ba18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba24:	2300      	movs	r3, #0
 800ba26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d056      	beq.n	800badc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba2e:	4b2e      	ldr	r3, [pc, #184]	; (800bae8 <xTaskPriorityDisinherit+0xd0>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	693a      	ldr	r2, [r7, #16]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d00a      	beq.n	800ba4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	60fb      	str	r3, [r7, #12]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10a      	bne.n	800ba6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	60bb      	str	r3, [r7, #8]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba70:	1e5a      	subs	r2, r3, #1
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d02c      	beq.n	800badc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d128      	bne.n	800badc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fe f8bc 	bl	8009c0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baac:	4b0f      	ldr	r3, [pc, #60]	; (800baec <xTaskPriorityDisinherit+0xd4>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d903      	bls.n	800babc <xTaskPriorityDisinherit+0xa4>
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab8:	4a0c      	ldr	r2, [pc, #48]	; (800baec <xTaskPriorityDisinherit+0xd4>)
 800baba:	6013      	str	r3, [r2, #0]
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac0:	4613      	mov	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4a09      	ldr	r2, [pc, #36]	; (800baf0 <xTaskPriorityDisinherit+0xd8>)
 800baca:	441a      	add	r2, r3
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	3304      	adds	r3, #4
 800bad0:	4619      	mov	r1, r3
 800bad2:	4610      	mov	r0, r2
 800bad4:	f7fe f83d 	bl	8009b52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bad8:	2301      	movs	r3, #1
 800bada:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800badc:	697b      	ldr	r3, [r7, #20]
	}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	20000ae0 	.word	0x20000ae0
 800baec:	20000fbc 	.word	0x20000fbc
 800baf0:	20000ae4 	.word	0x20000ae4

0800baf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b088      	sub	sp, #32
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb02:	2301      	movs	r3, #1
 800bb04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d06a      	beq.n	800bbe2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	60fb      	str	r3, [r7, #12]
}
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d902      	bls.n	800bb3a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	61fb      	str	r3, [r7, #28]
 800bb38:	e002      	b.n	800bb40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb44:	69fa      	ldr	r2, [r7, #28]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d04b      	beq.n	800bbe2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d146      	bne.n	800bbe2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb54:	4b25      	ldr	r3, [pc, #148]	; (800bbec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d10a      	bne.n	800bb74 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	60bb      	str	r3, [r7, #8]
}
 800bb70:	bf00      	nop
 800bb72:	e7fe      	b.n	800bb72 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	69fa      	ldr	r2, [r7, #28]
 800bb7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	db04      	blt.n	800bb92 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	6959      	ldr	r1, [r3, #20]
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4a13      	ldr	r2, [pc, #76]	; (800bbf0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bba2:	4413      	add	r3, r2
 800bba4:	4299      	cmp	r1, r3
 800bba6:	d11c      	bne.n	800bbe2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	3304      	adds	r3, #4
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe f82d 	bl	8009c0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb6:	4b0f      	ldr	r3, [pc, #60]	; (800bbf4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d903      	bls.n	800bbc6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc2:	4a0c      	ldr	r2, [pc, #48]	; (800bbf4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbca:	4613      	mov	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4a07      	ldr	r2, [pc, #28]	; (800bbf0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bbd4:	441a      	add	r2, r3
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	3304      	adds	r3, #4
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4610      	mov	r0, r2
 800bbde:	f7fd ffb8 	bl	8009b52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbe2:	bf00      	nop
 800bbe4:	3720      	adds	r7, #32
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20000ae0 	.word	0x20000ae0
 800bbf0:	20000ae4 	.word	0x20000ae4
 800bbf4:	20000fbc 	.word	0x20000fbc

0800bbf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bbf8:	b480      	push	{r7}
 800bbfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bbfc:	4b07      	ldr	r3, [pc, #28]	; (800bc1c <pvTaskIncrementMutexHeldCount+0x24>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d004      	beq.n	800bc0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc04:	4b05      	ldr	r3, [pc, #20]	; (800bc1c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc0a:	3201      	adds	r2, #1
 800bc0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bc0e:	4b03      	ldr	r3, [pc, #12]	; (800bc1c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc10:	681b      	ldr	r3, [r3, #0]
	}
 800bc12:	4618      	mov	r0, r3
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	20000ae0 	.word	0x20000ae0

0800bc20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc2a:	4b21      	ldr	r3, [pc, #132]	; (800bcb0 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc30:	4b20      	ldr	r3, [pc, #128]	; (800bcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3304      	adds	r3, #4
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd ffe8 	bl	8009c0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc42:	d10a      	bne.n	800bc5a <prvAddCurrentTaskToDelayedList+0x3a>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d007      	beq.n	800bc5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc4a:	4b1a      	ldr	r3, [pc, #104]	; (800bcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4619      	mov	r1, r3
 800bc52:	4819      	ldr	r0, [pc, #100]	; (800bcb8 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc54:	f7fd ff7d 	bl	8009b52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc58:	e026      	b.n	800bca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4413      	add	r3, r2
 800bc60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc62:	4b14      	ldr	r3, [pc, #80]	; (800bcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d209      	bcs.n	800bc86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc72:	4b12      	ldr	r3, [pc, #72]	; (800bcbc <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	4b0f      	ldr	r3, [pc, #60]	; (800bcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	4610      	mov	r0, r2
 800bc80:	f7fd ff8b 	bl	8009b9a <vListInsert>
}
 800bc84:	e010      	b.n	800bca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc86:	4b0e      	ldr	r3, [pc, #56]	; (800bcc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4619      	mov	r1, r3
 800bc92:	4610      	mov	r0, r2
 800bc94:	f7fd ff81 	bl	8009b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc98:	4b0a      	ldr	r3, [pc, #40]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d202      	bcs.n	800bca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bca2:	4a08      	ldr	r2, [pc, #32]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	6013      	str	r3, [r2, #0]
}
 800bca8:	bf00      	nop
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	20000fb8 	.word	0x20000fb8
 800bcb4:	20000ae0 	.word	0x20000ae0
 800bcb8:	20000fa0 	.word	0x20000fa0
 800bcbc:	20000f70 	.word	0x20000f70
 800bcc0:	20000f6c 	.word	0x20000f6c
 800bcc4:	20000fd4 	.word	0x20000fd4

0800bcc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	; 0x28
 800bccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcd2:	f000 fb07 	bl	800c2e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcd6:	4b1c      	ldr	r3, [pc, #112]	; (800bd48 <xTimerCreateTimerTask+0x80>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d021      	beq.n	800bd22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bce2:	2300      	movs	r3, #0
 800bce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bce6:	1d3a      	adds	r2, r7, #4
 800bce8:	f107 0108 	add.w	r1, r7, #8
 800bcec:	f107 030c 	add.w	r3, r7, #12
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fd fee7 	bl	8009ac4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	9202      	str	r2, [sp, #8]
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	2302      	movs	r3, #2
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	2300      	movs	r3, #0
 800bd06:	460a      	mov	r2, r1
 800bd08:	4910      	ldr	r1, [pc, #64]	; (800bd4c <xTimerCreateTimerTask+0x84>)
 800bd0a:	4811      	ldr	r0, [pc, #68]	; (800bd50 <xTimerCreateTimerTask+0x88>)
 800bd0c:	f7fe ffb6 	bl	800ac7c <xTaskCreateStatic>
 800bd10:	4603      	mov	r3, r0
 800bd12:	4a10      	ldr	r2, [pc, #64]	; (800bd54 <xTimerCreateTimerTask+0x8c>)
 800bd14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd16:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <xTimerCreateTimerTask+0x8c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	613b      	str	r3, [r7, #16]
}
 800bd3a:	bf00      	nop
 800bd3c:	e7fe      	b.n	800bd3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd3e:	697b      	ldr	r3, [r7, #20]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	20001010 	.word	0x20001010
 800bd4c:	0800ce84 	.word	0x0800ce84
 800bd50:	0800be8d 	.word	0x0800be8d
 800bd54:	20001014 	.word	0x20001014

0800bd58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08a      	sub	sp, #40	; 0x28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10a      	bne.n	800bd86 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	623b      	str	r3, [r7, #32]
}
 800bd82:	bf00      	nop
 800bd84:	e7fe      	b.n	800bd84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd86:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <xTimerGenericCommand+0x98>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d02a      	beq.n	800bde4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	2b05      	cmp	r3, #5
 800bd9e:	dc18      	bgt.n	800bdd2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bda0:	f7ff fdb4 	bl	800b90c <xTaskGetSchedulerState>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d109      	bne.n	800bdbe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdaa:	4b11      	ldr	r3, [pc, #68]	; (800bdf0 <xTimerGenericCommand+0x98>)
 800bdac:	6818      	ldr	r0, [r3, #0]
 800bdae:	f107 0110 	add.w	r1, r7, #16
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdb6:	f7fe f8fb 	bl	8009fb0 <xQueueGenericSend>
 800bdba:	6278      	str	r0, [r7, #36]	; 0x24
 800bdbc:	e012      	b.n	800bde4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bdbe:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <xTimerGenericCommand+0x98>)
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	f107 0110 	add.w	r1, r7, #16
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f7fe f8f1 	bl	8009fb0 <xQueueGenericSend>
 800bdce:	6278      	str	r0, [r7, #36]	; 0x24
 800bdd0:	e008      	b.n	800bde4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdd2:	4b07      	ldr	r3, [pc, #28]	; (800bdf0 <xTimerGenericCommand+0x98>)
 800bdd4:	6818      	ldr	r0, [r3, #0]
 800bdd6:	f107 0110 	add.w	r1, r7, #16
 800bdda:	2300      	movs	r3, #0
 800bddc:	683a      	ldr	r2, [r7, #0]
 800bdde:	f7fe f9e5 	bl	800a1ac <xQueueGenericSendFromISR>
 800bde2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3728      	adds	r7, #40	; 0x28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	20001010 	.word	0x20001010

0800bdf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdfe:	4b22      	ldr	r3, [pc, #136]	; (800be88 <prvProcessExpiredTimer+0x94>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	3304      	adds	r3, #4
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fd fefd 	bl	8009c0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be18:	f003 0304 	and.w	r3, r3, #4
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d022      	beq.n	800be66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	699a      	ldr	r2, [r3, #24]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	18d1      	adds	r1, r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	6978      	ldr	r0, [r7, #20]
 800be2e:	f000 f8d1 	bl	800bfd4 <prvInsertTimerInActiveList>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01f      	beq.n	800be78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be38:	2300      	movs	r3, #0
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	2300      	movs	r3, #0
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	2100      	movs	r1, #0
 800be42:	6978      	ldr	r0, [r7, #20]
 800be44:	f7ff ff88 	bl	800bd58 <xTimerGenericCommand>
 800be48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d113      	bne.n	800be78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	60fb      	str	r3, [r7, #12]
}
 800be62:	bf00      	nop
 800be64:	e7fe      	b.n	800be64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be6c:	f023 0301 	bic.w	r3, r3, #1
 800be70:	b2da      	uxtb	r2, r3
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	6a1b      	ldr	r3, [r3, #32]
 800be7c:	6978      	ldr	r0, [r7, #20]
 800be7e:	4798      	blx	r3
}
 800be80:	bf00      	nop
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20001008 	.word	0x20001008

0800be8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be94:	f107 0308 	add.w	r3, r7, #8
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 f857 	bl	800bf4c <prvGetNextExpireTime>
 800be9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	4619      	mov	r1, r3
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f000 f803 	bl	800beb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800beaa:	f000 f8d5 	bl	800c058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800beae:	e7f1      	b.n	800be94 <prvTimerTask+0x8>

0800beb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800beba:	f7ff f93b 	bl	800b134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bebe:	f107 0308 	add.w	r3, r7, #8
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 f866 	bl	800bf94 <prvSampleTimeNow>
 800bec8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d130      	bne.n	800bf32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10a      	bne.n	800beec <prvProcessTimerOrBlockTask+0x3c>
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d806      	bhi.n	800beec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bede:	f7ff f937 	bl	800b150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bee2:	68f9      	ldr	r1, [r7, #12]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff ff85 	bl	800bdf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800beea:	e024      	b.n	800bf36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d008      	beq.n	800bf04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bef2:	4b13      	ldr	r3, [pc, #76]	; (800bf40 <prvProcessTimerOrBlockTask+0x90>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <prvProcessTimerOrBlockTask+0x50>
 800befc:	2301      	movs	r3, #1
 800befe:	e000      	b.n	800bf02 <prvProcessTimerOrBlockTask+0x52>
 800bf00:	2300      	movs	r3, #0
 800bf02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf04:	4b0f      	ldr	r3, [pc, #60]	; (800bf44 <prvProcessTimerOrBlockTask+0x94>)
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	4619      	mov	r1, r3
 800bf12:	f7fe fe7f 	bl	800ac14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf16:	f7ff f91b 	bl	800b150 <xTaskResumeAll>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10a      	bne.n	800bf36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf20:	4b09      	ldr	r3, [pc, #36]	; (800bf48 <prvProcessTimerOrBlockTask+0x98>)
 800bf22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	f3bf 8f6f 	isb	sy
}
 800bf30:	e001      	b.n	800bf36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf32:	f7ff f90d 	bl	800b150 <xTaskResumeAll>
}
 800bf36:	bf00      	nop
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	2000100c 	.word	0x2000100c
 800bf44:	20001010 	.word	0x20001010
 800bf48:	e000ed04 	.word	0xe000ed04

0800bf4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf54:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <prvGetNextExpireTime+0x44>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <prvGetNextExpireTime+0x16>
 800bf5e:	2201      	movs	r2, #1
 800bf60:	e000      	b.n	800bf64 <prvGetNextExpireTime+0x18>
 800bf62:	2200      	movs	r2, #0
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d105      	bne.n	800bf7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf70:	4b07      	ldr	r3, [pc, #28]	; (800bf90 <prvGetNextExpireTime+0x44>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e001      	b.n	800bf80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf80:	68fb      	ldr	r3, [r7, #12]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3714      	adds	r7, #20
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	20001008 	.word	0x20001008

0800bf94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf9c:	f7ff f976 	bl	800b28c <xTaskGetTickCount>
 800bfa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfa2:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <prvSampleTimeNow+0x3c>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d205      	bcs.n	800bfb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfac:	f000 f936 	bl	800c21c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	e002      	b.n	800bfbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfbe:	4a04      	ldr	r2, [pc, #16]	; (800bfd0 <prvSampleTimeNow+0x3c>)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20001018 	.word	0x20001018

0800bfd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d812      	bhi.n	800c020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	1ad2      	subs	r2, r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	429a      	cmp	r2, r3
 800c006:	d302      	bcc.n	800c00e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c008:	2301      	movs	r3, #1
 800c00a:	617b      	str	r3, [r7, #20]
 800c00c:	e01b      	b.n	800c046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c00e:	4b10      	ldr	r3, [pc, #64]	; (800c050 <prvInsertTimerInActiveList+0x7c>)
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	3304      	adds	r3, #4
 800c016:	4619      	mov	r1, r3
 800c018:	4610      	mov	r0, r2
 800c01a:	f7fd fdbe 	bl	8009b9a <vListInsert>
 800c01e:	e012      	b.n	800c046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d206      	bcs.n	800c036 <prvInsertTimerInActiveList+0x62>
 800c028:	68ba      	ldr	r2, [r7, #8]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d302      	bcc.n	800c036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c030:	2301      	movs	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	e007      	b.n	800c046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c036:	4b07      	ldr	r3, [pc, #28]	; (800c054 <prvInsertTimerInActiveList+0x80>)
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3304      	adds	r3, #4
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7fd fdaa 	bl	8009b9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c046:	697b      	ldr	r3, [r7, #20]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3718      	adds	r7, #24
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	2000100c 	.word	0x2000100c
 800c054:	20001008 	.word	0x20001008

0800c058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08e      	sub	sp, #56	; 0x38
 800c05c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c05e:	e0ca      	b.n	800c1f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	da18      	bge.n	800c098 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c066:	1d3b      	adds	r3, r7, #4
 800c068:	3304      	adds	r3, #4
 800c06a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10a      	bne.n	800c088 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	61fb      	str	r3, [r7, #28]
}
 800c084:	bf00      	nop
 800c086:	e7fe      	b.n	800c086 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c08e:	6850      	ldr	r0, [r2, #4]
 800c090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c092:	6892      	ldr	r2, [r2, #8]
 800c094:	4611      	mov	r1, r2
 800c096:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f2c0 80ab 	blt.w	800c1f6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d004      	beq.n	800c0b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fd fdab 	bl	8009c0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0b6:	463b      	mov	r3, r7
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff ff6b 	bl	800bf94 <prvSampleTimeNow>
 800c0be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b09      	cmp	r3, #9
 800c0c4:	f200 8096 	bhi.w	800c1f4 <prvProcessReceivedCommands+0x19c>
 800c0c8:	a201      	add	r2, pc, #4	; (adr r2, 800c0d0 <prvProcessReceivedCommands+0x78>)
 800c0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ce:	bf00      	nop
 800c0d0:	0800c0f9 	.word	0x0800c0f9
 800c0d4:	0800c0f9 	.word	0x0800c0f9
 800c0d8:	0800c0f9 	.word	0x0800c0f9
 800c0dc:	0800c16d 	.word	0x0800c16d
 800c0e0:	0800c181 	.word	0x0800c181
 800c0e4:	0800c1cb 	.word	0x0800c1cb
 800c0e8:	0800c0f9 	.word	0x0800c0f9
 800c0ec:	0800c0f9 	.word	0x0800c0f9
 800c0f0:	0800c16d 	.word	0x0800c16d
 800c0f4:	0800c181 	.word	0x0800c181
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0fe:	f043 0301 	orr.w	r3, r3, #1
 800c102:	b2da      	uxtb	r2, r3
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	18d1      	adds	r1, r2, r3
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c118:	f7ff ff5c 	bl	800bfd4 <prvInsertTimerInActiveList>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d069      	beq.n	800c1f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c128:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b00      	cmp	r3, #0
 800c136:	d05e      	beq.n	800c1f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	441a      	add	r2, r3
 800c140:	2300      	movs	r3, #0
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	2300      	movs	r3, #0
 800c146:	2100      	movs	r1, #0
 800c148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c14a:	f7ff fe05 	bl	800bd58 <xTimerGenericCommand>
 800c14e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d14f      	bne.n	800c1f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	61bb      	str	r3, [r7, #24]
}
 800c168:	bf00      	nop
 800c16a:	e7fe      	b.n	800c16a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c172:	f023 0301 	bic.w	r3, r3, #1
 800c176:	b2da      	uxtb	r2, r3
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c17e:	e03a      	b.n	800c1f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c186:	f043 0301 	orr.w	r3, r3, #1
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10a      	bne.n	800c1b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	617b      	str	r3, [r7, #20]
}
 800c1b2:	bf00      	nop
 800c1b4:	e7fe      	b.n	800c1b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	699a      	ldr	r2, [r3, #24]
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	18d1      	adds	r1, r2, r3
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c4:	f7ff ff06 	bl	800bfd4 <prvInsertTimerInActiveList>
					break;
 800c1c8:	e015      	b.n	800c1f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d103      	bne.n	800c1e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1da:	f000 fbe1 	bl	800c9a0 <vPortFree>
 800c1de:	e00a      	b.n	800c1f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1e6:	f023 0301 	bic.w	r3, r3, #1
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1f2:	e000      	b.n	800c1f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c1f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1f6:	4b08      	ldr	r3, [pc, #32]	; (800c218 <prvProcessReceivedCommands+0x1c0>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	1d39      	adds	r1, r7, #4
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe f8fc 	bl	800a3fc <xQueueReceive>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	f47f af2a 	bne.w	800c060 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	3730      	adds	r7, #48	; 0x30
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20001010 	.word	0x20001010

0800c21c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b088      	sub	sp, #32
 800c220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c222:	e048      	b.n	800c2b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c224:	4b2d      	ldr	r3, [pc, #180]	; (800c2dc <prvSwitchTimerLists+0xc0>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c22e:	4b2b      	ldr	r3, [pc, #172]	; (800c2dc <prvSwitchTimerLists+0xc0>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	3304      	adds	r3, #4
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fd fce5 	bl	8009c0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6a1b      	ldr	r3, [r3, #32]
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c250:	f003 0304 	and.w	r3, r3, #4
 800c254:	2b00      	cmp	r3, #0
 800c256:	d02e      	beq.n	800c2b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	4413      	add	r3, r2
 800c260:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	429a      	cmp	r2, r3
 800c268:	d90e      	bls.n	800c288 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c276:	4b19      	ldr	r3, [pc, #100]	; (800c2dc <prvSwitchTimerLists+0xc0>)
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3304      	adds	r3, #4
 800c27e:	4619      	mov	r1, r3
 800c280:	4610      	mov	r0, r2
 800c282:	f7fd fc8a 	bl	8009b9a <vListInsert>
 800c286:	e016      	b.n	800c2b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c288:	2300      	movs	r3, #0
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	2300      	movs	r3, #0
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	2100      	movs	r1, #0
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff fd60 	bl	800bd58 <xTimerGenericCommand>
 800c298:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10a      	bne.n	800c2b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	603b      	str	r3, [r7, #0]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2b6:	4b09      	ldr	r3, [pc, #36]	; (800c2dc <prvSwitchTimerLists+0xc0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1b1      	bne.n	800c224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2c0:	4b06      	ldr	r3, [pc, #24]	; (800c2dc <prvSwitchTimerLists+0xc0>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2c6:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <prvSwitchTimerLists+0xc4>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a04      	ldr	r2, [pc, #16]	; (800c2dc <prvSwitchTimerLists+0xc0>)
 800c2cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2ce:	4a04      	ldr	r2, [pc, #16]	; (800c2e0 <prvSwitchTimerLists+0xc4>)
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	6013      	str	r3, [r2, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	20001008 	.word	0x20001008
 800c2e0:	2000100c 	.word	0x2000100c

0800c2e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2ea:	f000 f96b 	bl	800c5c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2ee:	4b15      	ldr	r3, [pc, #84]	; (800c344 <prvCheckForValidListAndQueue+0x60>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d120      	bne.n	800c338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2f6:	4814      	ldr	r0, [pc, #80]	; (800c348 <prvCheckForValidListAndQueue+0x64>)
 800c2f8:	f7fd fbfe 	bl	8009af8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2fc:	4813      	ldr	r0, [pc, #76]	; (800c34c <prvCheckForValidListAndQueue+0x68>)
 800c2fe:	f7fd fbfb 	bl	8009af8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c302:	4b13      	ldr	r3, [pc, #76]	; (800c350 <prvCheckForValidListAndQueue+0x6c>)
 800c304:	4a10      	ldr	r2, [pc, #64]	; (800c348 <prvCheckForValidListAndQueue+0x64>)
 800c306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c308:	4b12      	ldr	r3, [pc, #72]	; (800c354 <prvCheckForValidListAndQueue+0x70>)
 800c30a:	4a10      	ldr	r2, [pc, #64]	; (800c34c <prvCheckForValidListAndQueue+0x68>)
 800c30c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c30e:	2300      	movs	r3, #0
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	4b11      	ldr	r3, [pc, #68]	; (800c358 <prvCheckForValidListAndQueue+0x74>)
 800c314:	4a11      	ldr	r2, [pc, #68]	; (800c35c <prvCheckForValidListAndQueue+0x78>)
 800c316:	2110      	movs	r1, #16
 800c318:	200a      	movs	r0, #10
 800c31a:	f7fd fd09 	bl	8009d30 <xQueueGenericCreateStatic>
 800c31e:	4603      	mov	r3, r0
 800c320:	4a08      	ldr	r2, [pc, #32]	; (800c344 <prvCheckForValidListAndQueue+0x60>)
 800c322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c324:	4b07      	ldr	r3, [pc, #28]	; (800c344 <prvCheckForValidListAndQueue+0x60>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d005      	beq.n	800c338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <prvCheckForValidListAndQueue+0x60>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	490b      	ldr	r1, [pc, #44]	; (800c360 <prvCheckForValidListAndQueue+0x7c>)
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe fc1a 	bl	800ab6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c338:	f000 f974 	bl	800c624 <vPortExitCritical>
}
 800c33c:	bf00      	nop
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20001010 	.word	0x20001010
 800c348:	20000fe0 	.word	0x20000fe0
 800c34c:	20000ff4 	.word	0x20000ff4
 800c350:	20001008 	.word	0x20001008
 800c354:	2000100c 	.word	0x2000100c
 800c358:	200010bc 	.word	0x200010bc
 800c35c:	2000101c 	.word	0x2000101c
 800c360:	0800ce8c 	.word	0x0800ce8c

0800c364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	3b04      	subs	r3, #4
 800c374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3b04      	subs	r3, #4
 800c382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f023 0201 	bic.w	r2, r3, #1
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3b04      	subs	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c394:	4a0c      	ldr	r2, [pc, #48]	; (800c3c8 <pxPortInitialiseStack+0x64>)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	3b14      	subs	r3, #20
 800c39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3b04      	subs	r3, #4
 800c3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f06f 0202 	mvn.w	r2, #2
 800c3b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3b20      	subs	r3, #32
 800c3b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	0800c3cd 	.word	0x0800c3cd

0800c3cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3d6:	4b12      	ldr	r3, [pc, #72]	; (800c420 <prvTaskExitError+0x54>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3de:	d00a      	beq.n	800c3f6 <prvTaskExitError+0x2a>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	60fb      	str	r3, [r7, #12]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <prvTaskExitError+0x28>
	__asm volatile
 800c3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	60bb      	str	r3, [r7, #8]
}
 800c408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c40a:	bf00      	nop
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d0fc      	beq.n	800c40c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c412:	bf00      	nop
 800c414:	bf00      	nop
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	2000000c 	.word	0x2000000c
	...

0800c430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c430:	4b07      	ldr	r3, [pc, #28]	; (800c450 <pxCurrentTCBConst2>)
 800c432:	6819      	ldr	r1, [r3, #0]
 800c434:	6808      	ldr	r0, [r1, #0]
 800c436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43a:	f380 8809 	msr	PSP, r0
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f04f 0000 	mov.w	r0, #0
 800c446:	f380 8811 	msr	BASEPRI, r0
 800c44a:	4770      	bx	lr
 800c44c:	f3af 8000 	nop.w

0800c450 <pxCurrentTCBConst2>:
 800c450:	20000ae0 	.word	0x20000ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop

0800c458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c458:	4808      	ldr	r0, [pc, #32]	; (800c47c <prvPortStartFirstTask+0x24>)
 800c45a:	6800      	ldr	r0, [r0, #0]
 800c45c:	6800      	ldr	r0, [r0, #0]
 800c45e:	f380 8808 	msr	MSP, r0
 800c462:	f04f 0000 	mov.w	r0, #0
 800c466:	f380 8814 	msr	CONTROL, r0
 800c46a:	b662      	cpsie	i
 800c46c:	b661      	cpsie	f
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	df00      	svc	0
 800c478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c47a:	bf00      	nop
 800c47c:	e000ed08 	.word	0xe000ed08

0800c480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c486:	4b46      	ldr	r3, [pc, #280]	; (800c5a0 <xPortStartScheduler+0x120>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a46      	ldr	r2, [pc, #280]	; (800c5a4 <xPortStartScheduler+0x124>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d10a      	bne.n	800c4a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	613b      	str	r3, [r7, #16]
}
 800c4a2:	bf00      	nop
 800c4a4:	e7fe      	b.n	800c4a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4a6:	4b3e      	ldr	r3, [pc, #248]	; (800c5a0 <xPortStartScheduler+0x120>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a3f      	ldr	r2, [pc, #252]	; (800c5a8 <xPortStartScheduler+0x128>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d10a      	bne.n	800c4c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	60fb      	str	r3, [r7, #12]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4c6:	4b39      	ldr	r3, [pc, #228]	; (800c5ac <xPortStartScheduler+0x12c>)
 800c4c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	22ff      	movs	r2, #255	; 0xff
 800c4d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	4b31      	ldr	r3, [pc, #196]	; (800c5b0 <xPortStartScheduler+0x130>)
 800c4ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4ee:	4b31      	ldr	r3, [pc, #196]	; (800c5b4 <xPortStartScheduler+0x134>)
 800c4f0:	2207      	movs	r2, #7
 800c4f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4f4:	e009      	b.n	800c50a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c4f6:	4b2f      	ldr	r3, [pc, #188]	; (800c5b4 <xPortStartScheduler+0x134>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	4a2d      	ldr	r2, [pc, #180]	; (800c5b4 <xPortStartScheduler+0x134>)
 800c4fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	b2db      	uxtb	r3, r3
 800c508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c50a:	78fb      	ldrb	r3, [r7, #3]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c512:	2b80      	cmp	r3, #128	; 0x80
 800c514:	d0ef      	beq.n	800c4f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c516:	4b27      	ldr	r3, [pc, #156]	; (800c5b4 <xPortStartScheduler+0x134>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f1c3 0307 	rsb	r3, r3, #7
 800c51e:	2b04      	cmp	r3, #4
 800c520:	d00a      	beq.n	800c538 <xPortStartScheduler+0xb8>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	60bb      	str	r3, [r7, #8]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c538:	4b1e      	ldr	r3, [pc, #120]	; (800c5b4 <xPortStartScheduler+0x134>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	021b      	lsls	r3, r3, #8
 800c53e:	4a1d      	ldr	r2, [pc, #116]	; (800c5b4 <xPortStartScheduler+0x134>)
 800c540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c542:	4b1c      	ldr	r3, [pc, #112]	; (800c5b4 <xPortStartScheduler+0x134>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c54a:	4a1a      	ldr	r2, [pc, #104]	; (800c5b4 <xPortStartScheduler+0x134>)
 800c54c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	b2da      	uxtb	r2, r3
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c556:	4b18      	ldr	r3, [pc, #96]	; (800c5b8 <xPortStartScheduler+0x138>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a17      	ldr	r2, [pc, #92]	; (800c5b8 <xPortStartScheduler+0x138>)
 800c55c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c562:	4b15      	ldr	r3, [pc, #84]	; (800c5b8 <xPortStartScheduler+0x138>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a14      	ldr	r2, [pc, #80]	; (800c5b8 <xPortStartScheduler+0x138>)
 800c568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c56c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c56e:	f000 f8dd 	bl	800c72c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c572:	4b12      	ldr	r3, [pc, #72]	; (800c5bc <xPortStartScheduler+0x13c>)
 800c574:	2200      	movs	r2, #0
 800c576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c578:	f000 f8fc 	bl	800c774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c57c:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <xPortStartScheduler+0x140>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a0f      	ldr	r2, [pc, #60]	; (800c5c0 <xPortStartScheduler+0x140>)
 800c582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c588:	f7ff ff66 	bl	800c458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c58c:	f7fe ff48 	bl	800b420 <vTaskSwitchContext>
	prvTaskExitError();
 800c590:	f7ff ff1c 	bl	800c3cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3718      	adds	r7, #24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	e000ed00 	.word	0xe000ed00
 800c5a4:	410fc271 	.word	0x410fc271
 800c5a8:	410fc270 	.word	0x410fc270
 800c5ac:	e000e400 	.word	0xe000e400
 800c5b0:	2000110c 	.word	0x2000110c
 800c5b4:	20001110 	.word	0x20001110
 800c5b8:	e000ed20 	.word	0xe000ed20
 800c5bc:	2000000c 	.word	0x2000000c
 800c5c0:	e000ef34 	.word	0xe000ef34

0800c5c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	607b      	str	r3, [r7, #4]
}
 800c5dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5de:	4b0f      	ldr	r3, [pc, #60]	; (800c61c <vPortEnterCritical+0x58>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	4a0d      	ldr	r2, [pc, #52]	; (800c61c <vPortEnterCritical+0x58>)
 800c5e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <vPortEnterCritical+0x58>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d10f      	bne.n	800c610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5f0:	4b0b      	ldr	r3, [pc, #44]	; (800c620 <vPortEnterCritical+0x5c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	603b      	str	r3, [r7, #0]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <vPortEnterCritical+0x4a>
	}
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	2000000c 	.word	0x2000000c
 800c620:	e000ed04 	.word	0xe000ed04

0800c624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c62a:	4b12      	ldr	r3, [pc, #72]	; (800c674 <vPortExitCritical+0x50>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10a      	bne.n	800c648 <vPortExitCritical+0x24>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	607b      	str	r3, [r7, #4]
}
 800c644:	bf00      	nop
 800c646:	e7fe      	b.n	800c646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c648:	4b0a      	ldr	r3, [pc, #40]	; (800c674 <vPortExitCritical+0x50>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3b01      	subs	r3, #1
 800c64e:	4a09      	ldr	r2, [pc, #36]	; (800c674 <vPortExitCritical+0x50>)
 800c650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c652:	4b08      	ldr	r3, [pc, #32]	; (800c674 <vPortExitCritical+0x50>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d105      	bne.n	800c666 <vPortExitCritical+0x42>
 800c65a:	2300      	movs	r3, #0
 800c65c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	f383 8811 	msr	BASEPRI, r3
}
 800c664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	2000000c 	.word	0x2000000c
	...

0800c680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c680:	f3ef 8009 	mrs	r0, PSP
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <pxCurrentTCBConst>)
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	f01e 0f10 	tst.w	lr, #16
 800c690:	bf08      	it	eq
 800c692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69a:	6010      	str	r0, [r2, #0]
 800c69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6a4:	f380 8811 	msr	BASEPRI, r0
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f7fe feb6 	bl	800b420 <vTaskSwitchContext>
 800c6b4:	f04f 0000 	mov.w	r0, #0
 800c6b8:	f380 8811 	msr	BASEPRI, r0
 800c6bc:	bc09      	pop	{r0, r3}
 800c6be:	6819      	ldr	r1, [r3, #0]
 800c6c0:	6808      	ldr	r0, [r1, #0]
 800c6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c6:	f01e 0f10 	tst.w	lr, #16
 800c6ca:	bf08      	it	eq
 800c6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6d0:	f380 8809 	msr	PSP, r0
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	f3af 8000 	nop.w

0800c6e0 <pxCurrentTCBConst>:
 800c6e0:	20000ae0 	.word	0x20000ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop

0800c6e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f2:	f383 8811 	msr	BASEPRI, r3
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	f3bf 8f4f 	dsb	sy
 800c6fe:	607b      	str	r3, [r7, #4]
}
 800c700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c702:	f7fe fdd3 	bl	800b2ac <xTaskIncrementTick>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d003      	beq.n	800c714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c70c:	4b06      	ldr	r3, [pc, #24]	; (800c728 <xPortSysTickHandler+0x40>)
 800c70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	2300      	movs	r3, #0
 800c716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	f383 8811 	msr	BASEPRI, r3
}
 800c71e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c720:	bf00      	nop
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	e000ed04 	.word	0xe000ed04

0800c72c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c72c:	b480      	push	{r7}
 800c72e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c730:	4b0b      	ldr	r3, [pc, #44]	; (800c760 <vPortSetupTimerInterrupt+0x34>)
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c736:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <vPortSetupTimerInterrupt+0x38>)
 800c738:	2200      	movs	r2, #0
 800c73a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c73c:	4b0a      	ldr	r3, [pc, #40]	; (800c768 <vPortSetupTimerInterrupt+0x3c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a0a      	ldr	r2, [pc, #40]	; (800c76c <vPortSetupTimerInterrupt+0x40>)
 800c742:	fba2 2303 	umull	r2, r3, r2, r3
 800c746:	099b      	lsrs	r3, r3, #6
 800c748:	4a09      	ldr	r2, [pc, #36]	; (800c770 <vPortSetupTimerInterrupt+0x44>)
 800c74a:	3b01      	subs	r3, #1
 800c74c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c74e:	4b04      	ldr	r3, [pc, #16]	; (800c760 <vPortSetupTimerInterrupt+0x34>)
 800c750:	2207      	movs	r2, #7
 800c752:	601a      	str	r2, [r3, #0]
}
 800c754:	bf00      	nop
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	e000e010 	.word	0xe000e010
 800c764:	e000e018 	.word	0xe000e018
 800c768:	20000000 	.word	0x20000000
 800c76c:	10624dd3 	.word	0x10624dd3
 800c770:	e000e014 	.word	0xe000e014

0800c774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c784 <vPortEnableVFP+0x10>
 800c778:	6801      	ldr	r1, [r0, #0]
 800c77a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c77e:	6001      	str	r1, [r0, #0]
 800c780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c782:	bf00      	nop
 800c784:	e000ed88 	.word	0xe000ed88

0800c788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c78e:	f3ef 8305 	mrs	r3, IPSR
 800c792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b0f      	cmp	r3, #15
 800c798:	d914      	bls.n	800c7c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c79a:	4a17      	ldr	r2, [pc, #92]	; (800c7f8 <vPortValidateInterruptPriority+0x70>)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4413      	add	r3, r2
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7a4:	4b15      	ldr	r3, [pc, #84]	; (800c7fc <vPortValidateInterruptPriority+0x74>)
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	7afa      	ldrb	r2, [r7, #11]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d20a      	bcs.n	800c7c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	607b      	str	r3, [r7, #4]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7c4:	4b0e      	ldr	r3, [pc, #56]	; (800c800 <vPortValidateInterruptPriority+0x78>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7cc:	4b0d      	ldr	r3, [pc, #52]	; (800c804 <vPortValidateInterruptPriority+0x7c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d90a      	bls.n	800c7ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	603b      	str	r3, [r7, #0]
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <vPortValidateInterruptPriority+0x60>
	}
 800c7ea:	bf00      	nop
 800c7ec:	3714      	adds	r7, #20
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	e000e3f0 	.word	0xe000e3f0
 800c7fc:	2000110c 	.word	0x2000110c
 800c800:	e000ed0c 	.word	0xe000ed0c
 800c804:	20001110 	.word	0x20001110

0800c808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08a      	sub	sp, #40	; 0x28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c810:	2300      	movs	r3, #0
 800c812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c814:	f7fe fc8e 	bl	800b134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c818:	4b5b      	ldr	r3, [pc, #364]	; (800c988 <pvPortMalloc+0x180>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c820:	f000 f920 	bl	800ca64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c824:	4b59      	ldr	r3, [pc, #356]	; (800c98c <pvPortMalloc+0x184>)
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4013      	ands	r3, r2
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f040 8093 	bne.w	800c958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d01d      	beq.n	800c874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c838:	2208      	movs	r2, #8
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4413      	add	r3, r2
 800c83e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f003 0307 	and.w	r3, r3, #7
 800c846:	2b00      	cmp	r3, #0
 800c848:	d014      	beq.n	800c874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f023 0307 	bic.w	r3, r3, #7
 800c850:	3308      	adds	r3, #8
 800c852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f003 0307 	and.w	r3, r3, #7
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00a      	beq.n	800c874 <pvPortMalloc+0x6c>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	617b      	str	r3, [r7, #20]
}
 800c870:	bf00      	nop
 800c872:	e7fe      	b.n	800c872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d06e      	beq.n	800c958 <pvPortMalloc+0x150>
 800c87a:	4b45      	ldr	r3, [pc, #276]	; (800c990 <pvPortMalloc+0x188>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	429a      	cmp	r2, r3
 800c882:	d869      	bhi.n	800c958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c884:	4b43      	ldr	r3, [pc, #268]	; (800c994 <pvPortMalloc+0x18c>)
 800c886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c888:	4b42      	ldr	r3, [pc, #264]	; (800c994 <pvPortMalloc+0x18c>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c88e:	e004      	b.n	800c89a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d903      	bls.n	800c8ac <pvPortMalloc+0xa4>
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1f1      	bne.n	800c890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8ac:	4b36      	ldr	r3, [pc, #216]	; (800c988 <pvPortMalloc+0x180>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d050      	beq.n	800c958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2208      	movs	r2, #8
 800c8bc:	4413      	add	r3, r2
 800c8be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
 800c8c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ca:	685a      	ldr	r2, [r3, #4]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	1ad2      	subs	r2, r2, r3
 800c8d0:	2308      	movs	r3, #8
 800c8d2:	005b      	lsls	r3, r3, #1
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d91f      	bls.n	800c918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4413      	add	r3, r2
 800c8de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	f003 0307 	and.w	r3, r3, #7
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00a      	beq.n	800c900 <pvPortMalloc+0xf8>
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	613b      	str	r3, [r7, #16]
}
 800c8fc:	bf00      	nop
 800c8fe:	e7fe      	b.n	800c8fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	1ad2      	subs	r2, r2, r3
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c912:	69b8      	ldr	r0, [r7, #24]
 800c914:	f000 f908 	bl	800cb28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c918:	4b1d      	ldr	r3, [pc, #116]	; (800c990 <pvPortMalloc+0x188>)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	4a1b      	ldr	r2, [pc, #108]	; (800c990 <pvPortMalloc+0x188>)
 800c924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c926:	4b1a      	ldr	r3, [pc, #104]	; (800c990 <pvPortMalloc+0x188>)
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	4b1b      	ldr	r3, [pc, #108]	; (800c998 <pvPortMalloc+0x190>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d203      	bcs.n	800c93a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c932:	4b17      	ldr	r3, [pc, #92]	; (800c990 <pvPortMalloc+0x188>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a18      	ldr	r2, [pc, #96]	; (800c998 <pvPortMalloc+0x190>)
 800c938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	685a      	ldr	r2, [r3, #4]
 800c93e:	4b13      	ldr	r3, [pc, #76]	; (800c98c <pvPortMalloc+0x184>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	431a      	orrs	r2, r3
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	2200      	movs	r2, #0
 800c94c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c94e:	4b13      	ldr	r3, [pc, #76]	; (800c99c <pvPortMalloc+0x194>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	4a11      	ldr	r2, [pc, #68]	; (800c99c <pvPortMalloc+0x194>)
 800c956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c958:	f7fe fbfa 	bl	800b150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	f003 0307 	and.w	r3, r3, #7
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00a      	beq.n	800c97c <pvPortMalloc+0x174>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	60fb      	str	r3, [r7, #12]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <pvPortMalloc+0x172>
	return pvReturn;
 800c97c:	69fb      	ldr	r3, [r7, #28]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3728      	adds	r7, #40	; 0x28
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	20002a48 	.word	0x20002a48
 800c98c:	20002a5c 	.word	0x20002a5c
 800c990:	20002a4c 	.word	0x20002a4c
 800c994:	20002a40 	.word	0x20002a40
 800c998:	20002a50 	.word	0x20002a50
 800c99c:	20002a54 	.word	0x20002a54

0800c9a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d04d      	beq.n	800ca4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9b2:	2308      	movs	r3, #8
 800c9b4:	425b      	negs	r3, r3
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	685a      	ldr	r2, [r3, #4]
 800c9c4:	4b24      	ldr	r3, [pc, #144]	; (800ca58 <vPortFree+0xb8>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10a      	bne.n	800c9e4 <vPortFree+0x44>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	60fb      	str	r3, [r7, #12]
}
 800c9e0:	bf00      	nop
 800c9e2:	e7fe      	b.n	800c9e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00a      	beq.n	800ca02 <vPortFree+0x62>
	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	60bb      	str	r3, [r7, #8]
}
 800c9fe:	bf00      	nop
 800ca00:	e7fe      	b.n	800ca00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	4b14      	ldr	r3, [pc, #80]	; (800ca58 <vPortFree+0xb8>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01e      	beq.n	800ca4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d11a      	bne.n	800ca4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	4b0e      	ldr	r3, [pc, #56]	; (800ca58 <vPortFree+0xb8>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	43db      	mvns	r3, r3
 800ca22:	401a      	ands	r2, r3
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca28:	f7fe fb84 	bl	800b134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	4b0a      	ldr	r3, [pc, #40]	; (800ca5c <vPortFree+0xbc>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4413      	add	r3, r2
 800ca36:	4a09      	ldr	r2, [pc, #36]	; (800ca5c <vPortFree+0xbc>)
 800ca38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca3a:	6938      	ldr	r0, [r7, #16]
 800ca3c:	f000 f874 	bl	800cb28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca40:	4b07      	ldr	r3, [pc, #28]	; (800ca60 <vPortFree+0xc0>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3301      	adds	r3, #1
 800ca46:	4a06      	ldr	r2, [pc, #24]	; (800ca60 <vPortFree+0xc0>)
 800ca48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca4a:	f7fe fb81 	bl	800b150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca4e:	bf00      	nop
 800ca50:	3718      	adds	r7, #24
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	20002a5c 	.word	0x20002a5c
 800ca5c:	20002a4c 	.word	0x20002a4c
 800ca60:	20002a58 	.word	0x20002a58

0800ca64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca6a:	f641 132c 	movw	r3, #6444	; 0x192c
 800ca6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca70:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <prvHeapInit+0xac>)
 800ca72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f003 0307 	and.w	r3, r3, #7
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00c      	beq.n	800ca98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3307      	adds	r3, #7
 800ca82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f023 0307 	bic.w	r3, r3, #7
 800ca8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	4a1f      	ldr	r2, [pc, #124]	; (800cb10 <prvHeapInit+0xac>)
 800ca94:	4413      	add	r3, r2
 800ca96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca9c:	4a1d      	ldr	r2, [pc, #116]	; (800cb14 <prvHeapInit+0xb0>)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800caa2:	4b1c      	ldr	r3, [pc, #112]	; (800cb14 <prvHeapInit+0xb0>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	4413      	add	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cab0:	2208      	movs	r2, #8
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	1a9b      	subs	r3, r3, r2
 800cab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f023 0307 	bic.w	r3, r3, #7
 800cabe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4a15      	ldr	r2, [pc, #84]	; (800cb18 <prvHeapInit+0xb4>)
 800cac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cac6:	4b14      	ldr	r3, [pc, #80]	; (800cb18 <prvHeapInit+0xb4>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2200      	movs	r2, #0
 800cacc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cace:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <prvHeapInit+0xb4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	1ad2      	subs	r2, r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cae4:	4b0c      	ldr	r3, [pc, #48]	; (800cb18 <prvHeapInit+0xb4>)
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	4a0a      	ldr	r2, [pc, #40]	; (800cb1c <prvHeapInit+0xb8>)
 800caf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	4a09      	ldr	r2, [pc, #36]	; (800cb20 <prvHeapInit+0xbc>)
 800cafa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cafc:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <prvHeapInit+0xc0>)
 800cafe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb02:	601a      	str	r2, [r3, #0]
}
 800cb04:	bf00      	nop
 800cb06:	3714      	adds	r7, #20
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	20001114 	.word	0x20001114
 800cb14:	20002a40 	.word	0x20002a40
 800cb18:	20002a48 	.word	0x20002a48
 800cb1c:	20002a50 	.word	0x20002a50
 800cb20:	20002a4c 	.word	0x20002a4c
 800cb24:	20002a5c 	.word	0x20002a5c

0800cb28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb30:	4b28      	ldr	r3, [pc, #160]	; (800cbd4 <prvInsertBlockIntoFreeList+0xac>)
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	e002      	b.n	800cb3c <prvInsertBlockIntoFreeList+0x14>
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d8f7      	bhi.n	800cb36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	4413      	add	r3, r2
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d108      	bne.n	800cb6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	685a      	ldr	r2, [r3, #4]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	441a      	add	r2, r3
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	441a      	add	r2, r3
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d118      	bne.n	800cbb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d00d      	beq.n	800cba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685a      	ldr	r2, [r3, #4]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	441a      	add	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	e008      	b.n	800cbb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cba6:	4b0c      	ldr	r3, [pc, #48]	; (800cbd8 <prvInsertBlockIntoFreeList+0xb0>)
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	e003      	b.n	800cbb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d002      	beq.n	800cbc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbc6:	bf00      	nop
 800cbc8:	3714      	adds	r7, #20
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20002a40 	.word	0x20002a40
 800cbd8:	20002a48 	.word	0x20002a48

0800cbdc <memset>:
 800cbdc:	4402      	add	r2, r0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d100      	bne.n	800cbe6 <memset+0xa>
 800cbe4:	4770      	bx	lr
 800cbe6:	f803 1b01 	strb.w	r1, [r3], #1
 800cbea:	e7f9      	b.n	800cbe0 <memset+0x4>

0800cbec <_reclaim_reent>:
 800cbec:	4b29      	ldr	r3, [pc, #164]	; (800cc94 <_reclaim_reent+0xa8>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4283      	cmp	r3, r0
 800cbf2:	b570      	push	{r4, r5, r6, lr}
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	d04b      	beq.n	800cc90 <_reclaim_reent+0xa4>
 800cbf8:	69c3      	ldr	r3, [r0, #28]
 800cbfa:	b143      	cbz	r3, 800cc0e <_reclaim_reent+0x22>
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d144      	bne.n	800cc8c <_reclaim_reent+0xa0>
 800cc02:	69e3      	ldr	r3, [r4, #28]
 800cc04:	6819      	ldr	r1, [r3, #0]
 800cc06:	b111      	cbz	r1, 800cc0e <_reclaim_reent+0x22>
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 f879 	bl	800cd00 <_free_r>
 800cc0e:	6961      	ldr	r1, [r4, #20]
 800cc10:	b111      	cbz	r1, 800cc18 <_reclaim_reent+0x2c>
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 f874 	bl	800cd00 <_free_r>
 800cc18:	69e1      	ldr	r1, [r4, #28]
 800cc1a:	b111      	cbz	r1, 800cc22 <_reclaim_reent+0x36>
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 f86f 	bl	800cd00 <_free_r>
 800cc22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cc24:	b111      	cbz	r1, 800cc2c <_reclaim_reent+0x40>
 800cc26:	4620      	mov	r0, r4
 800cc28:	f000 f86a 	bl	800cd00 <_free_r>
 800cc2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc2e:	b111      	cbz	r1, 800cc36 <_reclaim_reent+0x4a>
 800cc30:	4620      	mov	r0, r4
 800cc32:	f000 f865 	bl	800cd00 <_free_r>
 800cc36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cc38:	b111      	cbz	r1, 800cc40 <_reclaim_reent+0x54>
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 f860 	bl	800cd00 <_free_r>
 800cc40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cc42:	b111      	cbz	r1, 800cc4a <_reclaim_reent+0x5e>
 800cc44:	4620      	mov	r0, r4
 800cc46:	f000 f85b 	bl	800cd00 <_free_r>
 800cc4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cc4c:	b111      	cbz	r1, 800cc54 <_reclaim_reent+0x68>
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f000 f856 	bl	800cd00 <_free_r>
 800cc54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cc56:	b111      	cbz	r1, 800cc5e <_reclaim_reent+0x72>
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f000 f851 	bl	800cd00 <_free_r>
 800cc5e:	6a23      	ldr	r3, [r4, #32]
 800cc60:	b1b3      	cbz	r3, 800cc90 <_reclaim_reent+0xa4>
 800cc62:	4620      	mov	r0, r4
 800cc64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc68:	4718      	bx	r3
 800cc6a:	5949      	ldr	r1, [r1, r5]
 800cc6c:	b941      	cbnz	r1, 800cc80 <_reclaim_reent+0x94>
 800cc6e:	3504      	adds	r5, #4
 800cc70:	69e3      	ldr	r3, [r4, #28]
 800cc72:	2d80      	cmp	r5, #128	; 0x80
 800cc74:	68d9      	ldr	r1, [r3, #12]
 800cc76:	d1f8      	bne.n	800cc6a <_reclaim_reent+0x7e>
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 f841 	bl	800cd00 <_free_r>
 800cc7e:	e7c0      	b.n	800cc02 <_reclaim_reent+0x16>
 800cc80:	680e      	ldr	r6, [r1, #0]
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 f83c 	bl	800cd00 <_free_r>
 800cc88:	4631      	mov	r1, r6
 800cc8a:	e7ef      	b.n	800cc6c <_reclaim_reent+0x80>
 800cc8c:	2500      	movs	r5, #0
 800cc8e:	e7ef      	b.n	800cc70 <_reclaim_reent+0x84>
 800cc90:	bd70      	pop	{r4, r5, r6, pc}
 800cc92:	bf00      	nop
 800cc94:	2000005c 	.word	0x2000005c

0800cc98 <__libc_init_array>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	4d0d      	ldr	r5, [pc, #52]	; (800ccd0 <__libc_init_array+0x38>)
 800cc9c:	4c0d      	ldr	r4, [pc, #52]	; (800ccd4 <__libc_init_array+0x3c>)
 800cc9e:	1b64      	subs	r4, r4, r5
 800cca0:	10a4      	asrs	r4, r4, #2
 800cca2:	2600      	movs	r6, #0
 800cca4:	42a6      	cmp	r6, r4
 800cca6:	d109      	bne.n	800ccbc <__libc_init_array+0x24>
 800cca8:	4d0b      	ldr	r5, [pc, #44]	; (800ccd8 <__libc_init_array+0x40>)
 800ccaa:	4c0c      	ldr	r4, [pc, #48]	; (800ccdc <__libc_init_array+0x44>)
 800ccac:	f000 f880 	bl	800cdb0 <_init>
 800ccb0:	1b64      	subs	r4, r4, r5
 800ccb2:	10a4      	asrs	r4, r4, #2
 800ccb4:	2600      	movs	r6, #0
 800ccb6:	42a6      	cmp	r6, r4
 800ccb8:	d105      	bne.n	800ccc6 <__libc_init_array+0x2e>
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc0:	4798      	blx	r3
 800ccc2:	3601      	adds	r6, #1
 800ccc4:	e7ee      	b.n	800cca4 <__libc_init_array+0xc>
 800ccc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccca:	4798      	blx	r3
 800cccc:	3601      	adds	r6, #1
 800ccce:	e7f2      	b.n	800ccb6 <__libc_init_array+0x1e>
 800ccd0:	0800d058 	.word	0x0800d058
 800ccd4:	0800d058 	.word	0x0800d058
 800ccd8:	0800d058 	.word	0x0800d058
 800ccdc:	0800d05c 	.word	0x0800d05c

0800cce0 <__retarget_lock_acquire_recursive>:
 800cce0:	4770      	bx	lr

0800cce2 <__retarget_lock_release_recursive>:
 800cce2:	4770      	bx	lr

0800cce4 <memcpy>:
 800cce4:	440a      	add	r2, r1
 800cce6:	4291      	cmp	r1, r2
 800cce8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccec:	d100      	bne.n	800ccf0 <memcpy+0xc>
 800ccee:	4770      	bx	lr
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccfa:	4291      	cmp	r1, r2
 800ccfc:	d1f9      	bne.n	800ccf2 <memcpy+0xe>
 800ccfe:	bd10      	pop	{r4, pc}

0800cd00 <_free_r>:
 800cd00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd02:	2900      	cmp	r1, #0
 800cd04:	d044      	beq.n	800cd90 <_free_r+0x90>
 800cd06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd0a:	9001      	str	r0, [sp, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f1a1 0404 	sub.w	r4, r1, #4
 800cd12:	bfb8      	it	lt
 800cd14:	18e4      	addlt	r4, r4, r3
 800cd16:	f000 f83f 	bl	800cd98 <__malloc_lock>
 800cd1a:	4a1e      	ldr	r2, [pc, #120]	; (800cd94 <_free_r+0x94>)
 800cd1c:	9801      	ldr	r0, [sp, #4]
 800cd1e:	6813      	ldr	r3, [r2, #0]
 800cd20:	b933      	cbnz	r3, 800cd30 <_free_r+0x30>
 800cd22:	6063      	str	r3, [r4, #4]
 800cd24:	6014      	str	r4, [r2, #0]
 800cd26:	b003      	add	sp, #12
 800cd28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd2c:	f000 b83a 	b.w	800cda4 <__malloc_unlock>
 800cd30:	42a3      	cmp	r3, r4
 800cd32:	d908      	bls.n	800cd46 <_free_r+0x46>
 800cd34:	6825      	ldr	r5, [r4, #0]
 800cd36:	1961      	adds	r1, r4, r5
 800cd38:	428b      	cmp	r3, r1
 800cd3a:	bf01      	itttt	eq
 800cd3c:	6819      	ldreq	r1, [r3, #0]
 800cd3e:	685b      	ldreq	r3, [r3, #4]
 800cd40:	1949      	addeq	r1, r1, r5
 800cd42:	6021      	streq	r1, [r4, #0]
 800cd44:	e7ed      	b.n	800cd22 <_free_r+0x22>
 800cd46:	461a      	mov	r2, r3
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	b10b      	cbz	r3, 800cd50 <_free_r+0x50>
 800cd4c:	42a3      	cmp	r3, r4
 800cd4e:	d9fa      	bls.n	800cd46 <_free_r+0x46>
 800cd50:	6811      	ldr	r1, [r2, #0]
 800cd52:	1855      	adds	r5, r2, r1
 800cd54:	42a5      	cmp	r5, r4
 800cd56:	d10b      	bne.n	800cd70 <_free_r+0x70>
 800cd58:	6824      	ldr	r4, [r4, #0]
 800cd5a:	4421      	add	r1, r4
 800cd5c:	1854      	adds	r4, r2, r1
 800cd5e:	42a3      	cmp	r3, r4
 800cd60:	6011      	str	r1, [r2, #0]
 800cd62:	d1e0      	bne.n	800cd26 <_free_r+0x26>
 800cd64:	681c      	ldr	r4, [r3, #0]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	6053      	str	r3, [r2, #4]
 800cd6a:	440c      	add	r4, r1
 800cd6c:	6014      	str	r4, [r2, #0]
 800cd6e:	e7da      	b.n	800cd26 <_free_r+0x26>
 800cd70:	d902      	bls.n	800cd78 <_free_r+0x78>
 800cd72:	230c      	movs	r3, #12
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	e7d6      	b.n	800cd26 <_free_r+0x26>
 800cd78:	6825      	ldr	r5, [r4, #0]
 800cd7a:	1961      	adds	r1, r4, r5
 800cd7c:	428b      	cmp	r3, r1
 800cd7e:	bf04      	itt	eq
 800cd80:	6819      	ldreq	r1, [r3, #0]
 800cd82:	685b      	ldreq	r3, [r3, #4]
 800cd84:	6063      	str	r3, [r4, #4]
 800cd86:	bf04      	itt	eq
 800cd88:	1949      	addeq	r1, r1, r5
 800cd8a:	6021      	streq	r1, [r4, #0]
 800cd8c:	6054      	str	r4, [r2, #4]
 800cd8e:	e7ca      	b.n	800cd26 <_free_r+0x26>
 800cd90:	b003      	add	sp, #12
 800cd92:	bd30      	pop	{r4, r5, pc}
 800cd94:	20002b9c 	.word	0x20002b9c

0800cd98 <__malloc_lock>:
 800cd98:	4801      	ldr	r0, [pc, #4]	; (800cda0 <__malloc_lock+0x8>)
 800cd9a:	f7ff bfa1 	b.w	800cce0 <__retarget_lock_acquire_recursive>
 800cd9e:	bf00      	nop
 800cda0:	20002b98 	.word	0x20002b98

0800cda4 <__malloc_unlock>:
 800cda4:	4801      	ldr	r0, [pc, #4]	; (800cdac <__malloc_unlock+0x8>)
 800cda6:	f7ff bf9c 	b.w	800cce2 <__retarget_lock_release_recursive>
 800cdaa:	bf00      	nop
 800cdac:	20002b98 	.word	0x20002b98

0800cdb0 <_init>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	bf00      	nop
 800cdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb6:	bc08      	pop	{r3}
 800cdb8:	469e      	mov	lr, r3
 800cdba:	4770      	bx	lr

0800cdbc <_fini>:
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbe:	bf00      	nop
 800cdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc2:	bc08      	pop	{r3}
 800cdc4:	469e      	mov	lr, r3
 800cdc6:	4770      	bx	lr
