
plants_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b698  0800b698  0001b698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e8  0800b8e8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8f0  0800b8f0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8f0  0800b8f0  0001b8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8f4  0800b8f4  0001b8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a78  20000060  0800b958  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad8  0800b958  00022ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002471b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004814  00000000  00000000  000447ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d40  00000000  00000000  00049008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a3  00000000  00000000  0004ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c7a  00000000  00000000  0004c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000224f8  00000000  00000000  00070065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee077  00000000  00000000  0009255d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008230  00000000  00000000  001805d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00188804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b680 	.word	0x0800b680

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800b680 	.word	0x0800b680

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00a fb1b 	bl	800b4ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ee2:	f002 fc53 	bl	800378c <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000eec:	f000 fac8 	bl	8001480 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000efc:	f004 f882 	bl	8005004 <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f06:	f000 fabb 	bl	8001480 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_ADC1_Init+0xec>)
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0e:	2306      	movs	r3, #6
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000f28:	f003 fa36 	bl	8004398 <HAL_ADC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f32:	f000 faa5 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000007c 	.word	0x2000007c
 8000f44:	04300002 	.word	0x04300002

08000f48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09e      	sub	sp, #120	; 0x78
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2250      	movs	r2, #80	; 0x50
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00a fa9f 	bl	800b4ac <memset>
  if(adcHandle->Instance==ADC1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f76:	d13c      	bne.n	8000ff2 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f82:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 f9ef 	bl	800636c <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f000 fa74 	bl	8001480 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ANALOG_IN_Pin;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f004 f9d9 	bl	8005394 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2012      	movs	r0, #18
 8000fe8:	f004 f9ac 	bl	8005344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fec:	2012      	movs	r0, #18
 8000fee:	f004 f9c3 	bl	8005378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3778      	adds	r7, #120	; 0x78
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <readADCData>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
uint32_t readADCData(ADC_HandleTypeDef _adcHandle)
{
 8001000:	b084      	sub	sp, #16
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	f107 0c10 	add.w	ip, r7, #16
 800100c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t analogReadValue;

	HAL_ADC_Start(&_adcHandle);
 8001010:	f107 0010 	add.w	r0, r7, #16
 8001014:	f002 fd68 	bl	8003ae8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&_adcHandle, 1000);
 8001018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101c:	f107 0010 	add.w	r0, r7, #16
 8001020:	f002 fe60 	bl	8003ce4 <HAL_ADC_PollForConversion>

	analogReadValue = (uint32_t) HAL_ADC_GetValue(&_adcHandle);
 8001024:	f107 0010 	add.w	r0, r7, #16
 8001028:	f002 ff50 	bl	8003ecc <HAL_ADC_GetValue>
 800102c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&_adcHandle);
 800102e:	f107 0010 	add.w	r0, r7, #16
 8001032:	f002 fe23 	bl	8003c7c <HAL_ADC_Stop>

	return analogReadValue;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001042:	b004      	add	sp, #16
 8001044:	4770      	bx	lr
	...

08001048 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UART_Semaphore */
  UART_SemaphoreHandle = osSemaphoreNew(1, 0, &UART_Semaphore_attributes);
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <MX_FREERTOS_Init+0x98>)
 800104e:	2100      	movs	r1, #0
 8001050:	2001      	movs	r0, #1
 8001052:	f006 ff38 	bl	8007ec6 <osSemaphoreNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <MX_FREERTOS_Init+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Semaphore */
  ADC_SemaphoreHandle = osSemaphoreNew(1, 0, &ADC_Semaphore_attributes);
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <MX_FREERTOS_Init+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	2001      	movs	r0, #1
 8001062:	f006 ff30 	bl	8007ec6 <osSemaphoreNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <MX_FREERTOS_Init+0xa4>)
 800106a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueToUART */
  queueToUARTHandle = osMessageQueueNew (16, sizeof(SensorData), &queueToUART_attributes);
 800106c:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <MX_FREERTOS_Init+0xa8>)
 800106e:	2108      	movs	r1, #8
 8001070:	2010      	movs	r0, #16
 8001072:	f007 f847 	bl	8008104 <osMessageQueueNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <MX_FREERTOS_Init+0xac>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of queueToPump */
  queueToPumpHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueToPump_attributes);
 800107c:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <MX_FREERTOS_Init+0xb0>)
 800107e:	2102      	movs	r1, #2
 8001080:	2010      	movs	r0, #16
 8001082:	f007 f83f 	bl	8008104 <osMessageQueueNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_FREERTOS_Init+0xb4>)
 800108a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensAnalog01 */
  sensAnalog01Handle = osThreadNew(sensAnalog01Task, NULL, &sensAnalog01_attributes);
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_FREERTOS_Init+0xb8>)
 800108e:	2100      	movs	r1, #0
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <MX_FREERTOS_Init+0xbc>)
 8001092:	f006 fe6b 	bl	8007d6c <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <MX_FREERTOS_Init+0xc0>)
 800109a:	6013      	str	r3, [r2, #0]

  /* creation of sensUART */
  sensUARTHandle = osThreadNew(sensUARTTask, NULL, &sensUART_attributes);
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_FREERTOS_Init+0xc4>)
 800109e:	2100      	movs	r1, #0
 80010a0:	481b      	ldr	r0, [pc, #108]	; (8001110 <MX_FREERTOS_Init+0xc8>)
 80010a2:	f006 fe63 	bl	8007d6c <osThreadNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <MX_FREERTOS_Init+0xcc>)
 80010aa:	6013      	str	r3, [r2, #0]

  /* creation of sensI2C */
  sensI2CHandle = osThreadNew(sensI2CTask, NULL, &sensI2C_attributes);
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <MX_FREERTOS_Init+0xd0>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	481a      	ldr	r0, [pc, #104]	; (800111c <MX_FREERTOS_Init+0xd4>)
 80010b2:	f006 fe5b 	bl	8007d6c <osThreadNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <MX_FREERTOS_Init+0xd8>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* creation of sensAnalog02 */
  sensAnalog02Handle = osThreadNew(sensAnalog02Task, NULL, &sensAnalog02_attributes);
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <MX_FREERTOS_Init+0xdc>)
 80010be:	2100      	movs	r1, #0
 80010c0:	4819      	ldr	r0, [pc, #100]	; (8001128 <MX_FREERTOS_Init+0xe0>)
 80010c2:	f006 fe53 	bl	8007d6c <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <MX_FREERTOS_Init+0xe4>)
 80010ca:	6013      	str	r3, [r2, #0]

  /* creation of pumpTask */
  pumpTaskHandle = osThreadNew(StartPumpTask, NULL, &pumpTask_attributes);
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_FREERTOS_Init+0xe8>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4818      	ldr	r0, [pc, #96]	; (8001134 <MX_FREERTOS_Init+0xec>)
 80010d2:	f006 fe4b 	bl	8007d6c <osThreadNew>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_FREERTOS_Init+0xf0>)
 80010da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	0800b838 	.word	0x0800b838
 80010e4:	20000104 	.word	0x20000104
 80010e8:	0800b848 	.word	0x0800b848
 80010ec:	20000108 	.word	0x20000108
 80010f0:	0800b808 	.word	0x0800b808
 80010f4:	200000fc 	.word	0x200000fc
 80010f8:	0800b820 	.word	0x0800b820
 80010fc:	20000100 	.word	0x20000100
 8001100:	0800b754 	.word	0x0800b754
 8001104:	0800113d 	.word	0x0800113d
 8001108:	200000e8 	.word	0x200000e8
 800110c:	0800b778 	.word	0x0800b778
 8001110:	080011b5 	.word	0x080011b5
 8001114:	200000ec 	.word	0x200000ec
 8001118:	0800b79c 	.word	0x0800b79c
 800111c:	080011ed 	.word	0x080011ed
 8001120:	200000f0 	.word	0x200000f0
 8001124:	0800b7c0 	.word	0x0800b7c0
 8001128:	080011fd 	.word	0x080011fd
 800112c:	200000f4 	.word	0x200000f4
 8001130:	0800b7e4 	.word	0x0800b7e4
 8001134:	08001269 	.word	0x08001269
 8001138:	200000f8 	.word	0x200000f8

0800113c <sensAnalog01Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sensAnalog01Task */
void sensAnalog01Task(void *argument)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b09d      	sub	sp, #116	; 0x74
 8001140:	af18      	add	r7, sp, #96	; 0x60
 8001142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog01Task */
	SensorData analog1task =
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <sensAnalog01Task+0x68>)
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}
	};

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, osWaitForever);
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <sensAnalog01Task+0x6c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f04f 31ff 	mov.w	r1, #4294967295
 800115a:	4618      	mov	r0, r3
 800115c:	f006 ff3c 	bl	8007fd8 <osSemaphoreAcquire>
	  analog1task.data = readADCData(hadc1);
 8001160:	4c12      	ldr	r4, [pc, #72]	; (80011ac <sensAnalog01Task+0x70>)
 8001162:	4668      	mov	r0, sp
 8001164:	f104 0310 	add.w	r3, r4, #16
 8001168:	225c      	movs	r2, #92	; 0x5c
 800116a:	4619      	mov	r1, r3
 800116c:	f00a fa22 	bl	800b5b4 <memcpy>
 8001170:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001174:	f7ff ff44 	bl	8001000 <readADCData>
 8001178:	4603      	mov	r3, r0
 800117a:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <sensAnalog01Task+0x6c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f006 ff7b 	bl	800807c <osSemaphoreRelease>
	  if(osOK==osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog1task, 0, osWaitForever))
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <sensAnalog01Task+0x74>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	f107 0108 	add.w	r1, r7, #8
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	2200      	movs	r2, #0
 8001194:	f007 f82a 	bl	80081ec <osMessageQueuePut>
	  {
		  //printf("Sending %d from %d \n \r", analog1task.data, analog1task.id);
	  }

    osDelay(1000);
 8001198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119c:	f006 fe78 	bl	8007e90 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, osWaitForever);
 80011a0:	e7d7      	b.n	8001152 <sensAnalog01Task+0x16>
 80011a2:	bf00      	nop
 80011a4:	0800b710 	.word	0x0800b710
 80011a8:	20000108 	.word	0x20000108
 80011ac:	2000007c 	.word	0x2000007c
 80011b0:	200000fc 	.word	0x200000fc

080011b4 <sensUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensUARTTask */
void sensUARTTask(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensUARTTask */
	SensorData receivedData;
  /* Infinite loop */
  for(;;)
  {
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <sensUARTTask+0x30>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f107 0108 	add.w	r1, r7, #8
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2200      	movs	r2, #0
 80011ca:	f007 f86f 	bl	80082ac <osMessageQueueGet>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f3      	bne.n	80011bc <sensUARTTask+0x8>
	{
		printf("%d : %d \n \r", receivedData.id, receivedData.data);
 80011d4:	7a3b      	ldrb	r3, [r7, #8]
 80011d6:	4619      	mov	r1, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	461a      	mov	r2, r3
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <sensUARTTask+0x34>)
 80011de:	f001 fda5 	bl	8002d2c <printf_>
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 80011e2:	e7eb      	b.n	80011bc <sensUARTTask+0x8>
 80011e4:	200000fc 	.word	0x200000fc
 80011e8:	0800b718 	.word	0x0800b718

080011ec <sensI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensI2CTask */
void sensI2CTask(void *argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensI2CTask */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f006 fe4b 	bl	8007e90 <osDelay>
 80011fa:	e7fb      	b.n	80011f4 <sensI2CTask+0x8>

080011fc <sensAnalog02Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensAnalog02Task */
void sensAnalog02Task(void *argument)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b09d      	sub	sp, #116	; 0x74
 8001200:	af18      	add	r7, sp, #96	; 0x60
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog02Task */
	SensorData analog2task =
 8001204:	2306      	movs	r3, #6
 8001206:	723b      	strb	r3, [r7, #8]
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
	};

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, osWaitForever);
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <sensAnalog02Task+0x60>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	4618      	mov	r0, r3
 8001216:	f006 fedf 	bl	8007fd8 <osSemaphoreAcquire>
	  analog2task.data = readADCData(hadc1);
 800121a:	4c11      	ldr	r4, [pc, #68]	; (8001260 <sensAnalog02Task+0x64>)
 800121c:	4668      	mov	r0, sp
 800121e:	f104 0310 	add.w	r3, r4, #16
 8001222:	225c      	movs	r2, #92	; 0x5c
 8001224:	4619      	mov	r1, r3
 8001226:	f00a f9c5 	bl	800b5b4 <memcpy>
 800122a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800122e:	f7ff fee7 	bl	8001000 <readADCData>
 8001232:	4603      	mov	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <sensAnalog02Task+0x60>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f006 ff1e 	bl	800807c <osSemaphoreRelease>
	  if(osOK==osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog2task, 0, osWaitForever))
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <sensAnalog02Task+0x68>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	f107 0108 	add.w	r1, r7, #8
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	2200      	movs	r2, #0
 800124e:	f006 ffcd 	bl	80081ec <osMessageQueuePut>
	  {
	  //printf("Sending %d from %d \n \r", analog2task.data, analog2task.id);

	  }
	  osDelay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001256:	f006 fe1b 	bl	8007e90 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, osWaitForever);
 800125a:	e7d7      	b.n	800120c <sensAnalog02Task+0x10>
 800125c:	20000108 	.word	0x20000108
 8001260:	2000007c 	.word	0x2000007c
 8001264:	200000fc 	.word	0x200000fc

08001268 <StartPumpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPumpTask */
void StartPumpTask(void *argument)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPumpTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001270:	2120      	movs	r1, #32
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f004 fa27 	bl	80056c8 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800127a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127e:	f006 fe07 	bl	8007e90 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001282:	e7f5      	b.n	8001270 <StartPumpTask+0x8>

08001284 <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	//osSemaphoreAcquire(UART_SemaphoreHandle, osWaitForever);
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &character, 1, 1000);
 800128e:	1df9      	adds	r1, r7, #7
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	2201      	movs	r2, #1
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <_putchar+0x20>)
 8001298:	f005 fe2e 	bl	8006ef8 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart5, (uint8_t*) &character, 1, 1000);
	//osSemaphoreRelease(UART_SemaphoreHandle);
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000158 	.word	0x20000158

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <MX_GPIO_Init+0xec>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <MX_GPIO_Init+0xec>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b32      	ldr	r3, [pc, #200]	; (8001394 <MX_GPIO_Init+0xec>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <MX_GPIO_Init+0xec>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <MX_GPIO_Init+0xec>)
 80012dc:	f043 0320 	orr.w	r3, r3, #32
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <MX_GPIO_Init+0xec>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0320 	and.w	r3, r3, #32
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <MX_GPIO_Init+0xec>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a28      	ldr	r2, [pc, #160]	; (8001394 <MX_GPIO_Init+0xec>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_GPIO_Init+0xec>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <MX_GPIO_Init+0xec>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <MX_GPIO_Init+0xec>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <MX_GPIO_Init+0xec>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_GPIO_Init+0xec>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_GPIO_Init+0xec>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_GPIO_Init+0xec>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2120      	movs	r1, #32
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f004 f9ab 	bl	8005698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001348:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	480f      	ldr	r0, [pc, #60]	; (8001398 <MX_GPIO_Init+0xf0>)
 800135a:	f004 f81b 	bl	8005394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800135e:	2320      	movs	r3, #32
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f004 f80c 	bl	8005394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	2028      	movs	r0, #40	; 0x28
 8001382:	f003 ffdf 	bl	8005344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001386:	2028      	movs	r0, #40	; 0x28
 8001388:	f003 fff6 	bl	8005378 <HAL_NVIC_EnableIRQ>

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	48000800 	.word	0x48000800

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f001 ff2f 	bl	8003202 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f80f 	bl	80013c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f7ff ff7e 	bl	80012a8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80013ac:	f001 fdb4 	bl	8002f18 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80013b0:	f7ff fd52 	bl	8000e58 <MX_ADC1_Init>
  MX_UART5_Init();
 80013b4:	f001 fdfa 	bl	8002fac <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013b8:	f006 fc8e 	bl	8007cd8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80013bc:	f7ff fe44 	bl	8001048 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013c0:	f006 fcae 	bl	8007d20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <main+0x28>

080013c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b094      	sub	sp, #80	; 0x50
 80013ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	2238      	movs	r2, #56	; 0x38
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00a f869 	bl	800b4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f004 f9ab 	bl	8005744 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f8:	2340      	movs	r3, #64	; 0x40
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001400:	2302      	movs	r3, #2
 8001402:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001404:	2304      	movs	r3, #4
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001408:	2355      	movs	r3, #85	; 0x55
 800140a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001410:	2302      	movs	r3, #2
 8001412:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001414:	2302      	movs	r3, #2
 8001416:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fa45 	bl	80058ac <HAL_RCC_OscConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001428:	f000 f82a 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142c:	230f      	movs	r3, #15
 800142e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001430:	2303      	movs	r3, #3
 8001432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2104      	movs	r1, #4
 8001444:	4618      	mov	r0, r3
 8001446:	f004 fd43 	bl	8005ed0 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001450:	f000 f816 	bl	8001480 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	; 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800146e:	f001 fee1 	bl	8003234 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012c00 	.word	0x40012c00

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>

0800148a <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <_out_char+0x1e>
    _putchar(character);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fee0 	bl	8001284 <_putchar>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e002      	b.n	80014e2 <_strnlen_s+0x16>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <_strnlen_s+0x28>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	1e5a      	subs	r2, r3, #1
 80014ee:	603a      	str	r2, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f3      	bne.n	80014dc <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	1ad3      	subs	r3, r2, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b2f      	cmp	r3, #47	; 0x2f
 8001514:	d904      	bls.n	8001520 <_is_digit+0x1a>
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b39      	cmp	r3, #57	; 0x39
 800151a:	d801      	bhi.n	8001520 <_is_digit+0x1a>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <_is_digit+0x1c>
 8001520:	2300      	movs	r3, #0
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001540:	e00e      	b.n	8001560 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4618      	mov	r0, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1c59      	adds	r1, r3, #1
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6011      	str	r1, [r2, #0]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4403      	add	r3, r0
 800155c:	3b30      	subs	r3, #48	; 0x30
 800155e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffcd 	bl	8001506 <_is_digit>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1e7      	bne.n	8001542 <_atoi+0xe>
  }
  return i;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800158e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d125      	bne.n	80015e4 <_out_rev+0x68>
 8001598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d120      	bne.n	80015e4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e00a      	b.n	80015be <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	1c53      	adds	r3, r2, #1
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	68fc      	ldr	r4, [r7, #12]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	2020      	movs	r0, #32
 80015b6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d3f0      	bcc.n	80015a8 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80015c6:	e00d      	b.n	80015e4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	3b01      	subs	r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	4413      	add	r3, r2
 80015d4:	7818      	ldrb	r0, [r3, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	1c53      	adds	r3, r2, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	68fc      	ldr	r4, [r7, #12]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	47a0      	blx	r4
  while (len) {
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ee      	bne.n	80015c8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00e      	beq.n	8001612 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80015f4:	e007      	b.n	8001606 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	1c53      	adds	r3, r2, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	68fc      	ldr	r4, [r7, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	2020      	movs	r0, #32
 8001604:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160e:	429a      	cmp	r2, r3
 8001610:	d8f1      	bhi.n	80015f6 <_out_rev+0x7a>
    }
  }

  return idx;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}

0800161c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af04      	add	r7, sp, #16
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d136      	bne.n	80016a2 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d018      	beq.n	800166c <_ntoa_format+0x50>
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <_ntoa_format+0x50>
 8001644:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d104      	bne.n	8001656 <_ntoa_format+0x3a>
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <_ntoa_format+0x50>
      width--;
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	3b01      	subs	r3, #1
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800165c:	e006      	b.n	800166c <_ntoa_format+0x50>
      buf[len++] = '0';
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	61fa      	str	r2, [r7, #28]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4413      	add	r3, r2
 8001668:	2230      	movs	r2, #48	; 0x30
 800166a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001670:	429a      	cmp	r2, r3
 8001672:	d20a      	bcs.n	800168a <_ntoa_format+0x6e>
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b1f      	cmp	r3, #31
 8001678:	d9f1      	bls.n	800165e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800167a:	e006      	b.n	800168a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	61fa      	str	r2, [r7, #28]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4413      	add	r3, r2
 8001686:	2230      	movs	r2, #48	; 0x30
 8001688:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <_ntoa_format+0x86>
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001698:	429a      	cmp	r2, r3
 800169a:	d202      	bcs.n	80016a2 <_ntoa_format+0x86>
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b1f      	cmp	r3, #31
 80016a0:	d9ec      	bls.n	800167c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d058      	beq.n	800175e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80016ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <_ntoa_format+0xc8>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <_ntoa_format+0xc8>
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d003      	beq.n	80016cc <_ntoa_format+0xb0>
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d10b      	bne.n	80016e4 <_ntoa_format+0xc8>
      len--;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <_ntoa_format+0xc8>
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d102      	bne.n	80016e4 <_ntoa_format+0xc8>
        len--;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d10f      	bne.n	800170a <_ntoa_format+0xee>
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10a      	bne.n	800170a <_ntoa_format+0xee>
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b1f      	cmp	r3, #31
 80016f8:	d807      	bhi.n	800170a <_ntoa_format+0xee>
      buf[len++] = 'x';
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	61fa      	str	r2, [r7, #28]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4413      	add	r3, r2
 8001704:	2278      	movs	r2, #120	; 0x78
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e01f      	b.n	800174a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	2b10      	cmp	r3, #16
 800170e:	d10f      	bne.n	8001730 <_ntoa_format+0x114>
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00a      	beq.n	8001730 <_ntoa_format+0x114>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	2b1f      	cmp	r3, #31
 800171e:	d807      	bhi.n	8001730 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	61fa      	str	r2, [r7, #28]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4413      	add	r3, r2
 800172a:	2258      	movs	r2, #88	; 0x58
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e00c      	b.n	800174a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	2b02      	cmp	r3, #2
 8001734:	d109      	bne.n	800174a <_ntoa_format+0x12e>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b1f      	cmp	r3, #31
 800173a:	d806      	bhi.n	800174a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	61fa      	str	r2, [r7, #28]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4413      	add	r3, r2
 8001746:	2262      	movs	r2, #98	; 0x62
 8001748:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2b1f      	cmp	r3, #31
 800174e:	d806      	bhi.n	800175e <_ntoa_format+0x142>
      buf[len++] = '0';
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	61fa      	str	r2, [r7, #28]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4413      	add	r3, r2
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	2b1f      	cmp	r3, #31
 8001762:	d824      	bhi.n	80017ae <_ntoa_format+0x192>
    if (negative) {
 8001764:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <_ntoa_format+0x160>
      buf[len++] = '-';
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	61fa      	str	r2, [r7, #28]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4413      	add	r3, r2
 8001776:	222d      	movs	r2, #45	; 0x2d
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e018      	b.n	80017ae <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	61fa      	str	r2, [r7, #28]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	222b      	movs	r2, #43	; 0x2b
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e00b      	b.n	80017ae <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <_ntoa_format+0x192>
      buf[len++] = ' ';
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	61fa      	str	r2, [r7, #28]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4413      	add	r3, r2
 80017aa:	2220      	movs	r2, #32
 80017ac:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80017ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b0:	9303      	str	r3, [sp, #12]
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fed9 	bl	800157c <_out_rev>
 80017ca:	4603      	mov	r3, r0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	; 0x58
 80017d8:	af08      	add	r7, sp, #32
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80017e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80017ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ee:	f023 0310 	bic.w	r3, r3, #16
 80017f2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80017f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <_ntoa_long+0x30>
 80017fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	d032      	beq.n	800186a <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001808:	fbb3 f2f2 	udiv	r2, r3, r2
 800180c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800180e:	fb01 f202 	mul.w	r2, r1, r2
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800181c:	2b09      	cmp	r3, #9
 800181e:	d804      	bhi.n	800182a <_ntoa_long+0x56>
 8001820:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001824:	3330      	adds	r3, #48	; 0x30
 8001826:	b2da      	uxtb	r2, r3
 8001828:	e00d      	b.n	8001846 <_ntoa_long+0x72>
 800182a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <_ntoa_long+0x64>
 8001834:	2241      	movs	r2, #65	; 0x41
 8001836:	e000      	b.n	800183a <_ntoa_long+0x66>
 8001838:	2261      	movs	r2, #97	; 0x61
 800183a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800183e:	4413      	add	r3, r2
 8001840:	b2db      	uxtb	r3, r3
 8001842:	3b0a      	subs	r3, #10
 8001844:	b2da      	uxtb	r2, r3
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	1c59      	adds	r1, r3, #1
 800184a:	6379      	str	r1, [r7, #52]	; 0x34
 800184c:	3338      	adds	r3, #56	; 0x38
 800184e:	443b      	add	r3, r7
 8001850:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001858:	fbb2 f3f3 	udiv	r3, r2, r3
 800185c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800185e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <_ntoa_long+0x96>
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	2b1f      	cmp	r3, #31
 8001868:	d9cc      	bls.n	8001804 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800186a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186c:	9306      	str	r3, [sp, #24]
 800186e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001870:	9305      	str	r3, [sp, #20]
 8001872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001874:	9304      	str	r3, [sp, #16]
 8001876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001878:	9303      	str	r3, [sp, #12]
 800187a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fec3 	bl	800161c <_ntoa_format>
 8001896:	4603      	mov	r3, r0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3738      	adds	r7, #56	; 0x38
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b096      	sub	sp, #88	; 0x58
 80018a4:	af08      	add	r7, sp, #32
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80018b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018b6:	4313      	orrs	r3, r2
 80018b8:	d103      	bne.n	80018c2 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80018ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018bc:	f023 0310 	bic.w	r3, r3, #16
 80018c0:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80018c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <_ntoa_long_long+0x34>
 80018cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018d0:	4313      	orrs	r3, r2
 80018d2:	d037      	beq.n	8001944 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80018d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018dc:	f7ff f93e 	bl	8000b5c <__aeabi_uldivmod>
 80018e0:	4613      	mov	r3, r2
 80018e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80018e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018ea:	2b09      	cmp	r3, #9
 80018ec:	d804      	bhi.n	80018f8 <_ntoa_long_long+0x58>
 80018ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f2:	3330      	adds	r3, #48	; 0x30
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	e00d      	b.n	8001914 <_ntoa_long_long+0x74>
 80018f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <_ntoa_long_long+0x66>
 8001902:	2241      	movs	r2, #65	; 0x41
 8001904:	e000      	b.n	8001908 <_ntoa_long_long+0x68>
 8001906:	2261      	movs	r2, #97	; 0x61
 8001908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800190c:	4413      	add	r3, r2
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3b0a      	subs	r3, #10
 8001912:	b2da      	uxtb	r2, r3
 8001914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001916:	1c59      	adds	r1, r3, #1
 8001918:	6379      	str	r1, [r7, #52]	; 0x34
 800191a:	3338      	adds	r3, #56	; 0x38
 800191c:	443b      	add	r3, r7
 800191e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001922:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001926:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800192a:	f7ff f917 	bl	8000b5c <__aeabi_uldivmod>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001936:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800193a:	4313      	orrs	r3, r2
 800193c:	d002      	beq.n	8001944 <_ntoa_long_long+0xa4>
 800193e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001940:	2b1f      	cmp	r3, #31
 8001942:	d9c7      	bls.n	80018d4 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001946:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001948:	9206      	str	r2, [sp, #24]
 800194a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800194c:	9205      	str	r2, [sp, #20]
 800194e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001950:	9204      	str	r2, [sp, #16]
 8001952:	9303      	str	r3, [sp, #12]
 8001954:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001958:	9302      	str	r3, [sp, #8]
 800195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff fe56 	bl	800161c <_ntoa_format>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3738      	adds	r7, #56	; 0x38
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	0000      	movs	r0, r0
 800197c:	0000      	movs	r0, r0
	...

08001980 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b09d      	sub	sp, #116	; 0x74
 8001984:	af04      	add	r7, sp, #16
 8001986:	6178      	str	r0, [r7, #20]
 8001988:	6139      	str	r1, [r7, #16]
 800198a:	60fa      	str	r2, [r7, #12]
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80019a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019aa:	f7ff f85d 	bl	8000a68 <__aeabi_dcmpeq>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10f      	bne.n	80019d4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80019b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019b6:	9303      	str	r3, [sp, #12]
 80019b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	2303      	movs	r3, #3
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	4ba7      	ldr	r3, [pc, #668]	; (8001c60 <_ftoa+0x2e0>)
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	6939      	ldr	r1, [r7, #16]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff fdd6 	bl	800157c <_out_rev>
 80019d0:	4603      	mov	r3, r0
 80019d2:	e222      	b.n	8001e1a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80019dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e0:	f7ff f84c 	bl	8000a7c <__aeabi_dcmplt>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00f      	beq.n	8001a0a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80019ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ec:	9303      	str	r3, [sp, #12]
 80019ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	2304      	movs	r3, #4
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	4b9b      	ldr	r3, [pc, #620]	; (8001c64 <_ftoa+0x2e4>)
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	6978      	ldr	r0, [r7, #20]
 8001a02:	f7ff fdbb 	bl	800157c <_out_rev>
 8001a06:	4603      	mov	r3, r0
 8001a08:	e207      	b.n	8001e1a <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	4b96      	ldr	r3, [pc, #600]	; (8001c68 <_ftoa+0x2e8>)
 8001a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a14:	f7ff f850 	bl	8000ab8 <__aeabi_dcmpgt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d01d      	beq.n	8001a5a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <_ftoa+0xac>
 8001a28:	4b90      	ldr	r3, [pc, #576]	; (8001c6c <_ftoa+0x2ec>)
 8001a2a:	e000      	b.n	8001a2e <_ftoa+0xae>
 8001a2c:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <_ftoa+0x2f0>)
 8001a2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a30:	f002 0204 	and.w	r2, r2, #4
 8001a34:	2a00      	cmp	r2, #0
 8001a36:	d001      	beq.n	8001a3c <_ftoa+0xbc>
 8001a38:	2204      	movs	r2, #4
 8001a3a:	e000      	b.n	8001a3e <_ftoa+0xbe>
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001a40:	9103      	str	r1, [sp, #12]
 8001a42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a44:	9102      	str	r1, [sp, #8]
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	6939      	ldr	r1, [r7, #16]
 8001a50:	6978      	ldr	r0, [r7, #20]
 8001a52:	f7ff fd93 	bl	800157c <_out_rev>
 8001a56:	4603      	mov	r3, r0
 8001a58:	e1df      	b.n	8001e1a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001a5a:	a37d      	add	r3, pc, #500	; (adr r3, 8001c50 <_ftoa+0x2d0>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a64:	f7ff f828 	bl	8000ab8 <__aeabi_dcmpgt>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <_ftoa+0x102>
 8001a6e:	a37a      	add	r3, pc, #488	; (adr r3, 8001c58 <_ftoa+0x2d8>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a78:	f7ff f800 	bl	8000a7c <__aeabi_dcmplt>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00f      	beq.n	8001aa2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	ed97 0b00 	vldr	d0, [r7]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	6939      	ldr	r1, [r7, #16]
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f000 f9c9 	bl	8001e30 <_etoa>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	e1bb      	b.n	8001e1a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ab4:	f7fe ffe2 	bl	8000a7c <__aeabi_dcmplt>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00e      	beq.n	8001adc <_ftoa+0x15c>
    negative = true;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	f7fe fbaa 	bl	8000228 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10d      	bne.n	8001b02 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001aea:	e00a      	b.n	8001b02 <_ftoa+0x182>
    buf[len++] = '0';
 8001aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001af2:	3360      	adds	r3, #96	; 0x60
 8001af4:	443b      	add	r3, r7
 8001af6:	2230      	movs	r2, #48	; 0x30
 8001af8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001afe:	3b01      	subs	r3, #1
 8001b00:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b04:	2b1f      	cmp	r3, #31
 8001b06:	d802      	bhi.n	8001b0e <_ftoa+0x18e>
 8001b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b0a:	2b09      	cmp	r3, #9
 8001b0c:	d8ee      	bhi.n	8001aec <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b12:	f7fe ffdb 	bl	8000acc <__aeabi_d2iz>
 8001b16:	4603      	mov	r3, r0
 8001b18:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001b1a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001b1c:	f7fe fcd2 	bl	80004c4 <__aeabi_i2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b28:	f7fe fb7e 	bl	8000228 <__aeabi_dsub>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	4a4f      	ldr	r2, [pc, #316]	; (8001c74 <_ftoa+0x2f4>)
 8001b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fd2a 	bl	8000598 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001b4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b50:	f7fe ffe4 	bl	8000b1c <__aeabi_d2uiz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001b58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b5a:	f7fe fca3 	bl	80004a4 <__aeabi_ui2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b66:	f7fe fb5f 	bl	8000228 <__aeabi_dsub>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <_ftoa+0x2f8>)
 8001b78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b7c:	f7fe ff9c 	bl	8000ab8 <__aeabi_dcmpgt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <_ftoa+0x234>
    ++frac;
 8001b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b88:	3301      	adds	r3, #1
 8001b8a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001b8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b8e:	f7fe fc89 	bl	80004a4 <__aeabi_ui2d>
 8001b92:	4a38      	ldr	r2, [pc, #224]	; (8001c74 <_ftoa+0x2f4>)
 8001b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe ff81 	bl	8000aa4 <__aeabi_dcmpge>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01a      	beq.n	8001bde <_ftoa+0x25e>
      frac = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bae:	3301      	adds	r3, #1
 8001bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8001bb2:	e014      	b.n	8001bde <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <_ftoa+0x2f8>)
 8001bba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001bbe:	f7fe ff5d 	bl	8000a7c <__aeabi_dcmplt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10a      	bne.n	8001bde <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <_ftoa+0x258>
 8001bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bda:	3301      	adds	r3, #1
 8001bdc:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d14b      	bne.n	8001c7c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8001be4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001be6:	f7fe fc6d 	bl	80004c4 <__aeabi_i2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf2:	f7fe fb19 	bl	8000228 <__aeabi_dsub>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001bfe:	2301      	movs	r3, #1
 8001c00:	461c      	mov	r4, r3
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <_ftoa+0x2f8>)
 8001c08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c0c:	f7fe ff36 	bl	8000a7c <__aeabi_dcmplt>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <_ftoa+0x29a>
 8001c16:	2300      	movs	r3, #0
 8001c18:	461c      	mov	r4, r3
 8001c1a:	b2e3      	uxtb	r3, r4
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <_ftoa+0x2ba>
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_ftoa+0x2f8>)
 8001c2c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c30:	f7fe ff42 	bl	8000ab8 <__aeabi_dcmpgt>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d064      	beq.n	8001d04 <_ftoa+0x384>
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8081 	beq.w	8001d48 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c48:	3301      	adds	r3, #1
 8001c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c4c:	e07c      	b.n	8001d48 <_ftoa+0x3c8>
 8001c4e:	bf00      	nop
 8001c50:	00000000 	.word	0x00000000
 8001c54:	41cdcd65 	.word	0x41cdcd65
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	c1cdcd65 	.word	0xc1cdcd65
 8001c60:	0800b724 	.word	0x0800b724
 8001c64:	0800b728 	.word	0x0800b728
 8001c68:	7fefffff 	.word	0x7fefffff
 8001c6c:	0800b730 	.word	0x0800b730
 8001c70:	0800b738 	.word	0x0800b738
 8001c74:	0800b858 	.word	0x0800b858
 8001c78:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8001c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001c80:	e01f      	b.n	8001cc2 <_ftoa+0x342>
      --count;
 8001c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c84:	3b01      	subs	r3, #1
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001c88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c8a:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <_ftoa+0x4a4>)
 8001c8c:	fba3 2301 	umull	r2, r3, r3, r1
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	1aca      	subs	r2, r1, r3
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca0:	1c59      	adds	r1, r3, #1
 8001ca2:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001ca4:	3230      	adds	r2, #48	; 0x30
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	3360      	adds	r3, #96	; 0x60
 8001caa:	443b      	add	r3, r7
 8001cac:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <_ftoa+0x4a4>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	653b      	str	r3, [r7, #80]	; 0x50
 8001cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc4:	2b1f      	cmp	r3, #31
 8001cc6:	d9dc      	bls.n	8001c82 <_ftoa+0x302>
 8001cc8:	e009      	b.n	8001cde <_ftoa+0x35e>
        break;
 8001cca:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001ccc:	e007      	b.n	8001cde <_ftoa+0x35e>
      buf[len++] = '0';
 8001cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cd4:	3360      	adds	r3, #96	; 0x60
 8001cd6:	443b      	add	r3, r7
 8001cd8:	2230      	movs	r2, #48	; 0x30
 8001cda:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce0:	2b1f      	cmp	r3, #31
 8001ce2:	d804      	bhi.n	8001cee <_ftoa+0x36e>
 8001ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce6:	1e5a      	subs	r2, r3, #1
 8001ce8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ef      	bne.n	8001cce <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf0:	2b1f      	cmp	r3, #31
 8001cf2:	d829      	bhi.n	8001d48 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8001cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cfa:	3360      	adds	r3, #96	; 0x60
 8001cfc:	443b      	add	r3, r7
 8001cfe:	222e      	movs	r2, #46	; 0x2e
 8001d00:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d04:	e020      	b.n	8001d48 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8001d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d08:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <_ftoa+0x4a8>)
 8001d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d0e:	1099      	asrs	r1, r3, #2
 8001d10:	17d3      	asrs	r3, r2, #31
 8001d12:	1ac9      	subs	r1, r1, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	1ad1      	subs	r1, r2, r3
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001d26:	3230      	adds	r2, #48	; 0x30
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	3360      	adds	r3, #96	; 0x60
 8001d2c:	443b      	add	r3, r7
 8001d2e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8001d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d34:	4a3c      	ldr	r2, [pc, #240]	; (8001e28 <_ftoa+0x4a8>)
 8001d36:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3a:	1092      	asrs	r2, r2, #2
 8001d3c:	17db      	asrs	r3, r3, #31
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	657b      	str	r3, [r7, #84]	; 0x54
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4a:	2b1f      	cmp	r3, #31
 8001d4c:	d9db      	bls.n	8001d06 <_ftoa+0x386>
 8001d4e:	e000      	b.n	8001d52 <_ftoa+0x3d2>
      break;
 8001d50:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d123      	bne.n	8001da4 <_ftoa+0x424>
 8001d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01e      	beq.n	8001da4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d014      	beq.n	8001d96 <_ftoa+0x416>
 8001d6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d104      	bne.n	8001d7e <_ftoa+0x3fe>
 8001d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <_ftoa+0x416>
      width--;
 8001d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d80:	3b01      	subs	r3, #1
 8001d82:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001d84:	e007      	b.n	8001d96 <_ftoa+0x416>
      buf[len++] = '0';
 8001d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d8c:	3360      	adds	r3, #96	; 0x60
 8001d8e:	443b      	add	r3, r7
 8001d90:	2230      	movs	r2, #48	; 0x30
 8001d92:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001d96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d202      	bcs.n	8001da4 <_ftoa+0x424>
 8001d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da0:	2b1f      	cmp	r3, #31
 8001da2:	d9f0      	bls.n	8001d86 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da6:	2b1f      	cmp	r3, #31
 8001da8:	d827      	bhi.n	8001dfa <_ftoa+0x47a>
    if (negative) {
 8001daa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <_ftoa+0x444>
      buf[len++] = '-';
 8001db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001db8:	3360      	adds	r3, #96	; 0x60
 8001dba:	443b      	add	r3, r7
 8001dbc:	222d      	movs	r2, #45	; 0x2d
 8001dbe:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001dc2:	e01a      	b.n	8001dfa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8001dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dd4:	3360      	adds	r3, #96	; 0x60
 8001dd6:	443b      	add	r3, r7
 8001dd8:	222b      	movs	r2, #43	; 0x2b
 8001dda:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001dde:	e00c      	b.n	8001dfa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8001de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <_ftoa+0x47a>
      buf[len++] = ' ';
 8001dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001df0:	3360      	adds	r3, #96	; 0x60
 8001df2:	443b      	add	r3, r7
 8001df4:	2220      	movs	r2, #32
 8001df6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dfc:	9303      	str	r3, [sp, #12]
 8001dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e00:	9302      	str	r3, [sp, #8]
 8001e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	6939      	ldr	r1, [r7, #16]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff fbb2 	bl	800157c <_out_rev>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3764      	adds	r7, #100	; 0x64
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	bf00      	nop
 8001e24:	cccccccd 	.word	0xcccccccd
 8001e28:	66666667 	.word	0x66666667
 8001e2c:	00000000 	.word	0x00000000

08001e30 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e34:	b09f      	sub	sp, #124	; 0x7c
 8001e36:	af06      	add	r7, sp, #24
 8001e38:	6278      	str	r0, [r7, #36]	; 0x24
 8001e3a:	6239      	str	r1, [r7, #32]
 8001e3c:	61fa      	str	r2, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001e44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e4c:	f7fe fe0c 	bl	8000a68 <__aeabi_dcmpeq>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d014      	beq.n	8001e80 <_etoa+0x50>
 8001e56:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5a:	4bc1      	ldr	r3, [pc, #772]	; (8002160 <_etoa+0x330>)
 8001e5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e60:	f7fe fe2a 	bl	8000ab8 <__aeabi_dcmpgt>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10a      	bne.n	8001e80 <_etoa+0x50>
 8001e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001e72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e76:	f7fe fe01 	bl	8000a7c <__aeabi_dcmplt>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d012      	beq.n	8001ea6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001e80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	6a39      	ldr	r1, [r7, #32]
 8001e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e9e:	f7ff fd6f 	bl	8001980 <_ftoa>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	e23f      	b.n	8002326 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	461e      	mov	r6, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eb6:	f7fe fde1 	bl	8000a7c <__aeabi_dcmplt>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <_etoa+0x94>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	461e      	mov	r6, r3
 8001ec4:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8001ec8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <_etoa+0xb4>
    value = -value;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	ed97 7b00 	vldr	d7, [r7]
 8001ee0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8001ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001ef0:	2306      	movs	r3, #6
 8001ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001ef6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001efa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001efe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	0d0a      	lsrs	r2, r1, #20
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4613      	mov	r3, r2
 8001f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f1e:	4690      	mov	r8, r2
 8001f20:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8001f24:	4644      	mov	r4, r8
 8001f26:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8001f2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8001f2e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001f32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f34:	f7fe fac6 	bl	80004c4 <__aeabi_i2d>
 8001f38:	a37d      	add	r3, pc, #500	; (adr r3, 8002130 <_etoa+0x300>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fb2b 	bl	8000598 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	a37b      	add	r3, pc, #492	; (adr r3, 8002138 <_etoa+0x308>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe f96c 	bl	800022c <__adddf3>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4614      	mov	r4, r2
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <_etoa+0x334>)
 8001f66:	f7fe f95f 	bl	8000228 <__aeabi_dsub>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	a373      	add	r3, pc, #460	; (adr r3, 8002140 <_etoa+0x310>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe fb0e 	bl	8000598 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe f952 	bl	800022c <__adddf3>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7fe fd9c 	bl	8000acc <__aeabi_d2iz>
 8001f94:	4603      	mov	r3, r0
 8001f96:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8001f98:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f9a:	f7fe fa93 	bl	80004c4 <__aeabi_i2d>
 8001f9e:	a36a      	add	r3, pc, #424	; (adr r3, 8002148 <_etoa+0x318>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe faf8 	bl	8000598 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4b6c      	ldr	r3, [pc, #432]	; (8002168 <_etoa+0x338>)
 8001fb6:	f7fe f939 	bl	800022c <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fd83 	bl	8000acc <__aeabi_d2iz>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001fca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001fcc:	f7fe fa7a 	bl	80004c4 <__aeabi_i2d>
 8001fd0:	a35f      	add	r3, pc, #380	; (adr r3, 8002150 <_etoa+0x320>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fadf 	bl	8000598 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4614      	mov	r4, r2
 8001fe0:	461d      	mov	r5, r3
 8001fe2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001fe4:	f7fe fa6e 	bl	80004c4 <__aeabi_i2d>
 8001fe8:	a35b      	add	r3, pc, #364	; (adr r3, 8002158 <_etoa+0x328>)
 8001fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fee:	f7fe fad3 	bl	8000598 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	f7fe f915 	bl	8000228 <__aeabi_dsub>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8002006:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800200a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800200e:	f7fe fac3 	bl	8000598 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800201a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002020:	17da      	asrs	r2, r3, #31
 8002022:	469a      	mov	sl, r3
 8002024:	4693      	mov	fp, r2
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002032:	2200      	movs	r2, #0
 8002034:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002038:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800203c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	f7fe f8f2 	bl	800022c <__adddf3>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4690      	mov	r8, r2
 800204e:	4699      	mov	r9, r3
 8002050:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800205c:	f7fe f8e4 	bl	8000228 <__aeabi_dsub>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4692      	mov	sl, r2
 8002066:	469b      	mov	fp, r3
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <_etoa+0x33c>)
 800206e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002072:	f7fe fbbb 	bl	80007ec <__aeabi_ddiv>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <_etoa+0x340>)
 8002084:	f7fe f8d2 	bl	800022c <__adddf3>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002090:	f7fe fbac 	bl	80007ec <__aeabi_ddiv>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	4b34      	ldr	r3, [pc, #208]	; (8002174 <_etoa+0x344>)
 80020a2:	f7fe f8c3 	bl	800022c <__adddf3>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020ae:	f7fe fb9d 	bl	80007ec <__aeabi_ddiv>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4650      	mov	r0, sl
 80020b8:	4659      	mov	r1, fp
 80020ba:	f7fe f8b7 	bl	800022c <__adddf3>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4640      	mov	r0, r8
 80020c4:	4649      	mov	r1, r9
 80020c6:	f7fe fb91 	bl	80007ec <__aeabi_ddiv>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <_etoa+0x348>)
 80020d8:	f7fe f8a8 	bl	800022c <__adddf3>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe fa58 	bl	8000598 <__aeabi_dmul>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80020f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f8:	f7fe fcc0 	bl	8000a7c <__aeabi_dcmplt>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00d      	beq.n	800211e <_etoa+0x2ee>
    expval--;
 8002102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002104:	3b01      	subs	r3, #1
 8002106:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002108:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <_etoa+0x340>)
 8002112:	f7fe fb6b 	bl	80007ec <__aeabi_ddiv>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800211e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002120:	2b63      	cmp	r3, #99	; 0x63
 8002122:	dc2b      	bgt.n	800217c <_etoa+0x34c>
 8002124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002126:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800212a:	db27      	blt.n	800217c <_etoa+0x34c>
 800212c:	2304      	movs	r3, #4
 800212e:	e026      	b.n	800217e <_etoa+0x34e>
 8002130:	509f79fb 	.word	0x509f79fb
 8002134:	3fd34413 	.word	0x3fd34413
 8002138:	8b60c8b3 	.word	0x8b60c8b3
 800213c:	3fc68a28 	.word	0x3fc68a28
 8002140:	636f4361 	.word	0x636f4361
 8002144:	3fd287a7 	.word	0x3fd287a7
 8002148:	0979a371 	.word	0x0979a371
 800214c:	400a934f 	.word	0x400a934f
 8002150:	bbb55516 	.word	0xbbb55516
 8002154:	40026bb1 	.word	0x40026bb1
 8002158:	fefa39ef 	.word	0xfefa39ef
 800215c:	3fe62e42 	.word	0x3fe62e42
 8002160:	7fefffff 	.word	0x7fefffff
 8002164:	3ff80000 	.word	0x3ff80000
 8002168:	3fe00000 	.word	0x3fe00000
 800216c:	402c0000 	.word	0x402c0000
 8002170:	40240000 	.word	0x40240000
 8002174:	40180000 	.word	0x40180000
 8002178:	3ff00000 	.word	0x3ff00000
 800217c:	2305      	movs	r3, #5
 800217e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002180:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03d      	beq.n	8002208 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800218c:	a368      	add	r3, pc, #416	; (adr r3, 8002330 <_etoa+0x500>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002196:	f7fe fc85 	bl	8000aa4 <__aeabi_dcmpge>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <_etoa+0x3ba>
 80021a0:	a365      	add	r3, pc, #404	; (adr r3, 8002338 <_etoa+0x508>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021aa:	f7fe fc67 	bl	8000a7c <__aeabi_dcmplt>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01a      	beq.n	80021ea <_etoa+0x3ba>
      if ((int)prec > expval) {
 80021b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	da07      	bge.n	80021ce <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80021be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80021c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021cc:	e002      	b.n	80021d4 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80021d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021e8:	e00e      	b.n	8002208 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80021ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <_etoa+0x3d8>
 80021f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <_etoa+0x3d8>
        --prec;
 80021fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002202:	3b01      	subs	r3, #1
 8002204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800220c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800220e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002214:	429a      	cmp	r2, r3
 8002216:	d904      	bls.n	8002222 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800221a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	657b      	str	r3, [r7, #84]	; 0x54
 8002220:	e001      	b.n	8002226 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <_etoa+0x40c>
 8002232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <_etoa+0x426>
    value /= conv.F;
 8002242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002246:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800224a:	f7fe facf 	bl	80007ec <__aeabi_ddiv>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800225a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <_etoa+0x440>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e003      	b.n	8002278 <_etoa+0x448>
 8002270:	ed97 7b04 	vldr	d7, [r7, #16]
 8002274:	ed87 7b02 	vstr	d7, [r7, #8]
 8002278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800227c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002298:	f7ff fb72 	bl	8001980 <_ftoa>
 800229c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800229e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03f      	beq.n	8002324 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80022a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <_etoa+0x484>
 80022b0:	2045      	movs	r0, #69	; 0x45
 80022b2:	e000      	b.n	80022b6 <_etoa+0x486>
 80022b4:	2065      	movs	r0, #101	; 0x65
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	1c53      	adds	r3, r2, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	6a39      	ldr	r1, [r7, #32]
 80022c2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80022c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bfb8      	it	lt
 80022ca:	425b      	neglt	r3, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d0:	0fdb      	lsrs	r3, r3, #31
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022d6:	3a01      	subs	r2, #1
 80022d8:	2105      	movs	r1, #5
 80022da:	9105      	str	r1, [sp, #20]
 80022dc:	9204      	str	r2, [sp, #16]
 80022de:	2200      	movs	r2, #0
 80022e0:	9203      	str	r2, [sp, #12]
 80022e2:	220a      	movs	r2, #10
 80022e4:	9202      	str	r2, [sp, #8]
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	9000      	str	r0, [sp, #0]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	6a39      	ldr	r1, [r7, #32]
 80022f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022f2:	f7ff fa6f 	bl	80017d4 <_ntoa_long>
 80022f6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80022f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00f      	beq.n	8002324 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002304:	e007      	b.n	8002316 <_etoa+0x4e6>
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	1c53      	adds	r3, r2, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	2020      	movs	r0, #32
 8002314:	47a0      	blx	r4
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002320:	429a      	cmp	r2, r3
 8002322:	d8f0      	bhi.n	8002306 <_etoa+0x4d6>
    }
  }
  return idx;
 8002324:	69fb      	ldr	r3, [r7, #28]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3764      	adds	r7, #100	; 0x64
 800232a:	46bd      	mov	sp, r7
 800232c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002330:	eb1c432d 	.word	0xeb1c432d
 8002334:	3f1a36e2 	.word	0x3f1a36e2
 8002338:	00000000 	.word	0x00000000
 800233c:	412e8480 	.word	0x412e8480

08002340 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002344:	b0a3      	sub	sp, #140	; 0x8c
 8002346:	af0a      	add	r7, sp, #40	; 0x28
 8002348:	6178      	str	r0, [r7, #20]
 800234a:	6139      	str	r1, [r7, #16]
 800234c:	60fa      	str	r2, [r7, #12]
 800234e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 84cf 	bne.w	8002cfa <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 800235c:	4ba8      	ldr	r3, [pc, #672]	; (8002600 <_vsnprintf+0x2c0>)
 800235e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002360:	f000 bccb 	b.w	8002cfa <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b25      	cmp	r3, #37	; 0x25
 800236a:	d00d      	beq.n	8002388 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	7818      	ldrb	r0, [r3, #0]
 8002370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002372:	1c53      	adds	r3, r2, #1
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002376:	697c      	ldr	r4, [r7, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6939      	ldr	r1, [r7, #16]
 800237c:	47a0      	blx	r4
      format++;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3301      	adds	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
      continue;
 8002384:	f000 bcb9 	b.w	8002cfa <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	3301      	adds	r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	3b20      	subs	r3, #32
 8002398:	2b10      	cmp	r3, #16
 800239a:	d857      	bhi.n	800244c <_vsnprintf+0x10c>
 800239c:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <_vsnprintf+0x64>)
 800239e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a2:	bf00      	nop
 80023a4:	08002425 	.word	0x08002425
 80023a8:	0800244d 	.word	0x0800244d
 80023ac:	0800244d 	.word	0x0800244d
 80023b0:	08002439 	.word	0x08002439
 80023b4:	0800244d 	.word	0x0800244d
 80023b8:	0800244d 	.word	0x0800244d
 80023bc:	0800244d 	.word	0x0800244d
 80023c0:	0800244d 	.word	0x0800244d
 80023c4:	0800244d 	.word	0x0800244d
 80023c8:	0800244d 	.word	0x0800244d
 80023cc:	0800244d 	.word	0x0800244d
 80023d0:	08002411 	.word	0x08002411
 80023d4:	0800244d 	.word	0x0800244d
 80023d8:	080023fd 	.word	0x080023fd
 80023dc:	0800244d 	.word	0x0800244d
 80023e0:	0800244d 	.word	0x0800244d
 80023e4:	080023e9 	.word	0x080023e9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80023e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	2301      	movs	r3, #1
 80023f8:	653b      	str	r3, [r7, #80]	; 0x50
 80023fa:	e02a      	b.n	8002452 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80023fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3301      	adds	r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	2301      	movs	r3, #1
 800240c:	653b      	str	r3, [r7, #80]	; 0x50
 800240e:	e020      	b.n	8002452 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3301      	adds	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	2301      	movs	r3, #1
 8002420:	653b      	str	r3, [r7, #80]	; 0x50
 8002422:	e016      	b.n	8002452 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3301      	adds	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	2301      	movs	r3, #1
 8002434:	653b      	str	r3, [r7, #80]	; 0x50
 8002436:	e00c      	b.n	8002452 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3301      	adds	r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	2301      	movs	r3, #1
 8002448:	653b      	str	r3, [r7, #80]	; 0x50
 800244a:	e002      	b.n	8002452 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800244c:	2300      	movs	r3, #0
 800244e:	653b      	str	r3, [r7, #80]	; 0x50
 8002450:	bf00      	nop
      }
    } while (n);
 8002452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002454:	2b00      	cmp	r3, #0
 8002456:	d19c      	bne.n	8002392 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f850 	bl	8001506 <_is_digit>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f85f 	bl	8001534 <_atoi>
 8002476:	65b8      	str	r0, [r7, #88]	; 0x58
 8002478:	e01a      	b.n	80024b0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b2a      	cmp	r3, #42	; 0x2a
 8002480:	d116      	bne.n	80024b0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8002482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002486:	1d1a      	adds	r2, r3, #4
 8002488:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8002490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002492:	2b00      	cmp	r3, #0
 8002494:	da07      	bge.n	80024a6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8002496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	425b      	negs	r3, r3
 80024a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80024a4:	e001      	b.n	80024aa <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3301      	adds	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b2e      	cmp	r3, #46	; 0x2e
 80024ba:	d127      	bne.n	800250c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80024bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c2:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3301      	adds	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f819 	bl	8001506 <_is_digit>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f828 	bl	8001534 <_atoi>
 80024e4:	6578      	str	r0, [r7, #84]	; 0x54
 80024e6:	e011      	b.n	800250c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b2a      	cmp	r3, #42	; 0x2a
 80024ee:	d10d      	bne.n	800250c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80024f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f4:	1d1a      	adds	r2, r3, #4
 80024f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002504:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3301      	adds	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3b68      	subs	r3, #104	; 0x68
 8002512:	2b12      	cmp	r3, #18
 8002514:	d866      	bhi.n	80025e4 <_vsnprintf+0x2a4>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <_vsnprintf+0x1dc>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	0800258f 	.word	0x0800258f
 8002520:	080025e5 	.word	0x080025e5
 8002524:	080025c5 	.word	0x080025c5
 8002528:	080025e5 	.word	0x080025e5
 800252c:	08002569 	.word	0x08002569
 8002530:	080025e5 	.word	0x080025e5
 8002534:	080025e5 	.word	0x080025e5
 8002538:	080025e5 	.word	0x080025e5
 800253c:	080025e5 	.word	0x080025e5
 8002540:	080025e5 	.word	0x080025e5
 8002544:	080025e5 	.word	0x080025e5
 8002548:	080025e5 	.word	0x080025e5
 800254c:	080025b5 	.word	0x080025b5
 8002550:	080025e5 	.word	0x080025e5
 8002554:	080025e5 	.word	0x080025e5
 8002558:	080025e5 	.word	0x080025e5
 800255c:	080025e5 	.word	0x080025e5
 8002560:	080025e5 	.word	0x080025e5
 8002564:	080025d5 	.word	0x080025d5
      case 'l' :
        flags |= FLAGS_LONG;
 8002568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	3301      	adds	r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b6c      	cmp	r3, #108	; 0x6c
 800257c:	d134      	bne.n	80025e8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800257e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002584:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800258c:	e02c      	b.n	80025e8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800258e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002594:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3301      	adds	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b68      	cmp	r3, #104	; 0x68
 80025a2:	d123      	bne.n	80025ec <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 80025a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025aa:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	3301      	adds	r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
        }
        break;
 80025b2:	e01b      	b.n	80025ec <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	3301      	adds	r3, #1
 80025c0:	60bb      	str	r3, [r7, #8]
        break;
 80025c2:	e014      	b.n	80025ee <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3301      	adds	r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
        break;
 80025d2:	e00c      	b.n	80025ee <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025da:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	3301      	adds	r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
        break;
 80025e2:	e004      	b.n	80025ee <_vsnprintf+0x2ae>
      default :
        break;
 80025e4:	bf00      	nop
 80025e6:	e002      	b.n	80025ee <_vsnprintf+0x2ae>
        break;
 80025e8:	bf00      	nop
 80025ea:	e000      	b.n	80025ee <_vsnprintf+0x2ae>
        break;
 80025ec:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b67      	cmp	r3, #103	; 0x67
 80025f4:	f300 80b8 	bgt.w	8002768 <_vsnprintf+0x428>
 80025f8:	2b25      	cmp	r3, #37	; 0x25
 80025fa:	da27      	bge.n	800264c <_vsnprintf+0x30c>
 80025fc:	e370      	b.n	8002ce0 <_vsnprintf+0x9a0>
 80025fe:	bf00      	nop
 8002600:	0800148b 	.word	0x0800148b
 8002604:	3b69      	subs	r3, #105	; 0x69
 8002606:	2201      	movs	r2, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	f249 0241 	movw	r2, #36929	; 0x9041
 8002610:	401a      	ands	r2, r3
 8002612:	2a00      	cmp	r2, #0
 8002614:	bf14      	ite	ne
 8002616:	2201      	movne	r2, #1
 8002618:	2200      	moveq	r2, #0
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	2a00      	cmp	r2, #0
 800261e:	f040 80aa 	bne.w	8002776 <_vsnprintf+0x436>
 8002622:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002626:	2a00      	cmp	r2, #0
 8002628:	bf14      	ite	ne
 800262a:	2201      	movne	r2, #1
 800262c:	2200      	moveq	r2, #0
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	2a00      	cmp	r2, #0
 8002632:	f040 82fb 	bne.w	8002c2c <_vsnprintf+0x8ec>
 8002636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263a:	2b00      	cmp	r3, #0
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f040 828d 	bne.w	8002b64 <_vsnprintf+0x824>
 800264a:	e349      	b.n	8002ce0 <_vsnprintf+0x9a0>
 800264c:	3b25      	subs	r3, #37	; 0x25
 800264e:	2b42      	cmp	r3, #66	; 0x42
 8002650:	f200 8346 	bhi.w	8002ce0 <_vsnprintf+0x9a0>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <_vsnprintf+0x31c>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	08002cc9 	.word	0x08002cc9
 8002660:	08002ce1 	.word	0x08002ce1
 8002664:	08002ce1 	.word	0x08002ce1
 8002668:	08002ce1 	.word	0x08002ce1
 800266c:	08002ce1 	.word	0x08002ce1
 8002670:	08002ce1 	.word	0x08002ce1
 8002674:	08002ce1 	.word	0x08002ce1
 8002678:	08002ce1 	.word	0x08002ce1
 800267c:	08002ce1 	.word	0x08002ce1
 8002680:	08002ce1 	.word	0x08002ce1
 8002684:	08002ce1 	.word	0x08002ce1
 8002688:	08002ce1 	.word	0x08002ce1
 800268c:	08002ce1 	.word	0x08002ce1
 8002690:	08002ce1 	.word	0x08002ce1
 8002694:	08002ce1 	.word	0x08002ce1
 8002698:	08002ce1 	.word	0x08002ce1
 800269c:	08002ce1 	.word	0x08002ce1
 80026a0:	08002ce1 	.word	0x08002ce1
 80026a4:	08002ce1 	.word	0x08002ce1
 80026a8:	08002ce1 	.word	0x08002ce1
 80026ac:	08002ce1 	.word	0x08002ce1
 80026b0:	08002ce1 	.word	0x08002ce1
 80026b4:	08002ce1 	.word	0x08002ce1
 80026b8:	08002ce1 	.word	0x08002ce1
 80026bc:	08002ce1 	.word	0x08002ce1
 80026c0:	08002ce1 	.word	0x08002ce1
 80026c4:	08002ce1 	.word	0x08002ce1
 80026c8:	08002ce1 	.word	0x08002ce1
 80026cc:	08002ce1 	.word	0x08002ce1
 80026d0:	08002ce1 	.word	0x08002ce1
 80026d4:	08002ce1 	.word	0x08002ce1
 80026d8:	08002ce1 	.word	0x08002ce1
 80026dc:	08002a7d 	.word	0x08002a7d
 80026e0:	08002a2d 	.word	0x08002a2d
 80026e4:	08002a7d 	.word	0x08002a7d
 80026e8:	08002ce1 	.word	0x08002ce1
 80026ec:	08002ce1 	.word	0x08002ce1
 80026f0:	08002ce1 	.word	0x08002ce1
 80026f4:	08002ce1 	.word	0x08002ce1
 80026f8:	08002ce1 	.word	0x08002ce1
 80026fc:	08002ce1 	.word	0x08002ce1
 8002700:	08002ce1 	.word	0x08002ce1
 8002704:	08002ce1 	.word	0x08002ce1
 8002708:	08002ce1 	.word	0x08002ce1
 800270c:	08002ce1 	.word	0x08002ce1
 8002710:	08002ce1 	.word	0x08002ce1
 8002714:	08002ce1 	.word	0x08002ce1
 8002718:	08002ce1 	.word	0x08002ce1
 800271c:	08002ce1 	.word	0x08002ce1
 8002720:	08002ce1 	.word	0x08002ce1
 8002724:	08002ce1 	.word	0x08002ce1
 8002728:	08002777 	.word	0x08002777
 800272c:	08002ce1 	.word	0x08002ce1
 8002730:	08002ce1 	.word	0x08002ce1
 8002734:	08002ce1 	.word	0x08002ce1
 8002738:	08002ce1 	.word	0x08002ce1
 800273c:	08002ce1 	.word	0x08002ce1
 8002740:	08002ce1 	.word	0x08002ce1
 8002744:	08002ce1 	.word	0x08002ce1
 8002748:	08002ce1 	.word	0x08002ce1
 800274c:	08002ce1 	.word	0x08002ce1
 8002750:	08002777 	.word	0x08002777
 8002754:	08002aed 	.word	0x08002aed
 8002758:	08002777 	.word	0x08002777
 800275c:	08002a7d 	.word	0x08002a7d
 8002760:	08002a2d 	.word	0x08002a2d
 8002764:	08002a7d 	.word	0x08002a7d
 8002768:	2b78      	cmp	r3, #120	; 0x78
 800276a:	f300 82b9 	bgt.w	8002ce0 <_vsnprintf+0x9a0>
 800276e:	2b69      	cmp	r3, #105	; 0x69
 8002770:	f6bf af48 	bge.w	8002604 <_vsnprintf+0x2c4>
 8002774:	e2b4      	b.n	8002ce0 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b78      	cmp	r3, #120	; 0x78
 800277c:	d003      	beq.n	8002786 <_vsnprintf+0x446>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b58      	cmp	r3, #88	; 0x58
 8002784:	d102      	bne.n	800278c <_vsnprintf+0x44c>
          base = 16U;
 8002786:	2310      	movs	r3, #16
 8002788:	64bb      	str	r3, [r7, #72]	; 0x48
 800278a:	e013      	b.n	80027b4 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b6f      	cmp	r3, #111	; 0x6f
 8002792:	d102      	bne.n	800279a <_vsnprintf+0x45a>
          base =  8U;
 8002794:	2308      	movs	r3, #8
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
 8002798:	e00c      	b.n	80027b4 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b62      	cmp	r3, #98	; 0x62
 80027a0:	d102      	bne.n	80027a8 <_vsnprintf+0x468>
          base =  2U;
 80027a2:	2302      	movs	r3, #2
 80027a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a6:	e005      	b.n	80027b4 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80027a8:	230a      	movs	r3, #10
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80027ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ae:	f023 0310 	bic.w	r3, r3, #16
 80027b2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b58      	cmp	r3, #88	; 0x58
 80027ba:	d103      	bne.n	80027c4 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80027bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027be:	f043 0320 	orr.w	r3, r3, #32
 80027c2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b69      	cmp	r3, #105	; 0x69
 80027ca:	d007      	beq.n	80027dc <_vsnprintf+0x49c>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d003      	beq.n	80027dc <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80027d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d6:	f023 030c 	bic.w	r3, r3, #12
 80027da:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80027dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80027e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b69      	cmp	r3, #105	; 0x69
 80027f4:	d004      	beq.n	8002800 <_vsnprintf+0x4c0>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	f040 8098 	bne.w	8002930 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	2b00      	cmp	r3, #0
 8002808:	d031      	beq.n	800286e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800280a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800280e:	3307      	adds	r3, #7
 8002810:	f023 0307 	bic.w	r3, r3, #7
 8002814:	f103 0208 	add.w	r2, r3, #8
 8002818:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da06      	bge.n	800283a <_vsnprintf+0x4fa>
 800282c:	2100      	movs	r1, #0
 800282e:	f1d2 0800 	rsbs	r8, r2, #0
 8002832:	eb61 0903 	sbc.w	r9, r1, r3
 8002836:	4642      	mov	r2, r8
 8002838:	464b      	mov	r3, r9
 800283a:	69f9      	ldr	r1, [r7, #28]
 800283c:	0fc9      	lsrs	r1, r1, #31
 800283e:	b2c9      	uxtb	r1, r1
 8002840:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002842:	2400      	movs	r4, #0
 8002844:	4682      	mov	sl, r0
 8002846:	46a3      	mov	fp, r4
 8002848:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800284a:	9008      	str	r0, [sp, #32]
 800284c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800284e:	9007      	str	r0, [sp, #28]
 8002850:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002852:	9006      	str	r0, [sp, #24]
 8002854:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002858:	9102      	str	r1, [sp, #8]
 800285a:	e9cd 2300 	strd	r2, r3, [sp]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002862:	6939      	ldr	r1, [r7, #16]
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f7ff f81b 	bl	80018a0 <_ntoa_long_long>
 800286a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800286c:	e0da      	b.n	8002a24 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800286e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8002878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800287c:	1d1a      	adds	r2, r3, #4
 800287e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	bfb8      	it	lt
 800288c:	425b      	neglt	r3, r3
 800288e:	4619      	mov	r1, r3
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	0fdb      	lsrs	r3, r3, #31
 8002894:	b2db      	uxtb	r3, r3
 8002896:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002898:	9205      	str	r2, [sp, #20]
 800289a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800289c:	9204      	str	r2, [sp, #16]
 800289e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028a0:	9203      	str	r2, [sp, #12]
 80028a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028a4:	9202      	str	r2, [sp, #8]
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	9100      	str	r1, [sp, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ae:	6939      	ldr	r1, [r7, #16]
 80028b0:	6978      	ldr	r0, [r7, #20]
 80028b2:	f7fe ff8f 	bl	80017d4 <_ntoa_long>
 80028b6:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80028b8:	e0b4      	b.n	8002a24 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80028ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <_vsnprintf+0x594>
 80028c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e012      	b.n	80028fa <_vsnprintf+0x5ba>
 80028d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <_vsnprintf+0x5ae>
 80028de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028e2:	1d1a      	adds	r2, r3, #4
 80028e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	e005      	b.n	80028fa <_vsnprintf+0x5ba>
 80028ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028f2:	1d1a      	adds	r2, r3, #4
 80028f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bfb8      	it	lt
 8002902:	425b      	neglt	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	0fdb      	lsrs	r3, r3, #31
 800290a:	b2db      	uxtb	r3, r3
 800290c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800290e:	9205      	str	r2, [sp, #20]
 8002910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002912:	9204      	str	r2, [sp, #16]
 8002914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002916:	9203      	str	r2, [sp, #12]
 8002918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800291a:	9202      	str	r2, [sp, #8]
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	9100      	str	r1, [sp, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002924:	6939      	ldr	r1, [r7, #16]
 8002926:	6978      	ldr	r0, [r7, #20]
 8002928:	f7fe ff54 	bl	80017d4 <_ntoa_long>
 800292c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800292e:	e079      	b.n	8002a24 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002936:	2b00      	cmp	r3, #0
 8002938:	d022      	beq.n	8002980 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800293a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800293e:	3307      	adds	r3, #7
 8002940:	f023 0307 	bic.w	r3, r3, #7
 8002944:	f103 0208 	add.w	r2, r3, #8
 8002948:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002952:	2000      	movs	r0, #0
 8002954:	460d      	mov	r5, r1
 8002956:	4606      	mov	r6, r0
 8002958:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800295a:	9108      	str	r1, [sp, #32]
 800295c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800295e:	9107      	str	r1, [sp, #28]
 8002960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002962:	9106      	str	r1, [sp, #24]
 8002964:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002968:	2100      	movs	r1, #0
 800296a:	9102      	str	r1, [sp, #8]
 800296c:	e9cd 2300 	strd	r2, r3, [sp]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002974:	6939      	ldr	r1, [r7, #16]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7fe ff92 	bl	80018a0 <_ntoa_long_long>
 800297c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800297e:	e051      	b.n	8002a24 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d018      	beq.n	80029bc <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800298a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002998:	9205      	str	r2, [sp, #20]
 800299a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800299c:	9204      	str	r2, [sp, #16]
 800299e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029a0:	9203      	str	r2, [sp, #12]
 80029a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029a4:	9202      	str	r2, [sp, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	9201      	str	r2, [sp, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029b0:	6939      	ldr	r1, [r7, #16]
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7fe ff0e 	bl	80017d4 <_ntoa_long>
 80029b8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80029ba:	e033      	b.n	8002a24 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80029bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <_vsnprintf+0x696>
 80029c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029ca:	1d1a      	adds	r2, r3, #4
 80029cc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	e012      	b.n	80029fc <_vsnprintf+0x6bc>
 80029d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <_vsnprintf+0x6b0>
 80029e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029e4:	1d1a      	adds	r2, r3, #4
 80029e6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	e005      	b.n	80029fc <_vsnprintf+0x6bc>
 80029f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029f4:	1d1a      	adds	r2, r3, #4
 80029f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80029fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a00:	9305      	str	r3, [sp, #20]
 8002a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a04:	9304      	str	r3, [sp, #16]
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	9303      	str	r3, [sp, #12]
 8002a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a1a:	6939      	ldr	r1, [r7, #16]
 8002a1c:	6978      	ldr	r0, [r7, #20]
 8002a1e:	f7fe fed9 	bl	80017d4 <_ntoa_long>
 8002a22:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
        break;
 8002a2a:	e166      	b.n	8002cfa <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b46      	cmp	r3, #70	; 0x46
 8002a32:	d103      	bne.n	8002a3c <_vsnprintf+0x6fc>
 8002a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a36:	f043 0320 	orr.w	r3, r3, #32
 8002a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a40:	3307      	adds	r3, #7
 8002a42:	f023 0307 	bic.w	r3, r3, #7
 8002a46:	f103 0208 	add.w	r2, r3, #8
 8002a4a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a4e:	ed93 7b00 	vldr	d7, [r3]
 8002a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a62:	eef0 0a67 	vmov.f32	s1, s15
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a6a:	6939      	ldr	r1, [r7, #16]
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f7fe ff87 	bl	8001980 <_ftoa>
 8002a72:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3301      	adds	r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
        break;
 8002a7a:	e13e      	b.n	8002cfa <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b67      	cmp	r3, #103	; 0x67
 8002a82:	d003      	beq.n	8002a8c <_vsnprintf+0x74c>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b47      	cmp	r3, #71	; 0x47
 8002a8a:	d103      	bne.n	8002a94 <_vsnprintf+0x754>
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a92:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b45      	cmp	r3, #69	; 0x45
 8002a9a:	d003      	beq.n	8002aa4 <_vsnprintf+0x764>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b47      	cmp	r3, #71	; 0x47
 8002aa2:	d103      	bne.n	8002aac <_vsnprintf+0x76c>
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa6:	f043 0320 	orr.w	r3, r3, #32
 8002aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	f023 0307 	bic.w	r3, r3, #7
 8002ab6:	f103 0208 	add.w	r2, r3, #8
 8002aba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002abe:	ed93 7b00 	vldr	d7, [r3]
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	eeb0 0a47 	vmov.f32	s0, s14
 8002ad2:	eef0 0a67 	vmov.f32	s1, s15
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ada:	6939      	ldr	r1, [r7, #16]
 8002adc:	6978      	ldr	r0, [r7, #20]
 8002ade:	f7ff f9a7 	bl	8001e30 <_etoa>
 8002ae2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]
        break;
 8002aea:	e106      	b.n	8002cfa <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002aec:	2301      	movs	r3, #1
 8002aee:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10e      	bne.n	8002b18 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8002afa:	e007      	b.n	8002b0c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8002afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002afe:	1c53      	adds	r3, r2, #1
 8002b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b02:	697c      	ldr	r4, [r7, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6939      	ldr	r1, [r7, #16]
 8002b08:	2020      	movs	r0, #32
 8002b0a:	47a0      	blx	r4
          while (l++ < width) {
 8002b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	647a      	str	r2, [r7, #68]	; 0x44
 8002b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d8f1      	bhi.n	8002afc <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b1c:	1d1a      	adds	r2, r3, #4
 8002b1e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b2d8      	uxtb	r0, r3
 8002b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b28:	1c53      	adds	r3, r2, #1
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	697c      	ldr	r4, [r7, #20]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6939      	ldr	r1, [r7, #16]
 8002b32:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <_vsnprintf+0x81c>
          while (l++ < width) {
 8002b3e:	e007      	b.n	8002b50 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8002b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b42:	1c53      	adds	r3, r2, #1
 8002b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b46:	697c      	ldr	r4, [r7, #20]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6939      	ldr	r1, [r7, #16]
 8002b4c:	2020      	movs	r0, #32
 8002b4e:	47a0      	blx	r4
          while (l++ < width) {
 8002b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	647a      	str	r2, [r7, #68]	; 0x44
 8002b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f1      	bhi.n	8002b40 <_vsnprintf+0x800>
          }
        }
        format++;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
        break;
 8002b62:	e0ca      	b.n	8002cfa <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b68:	1d1a      	adds	r2, r3, #4
 8002b6a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <_vsnprintf+0x83c>
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	e001      	b.n	8002b80 <_vsnprintf+0x840>
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	4619      	mov	r1, r3
 8002b82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b84:	f7fe fca2 	bl	80014cc <_strnlen_s>
 8002b88:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8002b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bf28      	it	cs
 8002b9c:	4613      	movcs	r3, r2
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8002ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11a      	bne.n	8002be0 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8002baa:	e007      	b.n	8002bbc <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8002bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bae:	1c53      	adds	r3, r2, #1
 8002bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb2:	697c      	ldr	r4, [r7, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6939      	ldr	r1, [r7, #16]
 8002bb8:	2020      	movs	r0, #32
 8002bba:	47a0      	blx	r4
          while (l++ < width) {
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8f1      	bhi.n	8002bac <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002bc8:	e00a      	b.n	8002be0 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8002bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	643a      	str	r2, [r7, #64]	; 0x40
 8002bd0:	7818      	ldrb	r0, [r3, #0]
 8002bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd4:	1c53      	adds	r3, r2, #1
 8002bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd8:	697c      	ldr	r4, [r7, #20]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6939      	ldr	r1, [r7, #16]
 8002bde:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <_vsnprintf+0x8bc>
 8002be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0eb      	beq.n	8002bca <_vsnprintf+0x88a>
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	657a      	str	r2, [r7, #84]	; 0x54
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e6      	bne.n	8002bca <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00e      	beq.n	8002c24 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8002c06:	e007      	b.n	8002c18 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8002c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c0a:	1c53      	adds	r3, r2, #1
 8002c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c0e:	697c      	ldr	r4, [r7, #20]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6939      	ldr	r1, [r7, #16]
 8002c14:	2020      	movs	r0, #32
 8002c16:	47a0      	blx	r4
          while (l++ < width) {
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f1      	bhi.n	8002c08 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
        break;
 8002c2a:	e066      	b.n	8002cfa <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c32:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002c36:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8002c3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d023      	beq.n	8002c8e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c4a:	1d1a      	adds	r2, r3, #4
 8002c4c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	2300      	movs	r3, #0
 8002c56:	603a      	str	r2, [r7, #0]
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	9308      	str	r3, [sp, #32]
 8002c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c60:	9307      	str	r3, [sp, #28]
 8002c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c64:	9306      	str	r3, [sp, #24]
 8002c66:	f04f 0210 	mov.w	r2, #16
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9302      	str	r3, [sp, #8]
 8002c76:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c7a:	e9cd 3400 	strd	r3, r4, [sp]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c82:	6939      	ldr	r1, [r7, #16]
 8002c84:	6978      	ldr	r0, [r7, #20]
 8002c86:	f7fe fe0b 	bl	80018a0 <_ntoa_long_long>
 8002c8a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002c8c:	e018      	b.n	8002cc0 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c92:	1d1a      	adds	r2, r3, #4
 8002c94:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9e:	9305      	str	r3, [sp, #20]
 8002ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca2:	9304      	str	r3, [sp, #16]
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca6:	9303      	str	r3, [sp, #12]
 8002ca8:	2310      	movs	r3, #16
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	9200      	str	r2, [sp, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cb6:	6939      	ldr	r1, [r7, #16]
 8002cb8:	6978      	ldr	r0, [r7, #20]
 8002cba:	f7fe fd8b 	bl	80017d4 <_ntoa_long>
 8002cbe:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]
        break;
 8002cc6:	e018      	b.n	8002cfa <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cca:	1c53      	adds	r3, r2, #1
 8002ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cce:	697c      	ldr	r4, [r7, #20]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6939      	ldr	r1, [r7, #16]
 8002cd4:	2025      	movs	r0, #37	; 0x25
 8002cd6:	47a0      	blx	r4
        format++;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
        break;
 8002cde:	e00c      	b.n	8002cfa <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	7818      	ldrb	r0, [r3, #0]
 8002ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce6:	1c53      	adds	r3, r2, #1
 8002ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cea:	697c      	ldr	r4, [r7, #20]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6939      	ldr	r1, [r7, #16]
 8002cf0:	47a0      	blx	r4
        format++;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
        break;
 8002cf8:	bf00      	nop
  while (*format)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f47f ab30 	bne.w	8002364 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <_vsnprintf+0x9d2>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	e000      	b.n	8002d14 <_vsnprintf+0x9d4>
 8002d12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d14:	697c      	ldr	r4, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6939      	ldr	r1, [r7, #16]
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3764      	adds	r7, #100	; 0x64
 8002d24:	46bd      	mov	sp, r7
 8002d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2a:	bf00      	nop

08002d2c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002d2c:	b40f      	push	{r0, r1, r2, r3}
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002d3a:	1d39      	adds	r1, r7, #4
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f04f 32ff 	mov.w	r2, #4294967295
 8002d46:	4806      	ldr	r0, [pc, #24]	; (8002d60 <printf_+0x34>)
 8002d48:	f7ff fafa 	bl	8002340 <_vsnprintf>
 8002d4c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d5a:	b004      	add	sp, #16
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	080014a7 	.word	0x080014a7

08002d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_MspInit+0x50>)
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_MspInit+0x50>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6613      	str	r3, [r2, #96]	; 0x60
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_MspInit+0x50>)
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_MspInit+0x50>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <HAL_MspInit+0x50>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_MspInit+0x50>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	210f      	movs	r1, #15
 8002d9e:	f06f 0001 	mvn.w	r0, #1
 8002da2:	f002 facf 	bl	8005344 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002da6:	f002 fd71 	bl	800588c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	; 0x30
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <HAL_InitTick+0xc4>)
 8002dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dcc:	4a2b      	ldr	r2, [pc, #172]	; (8002e7c <HAL_InitTick+0xc4>)
 8002dce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8002dd4:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <HAL_InitTick+0xc4>)
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002de0:	f107 020c 	add.w	r2, r7, #12
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fa46 	bl	800627c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002df0:	f003 fa2e 	bl	8006250 <HAL_RCC_GetPCLK2Freq>
 8002df4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <HAL_InitTick+0xc8>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0c9b      	lsrs	r3, r3, #18
 8002e00:	3b01      	subs	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002e04:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_InitTick+0xcc>)
 8002e06:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <HAL_InitTick+0xd0>)
 8002e08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_InitTick+0xcc>)
 8002e0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_InitTick+0xcc>)
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_InitTick+0xcc>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_InitTick+0xcc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002e24:	4817      	ldr	r0, [pc, #92]	; (8002e84 <HAL_InitTick+0xcc>)
 8002e26:	f003 fcdd 	bl	80067e4 <HAL_TIM_Base_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11b      	bne.n	8002e70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002e38:	4812      	ldr	r0, [pc, #72]	; (8002e84 <HAL_InitTick+0xcc>)
 8002e3a:	f003 fd35 	bl	80068a8 <HAL_TIM_Base_Start_IT>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002e44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002e4c:	2019      	movs	r0, #25
 8002e4e:	f002 fa93 	bl	8005378 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b0f      	cmp	r3, #15
 8002e56:	d808      	bhi.n	8002e6a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	2019      	movs	r0, #25
 8002e5e:	f002 fa71 	bl	8005344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <HAL_InitTick+0xd4>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e002      	b.n	8002e70 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3730      	adds	r7, #48	; 0x30
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	431bde83 	.word	0x431bde83
 8002e84:	2000010c 	.word	0x2000010c
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	20000004 	.word	0x20000004

08002e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e94:	e7fe      	b.n	8002e94 <NMI_Handler+0x4>

08002e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <HardFault_Handler+0x4>

08002e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <MemManage_Handler+0x4>

08002ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <BusFault_Handler+0x4>

08002ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eac:	e7fe      	b.n	8002eac <UsageFault_Handler+0x4>

08002eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <ADC1_2_IRQHandler+0x10>)
 8002ec2:	f001 f811 	bl	8003ee8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000007c 	.word	0x2000007c

08002ed0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002ed6:	f003 fd57 	bl	8006988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	2000010c 	.word	0x2000010c

08002ee4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ee8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002eec:	f002 fc06 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <SystemInit+0x20>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <SystemInit+0x20>)
 8002f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart5;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <MX_LPUART1_UART_Init+0x90>)
 8002f20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f28:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002f5a:	4812      	ldr	r0, [pc, #72]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f5c:	f003 ff7c 	bl	8006e58 <HAL_UART_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f66:	f7fe fa8b 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f6e:	f004 fda5 	bl	8007abc <HAL_UARTEx_SetTxFifoThreshold>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002f78:	f7fe fa82 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4809      	ldr	r0, [pc, #36]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f80:	f004 fdda 	bl	8007b38 <HAL_UARTEx_SetRxFifoThreshold>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002f8a:	f7fe fa79 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <MX_LPUART1_UART_Init+0x8c>)
 8002f90:	f004 fd5b 	bl	8007a4a <HAL_UARTEx_DisableFifoMode>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002f9a:	f7fe fa71 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000158 	.word	0x20000158
 8002fa8:	40008000 	.word	0x40008000

08002fac <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <MX_UART5_Init+0x90>)
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <MX_UART5_Init+0x94>)
 8002fb4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <MX_UART5_Init+0x90>)
 8002fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fbc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <MX_UART5_Init+0x90>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <MX_UART5_Init+0x90>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <MX_UART5_Init+0x90>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <MX_UART5_Init+0x90>)
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <MX_UART5_Init+0x90>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <MX_UART5_Init+0x90>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <MX_UART5_Init+0x90>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <MX_UART5_Init+0x90>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <MX_UART5_Init+0x90>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ff4:	4811      	ldr	r0, [pc, #68]	; (800303c <MX_UART5_Init+0x90>)
 8002ff6:	f003 ff2f 	bl	8006e58 <HAL_UART_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003000:	f7fe fa3e 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003004:	2100      	movs	r1, #0
 8003006:	480d      	ldr	r0, [pc, #52]	; (800303c <MX_UART5_Init+0x90>)
 8003008:	f004 fd58 	bl	8007abc <HAL_UARTEx_SetTxFifoThreshold>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003012:	f7fe fa35 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003016:	2100      	movs	r1, #0
 8003018:	4808      	ldr	r0, [pc, #32]	; (800303c <MX_UART5_Init+0x90>)
 800301a:	f004 fd8d 	bl	8007b38 <HAL_UARTEx_SetRxFifoThreshold>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003024:	f7fe fa2c 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <MX_UART5_Init+0x90>)
 800302a:	f004 fd0e 	bl	8007a4a <HAL_UARTEx_DisableFifoMode>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003034:	f7fe fa24 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200001ec 	.word	0x200001ec
 8003040:	40005000 	.word	0x40005000

08003044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b0a0      	sub	sp, #128	; 0x80
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	2250      	movs	r2, #80	; 0x50
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f008 fa21 	bl	800b4ac <memset>
  if(uartHandle->Instance==LPUART1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a4b      	ldr	r2, [pc, #300]	; (800319c <HAL_UART_MspInit+0x158>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d137      	bne.n	80030e4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003074:	2320      	movs	r3, #32
 8003076:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003078:	2300      	movs	r3, #0
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4618      	mov	r0, r3
 8003082:	f003 f973 	bl	800636c <HAL_RCCEx_PeriphCLKConfig>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800308c:	f7fe f9f8 	bl	8001480 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003090:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	4a42      	ldr	r2, [pc, #264]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800309c:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	4a3c      	ldr	r2, [pc, #240]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b4:	4b3a      	ldr	r3, [pc, #232]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 80030b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80030c0:	230c      	movs	r3, #12
 80030c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030cc:	2300      	movs	r3, #0
 80030ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80030d0:	230c      	movs	r3, #12
 80030d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030d8:	4619      	mov	r1, r3
 80030da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030de:	f002 f959 	bl	8005394 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80030e2:	e057      	b.n	8003194 <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==UART5)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <HAL_UART_MspInit+0x160>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d152      	bne.n	8003194 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80030ee:	2310      	movs	r3, #16
 80030f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80030f2:	2300      	movs	r3, #0
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030f6:	f107 031c 	add.w	r3, r7, #28
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 f936 	bl	800636c <HAL_RCCEx_PeriphCLKConfig>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003106:	f7fe f9bb 	bl	8001480 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4a24      	ldr	r2, [pc, #144]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003114:	6593      	str	r3, [r2, #88]	; 0x58
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_UART_MspInit+0x15c>)
 8003148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003156:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003160:	2300      	movs	r3, #0
 8003162:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003164:	2305      	movs	r3, #5
 8003166:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003168:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800316c:	4619      	mov	r1, r3
 800316e:	480e      	ldr	r0, [pc, #56]	; (80031a8 <HAL_UART_MspInit+0x164>)
 8003170:	f002 f910 	bl	8005394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003174:	2304      	movs	r3, #4
 8003176:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003184:	2305      	movs	r3, #5
 8003186:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003188:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800318c:	4619      	mov	r1, r3
 800318e:	4807      	ldr	r0, [pc, #28]	; (80031ac <HAL_UART_MspInit+0x168>)
 8003190:	f002 f900 	bl	8005394 <HAL_GPIO_Init>
}
 8003194:	bf00      	nop
 8003196:	3780      	adds	r7, #128	; 0x80
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40008000 	.word	0x40008000
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40005000 	.word	0x40005000
 80031a8:	48000800 	.word	0x48000800
 80031ac:	48000c00 	.word	0x48000c00

080031b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031b0:	480d      	ldr	r0, [pc, #52]	; (80031e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031b4:	f7ff fe9e 	bl	8002ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <LoopForever+0x6>)
  ldr r1, =_edata
 80031ba:	490d      	ldr	r1, [pc, #52]	; (80031f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <LoopForever+0xe>)
  movs r3, #0
 80031be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031c0:	e002      	b.n	80031c8 <LoopCopyDataInit>

080031c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c6:	3304      	adds	r3, #4

080031c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031cc:	d3f9      	bcc.n	80031c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d0:	4c0a      	ldr	r4, [pc, #40]	; (80031fc <LoopForever+0x16>)
  movs r3, #0
 80031d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d4:	e001      	b.n	80031da <LoopFillZerobss>

080031d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d8:	3204      	adds	r2, #4

080031da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031dc:	d3fb      	bcc.n	80031d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031de:	f008 f9c3 	bl	800b568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031e2:	f7fe f8db 	bl	800139c <main>

080031e6 <LoopForever>:

LoopForever:
    b LoopForever
 80031e6:	e7fe      	b.n	80031e6 <LoopForever>
  ldr   r0, =_estack
 80031e8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80031ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80031f4:	0800b8f8 	.word	0x0800b8f8
  ldr r2, =_sbss
 80031f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80031fc:	20002ad8 	.word	0x20002ad8

08003200 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003200:	e7fe      	b.n	8003200 <ADC3_IRQHandler>

08003202 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800320c:	2003      	movs	r0, #3
 800320e:	f002 f88e 	bl	800532e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003212:	200f      	movs	r0, #15
 8003214:	f7ff fdd0 	bl	8002db8 <HAL_InitTick>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	71fb      	strb	r3, [r7, #7]
 8003222:	e001      	b.n	8003228 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003224:	f7ff fd9e 	bl	8002d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003228:	79fb      	ldrb	r3, [r7, #7]

}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_IncTick+0x1c>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_IncTick+0x20>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4413      	add	r3, r2
 8003242:	4a03      	ldr	r2, [pc, #12]	; (8003250 <HAL_IncTick+0x1c>)
 8003244:	6013      	str	r3, [r2, #0]
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	20000280 	.word	0x20000280
 8003254:	20000008 	.word	0x20000008

08003258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTick;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_GetTick+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000280 	.word	0x20000280

08003270 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3360      	adds	r3, #96	; 0x60
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <LL_ADC_SetOffset+0x44>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	4313      	orrs	r3, r2
 8003308:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	03fff000 	.word	0x03fff000

08003320 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3360      	adds	r3, #96	; 0x60
 800332e:	461a      	mov	r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3360      	adds	r3, #96	; 0x60
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	431a      	orrs	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003382:	b480      	push	{r7}
 8003384:	b087      	sub	sp, #28
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3360      	adds	r3, #96	; 0x60
 8003392:	461a      	mov	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80033ac:	bf00      	nop
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3360      	adds	r3, #96	; 0x60
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	431a      	orrs	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	615a      	str	r2, [r3, #20]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800343a:	b480      	push	{r7}
 800343c:	b087      	sub	sp, #28
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3330      	adds	r3, #48	; 0x30
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	4413      	add	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	211f      	movs	r1, #31
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	401a      	ands	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	f003 011f 	and.w	r1, r3, #31
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	431a      	orrs	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3314      	adds	r3, #20
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	0e5b      	lsrs	r3, r3, #25
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	4413      	add	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	0d1b      	lsrs	r3, r3, #20
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2107      	movs	r1, #7
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	401a      	ands	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	0d1b      	lsrs	r3, r3, #20
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	431a      	orrs	r2, r3
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003528:	43db      	mvns	r3, r3
 800352a:	401a      	ands	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f003 0318 	and.w	r3, r3, #24
 8003532:	4908      	ldr	r1, [pc, #32]	; (8003554 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003534:	40d9      	lsrs	r1, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	400b      	ands	r3, r1
 800353a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353e:	431a      	orrs	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	0007ffff 	.word	0x0007ffff

08003558 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 031f 	and.w	r3, r3, #31
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80035a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6093      	str	r3, [r2, #8]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c8:	d101      	bne.n	80035ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003618:	d101      	bne.n	800361e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800363c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003668:	f043 0202 	orr.w	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <LL_ADC_IsEnabled+0x18>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <LL_ADC_IsEnabled+0x1a>
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d101      	bne.n	80036ba <LL_ADC_IsDisableOngoing+0x18>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <LL_ADC_IsDisableOngoing+0x1a>
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036dc:	f043 0204 	orr.w	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003704:	f043 0210 	orr.w	r2, r3, #16
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d101      	bne.n	8003730 <LL_ADC_REG_IsConversionOngoing+0x18>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800374e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b08      	cmp	r3, #8
 8003778:	d101      	bne.n	800377e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e19b      	b.n	8003ade <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7fd fbc7 	bl	8000f48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fef1 	bl	80035b4 <LL_ADC_IsDeepPowerDownEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fed7 	bl	8003590 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff0c 	bl	8003604 <LL_ADC_IsInternalRegulatorEnabled>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d115      	bne.n	800381e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fef0 	bl	80035dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037fc:	4b97      	ldr	r3, [pc, #604]	; (8003a5c <HAL_ADC_Init+0x2d0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	4a97      	ldr	r2, [pc, #604]	; (8003a60 <HAL_ADC_Init+0x2d4>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003810:	e002      	b.n	8003818 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3b01      	subs	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f9      	bne.n	8003812 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff feee 	bl	8003604 <LL_ADC_IsInternalRegulatorEnabled>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	f043 0210 	orr.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff62 	bl	8003718 <LL_ADC_REG_IsConversionOngoing>
 8003854:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 8134 	bne.w	8003acc <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f040 8130 	bne.w	8003acc <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003874:	f043 0202 	orr.w	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fefb 	bl	800367c <LL_ADC_IsEnabled>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d137      	bne.n	80038fc <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003894:	d004      	beq.n	80038a0 <HAL_ADC_Init+0x114>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a72      	ldr	r2, [pc, #456]	; (8003a64 <HAL_ADC_Init+0x2d8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10f      	bne.n	80038c0 <HAL_ADC_Init+0x134>
 80038a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80038a4:	f7ff feea 	bl	800367c <LL_ADC_IsEnabled>
 80038a8:	4604      	mov	r4, r0
 80038aa:	486e      	ldr	r0, [pc, #440]	; (8003a64 <HAL_ADC_Init+0x2d8>)
 80038ac:	f7ff fee6 	bl	800367c <LL_ADC_IsEnabled>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4323      	orrs	r3, r4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e008      	b.n	80038d2 <HAL_ADC_Init+0x146>
 80038c0:	4869      	ldr	r0, [pc, #420]	; (8003a68 <HAL_ADC_Init+0x2dc>)
 80038c2:	f7ff fedb 	bl	800367c <LL_ADC_IsEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d012      	beq.n	80038fc <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038de:	d004      	beq.n	80038ea <HAL_ADC_Init+0x15e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5f      	ldr	r2, [pc, #380]	; (8003a64 <HAL_ADC_Init+0x2d8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_ADC_Init+0x162>
 80038ea:	4a60      	ldr	r2, [pc, #384]	; (8003a6c <HAL_ADC_Init+0x2e0>)
 80038ec:	e000      	b.n	80038f0 <HAL_ADC_Init+0x164>
 80038ee:	4a60      	ldr	r2, [pc, #384]	; (8003a70 <HAL_ADC_Init+0x2e4>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f7ff fcba 	bl	8003270 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7f5b      	ldrb	r3, [r3, #29]
 8003900:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003906:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800390c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003912:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800391a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003926:	2b01      	cmp	r3, #1
 8003928:	d106      	bne.n	8003938 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	045b      	lsls	r3, r3, #17
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	4b46      	ldr	r3, [pc, #280]	; (8003a74 <HAL_ADC_Init+0x2e8>)
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	69b9      	ldr	r1, [r7, #24]
 8003964:	430b      	orrs	r3, r1
 8003966:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff feef 	bl	8003766 <LL_ADC_INJ_IsConversionOngoing>
 8003988:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d17b      	bne.n	8003a88 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d178      	bne.n	8003a88 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800399a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b2:	f023 0302 	bic.w	r3, r3, #2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	430b      	orrs	r3, r1
 80039be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80039d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6911      	ldr	r1, [r2, #16]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80039f6:	e013      	b.n	8003a20 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d126      	bne.n	8003a78 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a40:	4311      	orrs	r1, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	611a      	str	r2, [r3, #16]
 8003a5a:	e015      	b.n	8003a88 <HAL_ADC_Init+0x2fc>
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	053e2d63 	.word	0x053e2d63
 8003a64:	50000100 	.word	0x50000100
 8003a68:	50000400 	.word	0x50000400
 8003a6c:	50000300 	.word	0x50000300
 8003a70:	50000700 	.word	0x50000700
 8003a74:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10c      	bne.n	8003aaa <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f023 010f 	bic.w	r1, r3, #15
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	1e5a      	subs	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa8:	e007      	b.n	8003aba <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 020f 	bic.w	r2, r2, #15
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003aca:	e007      	b.n	8003adc <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	f043 0210 	orr.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd90      	pop	{r4, r7, pc}
 8003ae6:	bf00      	nop

08003ae8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af8:	d004      	beq.n	8003b04 <HAL_ADC_Start+0x1c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5c      	ldr	r2, [pc, #368]	; (8003c70 <HAL_ADC_Start+0x188>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_Start+0x20>
 8003b04:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_ADC_Start+0x18c>)
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_Start+0x22>
 8003b08:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <HAL_ADC_Start+0x190>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fd24 	bl	8003558 <LL_ADC_GetMultimode>
 8003b10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff fdfe 	bl	8003718 <LL_ADC_REG_IsConversionOngoing>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 809f 	bne.w	8003c62 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_Start+0x4a>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e09a      	b.n	8003c68 <HAL_ADC_Start+0x180>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f001 f914 	bl	8004d68 <ADC_Enable>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 8086 	bne.w	8003c58 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a42      	ldr	r2, [pc, #264]	; (8003c70 <HAL_ADC_Start+0x188>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d002      	beq.n	8003b70 <HAL_ADC_Start+0x88>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	e001      	b.n	8003b74 <HAL_ADC_Start+0x8c>
 8003b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d002      	beq.n	8003b82 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9a:	d106      	bne.n	8003baa <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba0:	f023 0206 	bic.w	r2, r3, #6
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	661a      	str	r2, [r3, #96]	; 0x60
 8003ba8:	e002      	b.n	8003bb0 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	221c      	movs	r2, #28
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	; (8003c70 <HAL_ADC_Start+0x188>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d002      	beq.n	8003bd0 <HAL_ADC_Start+0xe8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	e001      	b.n	8003bd4 <HAL_ADC_Start+0xec>
 8003bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d008      	beq.n	8003bee <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	d002      	beq.n	8003bee <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	d114      	bne.n	8003c18 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fd59 	bl	80036c8 <LL_ADC_REG_StartConversion>
 8003c16:	e026      	b.n	8003c66 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <HAL_ADC_Start+0x188>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d002      	beq.n	8003c34 <HAL_ADC_Start+0x14c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	e001      	b.n	8003c38 <HAL_ADC_Start+0x150>
 8003c34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c38:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00f      	beq.n	8003c66 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c56:	e006      	b.n	8003c66 <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003c60:	e001      	b.n	8003c66 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	50000100 	.word	0x50000100
 8003c74:	50000300 	.word	0x50000300
 8003c78:	50000700 	.word	0x50000700

08003c7c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_Stop+0x16>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e023      	b.n	8003cda <HAL_ADC_Stop+0x5e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003c9a:	2103      	movs	r1, #3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 ffa7 	bl	8004bf0 <ADC_ConversionStop>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d111      	bne.n	8003cd0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f001 f8f1 	bl	8004e94 <ADC_Disable>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf6:	d004      	beq.n	8003d02 <HAL_ADC_PollForConversion+0x1e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a70      	ldr	r2, [pc, #448]	; (8003ec0 <HAL_ADC_PollForConversion+0x1dc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_PollForConversion+0x22>
 8003d02:	4b70      	ldr	r3, [pc, #448]	; (8003ec4 <HAL_ADC_PollForConversion+0x1e0>)
 8003d04:	e000      	b.n	8003d08 <HAL_ADC_PollForConversion+0x24>
 8003d06:	4b70      	ldr	r3, [pc, #448]	; (8003ec8 <HAL_ADC_PollForConversion+0x1e4>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fc25 	bl	8003558 <LL_ADC_GetMultimode>
 8003d0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d102      	bne.n	8003d1e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003d18:	2308      	movs	r3, #8
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e037      	b.n	8003d8e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	d002      	beq.n	8003d30 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b09      	cmp	r3, #9
 8003d2e:	d111      	bne.n	8003d54 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0b3      	b.n	8003eb6 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d4e:	2304      	movs	r3, #4
 8003d50:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003d52:	e01c      	b.n	8003d8e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d5c:	d004      	beq.n	8003d68 <HAL_ADC_PollForConversion+0x84>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_ADC_PollForConversion+0x1dc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_PollForConversion+0x88>
 8003d68:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <HAL_ADC_PollForConversion+0x1e0>)
 8003d6a:	e000      	b.n	8003d6e <HAL_ADC_PollForConversion+0x8a>
 8003d6c:	4b56      	ldr	r3, [pc, #344]	; (8003ec8 <HAL_ADC_PollForConversion+0x1e4>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fc00 	bl	8003574 <LL_ADC_GetMultiDMATransfer>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e095      	b.n	8003eb6 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d8e:	f7ff fa63 	bl	8003258 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d94:	e021      	b.n	8003dda <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d01d      	beq.n	8003dda <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d9e:	f7ff fa5b 	bl	8003258 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <HAL_ADC_PollForConversion+0xd0>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d112      	bne.n	8003dda <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e06d      	b.n	8003eb6 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0d6      	beq.n	8003d96 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fb0b 	bl	8003414 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01c      	beq.n	8003e3e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7f5b      	ldrb	r3, [r3, #29]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d118      	bne.n	8003e3e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d111      	bne.n	8003e3e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <HAL_ADC_PollForConversion+0x1dc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d002      	beq.n	8003e4e <HAL_ADC_PollForConversion+0x16a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	e001      	b.n	8003e52 <HAL_ADC_PollForConversion+0x16e>
 8003e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d008      	beq.n	8003e6c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d002      	beq.n	8003e6c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b09      	cmp	r3, #9
 8003e6a:	d104      	bne.n	8003e76 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e00d      	b.n	8003e92 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <HAL_ADC_PollForConversion+0x1dc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d002      	beq.n	8003e86 <HAL_ADC_PollForConversion+0x1a2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	e001      	b.n	8003e8a <HAL_ADC_PollForConversion+0x1a6>
 8003e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d104      	bne.n	8003ea2 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e008      	b.n	8003eb4 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	220c      	movs	r2, #12
 8003eb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	50000100 	.word	0x50000100
 8003ec4:	50000300 	.word	0x50000300
 8003ec8:	50000700 	.word	0x50000700

08003ecc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f0c:	d004      	beq.n	8003f18 <HAL_ADC_IRQHandler+0x30>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a87      	ldr	r2, [pc, #540]	; (8004130 <HAL_ADC_IRQHandler+0x248>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_IRQHandler+0x34>
 8003f18:	4b86      	ldr	r3, [pc, #536]	; (8004134 <HAL_ADC_IRQHandler+0x24c>)
 8003f1a:	e000      	b.n	8003f1e <HAL_ADC_IRQHandler+0x36>
 8003f1c:	4b86      	ldr	r3, [pc, #536]	; (8004138 <HAL_ADC_IRQHandler+0x250>)
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fb1a 	bl	8003558 <LL_ADC_GetMultimode>
 8003f24:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d017      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x78>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d012      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f001 f84b 	bl	8004fee <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <HAL_ADC_IRQHandler+0x8c>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8085 	beq.w	800408a <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d07f      	beq.n	800408a <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fa34 	bl	8003414 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d064      	beq.n	800407c <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a5e      	ldr	r2, [pc, #376]	; (8004130 <HAL_ADC_IRQHandler+0x248>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d002      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0xda>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	e001      	b.n	8003fc6 <HAL_ADC_IRQHandler+0xde>
 8003fc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d008      	beq.n	8003fe0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d002      	beq.n	8003fe0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b09      	cmp	r3, #9
 8003fde:	d104      	bne.n	8003fea <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	e00d      	b.n	8004006 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a50      	ldr	r2, [pc, #320]	; (8004130 <HAL_ADC_IRQHandler+0x248>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d002      	beq.n	8003ffa <HAL_ADC_IRQHandler+0x112>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	e001      	b.n	8003ffe <HAL_ADC_IRQHandler+0x116>
 8003ffa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ffe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d135      	bne.n	800407c <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b08      	cmp	r3, #8
 800401c:	d12e      	bne.n	800407c <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fb78 	bl	8003718 <LL_ADC_REG_IsConversionOngoing>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11a      	bne.n	8004064 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 020c 	bic.w	r2, r2, #12
 800403c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d112      	bne.n	800407c <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	65da      	str	r2, [r3, #92]	; 0x5c
 8004062:	e00b      	b.n	800407c <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f043 0210 	orr.w	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f96d 	bl	800435c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	220c      	movs	r2, #12
 8004088:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <HAL_ADC_IRQHandler+0x1b6>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80a1 	beq.w	80041ec <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 809b 	beq.w	80041ec <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f9dd 	bl	8003492 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80040d8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff f998 	bl	8003414 <LL_ADC_REG_IsTriggerSourceSWStart>
 80040e4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a11      	ldr	r2, [pc, #68]	; (8004130 <HAL_ADC_IRQHandler+0x248>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d002      	beq.n	80040f6 <HAL_ADC_IRQHandler+0x20e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	e001      	b.n	80040fa <HAL_ADC_IRQHandler+0x212>
 80040f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	4293      	cmp	r3, r2
 8004100:	d008      	beq.n	8004114 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b06      	cmp	r3, #6
 800410c:	d002      	beq.n	8004114 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b07      	cmp	r3, #7
 8004112:	d104      	bne.n	800411e <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	e014      	b.n	8004148 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a03      	ldr	r2, [pc, #12]	; (8004130 <HAL_ADC_IRQHandler+0x248>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d009      	beq.n	800413c <HAL_ADC_IRQHandler+0x254>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	e008      	b.n	8004140 <HAL_ADC_IRQHandler+0x258>
 800412e:	bf00      	nop
 8004130:	50000100 	.word	0x50000100
 8004134:	50000300 	.word	0x50000300
 8004138:	50000700 	.word	0x50000700
 800413c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004140:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d047      	beq.n	80041de <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_ADC_IRQHandler+0x280>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d03f      	beq.n	80041de <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004164:	2b00      	cmp	r3, #0
 8004166:	d13a      	bne.n	80041de <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d133      	bne.n	80041de <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d12e      	bne.n	80041de <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff faee 	bl	8003766 <LL_ADC_INJ_IsConversionOngoing>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11a      	bne.n	80041c6 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800419e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d112      	bne.n	80041de <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041c4:	e00b      	b.n	80041de <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	f043 0210 	orr.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d6:	f043 0201 	orr.w	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fedd 	bl	8004f9e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2260      	movs	r2, #96	; 0x60
 80041ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <HAL_ADC_IRQHandler+0x332>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004204:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f8af 	bl	8004370 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <HAL_ADC_IRQHandler+0x362>
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fec3 	bl	8004fc6 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004250:	2b00      	cmp	r3, #0
 8004252:	d012      	beq.n	800427a <HAL_ADC_IRQHandler+0x392>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 feb5 	bl	8004fda <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004278:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d043      	beq.n	800430c <HAL_ADC_IRQHandler+0x424>
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	d03e      	beq.n	800430c <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8004296:	2301      	movs	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	e021      	b.n	80042e0 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d015      	beq.n	80042ce <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042aa:	d004      	beq.n	80042b6 <HAL_ADC_IRQHandler+0x3ce>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a27      	ldr	r2, [pc, #156]	; (8004350 <HAL_ADC_IRQHandler+0x468>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_IRQHandler+0x3d2>
 80042b6:	4b27      	ldr	r3, [pc, #156]	; (8004354 <HAL_ADC_IRQHandler+0x46c>)
 80042b8:	e000      	b.n	80042bc <HAL_ADC_IRQHandler+0x3d4>
 80042ba:	4b27      	ldr	r3, [pc, #156]	; (8004358 <HAL_ADC_IRQHandler+0x470>)
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f959 	bl	8003574 <LL_ADC_GetMultiDMATransfer>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80042c8:	2301      	movs	r3, #1
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
 80042cc:	e008      	b.n	80042e0 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80042dc:	2301      	movs	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10e      	bne.n	8004304 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f840 	bl	8004384 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2210      	movs	r2, #16
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	2b00      	cmp	r3, #0
 8004314:	d018      	beq.n	8004348 <HAL_ADC_IRQHandler+0x460>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004324:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004330:	f043 0208 	orr.w	r2, r3, #8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004340:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fe35 	bl	8004fb2 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004348:	bf00      	nop
 800434a:	3728      	adds	r7, #40	; 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	50000100 	.word	0x50000100
 8004354:	50000300 	.word	0x50000300
 8004358:	50000700 	.word	0x50000700

0800435c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b0b6      	sub	sp, #216	; 0xd8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d102      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x24>
 80043b6:	2302      	movs	r3, #2
 80043b8:	f000 bc04 	b.w	8004bc4 <HAL_ADC_ConfigChannel+0x82c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff f9a5 	bl	8003718 <LL_ADC_REG_IsConversionOngoing>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f040 83e8 	bne.w	8004ba6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6859      	ldr	r1, [r3, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f7ff f829 	bl	800343a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f993 	bl	8003718 <LL_ADC_REG_IsConversionOngoing>
 80043f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f9b3 	bl	8003766 <LL_ADC_INJ_IsConversionOngoing>
 8004400:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004404:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 81d9 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800440e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 81d4 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004420:	d10f      	bne.n	8004442 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	4619      	mov	r1, r3
 800442e:	f7ff f843 	bl	80034b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe ffd7 	bl	80033ee <LL_ADC_SetSamplingTimeCommonConfig>
 8004440:	e00e      	b.n	8004460 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6819      	ldr	r1, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	461a      	mov	r2, r3
 8004450:	f7ff f832 	bl	80034b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe ffc7 	bl	80033ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b04      	cmp	r3, #4
 8004480:	d022      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6919      	ldr	r1, [r3, #16]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004492:	f7fe ff21 	bl	80032d8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6919      	ldr	r1, [r3, #16]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7fe ff6d 	bl	8003382 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d102      	bne.n	80044be <HAL_ADC_ConfigChannel+0x126>
 80044b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044bc:	e000      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x128>
 80044be:	2300      	movs	r3, #0
 80044c0:	461a      	mov	r2, r3
 80044c2:	f7fe ff79 	bl	80033b8 <LL_ADC_SetOffsetSaturation>
 80044c6:	e17b      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe ff26 	bl	8003320 <LL_ADC_GetOffsetChannel>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x15c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe ff1b 	bl	8003320 <LL_ADC_GetOffsetChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	f003 021f 	and.w	r2, r3, #31
 80044f2:	e01e      	b.n	8004532 <HAL_ADC_ConfigChannel+0x19a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe ff10 	bl	8003320 <LL_ADC_GetOffsetChannel>
 8004500:	4603      	mov	r3, r0
 8004502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800451a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e004      	b.n	8004530 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453a:	2b00      	cmp	r3, #0
 800453c:	d105      	bne.n	800454a <HAL_ADC_ConfigChannel+0x1b2>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	0e9b      	lsrs	r3, r3, #26
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	e018      	b.n	800457c <HAL_ADC_ConfigChannel+0x1e4>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800455e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800456e:	2320      	movs	r3, #32
 8004570:	e004      	b.n	800457c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800457c:	429a      	cmp	r2, r3
 800457e:	d106      	bne.n	800458e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2200      	movs	r2, #0
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fedf 	bl	800334c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f7fe fec3 	bl	8003320 <LL_ADC_GetOffsetChannel>
 800459a:	4603      	mov	r3, r0
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x222>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe feb8 	bl	8003320 <LL_ADC_GetOffsetChannel>
 80045b0:	4603      	mov	r3, r0
 80045b2:	0e9b      	lsrs	r3, r3, #26
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	e01e      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x260>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2101      	movs	r1, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fead 	bl	8003320 <LL_ADC_GetOffsetChannel>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80045d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80045e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e004      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80045ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045f0:	fab3 f383 	clz	r3, r3
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x278>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	e018      	b.n	8004642 <HAL_ADC_ConfigChannel+0x2aa>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004624:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800462c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004634:	2320      	movs	r3, #32
 8004636:	e004      	b.n	8004642 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800463c:	fab3 f383 	clz	r3, r3
 8004640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004642:	429a      	cmp	r2, r3
 8004644:	d106      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	2101      	movs	r1, #1
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe fe7c 	bl	800334c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fe60 	bl	8003320 <LL_ADC_GetOffsetChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x2e8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2102      	movs	r1, #2
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe fe55 	bl	8003320 <LL_ADC_GetOffsetChannel>
 8004676:	4603      	mov	r3, r0
 8004678:	0e9b      	lsrs	r3, r3, #26
 800467a:	f003 021f 	and.w	r2, r3, #31
 800467e:	e01e      	b.n	80046be <HAL_ADC_ConfigChannel+0x326>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fe4a 	bl	8003320 <LL_ADC_GetOffsetChannel>
 800468c:	4603      	mov	r3, r0
 800468e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800469e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80046a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80046ae:	2320      	movs	r3, #32
 80046b0:	e004      	b.n	80046bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80046b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x33e>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	0e9b      	lsrs	r3, r3, #26
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	e016      	b.n	8004704 <HAL_ADC_ConfigChannel+0x36c>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80046e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80046ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80046f6:	2320      	movs	r3, #32
 80046f8:	e004      	b.n	8004704 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80046fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004704:	429a      	cmp	r2, r3
 8004706:	d106      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe fe1b 	bl	800334c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2103      	movs	r1, #3
 800471c:	4618      	mov	r0, r3
 800471e:	f7fe fdff 	bl	8003320 <LL_ADC_GetOffsetChannel>
 8004722:	4603      	mov	r3, r0
 8004724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x3aa>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2103      	movs	r1, #3
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fdf4 	bl	8003320 <LL_ADC_GetOffsetChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	0e9b      	lsrs	r3, r3, #26
 800473c:	f003 021f 	and.w	r2, r3, #31
 8004740:	e017      	b.n	8004772 <HAL_ADC_ConfigChannel+0x3da>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2103      	movs	r1, #3
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fde9 	bl	8003320 <LL_ADC_GetOffsetChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800475a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800475c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800475e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_ADC_ConfigChannel+0x3f2>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	0e9b      	lsrs	r3, r3, #26
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	e011      	b.n	80047ae <HAL_ADC_ConfigChannel+0x416>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800479a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80047a2:	2320      	movs	r3, #32
 80047a4:	e003      	b.n	80047ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80047a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d106      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	2103      	movs	r1, #3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fdc6 	bl	800334c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe ff59 	bl	800367c <LL_ADC_IsEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 813d 	bne.w	8004a4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7fe fe96 	bl	8003510 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4aa2      	ldr	r2, [pc, #648]	; (8004a74 <HAL_ADC_ConfigChannel+0x6dc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	f040 812e 	bne.w	8004a4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x480>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0e9b      	lsrs	r3, r3, #26
 8004806:	3301      	adds	r3, #1
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2b09      	cmp	r3, #9
 800480e:	bf94      	ite	ls
 8004810:	2301      	movls	r3, #1
 8004812:	2300      	movhi	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e019      	b.n	800484c <HAL_ADC_ConfigChannel+0x4b4>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800482a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004830:	2320      	movs	r3, #32
 8004832:	e003      	b.n	800483c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004836:	fab3 f383 	clz	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	3301      	adds	r3, #1
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2b09      	cmp	r3, #9
 8004844:	bf94      	ite	ls
 8004846:	2301      	movls	r3, #1
 8004848:	2300      	movhi	r3, #0
 800484a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800484c:	2b00      	cmp	r3, #0
 800484e:	d079      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <HAL_ADC_ConfigChannel+0x4d4>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	3301      	adds	r3, #1
 8004864:	069b      	lsls	r3, r3, #26
 8004866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800486a:	e015      	b.n	8004898 <HAL_ADC_ConfigChannel+0x500>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	fa93 f3a3 	rbit	r3, r3
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800487e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004884:	2320      	movs	r3, #32
 8004886:	e003      	b.n	8004890 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488a:	fab3 f383 	clz	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	3301      	adds	r3, #1
 8004892:	069b      	lsls	r3, r3, #26
 8004894:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x520>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	0e9b      	lsrs	r3, r3, #26
 80048aa:	3301      	adds	r3, #1
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	2101      	movs	r1, #1
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	e017      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x550>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80048c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80048d0:	2320      	movs	r3, #32
 80048d2:	e003      	b.n	80048dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80048d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2101      	movs	r1, #1
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	ea42 0103 	orr.w	r1, r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <HAL_ADC_ConfigChannel+0x576>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	0e9b      	lsrs	r3, r3, #26
 80048fe:	3301      	adds	r3, #1
 8004900:	f003 021f 	and.w	r2, r3, #31
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	051b      	lsls	r3, r3, #20
 800490c:	e018      	b.n	8004940 <HAL_ADC_ConfigChannel+0x5a8>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004926:	2320      	movs	r3, #32
 8004928:	e003      	b.n	8004932 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	3301      	adds	r3, #1
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4613      	mov	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4413      	add	r3, r2
 800493e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004940:	430b      	orrs	r3, r1
 8004942:	e07e      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x5c8>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	3301      	adds	r3, #1
 8004958:	069b      	lsls	r3, r3, #26
 800495a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800495e:	e015      	b.n	800498c <HAL_ADC_ConfigChannel+0x5f4>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004978:	2320      	movs	r3, #32
 800497a:	e003      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	3301      	adds	r3, #1
 8004986:	069b      	lsls	r3, r3, #26
 8004988:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x614>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	0e9b      	lsrs	r3, r3, #26
 800499e:	3301      	adds	r3, #1
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	e017      	b.n	80049dc <HAL_ADC_ConfigChannel+0x644>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	61fb      	str	r3, [r7, #28]
  return result;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80049c4:	2320      	movs	r3, #32
 80049c6:	e003      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	3301      	adds	r3, #1
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	ea42 0103 	orr.w	r1, r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x670>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0e9b      	lsrs	r3, r3, #26
 80049f2:	3301      	adds	r3, #1
 80049f4:	f003 021f 	and.w	r2, r3, #31
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	3b1e      	subs	r3, #30
 8004a00:	051b      	lsls	r3, r3, #20
 8004a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a06:	e01b      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x6a8>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	fa93 f3a3 	rbit	r3, r3
 8004a14:	613b      	str	r3, [r7, #16]
  return result;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004a20:	2320      	movs	r3, #32
 8004a22:	e003      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f003 021f 	and.w	r2, r3, #31
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	3b1e      	subs	r3, #30
 8004a3a:	051b      	lsls	r3, r3, #20
 8004a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7fe fd36 	bl	80034b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_ADC_ConfigChannel+0x6e0>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80af 	beq.w	8004bb8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a62:	d004      	beq.n	8004a6e <HAL_ADC_ConfigChannel+0x6d6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <HAL_ADC_ConfigChannel+0x6e4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d10a      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x6ec>
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <HAL_ADC_ConfigChannel+0x6e8>)
 8004a70:	e009      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x6ee>
 8004a72:	bf00      	nop
 8004a74:	407f0000 	.word	0x407f0000
 8004a78:	80080000 	.word	0x80080000
 8004a7c:	50000100 	.word	0x50000100
 8004a80:	50000300 	.word	0x50000300
 8004a84:	4b51      	ldr	r3, [pc, #324]	; (8004bcc <HAL_ADC_ConfigChannel+0x834>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fc18 	bl	80032bc <LL_ADC_GetCommonPathInternalCh>
 8004a8c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a4e      	ldr	r2, [pc, #312]	; (8004bd0 <HAL_ADC_ConfigChannel+0x838>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_ADC_ConfigChannel+0x70c>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a4d      	ldr	r2, [pc, #308]	; (8004bd4 <HAL_ADC_ConfigChannel+0x83c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d134      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004aa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d12e      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ab8:	d17e      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac2:	d004      	beq.n	8004ace <HAL_ADC_ConfigChannel+0x736>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a43      	ldr	r2, [pc, #268]	; (8004bd8 <HAL_ADC_ConfigChannel+0x840>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x73a>
 8004ace:	4a43      	ldr	r2, [pc, #268]	; (8004bdc <HAL_ADC_ConfigChannel+0x844>)
 8004ad0:	e000      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x73c>
 8004ad2:	4a3e      	ldr	r2, [pc, #248]	; (8004bcc <HAL_ADC_ConfigChannel+0x834>)
 8004ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f7fe fbd9 	bl	8003296 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <HAL_ADC_ConfigChannel+0x848>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	099b      	lsrs	r3, r3, #6
 8004aea:	4a3e      	ldr	r2, [pc, #248]	; (8004be4 <HAL_ADC_ConfigChannel+0x84c>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004afe:	e002      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f9      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b0c:	e054      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a35      	ldr	r2, [pc, #212]	; (8004be8 <HAL_ADC_ConfigChannel+0x850>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d120      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d11a      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b2c:	d144      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b36:	d004      	beq.n	8004b42 <HAL_ADC_ConfigChannel+0x7aa>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <HAL_ADC_ConfigChannel+0x840>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x7ae>
 8004b42:	4a26      	ldr	r2, [pc, #152]	; (8004bdc <HAL_ADC_ConfigChannel+0x844>)
 8004b44:	e000      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x7b0>
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_ADC_ConfigChannel+0x834>)
 8004b48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f7fe fb9f 	bl	8003296 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b58:	e02e      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a23      	ldr	r2, [pc, #140]	; (8004bec <HAL_ADC_ConfigChannel+0x854>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d129      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d123      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_ADC_ConfigChannel+0x840>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01e      	beq.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b82:	d004      	beq.n	8004b8e <HAL_ADC_ConfigChannel+0x7f6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <HAL_ADC_ConfigChannel+0x840>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x7fa>
 8004b8e:	4a13      	ldr	r2, [pc, #76]	; (8004bdc <HAL_ADC_ConfigChannel+0x844>)
 8004b90:	e000      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x7fc>
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <HAL_ADC_ConfigChannel+0x834>)
 8004b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f7fe fb79 	bl	8003296 <LL_ADC_SetCommonPathInternalCh>
 8004ba4:	e008      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bc0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	37d8      	adds	r7, #216	; 0xd8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	50000700 	.word	0x50000700
 8004bd0:	c3210000 	.word	0xc3210000
 8004bd4:	90c00010 	.word	0x90c00010
 8004bd8:	50000100 	.word	0x50000100
 8004bdc:	50000300 	.word	0x50000300
 8004be0:	20000000 	.word	0x20000000
 8004be4:	053e2d63 	.word	0x053e2d63
 8004be8:	c7520000 	.word	0xc7520000
 8004bec:	cb840000 	.word	0xcb840000

08004bf0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fd86 	bl	8003718 <LL_ADC_REG_IsConversionOngoing>
 8004c0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe fda7 	bl	8003766 <LL_ADC_INJ_IsConversionOngoing>
 8004c18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8098 	beq.w	8004d58 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d02a      	beq.n	8004c8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7f5b      	ldrb	r3, [r3, #29]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d126      	bne.n	8004c8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	7f1b      	ldrb	r3, [r3, #28]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d122      	bne.n	8004c8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004c46:	2301      	movs	r3, #1
 8004c48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c4a:	e014      	b.n	8004c76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4a45      	ldr	r2, [pc, #276]	; (8004d64 <ADC_ConversionStop+0x174>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d90d      	bls.n	8004c70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	f043 0210 	orr.w	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e074      	b.n	8004d5a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3301      	adds	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d1e3      	bne.n	8004c4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d014      	beq.n	8004cbc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fd3e 	bl	8003718 <LL_ADC_REG_IsConversionOngoing>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fcfb 	bl	80036a2 <LL_ADC_IsDisableOngoing>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fd1a 	bl	80036f0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d014      	beq.n	8004cec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fd4d 	bl	8003766 <LL_ADC_INJ_IsConversionOngoing>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00c      	beq.n	8004cec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fce3 	bl	80036a2 <LL_ADC_IsDisableOngoing>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d104      	bne.n	8004cec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fd29 	bl	800373e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d005      	beq.n	8004cfe <ADC_ConversionStop+0x10e>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d105      	bne.n	8004d04 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cf8:	230c      	movs	r3, #12
 8004cfa:	617b      	str	r3, [r7, #20]
        break;
 8004cfc:	e005      	b.n	8004d0a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004cfe:	2308      	movs	r3, #8
 8004d00:	617b      	str	r3, [r7, #20]
        break;
 8004d02:	e002      	b.n	8004d0a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004d04:	2304      	movs	r3, #4
 8004d06:	617b      	str	r3, [r7, #20]
        break;
 8004d08:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004d0a:	f7fe faa5 	bl	8003258 <HAL_GetTick>
 8004d0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d10:	e01b      	b.n	8004d4a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d12:	f7fe faa1 	bl	8003258 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b05      	cmp	r3, #5
 8004d1e:	d914      	bls.n	8004d4a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	f043 0210 	orr.w	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e007      	b.n	8004d5a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1dc      	bne.n	8004d12 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	a33fffff 	.word	0xa33fffff

08004d68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fc7f 	bl	800367c <LL_ADC_IsEnabled>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d176      	bne.n	8004e72 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <ADC_Enable+0x114>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d96:	f043 0210 	orr.w	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	f043 0201 	orr.w	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e062      	b.n	8004e74 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fc3a 	bl	800362c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dc0:	d004      	beq.n	8004dcc <ADC_Enable+0x64>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2e      	ldr	r2, [pc, #184]	; (8004e80 <ADC_Enable+0x118>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <ADC_Enable+0x68>
 8004dcc:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <ADC_Enable+0x11c>)
 8004dce:	e000      	b.n	8004dd2 <ADC_Enable+0x6a>
 8004dd0:	4b2d      	ldr	r3, [pc, #180]	; (8004e88 <ADC_Enable+0x120>)
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fa72 	bl	80032bc <LL_ADC_GetCommonPathInternalCh>
 8004dd8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d013      	beq.n	8004e0a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004de2:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <ADC_Enable+0x124>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	4a29      	ldr	r2, [pc, #164]	; (8004e90 <ADC_Enable+0x128>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	4613      	mov	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dfc:	e002      	b.n	8004e04 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f9      	bne.n	8004dfe <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e0a:	f7fe fa25 	bl	8003258 <HAL_GetTick>
 8004e0e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e10:	e028      	b.n	8004e64 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fc30 	bl	800367c <LL_ADC_IsEnabled>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe fc00 	bl	800362c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e2c:	f7fe fa14 	bl	8003258 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d914      	bls.n	8004e64 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d00d      	beq.n	8004e64 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	f043 0210 	orr.w	r2, r3, #16
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	f043 0201 	orr.w	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e007      	b.n	8004e74 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d1cf      	bne.n	8004e12 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	8000003f 	.word	0x8000003f
 8004e80:	50000100 	.word	0x50000100
 8004e84:	50000300 	.word	0x50000300
 8004e88:	50000700 	.word	0x50000700
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	053e2d63 	.word	0x053e2d63

08004e94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fbfe 	bl	80036a2 <LL_ADC_IsDisableOngoing>
 8004ea6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe fbe5 	bl	800367c <LL_ADC_IsEnabled>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d047      	beq.n	8004f48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d144      	bne.n	8004f48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 030d 	and.w	r3, r3, #13
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d10c      	bne.n	8004ee6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fe fbbf 	bl	8003654 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2203      	movs	r2, #3
 8004edc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ede:	f7fe f9bb 	bl	8003258 <HAL_GetTick>
 8004ee2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ee4:	e029      	b.n	8004f3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eea:	f043 0210 	orr.w	r2, r3, #16
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	f043 0201 	orr.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e023      	b.n	8004f4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f02:	f7fe f9a9 	bl	8003258 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d914      	bls.n	8004f3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f22:	f043 0210 	orr.w	r2, r3, #16
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2e:	f043 0201 	orr.w	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e007      	b.n	8004f4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1dc      	bne.n	8004f02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <LL_ADC_IsEnabled>:
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <LL_ADC_IsEnabled+0x18>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <LL_ADC_IsEnabled+0x1a>
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d101      	bne.n	8004f90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005004:	b590      	push	{r4, r7, lr}
 8005006:	b0a1      	sub	sp, #132	; 0x84
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800501e:	2302      	movs	r3, #2
 8005020:	e0cb      	b.n	80051ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800502a:	2300      	movs	r3, #0
 800502c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800502e:	2300      	movs	r3, #0
 8005030:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800503a:	d102      	bne.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800503c:	4b61      	ldr	r3, [pc, #388]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	e001      	b.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0aa      	b.n	80051ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff ff86 	bl	8004f78 <LL_ADC_REG_IsConversionOngoing>
 800506c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff ff80 	bl	8004f78 <LL_ADC_REG_IsConversionOngoing>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	f040 808c 	bne.w	8005198 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 8088 	bne.w	8005198 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005090:	d004      	beq.n	800509c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 800509c:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800509e:	e000      	b.n	80050a2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80050a0:	4b4a      	ldr	r3, [pc, #296]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80050a2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d041      	beq.n	8005130 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050be:	035b      	lsls	r3, r3, #13
 80050c0:	430b      	orrs	r3, r1
 80050c2:	431a      	orrs	r2, r3
 80050c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d0:	d004      	beq.n	80050dc <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a3b      	ldr	r2, [pc, #236]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10f      	bne.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80050dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050e0:	f7ff ff37 	bl	8004f52 <LL_ADC_IsEnabled>
 80050e4:	4604      	mov	r4, r0
 80050e6:	4837      	ldr	r0, [pc, #220]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050e8:	f7ff ff33 	bl	8004f52 <LL_ADC_IsEnabled>
 80050ec:	4603      	mov	r3, r0
 80050ee:	4323      	orrs	r3, r4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e008      	b.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80050fc:	4834      	ldr	r0, [pc, #208]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80050fe:	f7ff ff28 	bl	8004f52 <LL_ADC_IsEnabled>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04c      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800511a:	f023 030f 	bic.w	r3, r3, #15
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	6811      	ldr	r1, [r2, #0]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	430a      	orrs	r2, r1
 8005128:	431a      	orrs	r2, r3
 800512a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800512e:	e03d      	b.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005144:	d004      	beq.n	8005150 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10f      	bne.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8005150:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005154:	f7ff fefd 	bl	8004f52 <LL_ADC_IsEnabled>
 8005158:	4604      	mov	r4, r0
 800515a:	481a      	ldr	r0, [pc, #104]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800515c:	f7ff fef9 	bl	8004f52 <LL_ADC_IsEnabled>
 8005160:	4603      	mov	r3, r0
 8005162:	4323      	orrs	r3, r4
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	e008      	b.n	8005182 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005170:	4817      	ldr	r0, [pc, #92]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005172:	f7ff feee 	bl	8004f52 <LL_ADC_IsEnabled>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800518e:	f023 030f 	bic.w	r3, r3, #15
 8005192:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005194:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005196:	e009      	b.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80051aa:	e000      	b.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80051b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3784      	adds	r7, #132	; 0x84
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd90      	pop	{r4, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	50000100 	.word	0x50000100
 80051c8:	50000300 	.word	0x50000300
 80051cc:	50000700 	.word	0x50000700
 80051d0:	50000400 	.word	0x50000400

080051d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <__NVIC_SetPriorityGrouping+0x44>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051f0:	4013      	ands	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005206:	4a04      	ldr	r2, [pc, #16]	; (8005218 <__NVIC_SetPriorityGrouping+0x44>)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	60d3      	str	r3, [r2, #12]
}
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	e000ed00 	.word	0xe000ed00

0800521c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <__NVIC_GetPriorityGrouping+0x18>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	0a1b      	lsrs	r3, r3, #8
 8005226:	f003 0307 	and.w	r3, r3, #7
}
 800522a:	4618      	mov	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	2b00      	cmp	r3, #0
 8005248:	db0b      	blt.n	8005262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	f003 021f 	and.w	r2, r3, #31
 8005250:	4907      	ldr	r1, [pc, #28]	; (8005270 <__NVIC_EnableIRQ+0x38>)
 8005252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2001      	movs	r0, #1
 800525a:	fa00 f202 	lsl.w	r2, r0, r2
 800525e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000e100 	.word	0xe000e100

08005274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	6039      	str	r1, [r7, #0]
 800527e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005284:	2b00      	cmp	r3, #0
 8005286:	db0a      	blt.n	800529e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	490c      	ldr	r1, [pc, #48]	; (80052c0 <__NVIC_SetPriority+0x4c>)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	0112      	lsls	r2, r2, #4
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	440b      	add	r3, r1
 8005298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800529c:	e00a      	b.n	80052b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	4908      	ldr	r1, [pc, #32]	; (80052c4 <__NVIC_SetPriority+0x50>)
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	3b04      	subs	r3, #4
 80052ac:	0112      	lsls	r2, r2, #4
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	440b      	add	r3, r1
 80052b2:	761a      	strb	r2, [r3, #24]
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	e000e100 	.word	0xe000e100
 80052c4:	e000ed00 	.word	0xe000ed00

080052c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b089      	sub	sp, #36	; 0x24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f1c3 0307 	rsb	r3, r3, #7
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	bf28      	it	cs
 80052e6:	2304      	movcs	r3, #4
 80052e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3304      	adds	r3, #4
 80052ee:	2b06      	cmp	r3, #6
 80052f0:	d902      	bls.n	80052f8 <NVIC_EncodePriority+0x30>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3b03      	subs	r3, #3
 80052f6:	e000      	b.n	80052fa <NVIC_EncodePriority+0x32>
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43da      	mvns	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	401a      	ands	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005310:	f04f 31ff 	mov.w	r1, #4294967295
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	43d9      	mvns	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005320:	4313      	orrs	r3, r2
         );
}
 8005322:	4618      	mov	r0, r3
 8005324:	3724      	adds	r7, #36	; 0x24
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ff4c 	bl	80051d4 <__NVIC_SetPriorityGrouping>
}
 800533c:	bf00      	nop
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005352:	f7ff ff63 	bl	800521c <__NVIC_GetPriorityGrouping>
 8005356:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	6978      	ldr	r0, [r7, #20]
 800535e:	f7ff ffb3 	bl	80052c8 <NVIC_EncodePriority>
 8005362:	4602      	mov	r2, r0
 8005364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff ff82 	bl	8005274 <__NVIC_SetPriority>
}
 8005370:	bf00      	nop
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff ff56 	bl	8005238 <__NVIC_EnableIRQ>
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053a2:	e15a      	b.n	800565a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	2101      	movs	r1, #1
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	fa01 f303 	lsl.w	r3, r1, r3
 80053b0:	4013      	ands	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 814c 	beq.w	8005654 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d005      	beq.n	80053d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d130      	bne.n	8005436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	2203      	movs	r2, #3
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4013      	ands	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800540a:	2201      	movs	r2, #1
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	f003 0201 	and.w	r2, r3, #1
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b03      	cmp	r3, #3
 8005440:	d017      	beq.n	8005472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	2203      	movs	r2, #3
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4013      	ands	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d123      	bne.n	80054c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	08da      	lsrs	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3208      	adds	r2, #8
 8005486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	220f      	movs	r2, #15
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4013      	ands	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	08da      	lsrs	r2, r3, #3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3208      	adds	r2, #8
 80054c0:	6939      	ldr	r1, [r7, #16]
 80054c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	2203      	movs	r2, #3
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 0203 	and.w	r2, r3, #3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80a6 	beq.w	8005654 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005508:	4b5b      	ldr	r3, [pc, #364]	; (8005678 <HAL_GPIO_Init+0x2e4>)
 800550a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550c:	4a5a      	ldr	r2, [pc, #360]	; (8005678 <HAL_GPIO_Init+0x2e4>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6613      	str	r3, [r2, #96]	; 0x60
 8005514:	4b58      	ldr	r3, [pc, #352]	; (8005678 <HAL_GPIO_Init+0x2e4>)
 8005516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005520:	4a56      	ldr	r2, [pc, #344]	; (800567c <HAL_GPIO_Init+0x2e8>)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	089b      	lsrs	r3, r3, #2
 8005526:	3302      	adds	r3, #2
 8005528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800552c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	220f      	movs	r2, #15
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800554a:	d01f      	beq.n	800558c <HAL_GPIO_Init+0x1f8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a4c      	ldr	r2, [pc, #304]	; (8005680 <HAL_GPIO_Init+0x2ec>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d019      	beq.n	8005588 <HAL_GPIO_Init+0x1f4>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a4b      	ldr	r2, [pc, #300]	; (8005684 <HAL_GPIO_Init+0x2f0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_GPIO_Init+0x1f0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a4a      	ldr	r2, [pc, #296]	; (8005688 <HAL_GPIO_Init+0x2f4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00d      	beq.n	8005580 <HAL_GPIO_Init+0x1ec>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a49      	ldr	r2, [pc, #292]	; (800568c <HAL_GPIO_Init+0x2f8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <HAL_GPIO_Init+0x1e8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a48      	ldr	r2, [pc, #288]	; (8005690 <HAL_GPIO_Init+0x2fc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_GPIO_Init+0x1e4>
 8005574:	2305      	movs	r3, #5
 8005576:	e00a      	b.n	800558e <HAL_GPIO_Init+0x1fa>
 8005578:	2306      	movs	r3, #6
 800557a:	e008      	b.n	800558e <HAL_GPIO_Init+0x1fa>
 800557c:	2304      	movs	r3, #4
 800557e:	e006      	b.n	800558e <HAL_GPIO_Init+0x1fa>
 8005580:	2303      	movs	r3, #3
 8005582:	e004      	b.n	800558e <HAL_GPIO_Init+0x1fa>
 8005584:	2302      	movs	r3, #2
 8005586:	e002      	b.n	800558e <HAL_GPIO_Init+0x1fa>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <HAL_GPIO_Init+0x1fa>
 800558c:	2300      	movs	r3, #0
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	f002 0203 	and.w	r2, r2, #3
 8005594:	0092      	lsls	r2, r2, #2
 8005596:	4093      	lsls	r3, r2
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800559e:	4937      	ldr	r1, [pc, #220]	; (800567c <HAL_GPIO_Init+0x2e8>)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	3302      	adds	r3, #2
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055ac:	4b39      	ldr	r3, [pc, #228]	; (8005694 <HAL_GPIO_Init+0x300>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	43db      	mvns	r3, r3
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055d0:	4a30      	ldr	r2, [pc, #192]	; (8005694 <HAL_GPIO_Init+0x300>)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055d6:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <HAL_GPIO_Init+0x300>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	43db      	mvns	r3, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4013      	ands	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055fa:	4a26      	ldr	r2, [pc, #152]	; (8005694 <HAL_GPIO_Init+0x300>)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005600:	4b24      	ldr	r3, [pc, #144]	; (8005694 <HAL_GPIO_Init+0x300>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	43db      	mvns	r3, r3
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4013      	ands	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005624:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <HAL_GPIO_Init+0x300>)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <HAL_GPIO_Init+0x300>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	43db      	mvns	r3, r3
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4013      	ands	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800564e:	4a11      	ldr	r2, [pc, #68]	; (8005694 <HAL_GPIO_Init+0x300>)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	3301      	adds	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	f47f ae9d 	bne.w	80053a4 <HAL_GPIO_Init+0x10>
  }
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40021000 	.word	0x40021000
 800567c:	40010000 	.word	0x40010000
 8005680:	48000400 	.word	0x48000400
 8005684:	48000800 	.word	0x48000800
 8005688:	48000c00 	.word	0x48000c00
 800568c:	48001000 	.word	0x48001000
 8005690:	48001400 	.word	0x48001400
 8005694:	40010400 	.word	0x40010400

08005698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
 80056a4:	4613      	mov	r3, r2
 80056a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056a8:	787b      	ldrb	r3, [r7, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056b4:	e002      	b.n	80056bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056b6:	887a      	ldrh	r2, [r7, #2]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056da:	887a      	ldrh	r2, [r7, #2]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4013      	ands	r3, r2
 80056e0:	041a      	lsls	r2, r3, #16
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	43d9      	mvns	r1, r3
 80056e6:	887b      	ldrh	r3, [r7, #2]
 80056e8:	400b      	ands	r3, r1
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	619a      	str	r2, [r3, #24]
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005706:	4b08      	ldr	r3, [pc, #32]	; (8005728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	4013      	ands	r3, r2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d006      	beq.n	8005720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005712:	4a05      	ldr	r2, [pc, #20]	; (8005728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f806 	bl	800572c <HAL_GPIO_EXTI_Callback>
  }
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40010400 	.word	0x40010400

0800572c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d141      	bne.n	80057d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005752:	4b4b      	ldr	r3, [pc, #300]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575e:	d131      	bne.n	80057c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005760:	4b47      	ldr	r3, [pc, #284]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005766:	4a46      	ldr	r2, [pc, #280]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800576c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005770:	4b43      	ldr	r3, [pc, #268]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005778:	4a41      	ldr	r2, [pc, #260]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800577e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005780:	4b40      	ldr	r3, [pc, #256]	; (8005884 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2232      	movs	r2, #50	; 0x32
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	4a3f      	ldr	r2, [pc, #252]	; (8005888 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800578c:	fba2 2303 	umull	r2, r3, r2, r3
 8005790:	0c9b      	lsrs	r3, r3, #18
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005796:	e002      	b.n	800579e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3b01      	subs	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800579e:	4b38      	ldr	r3, [pc, #224]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057aa:	d102      	bne.n	80057b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f2      	bne.n	8005798 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057be:	d158      	bne.n	8005872 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e057      	b.n	8005874 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057c4:	4b2e      	ldr	r3, [pc, #184]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ca:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057d4:	e04d      	b.n	8005872 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	d141      	bne.n	8005862 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057de:	4b28      	ldr	r3, [pc, #160]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ea:	d131      	bne.n	8005850 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057ec:	4b24      	ldr	r3, [pc, #144]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057f2:	4a23      	ldr	r2, [pc, #140]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057fc:	4b20      	ldr	r3, [pc, #128]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005804:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800580a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2232      	movs	r2, #50	; 0x32
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	0c9b      	lsrs	r3, r3, #18
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005822:	e002      	b.n	800582a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3b01      	subs	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800582a:	4b15      	ldr	r3, [pc, #84]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005836:	d102      	bne.n	800583e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f2      	bne.n	8005824 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584a:	d112      	bne.n	8005872 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e011      	b.n	8005874 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005856:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005860:	e007      	b.n	8005872 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800586a:	4a05      	ldr	r2, [pc, #20]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005870:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	40007000 	.word	0x40007000
 8005884:	20000000 	.word	0x20000000
 8005888:	431bde83 	.word	0x431bde83

0800588c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800589a:	6093      	str	r3, [r2, #8]
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40007000 	.word	0x40007000

080058ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e2fe      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d075      	beq.n	80059b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ca:	4b97      	ldr	r3, [pc, #604]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058d4:	4b94      	ldr	r3, [pc, #592]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b0c      	cmp	r3, #12
 80058e2:	d102      	bne.n	80058ea <HAL_RCC_OscConfig+0x3e>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d002      	beq.n	80058f0 <HAL_RCC_OscConfig+0x44>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d10b      	bne.n	8005908 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	4b8d      	ldr	r3, [pc, #564]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d05b      	beq.n	80059b4 <HAL_RCC_OscConfig+0x108>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d157      	bne.n	80059b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e2d9      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005910:	d106      	bne.n	8005920 <HAL_RCC_OscConfig+0x74>
 8005912:	4b85      	ldr	r3, [pc, #532]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a84      	ldr	r2, [pc, #528]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e01d      	b.n	800595c <HAL_RCC_OscConfig+0xb0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005928:	d10c      	bne.n	8005944 <HAL_RCC_OscConfig+0x98>
 800592a:	4b7f      	ldr	r3, [pc, #508]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a7e      	ldr	r2, [pc, #504]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	4b7c      	ldr	r3, [pc, #496]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a7b      	ldr	r2, [pc, #492]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 800593c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e00b      	b.n	800595c <HAL_RCC_OscConfig+0xb0>
 8005944:	4b78      	ldr	r3, [pc, #480]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a77      	ldr	r2, [pc, #476]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	4b75      	ldr	r3, [pc, #468]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a74      	ldr	r2, [pc, #464]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d013      	beq.n	800598c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fd fc78 	bl	8003258 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800596c:	f7fd fc74 	bl	8003258 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b64      	cmp	r3, #100	; 0x64
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e29e      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800597e:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0xc0>
 800598a:	e014      	b.n	80059b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fd fc64 	bl	8003258 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005994:	f7fd fc60 	bl	8003258 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b64      	cmp	r3, #100	; 0x64
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e28a      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059a6:	4b60      	ldr	r3, [pc, #384]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0xe8>
 80059b2:	e000      	b.n	80059b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d075      	beq.n	8005aae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059c2:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059cc:	4b56      	ldr	r3, [pc, #344]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b0c      	cmp	r3, #12
 80059da:	d102      	bne.n	80059e2 <HAL_RCC_OscConfig+0x136>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d002      	beq.n	80059e8 <HAL_RCC_OscConfig+0x13c>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d11f      	bne.n	8005a28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e8:	4b4f      	ldr	r3, [pc, #316]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_OscConfig+0x154>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e25d      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a00:	4b49      	ldr	r3, [pc, #292]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	061b      	lsls	r3, r3, #24
 8005a0e:	4946      	ldr	r1, [pc, #280]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a14:	4b45      	ldr	r3, [pc, #276]	; (8005b2c <HAL_RCC_OscConfig+0x280>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fd f9cd 	bl	8002db8 <HAL_InitTick>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d043      	beq.n	8005aac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e249      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d023      	beq.n	8005a78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a30:	4b3d      	ldr	r3, [pc, #244]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a3c      	ldr	r2, [pc, #240]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fd fc0c 	bl	8003258 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a44:	f7fd fc08 	bl	8003258 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e232      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a56:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a62:	4b31      	ldr	r3, [pc, #196]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	492d      	ldr	r1, [pc, #180]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	604b      	str	r3, [r1, #4]
 8005a76:	e01a      	b.n	8005aae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a78:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2a      	ldr	r2, [pc, #168]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd fbe8 	bl	8003258 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a8c:	f7fd fbe4 	bl	8003258 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e20e      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a9e:	4b22      	ldr	r3, [pc, #136]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x1e0>
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d041      	beq.n	8005b3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01c      	beq.n	8005afc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ac2:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac8:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad2:	f7fd fbc1 	bl	8003258 <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ada:	f7fd fbbd 	bl	8003258 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e1e7      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aec:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0ef      	beq.n	8005ada <HAL_RCC_OscConfig+0x22e>
 8005afa:	e020      	b.n	8005b3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005afc:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b02:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fd fba4 	bl	8003258 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b12:	e00d      	b.n	8005b30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b14:	f7fd fba0 	bl	8003258 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d906      	bls.n	8005b30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e1ca      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b30:	4b8c      	ldr	r3, [pc, #560]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1ea      	bne.n	8005b14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80a6 	beq.w	8005c98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b50:	4b84      	ldr	r3, [pc, #528]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_OscConfig+0x2b4>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <HAL_RCC_OscConfig+0x2b6>
 8005b60:	2300      	movs	r3, #0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b66:	4b7f      	ldr	r3, [pc, #508]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	4a7e      	ldr	r2, [pc, #504]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b70:	6593      	str	r3, [r2, #88]	; 0x58
 8005b72:	4b7c      	ldr	r3, [pc, #496]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b82:	4b79      	ldr	r3, [pc, #484]	; (8005d68 <HAL_RCC_OscConfig+0x4bc>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d118      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b8e:	4b76      	ldr	r3, [pc, #472]	; (8005d68 <HAL_RCC_OscConfig+0x4bc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a75      	ldr	r2, [pc, #468]	; (8005d68 <HAL_RCC_OscConfig+0x4bc>)
 8005b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9a:	f7fd fb5d 	bl	8003258 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba2:	f7fd fb59 	bl	8003258 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e183      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bb4:	4b6c      	ldr	r3, [pc, #432]	; (8005d68 <HAL_RCC_OscConfig+0x4bc>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d108      	bne.n	8005bda <HAL_RCC_OscConfig+0x32e>
 8005bc8:	4b66      	ldr	r3, [pc, #408]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bce:	4a65      	ldr	r2, [pc, #404]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bd8:	e024      	b.n	8005c24 <HAL_RCC_OscConfig+0x378>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d110      	bne.n	8005c04 <HAL_RCC_OscConfig+0x358>
 8005be2:	4b60      	ldr	r3, [pc, #384]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be8:	4a5e      	ldr	r2, [pc, #376]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005bea:	f043 0304 	orr.w	r3, r3, #4
 8005bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bf2:	4b5c      	ldr	r3, [pc, #368]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf8:	4a5a      	ldr	r2, [pc, #360]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c02:	e00f      	b.n	8005c24 <HAL_RCC_OscConfig+0x378>
 8005c04:	4b57      	ldr	r3, [pc, #348]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	4a56      	ldr	r2, [pc, #344]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c14:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	4a52      	ldr	r2, [pc, #328]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005c1c:	f023 0304 	bic.w	r3, r3, #4
 8005c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d016      	beq.n	8005c5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2c:	f7fd fb14 	bl	8003258 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c32:	e00a      	b.n	8005c4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c34:	f7fd fb10 	bl	8003258 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e138      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c4a:	4b46      	ldr	r3, [pc, #280]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0ed      	beq.n	8005c34 <HAL_RCC_OscConfig+0x388>
 8005c58:	e015      	b.n	8005c86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fd fafd 	bl	8003258 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c60:	e00a      	b.n	8005c78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7fd faf9 	bl	8003258 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e121      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c78:	4b3a      	ldr	r3, [pc, #232]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1ed      	bne.n	8005c62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d105      	bne.n	8005c98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c8c:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c90:	4a34      	ldr	r2, [pc, #208]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d03c      	beq.n	8005d1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01c      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cac:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cb2:	4a2c      	ldr	r2, [pc, #176]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fd facc 	bl	8003258 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cc4:	f7fd fac8 	bl	8003258 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e0f2      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cd6:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ef      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x418>
 8005ce4:	e01b      	b.n	8005d1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ce6:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cec:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf6:	f7fd faaf 	bl	8003258 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cfe:	f7fd faab 	bl	8003258 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e0d5      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d10:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1ef      	bne.n	8005cfe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80c9 	beq.w	8005eba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d28:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b0c      	cmp	r3, #12
 8005d32:	f000 8083 	beq.w	8005e3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d15e      	bne.n	8005dfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3e:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a08      	ldr	r2, [pc, #32]	; (8005d64 <HAL_RCC_OscConfig+0x4b8>)
 8005d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4a:	f7fd fa85 	bl	8003258 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d50:	e00c      	b.n	8005d6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d52:	f7fd fa81 	bl	8003258 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d905      	bls.n	8005d6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e0ab      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d6c:	4b55      	ldr	r3, [pc, #340]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1ec      	bne.n	8005d52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d78:	4b52      	ldr	r3, [pc, #328]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	4b52      	ldr	r3, [pc, #328]	; (8005ec8 <HAL_RCC_OscConfig+0x61c>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6a11      	ldr	r1, [r2, #32]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d88:	3a01      	subs	r2, #1
 8005d8a:	0112      	lsls	r2, r2, #4
 8005d8c:	4311      	orrs	r1, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d92:	0212      	lsls	r2, r2, #8
 8005d94:	4311      	orrs	r1, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d9a:	0852      	lsrs	r2, r2, #1
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	0552      	lsls	r2, r2, #21
 8005da0:	4311      	orrs	r1, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005da6:	0852      	lsrs	r2, r2, #1
 8005da8:	3a01      	subs	r2, #1
 8005daa:	0652      	lsls	r2, r2, #25
 8005dac:	4311      	orrs	r1, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005db2:	06d2      	lsls	r2, r2, #27
 8005db4:	430a      	orrs	r2, r1
 8005db6:	4943      	ldr	r1, [pc, #268]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dbc:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a40      	ldr	r2, [pc, #256]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dc8:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	4a3d      	ldr	r2, [pc, #244]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fd fa40 	bl	8003258 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7fd fa3c 	bl	8003258 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e066      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dee:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0x530>
 8005dfa:	e05e      	b.n	8005eba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfc:	4b31      	ldr	r3, [pc, #196]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a30      	ldr	r2, [pc, #192]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fd fa26 	bl	8003258 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e10:	f7fd fa22 	bl	8003258 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e04c      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e22:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e2e:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	4924      	ldr	r1, [pc, #144]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005e34:	4b25      	ldr	r3, [pc, #148]	; (8005ecc <HAL_RCC_OscConfig+0x620>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	60cb      	str	r3, [r1, #12]
 8005e3a:	e03e      	b.n	8005eba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e039      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e48:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <HAL_RCC_OscConfig+0x618>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f003 0203 	and.w	r2, r3, #3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d12c      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	3b01      	subs	r3, #1
 8005e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d123      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d11b      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d113      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d109      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	085b      	lsrs	r3, r3, #1
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d001      	beq.n	8005eba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	019f800c 	.word	0x019f800c
 8005ecc:	feeefffc 	.word	0xfeeefffc

08005ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e11e      	b.n	8006126 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee8:	4b91      	ldr	r3, [pc, #580]	; (8006130 <HAL_RCC_ClockConfig+0x260>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d910      	bls.n	8005f18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef6:	4b8e      	ldr	r3, [pc, #568]	; (8006130 <HAL_RCC_ClockConfig+0x260>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f023 020f 	bic.w	r2, r3, #15
 8005efe:	498c      	ldr	r1, [pc, #560]	; (8006130 <HAL_RCC_ClockConfig+0x260>)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f06:	4b8a      	ldr	r3, [pc, #552]	; (8006130 <HAL_RCC_ClockConfig+0x260>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e106      	b.n	8006126 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d073      	beq.n	800600c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d129      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f2c:	4b81      	ldr	r3, [pc, #516]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0f4      	b.n	8006126 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f3c:	f000 f9d0 	bl	80062e0 <RCC_GetSysClockFreqFromPLLSource>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4a7c      	ldr	r2, [pc, #496]	; (8006138 <HAL_RCC_ClockConfig+0x268>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d93f      	bls.n	8005fca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f4a:	4b7a      	ldr	r3, [pc, #488]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d033      	beq.n	8005fca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d12f      	bne.n	8005fca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f6a:	4b72      	ldr	r3, [pc, #456]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f72:	4a70      	ldr	r2, [pc, #448]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	e024      	b.n	8005fca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f88:	4b6a      	ldr	r3, [pc, #424]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d109      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0c6      	b.n	8006126 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f98:	4b66      	ldr	r3, [pc, #408]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0be      	b.n	8006126 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005fa8:	f000 f8ce 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8005fac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4a61      	ldr	r2, [pc, #388]	; (8006138 <HAL_RCC_ClockConfig+0x268>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d909      	bls.n	8005fca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fb6:	4b5f      	ldr	r3, [pc, #380]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fbe:	4a5d      	ldr	r2, [pc, #372]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fca:	4b5a      	ldr	r3, [pc, #360]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f023 0203 	bic.w	r2, r3, #3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4957      	ldr	r1, [pc, #348]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fdc:	f7fd f93c 	bl	8003258 <HAL_GetTick>
 8005fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe4:	f7fd f938 	bl	8003258 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e095      	b.n	8006126 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffa:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 020c 	and.w	r2, r3, #12
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	429a      	cmp	r2, r3
 800600a:	d1eb      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d023      	beq.n	8006060 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006024:	4b43      	ldr	r3, [pc, #268]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	4a42      	ldr	r2, [pc, #264]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 800602a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800602e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800603c:	4b3d      	ldr	r3, [pc, #244]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006044:	4a3b      	ldr	r2, [pc, #236]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8006046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800604a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800604c:	4b39      	ldr	r3, [pc, #228]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4936      	ldr	r1, [pc, #216]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 800605a:	4313      	orrs	r3, r2
 800605c:	608b      	str	r3, [r1, #8]
 800605e:	e008      	b.n	8006072 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d105      	bne.n	8006072 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006066:	4b33      	ldr	r3, [pc, #204]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	4a32      	ldr	r2, [pc, #200]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 800606c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006070:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006072:	4b2f      	ldr	r3, [pc, #188]	; (8006130 <HAL_RCC_ClockConfig+0x260>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d21d      	bcs.n	80060bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006080:	4b2b      	ldr	r3, [pc, #172]	; (8006130 <HAL_RCC_ClockConfig+0x260>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f023 020f 	bic.w	r2, r3, #15
 8006088:	4929      	ldr	r1, [pc, #164]	; (8006130 <HAL_RCC_ClockConfig+0x260>)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	4313      	orrs	r3, r2
 800608e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006090:	f7fd f8e2 	bl	8003258 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006096:	e00a      	b.n	80060ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006098:	f7fd f8de 	bl	8003258 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e03b      	b.n	8006126 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <HAL_RCC_ClockConfig+0x260>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d1ed      	bne.n	8006098 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060c8:	4b1a      	ldr	r3, [pc, #104]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4917      	ldr	r1, [pc, #92]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060e6:	4b13      	ldr	r3, [pc, #76]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	490f      	ldr	r1, [pc, #60]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060fa:	f000 f825 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 80060fe:	4602      	mov	r2, r0
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <HAL_RCC_ClockConfig+0x264>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	490c      	ldr	r1, [pc, #48]	; (800613c <HAL_RCC_ClockConfig+0x26c>)
 800610c:	5ccb      	ldrb	r3, [r1, r3]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	4a0a      	ldr	r2, [pc, #40]	; (8006140 <HAL_RCC_ClockConfig+0x270>)
 8006118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <HAL_RCC_ClockConfig+0x274>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7fc fe4a 	bl	8002db8 <HAL_InitTick>
 8006124:	4603      	mov	r3, r0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40022000 	.word	0x40022000
 8006134:	40021000 	.word	0x40021000
 8006138:	04c4b400 	.word	0x04c4b400
 800613c:	0800b8a8 	.word	0x0800b8a8
 8006140:	20000000 	.word	0x20000000
 8006144:	20000004 	.word	0x20000004

08006148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800614e:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	2b04      	cmp	r3, #4
 8006158:	d102      	bne.n	8006160 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800615a:	4b2a      	ldr	r3, [pc, #168]	; (8006204 <HAL_RCC_GetSysClockFreq+0xbc>)
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	e047      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006160:	4b27      	ldr	r3, [pc, #156]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 030c 	and.w	r3, r3, #12
 8006168:	2b08      	cmp	r3, #8
 800616a:	d102      	bne.n	8006172 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800616c:	4b26      	ldr	r3, [pc, #152]	; (8006208 <HAL_RCC_GetSysClockFreq+0xc0>)
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	e03e      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006172:	4b23      	ldr	r3, [pc, #140]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 030c 	and.w	r3, r3, #12
 800617a:	2b0c      	cmp	r3, #12
 800617c:	d136      	bne.n	80061ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006188:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb8>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	3301      	adds	r3, #1
 8006194:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b03      	cmp	r3, #3
 800619a:	d10c      	bne.n	80061b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800619c:	4a1a      	ldr	r2, [pc, #104]	; (8006208 <HAL_RCC_GetSysClockFreq+0xc0>)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	4a16      	ldr	r2, [pc, #88]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a6:	68d2      	ldr	r2, [r2, #12]
 80061a8:	0a12      	lsrs	r2, r2, #8
 80061aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061ae:	fb02 f303 	mul.w	r3, r2, r3
 80061b2:	617b      	str	r3, [r7, #20]
      break;
 80061b4:	e00c      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061b6:	4a13      	ldr	r2, [pc, #76]	; (8006204 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80061be:	4a10      	ldr	r2, [pc, #64]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c0:	68d2      	ldr	r2, [r2, #12]
 80061c2:	0a12      	lsrs	r2, r2, #8
 80061c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	617b      	str	r3, [r7, #20]
      break;
 80061ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	0e5b      	lsrs	r3, r3, #25
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	3301      	adds	r3, #1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	e001      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061f0:	693b      	ldr	r3, [r7, #16]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40021000 	.word	0x40021000
 8006204:	00f42400 	.word	0x00f42400
 8006208:	016e3600 	.word	0x016e3600

0800620c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006210:	4b03      	ldr	r3, [pc, #12]	; (8006220 <HAL_RCC_GetHCLKFreq+0x14>)
 8006212:	681b      	ldr	r3, [r3, #0]
}
 8006214:	4618      	mov	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20000000 	.word	0x20000000

08006224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006228:	f7ff fff0 	bl	800620c <HAL_RCC_GetHCLKFreq>
 800622c:	4602      	mov	r2, r0
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	4904      	ldr	r1, [pc, #16]	; (800624c <HAL_RCC_GetPCLK1Freq+0x28>)
 800623a:	5ccb      	ldrb	r3, [r1, r3]
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006244:	4618      	mov	r0, r3
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40021000 	.word	0x40021000
 800624c:	0800b8b8 	.word	0x0800b8b8

08006250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006254:	f7ff ffda 	bl	800620c <HAL_RCC_GetHCLKFreq>
 8006258:	4602      	mov	r2, r0
 800625a:	4b06      	ldr	r3, [pc, #24]	; (8006274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	0adb      	lsrs	r3, r3, #11
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	4904      	ldr	r1, [pc, #16]	; (8006278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006266:	5ccb      	ldrb	r3, [r1, r3]
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006270:	4618      	mov	r0, r3
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40021000 	.word	0x40021000
 8006278:	0800b8b8 	.word	0x0800b8b8

0800627c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	220f      	movs	r2, #15
 800628a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <HAL_RCC_GetClockConfig+0x5c>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0203 	and.w	r2, r3, #3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <HAL_RCC_GetClockConfig+0x5c>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <HAL_RCC_GetClockConfig+0x5c>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80062b0:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <HAL_RCC_GetClockConfig+0x5c>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	08db      	lsrs	r3, r3, #3
 80062b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <HAL_RCC_GetClockConfig+0x60>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 020f 	and.w	r2, r3, #15
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	601a      	str	r2, [r3, #0]
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	40022000 	.word	0x40022000

080062e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062e6:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062f0:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	3301      	adds	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d10c      	bne.n	800631e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006304:	4a17      	ldr	r2, [pc, #92]	; (8006364 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	fbb2 f3f3 	udiv	r3, r2, r3
 800630c:	4a14      	ldr	r2, [pc, #80]	; (8006360 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800630e:	68d2      	ldr	r2, [r2, #12]
 8006310:	0a12      	lsrs	r2, r2, #8
 8006312:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	617b      	str	r3, [r7, #20]
    break;
 800631c:	e00c      	b.n	8006338 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800631e:	4a12      	ldr	r2, [pc, #72]	; (8006368 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	fbb2 f3f3 	udiv	r3, r2, r3
 8006326:	4a0e      	ldr	r2, [pc, #56]	; (8006360 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006328:	68d2      	ldr	r2, [r2, #12]
 800632a:	0a12      	lsrs	r2, r2, #8
 800632c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006330:	fb02 f303 	mul.w	r3, r2, r3
 8006334:	617b      	str	r3, [r7, #20]
    break;
 8006336:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006338:	4b09      	ldr	r3, [pc, #36]	; (8006360 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	0e5b      	lsrs	r3, r3, #25
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	3301      	adds	r3, #1
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006352:	687b      	ldr	r3, [r7, #4]
}
 8006354:	4618      	mov	r0, r3
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	40021000 	.word	0x40021000
 8006364:	016e3600 	.word	0x016e3600
 8006368:	00f42400 	.word	0x00f42400

0800636c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006374:	2300      	movs	r3, #0
 8006376:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006378:	2300      	movs	r3, #0
 800637a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8098 	beq.w	80064ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800638a:	2300      	movs	r3, #0
 800638c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800638e:	4b43      	ldr	r3, [pc, #268]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10d      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	4b40      	ldr	r3, [pc, #256]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639e:	4a3f      	ldr	r2, [pc, #252]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6593      	str	r3, [r2, #88]	; 0x58
 80063a6:	4b3d      	ldr	r3, [pc, #244]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	60bb      	str	r3, [r7, #8]
 80063b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063b2:	2301      	movs	r3, #1
 80063b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063b6:	4b3a      	ldr	r3, [pc, #232]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a39      	ldr	r2, [pc, #228]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063c2:	f7fc ff49 	bl	8003258 <HAL_GetTick>
 80063c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c8:	e009      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ca:	f7fc ff45 	bl	8003258 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d902      	bls.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	74fb      	strb	r3, [r7, #19]
        break;
 80063dc:	e005      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063de:	4b30      	ldr	r3, [pc, #192]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0ef      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063ea:	7cfb      	ldrb	r3, [r7, #19]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d159      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063f0:	4b2a      	ldr	r3, [pc, #168]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01e      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	429a      	cmp	r2, r3
 800640a:	d019      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800640c:	4b23      	ldr	r3, [pc, #140]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006416:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006418:	4b20      	ldr	r3, [pc, #128]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	4a1f      	ldr	r2, [pc, #124]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006428:	4b1c      	ldr	r3, [pc, #112]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800642a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642e:	4a1b      	ldr	r2, [pc, #108]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006438:	4a18      	ldr	r2, [pc, #96]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644a:	f7fc ff05 	bl	8003258 <HAL_GetTick>
 800644e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006450:	e00b      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006452:	f7fc ff01 	bl	8003258 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006460:	4293      	cmp	r3, r2
 8006462:	d902      	bls.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	74fb      	strb	r3, [r7, #19]
            break;
 8006468:	e006      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800646a:	4b0c      	ldr	r3, [pc, #48]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ec      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800647e:	4b07      	ldr	r3, [pc, #28]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648c:	4903      	ldr	r1, [pc, #12]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006494:	e008      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006496:	7cfb      	ldrb	r3, [r7, #19]
 8006498:	74bb      	strb	r3, [r7, #18]
 800649a:	e005      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800649c:	40021000 	.word	0x40021000
 80064a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064a8:	7c7b      	ldrb	r3, [r7, #17]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d105      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ae:	4ba7      	ldr	r3, [pc, #668]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	4aa6      	ldr	r2, [pc, #664]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064c6:	4ba1      	ldr	r3, [pc, #644]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064cc:	f023 0203 	bic.w	r2, r3, #3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	499d      	ldr	r1, [pc, #628]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064e8:	4b98      	ldr	r3, [pc, #608]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ee:	f023 020c 	bic.w	r2, r3, #12
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4995      	ldr	r1, [pc, #596]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800650a:	4b90      	ldr	r3, [pc, #576]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006510:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	498c      	ldr	r1, [pc, #560]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800652c:	4b87      	ldr	r3, [pc, #540]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006532:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	4984      	ldr	r1, [pc, #528]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653c:	4313      	orrs	r3, r2
 800653e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800654e:	4b7f      	ldr	r3, [pc, #508]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	497b      	ldr	r1, [pc, #492]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006570:	4b76      	ldr	r3, [pc, #472]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	4973      	ldr	r1, [pc, #460]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006592:	4b6e      	ldr	r3, [pc, #440]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	496a      	ldr	r1, [pc, #424]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065b4:	4b65      	ldr	r3, [pc, #404]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	4962      	ldr	r1, [pc, #392]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065d6:	4b5d      	ldr	r3, [pc, #372]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	4959      	ldr	r1, [pc, #356]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f8:	4b54      	ldr	r3, [pc, #336]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	4951      	ldr	r1, [pc, #324]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006616:	2b00      	cmp	r3, #0
 8006618:	d015      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800661a:	4b4c      	ldr	r3, [pc, #304]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4948      	ldr	r1, [pc, #288]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006638:	d105      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800663a:	4b44      	ldr	r3, [pc, #272]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	4a43      	ldr	r2, [pc, #268]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006644:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664e:	2b00      	cmp	r3, #0
 8006650:	d015      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006652:	4b3e      	ldr	r3, [pc, #248]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006658:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	493a      	ldr	r1, [pc, #232]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006670:	d105      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006672:	4b36      	ldr	r3, [pc, #216]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4a35      	ldr	r2, [pc, #212]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800667c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d015      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800668a:	4b30      	ldr	r3, [pc, #192]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006690:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	492c      	ldr	r1, [pc, #176]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066a8:	d105      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066aa:	4b28      	ldr	r3, [pc, #160]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	4a27      	ldr	r2, [pc, #156]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d015      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066c2:	4b22      	ldr	r3, [pc, #136]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	491e      	ldr	r1, [pc, #120]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e0:	d105      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e2:	4b1a      	ldr	r3, [pc, #104]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	4a19      	ldr	r2, [pc, #100]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ec:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d015      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066fa:	4b14      	ldr	r3, [pc, #80]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006708:	4910      	ldr	r1, [pc, #64]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006718:	d105      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800671a:	4b0c      	ldr	r3, [pc, #48]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	4a0b      	ldr	r2, [pc, #44]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006724:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d018      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006738:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006740:	4902      	ldr	r1, [pc, #8]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	e001      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800674c:	40021000 	.word	0x40021000
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006756:	d105      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006758:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800675e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006762:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677e:	4918      	ldr	r1, [pc, #96]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006790:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d015      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b6:	490a      	ldr	r1, [pc, #40]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c6:	d105      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4a04      	ldr	r2, [pc, #16]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000

080067e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e049      	b.n	800688a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f841 	bl	8006892 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f000 fa28 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d001      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e04f      	b.n	8006960 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a23      	ldr	r2, [pc, #140]	; (800696c <HAL_TIM_Base_Start_IT+0xc4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d01d      	beq.n	800691e <HAL_TIM_Base_Start_IT+0x76>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ea:	d018      	beq.n	800691e <HAL_TIM_Base_Start_IT+0x76>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1f      	ldr	r2, [pc, #124]	; (8006970 <HAL_TIM_Base_Start_IT+0xc8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_TIM_Base_Start_IT+0x76>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <HAL_TIM_Base_Start_IT+0xcc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00e      	beq.n	800691e <HAL_TIM_Base_Start_IT+0x76>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <HAL_TIM_Base_Start_IT+0xd0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_TIM_Base_Start_IT+0x76>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1b      	ldr	r2, [pc, #108]	; (800697c <HAL_TIM_Base_Start_IT+0xd4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_TIM_Base_Start_IT+0x76>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_TIM_Base_Start_IT+0xd8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d115      	bne.n	800694a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <HAL_TIM_Base_Start_IT+0xdc>)
 8006926:	4013      	ands	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b06      	cmp	r3, #6
 800692e:	d015      	beq.n	800695c <HAL_TIM_Base_Start_IT+0xb4>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006936:	d011      	beq.n	800695c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006948:	e008      	b.n	800695c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e000      	b.n	800695e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40000400 	.word	0x40000400
 8006974:	40000800 	.word	0x40000800
 8006978:	40013400 	.word	0x40013400
 800697c:	40014000 	.word	0x40014000
 8006980:	40015000 	.word	0x40015000
 8006984:	00010007 	.word	0x00010007

08006988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d020      	beq.n	80069ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01b      	beq.n	80069ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0202 	mvn.w	r2, #2
 80069bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f931 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 80069d8:	e005      	b.n	80069e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f923 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f934 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d020      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01b      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0204 	mvn.w	r2, #4
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f90b 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8fd 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f90e 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d020      	beq.n	8006a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01b      	beq.n	8006a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0208 	mvn.w	r2, #8
 8006a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8e5 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8d7 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8e8 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d020      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01b      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0210 	mvn.w	r2, #16
 8006aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8bf 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8b1 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f8c2 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00c      	beq.n	8006af4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0201 	mvn.w	r2, #1
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fa fcb4 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00c      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f95f 	bl	8006de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f957 	bl	8006df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f87c 	bl	8006c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f06f 0220 	mvn.w	r2, #32
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f91f 	bl	8006dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f92b 	bl	8006e08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00c      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f923 	bl	8006e1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00c      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f91b 	bl	8006e30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00c      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f913 	bl	8006e44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c1e:	bf00      	nop
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a48      	ldr	r2, [pc, #288]	; (8006dac <TIM_Base_SetConfig+0x134>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d00f      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a45      	ldr	r2, [pc, #276]	; (8006db0 <TIM_Base_SetConfig+0x138>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a44      	ldr	r2, [pc, #272]	; (8006db4 <TIM_Base_SetConfig+0x13c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a43      	ldr	r2, [pc, #268]	; (8006db8 <TIM_Base_SetConfig+0x140>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a42      	ldr	r2, [pc, #264]	; (8006dbc <TIM_Base_SetConfig+0x144>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a37      	ldr	r2, [pc, #220]	; (8006dac <TIM_Base_SetConfig+0x134>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01f      	beq.n	8006d12 <TIM_Base_SetConfig+0x9a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d01b      	beq.n	8006d12 <TIM_Base_SetConfig+0x9a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a34      	ldr	r2, [pc, #208]	; (8006db0 <TIM_Base_SetConfig+0x138>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d017      	beq.n	8006d12 <TIM_Base_SetConfig+0x9a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a33      	ldr	r2, [pc, #204]	; (8006db4 <TIM_Base_SetConfig+0x13c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <TIM_Base_SetConfig+0x9a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a32      	ldr	r2, [pc, #200]	; (8006db8 <TIM_Base_SetConfig+0x140>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00f      	beq.n	8006d12 <TIM_Base_SetConfig+0x9a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a32      	ldr	r2, [pc, #200]	; (8006dc0 <TIM_Base_SetConfig+0x148>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_Base_SetConfig+0x9a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a31      	ldr	r2, [pc, #196]	; (8006dc4 <TIM_Base_SetConfig+0x14c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_Base_SetConfig+0x9a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a30      	ldr	r2, [pc, #192]	; (8006dc8 <TIM_Base_SetConfig+0x150>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_Base_SetConfig+0x9a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a2b      	ldr	r2, [pc, #172]	; (8006dbc <TIM_Base_SetConfig+0x144>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d108      	bne.n	8006d24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a18      	ldr	r2, [pc, #96]	; (8006dac <TIM_Base_SetConfig+0x134>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <TIM_Base_SetConfig+0x100>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <TIM_Base_SetConfig+0x140>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00f      	beq.n	8006d78 <TIM_Base_SetConfig+0x100>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a19      	ldr	r2, [pc, #100]	; (8006dc0 <TIM_Base_SetConfig+0x148>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <TIM_Base_SetConfig+0x100>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a18      	ldr	r2, [pc, #96]	; (8006dc4 <TIM_Base_SetConfig+0x14c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d007      	beq.n	8006d78 <TIM_Base_SetConfig+0x100>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <TIM_Base_SetConfig+0x150>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_Base_SetConfig+0x100>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <TIM_Base_SetConfig+0x144>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d103      	bne.n	8006d80 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d105      	bne.n	8006d9e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f023 0201 	bic.w	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	611a      	str	r2, [r3, #16]
  }
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40000400 	.word	0x40000400
 8006db4:	40000800 	.word	0x40000800
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40015000 	.word	0x40015000
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	40014400 	.word	0x40014400
 8006dc8:	40014800 	.word	0x40014800

08006dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e042      	b.n	8006ef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fc f8e1 	bl	8003044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2224      	movs	r2, #36	; 0x24
 8006e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fbb2 	bl	800760c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f8b3 	bl	8007014 <UART_SetConfig>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e01b      	b.n	8006ef0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc31 	bl	8007750 <UART_CheckIdleState>
 8006eee:	4603      	mov	r3, r0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d17b      	bne.n	800700a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <HAL_UART_Transmit+0x26>
 8006f18:	88fb      	ldrh	r3, [r7, #6]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e074      	b.n	800700c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2221      	movs	r2, #33	; 0x21
 8006f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f32:	f7fc f991 	bl	8003258 <HAL_GetTick>
 8006f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f50:	d108      	bne.n	8006f64 <HAL_UART_Transmit+0x6c>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e003      	b.n	8006f6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f6c:	e030      	b.n	8006fd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fc93 	bl	80078a4 <UART_WaitOnFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e03d      	b.n	800700c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3302      	adds	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e007      	b.n	8006fbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1c8      	bne.n	8006f6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2140      	movs	r1, #64	; 0x40
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fc5c 	bl	80078a4 <UART_WaitOnFlagUntilTimeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e006      	b.n	800700c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2220      	movs	r2, #32
 8007002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	e000      	b.n	800700c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007018:	b08c      	sub	sp, #48	; 0x30
 800701a:	af00      	add	r7, sp, #0
 800701c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	431a      	orrs	r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	431a      	orrs	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	4313      	orrs	r3, r2
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4baa      	ldr	r3, [pc, #680]	; (80072ec <UART_SetConfig+0x2d8>)
 8007044:	4013      	ands	r3, r2
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800704c:	430b      	orrs	r3, r1
 800704e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a9f      	ldr	r2, [pc, #636]	; (80072f0 <UART_SetConfig+0x2dc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707c:	4313      	orrs	r3, r2
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800708a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007094:	430b      	orrs	r3, r1
 8007096:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709e:	f023 010f 	bic.w	r1, r3, #15
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a90      	ldr	r2, [pc, #576]	; (80072f4 <UART_SetConfig+0x2e0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d125      	bne.n	8007104 <UART_SetConfig+0xf0>
 80070b8:	4b8f      	ldr	r3, [pc, #572]	; (80072f8 <UART_SetConfig+0x2e4>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d81a      	bhi.n	80070fc <UART_SetConfig+0xe8>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <UART_SetConfig+0xb8>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	080070dd 	.word	0x080070dd
 80070d0:	080070ed 	.word	0x080070ed
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	080070f5 	.word	0x080070f5
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e2:	e116      	b.n	8007312 <UART_SetConfig+0x2fe>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ea:	e112      	b.n	8007312 <UART_SetConfig+0x2fe>
 80070ec:	2304      	movs	r3, #4
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f2:	e10e      	b.n	8007312 <UART_SetConfig+0x2fe>
 80070f4:	2308      	movs	r3, #8
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e10a      	b.n	8007312 <UART_SetConfig+0x2fe>
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007102:	e106      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a7c      	ldr	r2, [pc, #496]	; (80072fc <UART_SetConfig+0x2e8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d138      	bne.n	8007180 <UART_SetConfig+0x16c>
 800710e:	4b7a      	ldr	r3, [pc, #488]	; (80072f8 <UART_SetConfig+0x2e4>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007114:	f003 030c 	and.w	r3, r3, #12
 8007118:	2b0c      	cmp	r3, #12
 800711a:	d82d      	bhi.n	8007178 <UART_SetConfig+0x164>
 800711c:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <UART_SetConfig+0x110>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007159 	.word	0x08007159
 8007128:	08007179 	.word	0x08007179
 800712c:	08007179 	.word	0x08007179
 8007130:	08007179 	.word	0x08007179
 8007134:	08007169 	.word	0x08007169
 8007138:	08007179 	.word	0x08007179
 800713c:	08007179 	.word	0x08007179
 8007140:	08007179 	.word	0x08007179
 8007144:	08007161 	.word	0x08007161
 8007148:	08007179 	.word	0x08007179
 800714c:	08007179 	.word	0x08007179
 8007150:	08007179 	.word	0x08007179
 8007154:	08007171 	.word	0x08007171
 8007158:	2300      	movs	r3, #0
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715e:	e0d8      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007160:	2302      	movs	r3, #2
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007166:	e0d4      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716e:	e0d0      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007176:	e0cc      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717e:	e0c8      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a5e      	ldr	r2, [pc, #376]	; (8007300 <UART_SetConfig+0x2ec>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d125      	bne.n	80071d6 <UART_SetConfig+0x1c2>
 800718a:	4b5b      	ldr	r3, [pc, #364]	; (80072f8 <UART_SetConfig+0x2e4>)
 800718c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007190:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007194:	2b30      	cmp	r3, #48	; 0x30
 8007196:	d016      	beq.n	80071c6 <UART_SetConfig+0x1b2>
 8007198:	2b30      	cmp	r3, #48	; 0x30
 800719a:	d818      	bhi.n	80071ce <UART_SetConfig+0x1ba>
 800719c:	2b20      	cmp	r3, #32
 800719e:	d00a      	beq.n	80071b6 <UART_SetConfig+0x1a2>
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d814      	bhi.n	80071ce <UART_SetConfig+0x1ba>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <UART_SetConfig+0x19a>
 80071a8:	2b10      	cmp	r3, #16
 80071aa:	d008      	beq.n	80071be <UART_SetConfig+0x1aa>
 80071ac:	e00f      	b.n	80071ce <UART_SetConfig+0x1ba>
 80071ae:	2300      	movs	r3, #0
 80071b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b4:	e0ad      	b.n	8007312 <UART_SetConfig+0x2fe>
 80071b6:	2302      	movs	r3, #2
 80071b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071bc:	e0a9      	b.n	8007312 <UART_SetConfig+0x2fe>
 80071be:	2304      	movs	r3, #4
 80071c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c4:	e0a5      	b.n	8007312 <UART_SetConfig+0x2fe>
 80071c6:	2308      	movs	r3, #8
 80071c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071cc:	e0a1      	b.n	8007312 <UART_SetConfig+0x2fe>
 80071ce:	2310      	movs	r3, #16
 80071d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d4:	e09d      	b.n	8007312 <UART_SetConfig+0x2fe>
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a4a      	ldr	r2, [pc, #296]	; (8007304 <UART_SetConfig+0x2f0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d125      	bne.n	800722c <UART_SetConfig+0x218>
 80071e0:	4b45      	ldr	r3, [pc, #276]	; (80072f8 <UART_SetConfig+0x2e4>)
 80071e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071ea:	2bc0      	cmp	r3, #192	; 0xc0
 80071ec:	d016      	beq.n	800721c <UART_SetConfig+0x208>
 80071ee:	2bc0      	cmp	r3, #192	; 0xc0
 80071f0:	d818      	bhi.n	8007224 <UART_SetConfig+0x210>
 80071f2:	2b80      	cmp	r3, #128	; 0x80
 80071f4:	d00a      	beq.n	800720c <UART_SetConfig+0x1f8>
 80071f6:	2b80      	cmp	r3, #128	; 0x80
 80071f8:	d814      	bhi.n	8007224 <UART_SetConfig+0x210>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <UART_SetConfig+0x1f0>
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d008      	beq.n	8007214 <UART_SetConfig+0x200>
 8007202:	e00f      	b.n	8007224 <UART_SetConfig+0x210>
 8007204:	2300      	movs	r3, #0
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720a:	e082      	b.n	8007312 <UART_SetConfig+0x2fe>
 800720c:	2302      	movs	r3, #2
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007212:	e07e      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007214:	2304      	movs	r3, #4
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721a:	e07a      	b.n	8007312 <UART_SetConfig+0x2fe>
 800721c:	2308      	movs	r3, #8
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007222:	e076      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007224:	2310      	movs	r3, #16
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722a:	e072      	b.n	8007312 <UART_SetConfig+0x2fe>
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a35      	ldr	r2, [pc, #212]	; (8007308 <UART_SetConfig+0x2f4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d12a      	bne.n	800728c <UART_SetConfig+0x278>
 8007236:	4b30      	ldr	r3, [pc, #192]	; (80072f8 <UART_SetConfig+0x2e4>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007244:	d01a      	beq.n	800727c <UART_SetConfig+0x268>
 8007246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800724a:	d81b      	bhi.n	8007284 <UART_SetConfig+0x270>
 800724c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007250:	d00c      	beq.n	800726c <UART_SetConfig+0x258>
 8007252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007256:	d815      	bhi.n	8007284 <UART_SetConfig+0x270>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <UART_SetConfig+0x250>
 800725c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007260:	d008      	beq.n	8007274 <UART_SetConfig+0x260>
 8007262:	e00f      	b.n	8007284 <UART_SetConfig+0x270>
 8007264:	2300      	movs	r3, #0
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e052      	b.n	8007312 <UART_SetConfig+0x2fe>
 800726c:	2302      	movs	r3, #2
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007272:	e04e      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727a:	e04a      	b.n	8007312 <UART_SetConfig+0x2fe>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e046      	b.n	8007312 <UART_SetConfig+0x2fe>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728a:	e042      	b.n	8007312 <UART_SetConfig+0x2fe>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <UART_SetConfig+0x2dc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d13a      	bne.n	800730c <UART_SetConfig+0x2f8>
 8007296:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <UART_SetConfig+0x2e4>)
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072a4:	d01a      	beq.n	80072dc <UART_SetConfig+0x2c8>
 80072a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072aa:	d81b      	bhi.n	80072e4 <UART_SetConfig+0x2d0>
 80072ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b0:	d00c      	beq.n	80072cc <UART_SetConfig+0x2b8>
 80072b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b6:	d815      	bhi.n	80072e4 <UART_SetConfig+0x2d0>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <UART_SetConfig+0x2b0>
 80072bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c0:	d008      	beq.n	80072d4 <UART_SetConfig+0x2c0>
 80072c2:	e00f      	b.n	80072e4 <UART_SetConfig+0x2d0>
 80072c4:	2300      	movs	r3, #0
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ca:	e022      	b.n	8007312 <UART_SetConfig+0x2fe>
 80072cc:	2302      	movs	r3, #2
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d2:	e01e      	b.n	8007312 <UART_SetConfig+0x2fe>
 80072d4:	2304      	movs	r3, #4
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072da:	e01a      	b.n	8007312 <UART_SetConfig+0x2fe>
 80072dc:	2308      	movs	r3, #8
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e016      	b.n	8007312 <UART_SetConfig+0x2fe>
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e012      	b.n	8007312 <UART_SetConfig+0x2fe>
 80072ec:	cfff69f3 	.word	0xcfff69f3
 80072f0:	40008000 	.word	0x40008000
 80072f4:	40013800 	.word	0x40013800
 80072f8:	40021000 	.word	0x40021000
 80072fc:	40004400 	.word	0x40004400
 8007300:	40004800 	.word	0x40004800
 8007304:	40004c00 	.word	0x40004c00
 8007308:	40005000 	.word	0x40005000
 800730c:	2310      	movs	r3, #16
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4aae      	ldr	r2, [pc, #696]	; (80075d0 <UART_SetConfig+0x5bc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	f040 8097 	bne.w	800744c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800731e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007322:	2b08      	cmp	r3, #8
 8007324:	d823      	bhi.n	800736e <UART_SetConfig+0x35a>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x318>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007351 	.word	0x08007351
 8007330:	0800736f 	.word	0x0800736f
 8007334:	08007359 	.word	0x08007359
 8007338:	0800736f 	.word	0x0800736f
 800733c:	0800735f 	.word	0x0800735f
 8007340:	0800736f 	.word	0x0800736f
 8007344:	0800736f 	.word	0x0800736f
 8007348:	0800736f 	.word	0x0800736f
 800734c:	08007367 	.word	0x08007367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fe ff68 	bl	8006224 <HAL_RCC_GetPCLK1Freq>
 8007354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007356:	e010      	b.n	800737a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007358:	4b9e      	ldr	r3, [pc, #632]	; (80075d4 <UART_SetConfig+0x5c0>)
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800735c:	e00d      	b.n	800737a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735e:	f7fe fef3 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007364:	e009      	b.n	800737a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800736c:	e005      	b.n	800737a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8130 	beq.w	80075e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	4a94      	ldr	r2, [pc, #592]	; (80075d8 <UART_SetConfig+0x5c4>)
 8007388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738c:	461a      	mov	r2, r3
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	fbb3 f3f2 	udiv	r3, r3, r2
 8007394:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4413      	add	r3, r2
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d305      	bcc.n	80073b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d903      	bls.n	80073ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073b8:	e113      	b.n	80075e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	2200      	movs	r2, #0
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	60fa      	str	r2, [r7, #12]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	4a84      	ldr	r2, [pc, #528]	; (80075d8 <UART_SetConfig+0x5c4>)
 80073c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2200      	movs	r2, #0
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073dc:	f7f9 fbbe 	bl	8000b5c <__aeabi_uldivmod>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4610      	mov	r0, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	020b      	lsls	r3, r1, #8
 80073f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073f6:	0202      	lsls	r2, r0, #8
 80073f8:	6979      	ldr	r1, [r7, #20]
 80073fa:	6849      	ldr	r1, [r1, #4]
 80073fc:	0849      	lsrs	r1, r1, #1
 80073fe:	2000      	movs	r0, #0
 8007400:	460c      	mov	r4, r1
 8007402:	4605      	mov	r5, r0
 8007404:	eb12 0804 	adds.w	r8, r2, r4
 8007408:	eb43 0905 	adc.w	r9, r3, r5
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	469a      	mov	sl, r3
 8007414:	4693      	mov	fp, r2
 8007416:	4652      	mov	r2, sl
 8007418:	465b      	mov	r3, fp
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 fb9d 	bl	8000b5c <__aeabi_uldivmod>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4613      	mov	r3, r2
 8007428:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007430:	d308      	bcc.n	8007444 <UART_SetConfig+0x430>
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007438:	d204      	bcs.n	8007444 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6a3a      	ldr	r2, [r7, #32]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	e0ce      	b.n	80075e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800744a:	e0ca      	b.n	80075e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007454:	d166      	bne.n	8007524 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800745a:	2b08      	cmp	r3, #8
 800745c:	d827      	bhi.n	80074ae <UART_SetConfig+0x49a>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <UART_SetConfig+0x450>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007489 	.word	0x08007489
 8007468:	08007491 	.word	0x08007491
 800746c:	08007499 	.word	0x08007499
 8007470:	080074af 	.word	0x080074af
 8007474:	0800749f 	.word	0x0800749f
 8007478:	080074af 	.word	0x080074af
 800747c:	080074af 	.word	0x080074af
 8007480:	080074af 	.word	0x080074af
 8007484:	080074a7 	.word	0x080074a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007488:	f7fe fecc 	bl	8006224 <HAL_RCC_GetPCLK1Freq>
 800748c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800748e:	e014      	b.n	80074ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007490:	f7fe fede 	bl	8006250 <HAL_RCC_GetPCLK2Freq>
 8007494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007496:	e010      	b.n	80074ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007498:	4b4e      	ldr	r3, [pc, #312]	; (80075d4 <UART_SetConfig+0x5c0>)
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800749c:	e00d      	b.n	80074ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800749e:	f7fe fe53 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 80074a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074a4:	e009      	b.n	80074ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074ac:	e005      	b.n	80074ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 8090 	beq.w	80075e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	4a44      	ldr	r2, [pc, #272]	; (80075d8 <UART_SetConfig+0x5c4>)
 80074c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074d4:	005a      	lsls	r2, r3, #1
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	441a      	add	r2, r3
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	2b0f      	cmp	r3, #15
 80074ec:	d916      	bls.n	800751c <UART_SetConfig+0x508>
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f4:	d212      	bcs.n	800751c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	f023 030f 	bic.w	r3, r3, #15
 80074fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	b29b      	uxth	r3, r3
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	b29a      	uxth	r2, r3
 800750c:	8bfb      	ldrh	r3, [r7, #30]
 800750e:	4313      	orrs	r3, r2
 8007510:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	8bfa      	ldrh	r2, [r7, #30]
 8007518:	60da      	str	r2, [r3, #12]
 800751a:	e062      	b.n	80075e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007522:	e05e      	b.n	80075e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007528:	2b08      	cmp	r3, #8
 800752a:	d828      	bhi.n	800757e <UART_SetConfig+0x56a>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <UART_SetConfig+0x520>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	08007559 	.word	0x08007559
 8007538:	08007561 	.word	0x08007561
 800753c:	08007569 	.word	0x08007569
 8007540:	0800757f 	.word	0x0800757f
 8007544:	0800756f 	.word	0x0800756f
 8007548:	0800757f 	.word	0x0800757f
 800754c:	0800757f 	.word	0x0800757f
 8007550:	0800757f 	.word	0x0800757f
 8007554:	08007577 	.word	0x08007577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007558:	f7fe fe64 	bl	8006224 <HAL_RCC_GetPCLK1Freq>
 800755c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800755e:	e014      	b.n	800758a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007560:	f7fe fe76 	bl	8006250 <HAL_RCC_GetPCLK2Freq>
 8007564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007566:	e010      	b.n	800758a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007568:	4b1a      	ldr	r3, [pc, #104]	; (80075d4 <UART_SetConfig+0x5c0>)
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800756c:	e00d      	b.n	800758a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800756e:	f7fe fdeb 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007574:	e009      	b.n	800758a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800757c:	e005      	b.n	800758a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007588:	bf00      	nop
    }

    if (pclk != 0U)
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	2b00      	cmp	r3, #0
 800758e:	d028      	beq.n	80075e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	4a10      	ldr	r2, [pc, #64]	; (80075d8 <UART_SetConfig+0x5c4>)
 8007596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800759a:	461a      	mov	r2, r3
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	fbb3 f2f2 	udiv	r2, r3, r2
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	085b      	lsrs	r3, r3, #1
 80075a8:	441a      	add	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	2b0f      	cmp	r3, #15
 80075b8:	d910      	bls.n	80075dc <UART_SetConfig+0x5c8>
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c0:	d20c      	bcs.n	80075dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60da      	str	r2, [r3, #12]
 80075cc:	e009      	b.n	80075e2 <UART_SetConfig+0x5ce>
 80075ce:	bf00      	nop
 80075d0:	40008000 	.word	0x40008000
 80075d4:	00f42400 	.word	0x00f42400
 80075d8:	0800b8c0 	.word	0x0800b8c0
      }
      else
      {
        ret = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2200      	movs	r2, #0
 80075f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2200      	movs	r2, #0
 80075fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007602:	4618      	mov	r0, r3
 8007604:	3730      	adds	r7, #48	; 0x30
 8007606:	46bd      	mov	sp, r7
 8007608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800760c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01a      	beq.n	8007722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800770a:	d10a      	bne.n	8007722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b098      	sub	sp, #96	; 0x60
 8007754:	af02      	add	r7, sp, #8
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007760:	f7fb fd7a 	bl	8003258 <HAL_GetTick>
 8007764:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b08      	cmp	r3, #8
 8007772:	d12f      	bne.n	80077d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800777c:	2200      	movs	r2, #0
 800777e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f88e 	bl	80078a4 <UART_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d022      	beq.n	80077d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	e853 3f00 	ldrex	r3, [r3]
 800779a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a2:	653b      	str	r3, [r7, #80]	; 0x50
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ac:	647b      	str	r3, [r7, #68]	; 0x44
 80077ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b4:	e841 2300 	strex	r3, r2, [r1]
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e6      	bne.n	800778e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e063      	b.n	800789c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d149      	bne.n	8007876 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ea:	2200      	movs	r2, #0
 80077ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f857 	bl	80078a4 <UART_WaitOnFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d03c      	beq.n	8007876 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	623b      	str	r3, [r7, #32]
   return(result);
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
 800781c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e6      	bne.n	80077fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3308      	adds	r3, #8
 8007834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	60fb      	str	r3, [r7, #12]
   return(result);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	64bb      	str	r3, [r7, #72]	; 0x48
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784e:	61fa      	str	r2, [r7, #28]
 8007850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	69b9      	ldr	r1, [r7, #24]
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	617b      	str	r3, [r7, #20]
   return(result);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e5      	bne.n	800782e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e012      	b.n	800789c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3758      	adds	r7, #88	; 0x58
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	4613      	mov	r3, r2
 80078b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b4:	e04f      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d04b      	beq.n	8007956 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078be:	f7fb fccb 	bl	8003258 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d302      	bcc.n	80078d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e04e      	b.n	8007976 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d037      	beq.n	8007956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b80      	cmp	r3, #128	; 0x80
 80078ea:	d034      	beq.n	8007956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b40      	cmp	r3, #64	; 0x40
 80078f0:	d031      	beq.n	8007956 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d110      	bne.n	8007922 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2208      	movs	r2, #8
 8007906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f838 	bl	800797e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2208      	movs	r2, #8
 8007912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e029      	b.n	8007976 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007930:	d111      	bne.n	8007956 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800793a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 f81e 	bl	800797e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e00f      	b.n	8007976 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69da      	ldr	r2, [r3, #28]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4013      	ands	r3, r2
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	bf0c      	ite	eq
 8007966:	2301      	moveq	r3, #1
 8007968:	2300      	movne	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	429a      	cmp	r2, r3
 8007972:	d0a0      	beq.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800797e:	b480      	push	{r7}
 8007980:	b095      	sub	sp, #84	; 0x54
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800799a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a4:	643b      	str	r3, [r7, #64]	; 0x40
 80079a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e6      	bne.n	8007986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e3      	bne.n	80079b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d118      	bne.n	8007a2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f023 0310 	bic.w	r3, r3, #16
 8007a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6979      	ldr	r1, [r7, #20]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	613b      	str	r3, [r7, #16]
   return(result);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a3e:	bf00      	nop
 8007a40:	3754      	adds	r7, #84	; 0x54
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e027      	b.n	8007ab0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2224      	movs	r2, #36	; 0x24
 8007a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0201 	bic.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e02d      	b.n	8007b30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2224      	movs	r2, #36	; 0x24
 8007ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f84f 	bl	8007bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e02d      	b.n	8007bac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2224      	movs	r2, #36	; 0x24
 8007b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0201 	bic.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f811 	bl	8007bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d108      	bne.n	8007bd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bd4:	e031      	b.n	8007c3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bda:	2308      	movs	r3, #8
 8007bdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	0e5b      	lsrs	r3, r3, #25
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	0f5b      	lsrs	r3, r3, #29
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	7b3a      	ldrb	r2, [r7, #12]
 8007c02:	4911      	ldr	r1, [pc, #68]	; (8007c48 <UARTEx_SetNbDataToProcess+0x94>)
 8007c04:	5c8a      	ldrb	r2, [r1, r2]
 8007c06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c0a:	7b3a      	ldrb	r2, [r7, #12]
 8007c0c:	490f      	ldr	r1, [pc, #60]	; (8007c4c <UARTEx_SetNbDataToProcess+0x98>)
 8007c0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	7b7a      	ldrb	r2, [r7, #13]
 8007c20:	4909      	ldr	r1, [pc, #36]	; (8007c48 <UARTEx_SetNbDataToProcess+0x94>)
 8007c22:	5c8a      	ldrb	r2, [r1, r2]
 8007c24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c28:	7b7a      	ldrb	r2, [r7, #13]
 8007c2a:	4908      	ldr	r1, [pc, #32]	; (8007c4c <UARTEx_SetNbDataToProcess+0x98>)
 8007c2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	0800b8d8 	.word	0x0800b8d8
 8007c4c:	0800b8e0 	.word	0x0800b8e0

08007c50 <__NVIC_SetPriority>:
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	6039      	str	r1, [r7, #0]
 8007c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	db0a      	blt.n	8007c7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	490c      	ldr	r1, [pc, #48]	; (8007c9c <__NVIC_SetPriority+0x4c>)
 8007c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6e:	0112      	lsls	r2, r2, #4
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	440b      	add	r3, r1
 8007c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c78:	e00a      	b.n	8007c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	4908      	ldr	r1, [pc, #32]	; (8007ca0 <__NVIC_SetPriority+0x50>)
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	3b04      	subs	r3, #4
 8007c88:	0112      	lsls	r2, r2, #4
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	761a      	strb	r2, [r3, #24]
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	e000e100 	.word	0xe000e100
 8007ca0:	e000ed00 	.word	0xe000ed00

08007ca4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <SysTick_Handler+0x1c>)
 8007caa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007cac:	f002 fa9a 	bl	800a1e4 <xTaskGetSchedulerState>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d001      	beq.n	8007cba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007cb6:	f003 f97f 	bl	800afb8 <xPortSysTickHandler>
  }
}
 8007cba:	bf00      	nop
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	e000e010 	.word	0xe000e010

08007cc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007cc8:	2100      	movs	r1, #0
 8007cca:	f06f 0004 	mvn.w	r0, #4
 8007cce:	f7ff ffbf 	bl	8007c50 <__NVIC_SetPriority>
#endif
}
 8007cd2:	bf00      	nop
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cde:	f3ef 8305 	mrs	r3, IPSR
 8007ce2:	603b      	str	r3, [r7, #0]
  return(result);
 8007ce4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007cea:	f06f 0305 	mvn.w	r3, #5
 8007cee:	607b      	str	r3, [r7, #4]
 8007cf0:	e00c      	b.n	8007d0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <osKernelInitialize+0x44>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d105      	bne.n	8007d06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cfa:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <osKernelInitialize+0x44>)
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	607b      	str	r3, [r7, #4]
 8007d04:	e002      	b.n	8007d0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d06:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d0c:	687b      	ldr	r3, [r7, #4]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000284 	.word	0x20000284

08007d20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d26:	f3ef 8305 	mrs	r3, IPSR
 8007d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d32:	f06f 0305 	mvn.w	r3, #5
 8007d36:	607b      	str	r3, [r7, #4]
 8007d38:	e010      	b.n	8007d5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <osKernelStart+0x48>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d109      	bne.n	8007d56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d42:	f7ff ffbf 	bl	8007cc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d46:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <osKernelStart+0x48>)
 8007d48:	2202      	movs	r2, #2
 8007d4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d4c:	f001 fdee 	bl	800992c <vTaskStartScheduler>
      stat = osOK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	e002      	b.n	8007d5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d5c:	687b      	ldr	r3, [r7, #4]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000284 	.word	0x20000284

08007d6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08e      	sub	sp, #56	; 0x38
 8007d70:	af04      	add	r7, sp, #16
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d7c:	f3ef 8305 	mrs	r3, IPSR
 8007d80:	617b      	str	r3, [r7, #20]
  return(result);
 8007d82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d17e      	bne.n	8007e86 <osThreadNew+0x11a>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d07b      	beq.n	8007e86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d8e:	2380      	movs	r3, #128	; 0x80
 8007d90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d92:	2318      	movs	r3, #24
 8007d94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d045      	beq.n	8007e32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <osThreadNew+0x48>
        name = attr->name;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d008      	beq.n	8007dda <osThreadNew+0x6e>
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	2b38      	cmp	r3, #56	; 0x38
 8007dcc:	d805      	bhi.n	8007dda <osThreadNew+0x6e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <osThreadNew+0x72>
        return (NULL);
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e054      	b.n	8007e88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	089b      	lsrs	r3, r3, #2
 8007dec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00e      	beq.n	8007e14 <osThreadNew+0xa8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2ba7      	cmp	r3, #167	; 0xa7
 8007dfc:	d90a      	bls.n	8007e14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d006      	beq.n	8007e14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <osThreadNew+0xa8>
        mem = 1;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	e010      	b.n	8007e36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10c      	bne.n	8007e36 <osThreadNew+0xca>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d108      	bne.n	8007e36 <osThreadNew+0xca>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <osThreadNew+0xca>
          mem = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	e001      	b.n	8007e36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d110      	bne.n	8007e5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e44:	9202      	str	r2, [sp, #8]
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	6a3a      	ldr	r2, [r7, #32]
 8007e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f001 fb7e 	bl	8009554 <xTaskCreateStatic>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	e013      	b.n	8007e86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d110      	bne.n	8007e86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	f107 0310 	add.w	r3, r7, #16
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f001 fbc9 	bl	800960e <xTaskCreate>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d001      	beq.n	8007e86 <osThreadNew+0x11a>
            hTask = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e86:	693b      	ldr	r3, [r7, #16]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3728      	adds	r7, #40	; 0x28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e98:	f3ef 8305 	mrs	r3, IPSR
 8007e9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <osDelay+0x1c>
    stat = osErrorISR;
 8007ea4:	f06f 0305 	mvn.w	r3, #5
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e007      	b.n	8007ebc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <osDelay+0x2c>
      vTaskDelay(ticks);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fd04 	bl	80098c4 <vTaskDelay>
    }
  }

  return (stat);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b08a      	sub	sp, #40	; 0x28
 8007eca:	af02      	add	r7, sp, #8
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ed6:	f3ef 8305 	mrs	r3, IPSR
 8007eda:	613b      	str	r3, [r7, #16]
  return(result);
 8007edc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d175      	bne.n	8007fce <osSemaphoreNew+0x108>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d072      	beq.n	8007fce <osSemaphoreNew+0x108>
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d86e      	bhi.n	8007fce <osSemaphoreNew+0x108>
    mem = -1;
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d015      	beq.n	8007f28 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d006      	beq.n	8007f12 <osSemaphoreNew+0x4c>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	2b4f      	cmp	r3, #79	; 0x4f
 8007f0a:	d902      	bls.n	8007f12 <osSemaphoreNew+0x4c>
        mem = 1;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	e00c      	b.n	8007f2c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d108      	bne.n	8007f2c <osSemaphoreNew+0x66>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <osSemaphoreNew+0x66>
          mem = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61bb      	str	r3, [r7, #24]
 8007f26:	e001      	b.n	8007f2c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d04c      	beq.n	8007fce <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d128      	bne.n	8007f8c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d10a      	bne.n	8007f56 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2203      	movs	r2, #3
 8007f46:	9200      	str	r2, [sp, #0]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f000 fb5b 	bl	8008608 <xQueueGenericCreateStatic>
 8007f52:	61f8      	str	r0, [r7, #28]
 8007f54:	e005      	b.n	8007f62 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007f56:	2203      	movs	r2, #3
 8007f58:	2100      	movs	r1, #0
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	f000 fbcc 	bl	80086f8 <xQueueGenericCreate>
 8007f60:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d022      	beq.n	8007fae <osSemaphoreNew+0xe8>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d01f      	beq.n	8007fae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	69f8      	ldr	r0, [r7, #28]
 8007f76:	f000 fc87 	bl	8008888 <xQueueGenericSend>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d016      	beq.n	8007fae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007f80:	69f8      	ldr	r0, [r7, #28]
 8007f82:	f001 f913 	bl	80091ac <vQueueDelete>
            hSemaphore = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e010      	b.n	8007fae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d108      	bne.n	8007fa4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	461a      	mov	r2, r3
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fc09 	bl	80087b2 <xQueueCreateCountingSemaphoreStatic>
 8007fa0:	61f8      	str	r0, [r7, #28]
 8007fa2:	e004      	b.n	8007fae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fc3a 	bl	8008820 <xQueueCreateCountingSemaphore>
 8007fac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00c      	beq.n	8007fce <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	e001      	b.n	8007fc6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007fc6:	6979      	ldr	r1, [r7, #20]
 8007fc8:	69f8      	ldr	r0, [r7, #28]
 8007fca:	f001 fa3b 	bl	8009444 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007fce:	69fb      	ldr	r3, [r7, #28]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007ff0:	f06f 0303 	mvn.w	r3, #3
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	e039      	b.n	800806c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff8:	f3ef 8305 	mrs	r3, IPSR
 8007ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008000:	2b00      	cmp	r3, #0
 8008002:	d022      	beq.n	800804a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800800a:	f06f 0303 	mvn.w	r3, #3
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e02c      	b.n	800806c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008012:	2300      	movs	r3, #0
 8008014:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008016:	f107 0308 	add.w	r3, r7, #8
 800801a:	461a      	mov	r2, r3
 800801c:	2100      	movs	r1, #0
 800801e:	6938      	ldr	r0, [r7, #16]
 8008020:	f001 f844 	bl	80090ac <xQueueReceiveFromISR>
 8008024:	4603      	mov	r3, r0
 8008026:	2b01      	cmp	r3, #1
 8008028:	d003      	beq.n	8008032 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800802a:	f06f 0302 	mvn.w	r3, #2
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e01c      	b.n	800806c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d019      	beq.n	800806c <osSemaphoreAcquire+0x94>
 8008038:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <osSemaphoreAcquire+0xa0>)
 800803a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	e010      	b.n	800806c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6938      	ldr	r0, [r7, #16]
 800804e:	f000 ff21 	bl	8008e94 <xQueueSemaphoreTake>
 8008052:	4603      	mov	r3, r0
 8008054:	2b01      	cmp	r3, #1
 8008056:	d009      	beq.n	800806c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800805e:	f06f 0301 	mvn.w	r3, #1
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	e002      	b.n	800806c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008066:	f06f 0302 	mvn.w	r3, #2
 800806a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800806c:	697b      	ldr	r3, [r7, #20]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008092:	f06f 0303 	mvn.w	r3, #3
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	e02c      	b.n	80080f4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800809a:	f3ef 8305 	mrs	r3, IPSR
 800809e:	60fb      	str	r3, [r7, #12]
  return(result);
 80080a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d01a      	beq.n	80080dc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	4619      	mov	r1, r3
 80080b0:	6938      	ldr	r0, [r7, #16]
 80080b2:	f000 fd82 	bl	8008bba <xQueueGiveFromISR>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d003      	beq.n	80080c4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80080bc:	f06f 0302 	mvn.w	r3, #2
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	e017      	b.n	80080f4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d014      	beq.n	80080f4 <osSemaphoreRelease+0x78>
 80080ca:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <osSemaphoreRelease+0x84>)
 80080cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	e00b      	b.n	80080f4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	6938      	ldr	r0, [r7, #16]
 80080e4:	f000 fbd0 	bl	8008888 <xQueueGenericSend>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d002      	beq.n	80080f4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80080ee:	f06f 0302 	mvn.w	r3, #2
 80080f2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80080f4:	697b      	ldr	r3, [r7, #20]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008104:	b580      	push	{r7, lr}
 8008106:	b08a      	sub	sp, #40	; 0x28
 8008108:	af02      	add	r7, sp, #8
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008114:	f3ef 8305 	mrs	r3, IPSR
 8008118:	613b      	str	r3, [r7, #16]
  return(result);
 800811a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800811c:	2b00      	cmp	r3, #0
 800811e:	d15f      	bne.n	80081e0 <osMessageQueueNew+0xdc>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d05c      	beq.n	80081e0 <osMessageQueueNew+0xdc>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d059      	beq.n	80081e0 <osMessageQueueNew+0xdc>
    mem = -1;
 800812c:	f04f 33ff 	mov.w	r3, #4294967295
 8008130:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d029      	beq.n	800818c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d012      	beq.n	8008166 <osMessageQueueNew+0x62>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b4f      	cmp	r3, #79	; 0x4f
 8008146:	d90e      	bls.n	8008166 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	695a      	ldr	r2, [r3, #20]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68b9      	ldr	r1, [r7, #8]
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	429a      	cmp	r2, r3
 800815e:	d302      	bcc.n	8008166 <osMessageQueueNew+0x62>
        mem = 1;
 8008160:	2301      	movs	r3, #1
 8008162:	61bb      	str	r3, [r7, #24]
 8008164:	e014      	b.n	8008190 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d110      	bne.n	8008190 <osMessageQueueNew+0x8c>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10c      	bne.n	8008190 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800817a:	2b00      	cmp	r3, #0
 800817c:	d108      	bne.n	8008190 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <osMessageQueueNew+0x8c>
          mem = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	e001      	b.n	8008190 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d10b      	bne.n	80081ae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	2100      	movs	r1, #0
 80081a0:	9100      	str	r1, [sp, #0]
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fa2f 	bl	8008608 <xQueueGenericCreateStatic>
 80081aa:	61f8      	str	r0, [r7, #28]
 80081ac:	e008      	b.n	80081c0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d105      	bne.n	80081c0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80081b4:	2200      	movs	r2, #0
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fa9d 	bl	80086f8 <xQueueGenericCreate>
 80081be:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00c      	beq.n	80081e0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e001      	b.n	80081d8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80081d8:	6979      	ldr	r1, [r7, #20]
 80081da:	69f8      	ldr	r0, [r7, #28]
 80081dc:	f001 f932 	bl	8009444 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80081e0:	69fb      	ldr	r3, [r7, #28]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008204:	f3ef 8305 	mrs	r3, IPSR
 8008208:	617b      	str	r3, [r7, #20]
  return(result);
 800820a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800820c:	2b00      	cmp	r3, #0
 800820e:	d028      	beq.n	8008262 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <osMessageQueuePut+0x36>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <osMessageQueuePut+0x36>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008222:	f06f 0303 	mvn.w	r3, #3
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	e038      	b.n	800829c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800822a:	2300      	movs	r3, #0
 800822c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800822e:	f107 0210 	add.w	r2, r7, #16
 8008232:	2300      	movs	r3, #0
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	69b8      	ldr	r0, [r7, #24]
 8008238:	f000 fc24 	bl	8008a84 <xQueueGenericSendFromISR>
 800823c:	4603      	mov	r3, r0
 800823e:	2b01      	cmp	r3, #1
 8008240:	d003      	beq.n	800824a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008242:	f06f 0302 	mvn.w	r3, #2
 8008246:	61fb      	str	r3, [r7, #28]
 8008248:	e028      	b.n	800829c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d025      	beq.n	800829c <osMessageQueuePut+0xb0>
 8008250:	4b15      	ldr	r3, [pc, #84]	; (80082a8 <osMessageQueuePut+0xbc>)
 8008252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	e01c      	b.n	800829c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <osMessageQueuePut+0x82>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d103      	bne.n	8008276 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800826e:	f06f 0303 	mvn.w	r3, #3
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	e012      	b.n	800829c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008276:	2300      	movs	r3, #0
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	69b8      	ldr	r0, [r7, #24]
 800827e:	f000 fb03 	bl	8008888 <xQueueGenericSend>
 8008282:	4603      	mov	r3, r0
 8008284:	2b01      	cmp	r3, #1
 8008286:	d009      	beq.n	800829c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800828e:	f06f 0301 	mvn.w	r3, #1
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	e002      	b.n	800829c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008296:	f06f 0302 	mvn.w	r3, #2
 800829a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800829c:	69fb      	ldr	r3, [r7, #28]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082be:	2300      	movs	r3, #0
 80082c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082c2:	f3ef 8305 	mrs	r3, IPSR
 80082c6:	617b      	str	r3, [r7, #20]
  return(result);
 80082c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d028      	beq.n	8008320 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <osMessageQueueGet+0x34>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <osMessageQueueGet+0x34>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80082e0:	f06f 0303 	mvn.w	r3, #3
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e037      	b.n	8008358 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80082ec:	f107 0310 	add.w	r3, r7, #16
 80082f0:	461a      	mov	r2, r3
 80082f2:	68b9      	ldr	r1, [r7, #8]
 80082f4:	69b8      	ldr	r0, [r7, #24]
 80082f6:	f000 fed9 	bl	80090ac <xQueueReceiveFromISR>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d003      	beq.n	8008308 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008300:	f06f 0302 	mvn.w	r3, #2
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	e027      	b.n	8008358 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d024      	beq.n	8008358 <osMessageQueueGet+0xac>
 800830e:	4b15      	ldr	r3, [pc, #84]	; (8008364 <osMessageQueueGet+0xb8>)
 8008310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	e01b      	b.n	8008358 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <osMessageQueueGet+0x80>
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d103      	bne.n	8008334 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800832c:	f06f 0303 	mvn.w	r3, #3
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	e011      	b.n	8008358 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	68b9      	ldr	r1, [r7, #8]
 8008338:	69b8      	ldr	r0, [r7, #24]
 800833a:	f000 fccb 	bl	8008cd4 <xQueueReceive>
 800833e:	4603      	mov	r3, r0
 8008340:	2b01      	cmp	r3, #1
 8008342:	d009      	beq.n	8008358 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800834a:	f06f 0301 	mvn.w	r3, #1
 800834e:	61fb      	str	r3, [r7, #28]
 8008350:	e002      	b.n	8008358 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008352:	f06f 0302 	mvn.w	r3, #2
 8008356:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008358:	69fb      	ldr	r3, [r7, #28]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a07      	ldr	r2, [pc, #28]	; (8008394 <vApplicationGetIdleTaskMemory+0x2c>)
 8008378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	4a06      	ldr	r2, [pc, #24]	; (8008398 <vApplicationGetIdleTaskMemory+0x30>)
 800837e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2280      	movs	r2, #128	; 0x80
 8008384:	601a      	str	r2, [r3, #0]
}
 8008386:	bf00      	nop
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20000288 	.word	0x20000288
 8008398:	20000330 	.word	0x20000330

0800839c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4a07      	ldr	r2, [pc, #28]	; (80083c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80083ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4a06      	ldr	r2, [pc, #24]	; (80083cc <vApplicationGetTimerTaskMemory+0x30>)
 80083b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083ba:	601a      	str	r2, [r3, #0]
}
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	20000530 	.word	0x20000530
 80083cc:	200005d8 	.word	0x200005d8

080083d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f103 0208 	add.w	r2, r3, #8
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f04f 32ff 	mov.w	r2, #4294967295
 80083e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f103 0208 	add.w	r2, r3, #8
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f103 0208 	add.w	r2, r3, #8
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800842a:	b480      	push	{r7}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
}
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008488:	d103      	bne.n	8008492 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e00c      	b.n	80084ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3308      	adds	r3, #8
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	e002      	b.n	80084a0 <vListInsert+0x2e>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d2f6      	bcs.n	800849a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	601a      	str	r2, [r3, #0]
}
 80084d8:	bf00      	nop
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6892      	ldr	r2, [r2, #8]
 80084fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6852      	ldr	r2, [r2, #4]
 8008504:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	429a      	cmp	r2, r3
 800850e:	d103      	bne.n	8008518 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	1e5a      	subs	r2, r3, #1
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008562:	f002 fc97 	bl	800ae94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	68f9      	ldr	r1, [r7, #12]
 8008570:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	441a      	add	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008592:	3b01      	subs	r3, #1
 8008594:	68f9      	ldr	r1, [r7, #12]
 8008596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008598:	fb01 f303 	mul.w	r3, r1, r3
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	22ff      	movs	r2, #255	; 0xff
 80085a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	22ff      	movs	r2, #255	; 0xff
 80085ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d114      	bne.n	80085e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01a      	beq.n	80085f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3310      	adds	r3, #16
 80085c4:	4618      	mov	r0, r3
 80085c6:	f001 fc4b 	bl	8009e60 <xTaskRemoveFromEventList>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d012      	beq.n	80085f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085d0:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <xQueueGenericReset+0xcc>)
 80085d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	e009      	b.n	80085f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3310      	adds	r3, #16
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fef2 	bl	80083d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3324      	adds	r3, #36	; 0x24
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff feed 	bl	80083d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085f6:	f002 fc7d 	bl	800aef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085fa:	2301      	movs	r3, #1
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	e000ed04 	.word	0xe000ed04

08008608 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08e      	sub	sp, #56	; 0x38
 800860c:	af02      	add	r7, sp, #8
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	627b      	str	r3, [r7, #36]	; 0x24
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <xQueueGenericCreateStatic+0x52>
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <xQueueGenericCreateStatic+0x56>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <xQueueGenericCreateStatic+0x58>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	623b      	str	r3, [r7, #32]
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <xQueueGenericCreateStatic+0x7e>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <xQueueGenericCreateStatic+0x82>
 8008686:	2301      	movs	r3, #1
 8008688:	e000      	b.n	800868c <xQueueGenericCreateStatic+0x84>
 800868a:	2300      	movs	r3, #0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	61fb      	str	r3, [r7, #28]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086a6:	2350      	movs	r3, #80	; 0x50
 80086a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b50      	cmp	r3, #80	; 0x50
 80086ae:	d00a      	beq.n	80086c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	61bb      	str	r3, [r7, #24]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00d      	beq.n	80086ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	4613      	mov	r3, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	68b9      	ldr	r1, [r7, #8]
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f83f 	bl	800876c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3730      	adds	r7, #48	; 0x30
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10a      	bne.n	8008722 <xQueueGenericCreate+0x2a>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	613b      	str	r3, [r7, #16]
}
 800871e:	bf00      	nop
 8008720:	e7fe      	b.n	8008720 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	fb02 f303 	mul.w	r3, r2, r3
 800872a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	3350      	adds	r3, #80	; 0x50
 8008730:	4618      	mov	r0, r3
 8008732:	f002 fcd1 	bl	800b0d8 <pvPortMalloc>
 8008736:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d011      	beq.n	8008762 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	3350      	adds	r3, #80	; 0x50
 8008746:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008750:	79fa      	ldrb	r2, [r7, #7]
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	4613      	mov	r3, r2
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	68b9      	ldr	r1, [r7, #8]
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 f805 	bl	800876c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008762:	69bb      	ldr	r3, [r7, #24]
	}
 8008764:	4618      	mov	r0, r3
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d103      	bne.n	8008788 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e002      	b.n	800878e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800879a:	2101      	movs	r1, #1
 800879c:	69b8      	ldr	r0, [r7, #24]
 800879e:	f7ff fecb 	bl	8008538 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	78fa      	ldrb	r2, [r7, #3]
 80087a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b08a      	sub	sp, #40	; 0x28
 80087b6:	af02      	add	r7, sp, #8
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	61bb      	str	r3, [r7, #24]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d90a      	bls.n	80087f8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	617b      	str	r3, [r7, #20]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087f8:	2302      	movs	r3, #2
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	2100      	movs	r1, #0
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff ff00 	bl	8008608 <xQueueGenericCreateStatic>
 8008808:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008816:	69fb      	ldr	r3, [r7, #28]
	}
 8008818:	4618      	mov	r0, r3
 800881a:	3720      	adds	r7, #32
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10a      	bne.n	8008846 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	613b      	str	r3, [r7, #16]
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	429a      	cmp	r2, r3
 800884c:	d90a      	bls.n	8008864 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	60fb      	str	r3, [r7, #12]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008864:	2202      	movs	r2, #2
 8008866:	2100      	movs	r1, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff ff45 	bl	80086f8 <xQueueGenericCreate>
 800886e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800887c:	697b      	ldr	r3, [r7, #20]
	}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08e      	sub	sp, #56	; 0x38
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008896:	2300      	movs	r3, #0
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <xQueueGenericSend+0x32>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <xQueueGenericSend+0x40>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <xQueueGenericSend+0x44>
 80088c8:	2301      	movs	r3, #1
 80088ca:	e000      	b.n	80088ce <xQueueGenericSend+0x46>
 80088cc:	2300      	movs	r3, #0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <xQueueGenericSend+0x60>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSend+0x6e>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <xQueueGenericSend+0x72>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <xQueueGenericSend+0x74>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <xQueueGenericSend+0x8e>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	623b      	str	r3, [r7, #32]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008916:	f001 fc65 	bl	800a1e4 <xTaskGetSchedulerState>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <xQueueGenericSend+0x9e>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <xQueueGenericSend+0xa2>
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <xQueueGenericSend+0xa4>
 800892a:	2300      	movs	r3, #0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <xQueueGenericSend+0xbe>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	61fb      	str	r3, [r7, #28]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008946:	f002 faa5 	bl	800ae94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008952:	429a      	cmp	r2, r3
 8008954:	d302      	bcc.n	800895c <xQueueGenericSend+0xd4>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d129      	bne.n	80089b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008962:	f000 fc5e 	bl	8009222 <prvCopyDataToQueue>
 8008966:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d010      	beq.n	8008992 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	3324      	adds	r3, #36	; 0x24
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fa73 	bl	8009e60 <xTaskRemoveFromEventList>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d013      	beq.n	80089a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008980:	4b3f      	ldr	r3, [pc, #252]	; (8008a80 <xQueueGenericSend+0x1f8>)
 8008982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	e00a      	b.n	80089a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d007      	beq.n	80089a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008998:	4b39      	ldr	r3, [pc, #228]	; (8008a80 <xQueueGenericSend+0x1f8>)
 800899a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089a8:	f002 faa4 	bl	800aef4 <vPortExitCritical>
				return pdPASS;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e063      	b.n	8008a78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089b6:	f002 fa9d 	bl	800aef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	e05c      	b.n	8008a78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d106      	bne.n	80089d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089c4:	f107 0314 	add.w	r3, r7, #20
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 faad 	bl	8009f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ce:	2301      	movs	r3, #1
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089d2:	f002 fa8f 	bl	800aef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089d6:	f001 f819 	bl	8009a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089da:	f002 fa5b 	bl	800ae94 <vPortEnterCritical>
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e4:	b25b      	sxtb	r3, r3
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ea:	d103      	bne.n	80089f4 <xQueueGenericSend+0x16c>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089fa:	b25b      	sxtb	r3, r3
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d103      	bne.n	8008a0a <xQueueGenericSend+0x182>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a0a:	f002 fa73 	bl	800aef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a0e:	1d3a      	adds	r2, r7, #4
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f001 fa9c 	bl	8009f54 <xTaskCheckForTimeOut>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d124      	bne.n	8008a6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a24:	f000 fcf5 	bl	8009412 <prvIsQueueFull>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d018      	beq.n	8008a60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	3310      	adds	r3, #16
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	4611      	mov	r1, r2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f001 f9c2 	bl	8009dc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a3e:	f000 fc80 	bl	8009342 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a42:	f000 fff1 	bl	8009a28 <xTaskResumeAll>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f47f af7c 	bne.w	8008946 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a4e:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <xQueueGenericSend+0x1f8>)
 8008a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	e772      	b.n	8008946 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a62:	f000 fc6e 	bl	8009342 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a66:	f000 ffdf 	bl	8009a28 <xTaskResumeAll>
 8008a6a:	e76c      	b.n	8008946 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a6e:	f000 fc68 	bl	8009342 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a72:	f000 ffd9 	bl	8009a28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3738      	adds	r7, #56	; 0x38
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b090      	sub	sp, #64	; 0x40
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <xQueueGenericSendFromISR+0x3c>
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <xQueueGenericSendFromISR+0x40>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e000      	b.n	8008ac6 <xQueueGenericSendFromISR+0x42>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10a      	bne.n	8008ae0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d103      	bne.n	8008aee <xQueueGenericSendFromISR+0x6a>
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d101      	bne.n	8008af2 <xQueueGenericSendFromISR+0x6e>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <xQueueGenericSendFromISR+0x70>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	623b      	str	r3, [r7, #32]
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b0e:	f002 faa3 	bl	800b058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b12:	f3ef 8211 	mrs	r2, BASEPRI
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	61fa      	str	r2, [r7, #28]
 8008b28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <xQueueGenericSendFromISR+0xbc>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d12f      	bne.n	8008ba0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b56:	f000 fb64 	bl	8009222 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b62:	d112      	bne.n	8008b8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d016      	beq.n	8008b9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	3324      	adds	r3, #36	; 0x24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 f975 	bl	8009e60 <xTaskRemoveFromEventList>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00e      	beq.n	8008b9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	e007      	b.n	8008b9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b8e:	3301      	adds	r3, #1
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	b25a      	sxtb	r2, r3
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b9e:	e001      	b.n	8008ba4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3740      	adds	r7, #64	; 0x40
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b08e      	sub	sp, #56	; 0x38
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	623b      	str	r3, [r7, #32]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	61fb      	str	r3, [r7, #28]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <xQueueGiveFromISR+0x58>
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <xQueueGiveFromISR+0x5c>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <xQueueGiveFromISR+0x5e>
 8008c16:	2300      	movs	r3, #0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	61bb      	str	r3, [r7, #24]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c32:	f002 fa11 	bl	800b058 <vPortValidateInterruptPriority>
	__asm volatile
 8008c36:	f3ef 8211 	mrs	r2, BASEPRI
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	617a      	str	r2, [r7, #20]
 8008c4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d22b      	bcs.n	8008cba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7c:	d112      	bne.n	8008ca4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d016      	beq.n	8008cb4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	3324      	adds	r3, #36	; 0x24
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f001 f8e8 	bl	8009e60 <xTaskRemoveFromEventList>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00e      	beq.n	8008cb4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	e007      	b.n	8008cb4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca8:	3301      	adds	r3, #1
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	b25a      	sxtb	r2, r3
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb8:	e001      	b.n	8008cbe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f383 8811 	msr	BASEPRI, r3
}
 8008cc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3738      	adds	r7, #56	; 0x38
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08c      	sub	sp, #48	; 0x30
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <xQueueReceive+0x30>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	623b      	str	r3, [r7, #32]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d103      	bne.n	8008d12 <xQueueReceive+0x3e>
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <xQueueReceive+0x42>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <xQueueReceive+0x44>
 8008d16:	2300      	movs	r3, #0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <xQueueReceive+0x5e>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	61fb      	str	r3, [r7, #28]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d32:	f001 fa57 	bl	800a1e4 <xTaskGetSchedulerState>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <xQueueReceive+0x6e>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <xQueueReceive+0x72>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <xQueueReceive+0x74>
 8008d46:	2300      	movs	r3, #0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <xQueueReceive+0x8e>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	61bb      	str	r3, [r7, #24]
}
 8008d5e:	bf00      	nop
 8008d60:	e7fe      	b.n	8008d60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d62:	f002 f897 	bl	800ae94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d01f      	beq.n	8008db2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d76:	f000 fabe 	bl	80092f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	1e5a      	subs	r2, r3, #1
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00f      	beq.n	8008daa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8c:	3310      	adds	r3, #16
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 f866 	bl	8009e60 <xTaskRemoveFromEventList>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d007      	beq.n	8008daa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d9a:	4b3d      	ldr	r3, [pc, #244]	; (8008e90 <xQueueReceive+0x1bc>)
 8008d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008daa:	f002 f8a3 	bl	800aef4 <vPortExitCritical>
				return pdPASS;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e069      	b.n	8008e86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d103      	bne.n	8008dc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008db8:	f002 f89c 	bl	800aef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e062      	b.n	8008e86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dc6:	f107 0310 	add.w	r3, r7, #16
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 f8ac 	bl	8009f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dd4:	f002 f88e 	bl	800aef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dd8:	f000 fe18 	bl	8009a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ddc:	f002 f85a 	bl	800ae94 <vPortEnterCritical>
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008de6:	b25b      	sxtb	r3, r3
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d103      	bne.n	8008df6 <xQueueReceive+0x122>
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dfc:	b25b      	sxtb	r3, r3
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d103      	bne.n	8008e0c <xQueueReceive+0x138>
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e0c:	f002 f872 	bl	800aef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e10:	1d3a      	adds	r2, r7, #4
 8008e12:	f107 0310 	add.w	r3, r7, #16
 8008e16:	4611      	mov	r1, r2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f001 f89b 	bl	8009f54 <xTaskCheckForTimeOut>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d123      	bne.n	8008e6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e26:	f000 fade 	bl	80093e6 <prvIsQueueEmpty>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d017      	beq.n	8008e60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	3324      	adds	r3, #36	; 0x24
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4611      	mov	r1, r2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 ffc1 	bl	8009dc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e40:	f000 fa7f 	bl	8009342 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e44:	f000 fdf0 	bl	8009a28 <xTaskResumeAll>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d189      	bne.n	8008d62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e4e:	4b10      	ldr	r3, [pc, #64]	; (8008e90 <xQueueReceive+0x1bc>)
 8008e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	e780      	b.n	8008d62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e62:	f000 fa6e 	bl	8009342 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e66:	f000 fddf 	bl	8009a28 <xTaskResumeAll>
 8008e6a:	e77a      	b.n	8008d62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e6e:	f000 fa68 	bl	8009342 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e72:	f000 fdd9 	bl	8009a28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e78:	f000 fab5 	bl	80093e6 <prvIsQueueEmpty>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f43f af6f 	beq.w	8008d62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3730      	adds	r7, #48	; 0x30
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08e      	sub	sp, #56	; 0x38
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	623b      	str	r3, [r7, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	61fb      	str	r3, [r7, #28]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee4:	f001 f97e 	bl	800a1e4 <xTaskGetSchedulerState>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <xQueueSemaphoreTake+0x60>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <xQueueSemaphoreTake+0x64>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <xQueueSemaphoreTake+0x66>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10a      	bne.n	8008f14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	61bb      	str	r3, [r7, #24]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f14:	f001 ffbe 	bl	800ae94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d024      	beq.n	8008f6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	1e5a      	subs	r2, r3, #1
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d104      	bne.n	8008f3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f34:	f001 facc 	bl	800a4d0 <pvTaskIncrementMutexHeldCount>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00f      	beq.n	8008f66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	3310      	adds	r3, #16
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 ff88 	bl	8009e60 <xTaskRemoveFromEventList>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d007      	beq.n	8008f66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f56:	4b54      	ldr	r3, [pc, #336]	; (80090a8 <xQueueSemaphoreTake+0x214>)
 8008f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f66:	f001 ffc5 	bl	800aef4 <vPortExitCritical>
				return pdPASS;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e097      	b.n	800909e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d111      	bne.n	8008f98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	617b      	str	r3, [r7, #20]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f90:	f001 ffb0 	bl	800aef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f94:	2300      	movs	r3, #0
 8008f96:	e082      	b.n	800909e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f9e:	f107 030c 	add.w	r3, r7, #12
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 ffc0 	bl	8009f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fac:	f001 ffa2 	bl	800aef4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fb0:	f000 fd2c 	bl	8009a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fb4:	f001 ff6e 	bl	800ae94 <vPortEnterCritical>
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fbe:	b25b      	sxtb	r3, r3
 8008fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc4:	d103      	bne.n	8008fce <xQueueSemaphoreTake+0x13a>
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fd4:	b25b      	sxtb	r3, r3
 8008fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fda:	d103      	bne.n	8008fe4 <xQueueSemaphoreTake+0x150>
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fe4:	f001 ff86 	bl	800aef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe8:	463a      	mov	r2, r7
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 ffaf 	bl	8009f54 <xTaskCheckForTimeOut>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d132      	bne.n	8009062 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ffe:	f000 f9f2 	bl	80093e6 <prvIsQueueEmpty>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d026      	beq.n	8009056 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009010:	f001 ff40 	bl	800ae94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	4618      	mov	r0, r3
 800901a:	f001 f901 	bl	800a220 <xTaskPriorityInherit>
 800901e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009020:	f001 ff68 	bl	800aef4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	3324      	adds	r3, #36	; 0x24
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	4611      	mov	r1, r2
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fec7 	bl	8009dc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009034:	f000 f985 	bl	8009342 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009038:	f000 fcf6 	bl	8009a28 <xTaskResumeAll>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	f47f af68 	bne.w	8008f14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009044:	4b18      	ldr	r3, [pc, #96]	; (80090a8 <xQueueSemaphoreTake+0x214>)
 8009046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	e75e      	b.n	8008f14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009058:	f000 f973 	bl	8009342 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800905c:	f000 fce4 	bl	8009a28 <xTaskResumeAll>
 8009060:	e758      	b.n	8008f14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009064:	f000 f96d 	bl	8009342 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009068:	f000 fcde 	bl	8009a28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800906c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800906e:	f000 f9ba 	bl	80093e6 <prvIsQueueEmpty>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	f43f af4d 	beq.w	8008f14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00d      	beq.n	800909c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009080:	f001 ff08 	bl	800ae94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009086:	f000 f8b4 	bl	80091f2 <prvGetDisinheritPriorityAfterTimeout>
 800908a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009092:	4618      	mov	r0, r3
 8009094:	f001 f99a 	bl	800a3cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009098:	f001 ff2c 	bl	800aef4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800909c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3738      	adds	r7, #56	; 0x38
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08e      	sub	sp, #56	; 0x38
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	623b      	str	r3, [r7, #32]
}
 80090d4:	bf00      	nop
 80090d6:	e7fe      	b.n	80090d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d103      	bne.n	80090e6 <xQueueReceiveFromISR+0x3a>
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <xQueueReceiveFromISR+0x3e>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <xQueueReceiveFromISR+0x40>
 80090ea:	2300      	movs	r3, #0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	61fb      	str	r3, [r7, #28]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009106:	f001 ffa7 	bl	800b058 <vPortValidateInterruptPriority>
	__asm volatile
 800910a:	f3ef 8211 	mrs	r2, BASEPRI
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	61ba      	str	r2, [r7, #24]
 8009120:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009122:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009124:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	2b00      	cmp	r3, #0
 8009130:	d02f      	beq.n	8009192 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800913c:	68b9      	ldr	r1, [r7, #8]
 800913e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009140:	f000 f8d9 	bl	80092f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	1e5a      	subs	r2, r3, #1
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800914c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d112      	bne.n	800917c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d016      	beq.n	800918c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	3310      	adds	r3, #16
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fe7c 	bl	8009e60 <xTaskRemoveFromEventList>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00e      	beq.n	800918c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e007      	b.n	800918c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800917c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009180:	3301      	adds	r3, #1
 8009182:	b2db      	uxtb	r3, r3
 8009184:	b25a      	sxtb	r2, r3
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800918c:	2301      	movs	r3, #1
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
 8009190:	e001      	b.n	8009196 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009192:	2300      	movs	r3, #0
 8009194:	637b      	str	r3, [r7, #52]	; 0x34
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	613b      	str	r3, [r7, #16]
	__asm volatile
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f383 8811 	msr	BASEPRI, r3
}
 80091a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3738      	adds	r7, #56	; 0x38
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <vQueueDelete+0x28>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	60bb      	str	r3, [r7, #8]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 f95f 	bl	8009498 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f002 f843 	bl	800b270 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091f2:	b480      	push	{r7}
 80091f4:	b085      	sub	sp, #20
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d006      	beq.n	8009210 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	e001      	b.n	8009214 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009214:	68fb      	ldr	r3, [r7, #12]
	}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d14d      	bne.n	80092e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	4618      	mov	r0, r3
 800924e:	f001 f84f 	bl	800a2f0 <xTaskPriorityDisinherit>
 8009252:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	609a      	str	r2, [r3, #8]
 800925a:	e043      	b.n	80092e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d119      	bne.n	8009296 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6858      	ldr	r0, [r3, #4]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	461a      	mov	r2, r3
 800926c:	68b9      	ldr	r1, [r7, #8]
 800926e:	f002 f9a1 	bl	800b5b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	441a      	add	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	429a      	cmp	r2, r3
 800928a:	d32b      	bcc.n	80092e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	605a      	str	r2, [r3, #4]
 8009294:	e026      	b.n	80092e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	68d8      	ldr	r0, [r3, #12]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	461a      	mov	r2, r3
 80092a0:	68b9      	ldr	r1, [r7, #8]
 80092a2:	f002 f987 	bl	800b5b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ae:	425b      	negs	r3, r3
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d207      	bcs.n	80092d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689a      	ldr	r2, [r3, #8]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	425b      	negs	r3, r3
 80092cc:	441a      	add	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d105      	bne.n	80092e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092ec:	697b      	ldr	r3, [r7, #20]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	d018      	beq.n	800933a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009310:	441a      	add	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	429a      	cmp	r2, r3
 8009320:	d303      	bcc.n	800932a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68d9      	ldr	r1, [r3, #12]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	461a      	mov	r2, r3
 8009334:	6838      	ldr	r0, [r7, #0]
 8009336:	f002 f93d 	bl	800b5b4 <memcpy>
	}
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800934a:	f001 fda3 	bl	800ae94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009354:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009356:	e011      	b.n	800937c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	2b00      	cmp	r3, #0
 800935e:	d012      	beq.n	8009386 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3324      	adds	r3, #36	; 0x24
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fd7b 	bl	8009e60 <xTaskRemoveFromEventList>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009370:	f000 fe52 	bl	800a018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	3b01      	subs	r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800937c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009380:	2b00      	cmp	r3, #0
 8009382:	dce9      	bgt.n	8009358 <prvUnlockQueue+0x16>
 8009384:	e000      	b.n	8009388 <prvUnlockQueue+0x46>
					break;
 8009386:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	22ff      	movs	r2, #255	; 0xff
 800938c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009390:	f001 fdb0 	bl	800aef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009394:	f001 fd7e 	bl	800ae94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800939e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093a0:	e011      	b.n	80093c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d012      	beq.n	80093d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3310      	adds	r3, #16
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fd56 	bl	8009e60 <xTaskRemoveFromEventList>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093ba:	f000 fe2d 	bl	800a018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093be:	7bbb      	ldrb	r3, [r7, #14]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	dce9      	bgt.n	80093a2 <prvUnlockQueue+0x60>
 80093ce:	e000      	b.n	80093d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093da:	f001 fd8b 	bl	800aef4 <vPortExitCritical>
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093ee:	f001 fd51 	bl	800ae94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093fa:	2301      	movs	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	e001      	b.n	8009404 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009404:	f001 fd76 	bl	800aef4 <vPortExitCritical>

	return xReturn;
 8009408:	68fb      	ldr	r3, [r7, #12]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800941a:	f001 fd3b 	bl	800ae94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009426:	429a      	cmp	r2, r3
 8009428:	d102      	bne.n	8009430 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800942a:	2301      	movs	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	e001      	b.n	8009434 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009430:	2300      	movs	r3, #0
 8009432:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009434:	f001 fd5e 	bl	800aef4 <vPortExitCritical>

	return xReturn;
 8009438:	68fb      	ldr	r3, [r7, #12]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800944e:	2300      	movs	r3, #0
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	e014      	b.n	800947e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009454:	4a0f      	ldr	r2, [pc, #60]	; (8009494 <vQueueAddToRegistry+0x50>)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10b      	bne.n	8009478 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009460:	490c      	ldr	r1, [pc, #48]	; (8009494 <vQueueAddToRegistry+0x50>)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800946a:	4a0a      	ldr	r2, [pc, #40]	; (8009494 <vQueueAddToRegistry+0x50>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	4413      	add	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009476:	e006      	b.n	8009486 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3301      	adds	r3, #1
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b07      	cmp	r3, #7
 8009482:	d9e7      	bls.n	8009454 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	200009d8 	.word	0x200009d8

08009498 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	e016      	b.n	80094d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80094a6:	4a10      	ldr	r2, [pc, #64]	; (80094e8 <vQueueUnregisterQueue+0x50>)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	4413      	add	r3, r2
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d10b      	bne.n	80094ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094b6:	4a0c      	ldr	r2, [pc, #48]	; (80094e8 <vQueueUnregisterQueue+0x50>)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2100      	movs	r1, #0
 80094bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094c0:	4a09      	ldr	r2, [pc, #36]	; (80094e8 <vQueueUnregisterQueue+0x50>)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	00db      	lsls	r3, r3, #3
 80094c6:	4413      	add	r3, r2
 80094c8:	2200      	movs	r2, #0
 80094ca:	605a      	str	r2, [r3, #4]
				break;
 80094cc:	e006      	b.n	80094dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3301      	adds	r3, #1
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b07      	cmp	r3, #7
 80094d8:	d9e5      	bls.n	80094a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094da:	bf00      	nop
 80094dc:	bf00      	nop
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	200009d8 	.word	0x200009d8

080094ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094fc:	f001 fcca 	bl	800ae94 <vPortEnterCritical>
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009506:	b25b      	sxtb	r3, r3
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d103      	bne.n	8009516 <vQueueWaitForMessageRestricted+0x2a>
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800951c:	b25b      	sxtb	r3, r3
 800951e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009522:	d103      	bne.n	800952c <vQueueWaitForMessageRestricted+0x40>
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800952c:	f001 fce2 	bl	800aef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	3324      	adds	r3, #36	; 0x24
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fc61 	bl	8009e08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009546:	6978      	ldr	r0, [r7, #20]
 8009548:	f7ff fefb 	bl	8009342 <prvUnlockQueue>
	}
 800954c:	bf00      	nop
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08e      	sub	sp, #56	; 0x38
 8009558:	af04      	add	r7, sp, #16
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	623b      	str	r3, [r7, #32]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10a      	bne.n	800959a <xTaskCreateStatic+0x46>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	61fb      	str	r3, [r7, #28]
}
 8009596:	bf00      	nop
 8009598:	e7fe      	b.n	8009598 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800959a:	23a8      	movs	r3, #168	; 0xa8
 800959c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2ba8      	cmp	r3, #168	; 0xa8
 80095a2:	d00a      	beq.n	80095ba <xTaskCreateStatic+0x66>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	61bb      	str	r3, [r7, #24]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d01e      	beq.n	8009600 <xTaskCreateStatic+0xac>
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01b      	beq.n	8009600 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d4:	2202      	movs	r2, #2
 80095d6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095da:	2300      	movs	r3, #0
 80095dc:	9303      	str	r3, [sp, #12]
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	9302      	str	r3, [sp, #8]
 80095e2:	f107 0314 	add.w	r3, r7, #20
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	68b9      	ldr	r1, [r7, #8]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 f850 	bl	8009698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095fa:	f000 f8f3 	bl	80097e4 <prvAddNewTaskToReadyList>
 80095fe:	e001      	b.n	8009604 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009600:	2300      	movs	r3, #0
 8009602:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009604:	697b      	ldr	r3, [r7, #20]
	}
 8009606:	4618      	mov	r0, r3
 8009608:	3728      	adds	r7, #40	; 0x28
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800960e:	b580      	push	{r7, lr}
 8009610:	b08c      	sub	sp, #48	; 0x30
 8009612:	af04      	add	r7, sp, #16
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	603b      	str	r3, [r7, #0]
 800961a:	4613      	mov	r3, r2
 800961c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800961e:	88fb      	ldrh	r3, [r7, #6]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4618      	mov	r0, r3
 8009624:	f001 fd58 	bl	800b0d8 <pvPortMalloc>
 8009628:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00e      	beq.n	800964e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009630:	20a8      	movs	r0, #168	; 0xa8
 8009632:	f001 fd51 	bl	800b0d8 <pvPortMalloc>
 8009636:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	631a      	str	r2, [r3, #48]	; 0x30
 8009644:	e005      	b.n	8009652 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009646:	6978      	ldr	r0, [r7, #20]
 8009648:	f001 fe12 	bl	800b270 <vPortFree>
 800964c:	e001      	b.n	8009652 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d017      	beq.n	8009688 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	2300      	movs	r3, #0
 8009664:	9303      	str	r3, [sp, #12]
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	9302      	str	r3, [sp, #8]
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f80e 	bl	8009698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800967c:	69f8      	ldr	r0, [r7, #28]
 800967e:	f000 f8b1 	bl	80097e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009682:	2301      	movs	r3, #1
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	e002      	b.n	800968e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009688:	f04f 33ff 	mov.w	r3, #4294967295
 800968c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800968e:	69bb      	ldr	r3, [r7, #24]
	}
 8009690:	4618      	mov	r0, r3
 8009692:	3720      	adds	r7, #32
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	461a      	mov	r2, r3
 80096b0:	21a5      	movs	r1, #165	; 0xa5
 80096b2:	f001 fefb 	bl	800b4ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096c0:	3b01      	subs	r3, #1
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	f003 0307 	and.w	r3, r3, #7
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	617b      	str	r3, [r7, #20]
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d01f      	beq.n	8009736 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096f6:	2300      	movs	r3, #0
 80096f8:	61fb      	str	r3, [r7, #28]
 80096fa:	e012      	b.n	8009722 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	7819      	ldrb	r1, [r3, #0]
 8009704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	4413      	add	r3, r2
 800970a:	3334      	adds	r3, #52	; 0x34
 800970c:	460a      	mov	r2, r1
 800970e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	4413      	add	r3, r2
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d006      	beq.n	800972a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	3301      	adds	r3, #1
 8009720:	61fb      	str	r3, [r7, #28]
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	2b0f      	cmp	r3, #15
 8009726:	d9e9      	bls.n	80096fc <prvInitialiseNewTask+0x64>
 8009728:	e000      	b.n	800972c <prvInitialiseNewTask+0x94>
			{
				break;
 800972a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009734:	e003      	b.n	800973e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	2b37      	cmp	r3, #55	; 0x37
 8009742:	d901      	bls.n	8009748 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009744:	2337      	movs	r3, #55	; 0x37
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800974c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009752:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	2200      	movs	r2, #0
 8009758:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	3304      	adds	r3, #4
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe fe56 	bl	8008410 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	3318      	adds	r3, #24
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe fe51 	bl	8008410 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009772:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009782:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	2200      	movs	r2, #0
 8009788:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	2200      	movs	r2, #0
 8009790:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	3354      	adds	r3, #84	; 0x54
 8009798:	224c      	movs	r2, #76	; 0x4c
 800979a:	2100      	movs	r1, #0
 800979c:	4618      	mov	r0, r3
 800979e:	f001 fe85 	bl	800b4ac <memset>
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	4a0c      	ldr	r2, [pc, #48]	; (80097d8 <prvInitialiseNewTask+0x140>)
 80097a6:	659a      	str	r2, [r3, #88]	; 0x58
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	4a0c      	ldr	r2, [pc, #48]	; (80097dc <prvInitialiseNewTask+0x144>)
 80097ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	4a0b      	ldr	r2, [pc, #44]	; (80097e0 <prvInitialiseNewTask+0x148>)
 80097b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	69b8      	ldr	r0, [r7, #24]
 80097ba:	f001 fa3f 	bl	800ac3c <pxPortInitialiseStack>
 80097be:	4602      	mov	r2, r0
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097d0:	bf00      	nop
 80097d2:	3720      	adds	r7, #32
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20002998 	.word	0x20002998
 80097dc:	20002a00 	.word	0x20002a00
 80097e0:	20002a68 	.word	0x20002a68

080097e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097ec:	f001 fb52 	bl	800ae94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097f0:	4b2d      	ldr	r3, [pc, #180]	; (80098a8 <prvAddNewTaskToReadyList+0xc4>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3301      	adds	r3, #1
 80097f6:	4a2c      	ldr	r2, [pc, #176]	; (80098a8 <prvAddNewTaskToReadyList+0xc4>)
 80097f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097fa:	4b2c      	ldr	r3, [pc, #176]	; (80098ac <prvAddNewTaskToReadyList+0xc8>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009802:	4a2a      	ldr	r2, [pc, #168]	; (80098ac <prvAddNewTaskToReadyList+0xc8>)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009808:	4b27      	ldr	r3, [pc, #156]	; (80098a8 <prvAddNewTaskToReadyList+0xc4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d110      	bne.n	8009832 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009810:	f000 fc26 	bl	800a060 <prvInitialiseTaskLists>
 8009814:	e00d      	b.n	8009832 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009816:	4b26      	ldr	r3, [pc, #152]	; (80098b0 <prvAddNewTaskToReadyList+0xcc>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d109      	bne.n	8009832 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800981e:	4b23      	ldr	r3, [pc, #140]	; (80098ac <prvAddNewTaskToReadyList+0xc8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	429a      	cmp	r2, r3
 800982a:	d802      	bhi.n	8009832 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800982c:	4a1f      	ldr	r2, [pc, #124]	; (80098ac <prvAddNewTaskToReadyList+0xc8>)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009832:	4b20      	ldr	r3, [pc, #128]	; (80098b4 <prvAddNewTaskToReadyList+0xd0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3301      	adds	r3, #1
 8009838:	4a1e      	ldr	r2, [pc, #120]	; (80098b4 <prvAddNewTaskToReadyList+0xd0>)
 800983a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800983c:	4b1d      	ldr	r3, [pc, #116]	; (80098b4 <prvAddNewTaskToReadyList+0xd0>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <prvAddNewTaskToReadyList+0xd4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	429a      	cmp	r2, r3
 800984e:	d903      	bls.n	8009858 <prvAddNewTaskToReadyList+0x74>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	4a18      	ldr	r2, [pc, #96]	; (80098b8 <prvAddNewTaskToReadyList+0xd4>)
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4a15      	ldr	r2, [pc, #84]	; (80098bc <prvAddNewTaskToReadyList+0xd8>)
 8009866:	441a      	add	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3304      	adds	r3, #4
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7fe fddb 	bl	800842a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009874:	f001 fb3e 	bl	800aef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009878:	4b0d      	ldr	r3, [pc, #52]	; (80098b0 <prvAddNewTaskToReadyList+0xcc>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00e      	beq.n	800989e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009880:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <prvAddNewTaskToReadyList+0xc8>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	429a      	cmp	r2, r3
 800988c:	d207      	bcs.n	800989e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800988e:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <prvAddNewTaskToReadyList+0xdc>)
 8009890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000eec 	.word	0x20000eec
 80098ac:	20000a18 	.word	0x20000a18
 80098b0:	20000ef8 	.word	0x20000ef8
 80098b4:	20000f08 	.word	0x20000f08
 80098b8:	20000ef4 	.word	0x20000ef4
 80098bc:	20000a1c 	.word	0x20000a1c
 80098c0:	e000ed04 	.word	0xe000ed04

080098c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d017      	beq.n	8009906 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098d6:	4b13      	ldr	r3, [pc, #76]	; (8009924 <vTaskDelay+0x60>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <vTaskDelay+0x30>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60bb      	str	r3, [r7, #8]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098f4:	f000 f88a 	bl	8009a0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098f8:	2100      	movs	r1, #0
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fdfc 	bl	800a4f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009900:	f000 f892 	bl	8009a28 <xTaskResumeAll>
 8009904:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d107      	bne.n	800991c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800990c:	4b06      	ldr	r3, [pc, #24]	; (8009928 <vTaskDelay+0x64>)
 800990e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800991c:	bf00      	nop
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20000f14 	.word	0x20000f14
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08a      	sub	sp, #40	; 0x28
 8009930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009936:	2300      	movs	r3, #0
 8009938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800993a:	463a      	mov	r2, r7
 800993c:	1d39      	adds	r1, r7, #4
 800993e:	f107 0308 	add.w	r3, r7, #8
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fd10 	bl	8008368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	9202      	str	r2, [sp, #8]
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	2300      	movs	r3, #0
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	2300      	movs	r3, #0
 8009958:	460a      	mov	r2, r1
 800995a:	4924      	ldr	r1, [pc, #144]	; (80099ec <vTaskStartScheduler+0xc0>)
 800995c:	4824      	ldr	r0, [pc, #144]	; (80099f0 <vTaskStartScheduler+0xc4>)
 800995e:	f7ff fdf9 	bl	8009554 <xTaskCreateStatic>
 8009962:	4603      	mov	r3, r0
 8009964:	4a23      	ldr	r2, [pc, #140]	; (80099f4 <vTaskStartScheduler+0xc8>)
 8009966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009968:	4b22      	ldr	r3, [pc, #136]	; (80099f4 <vTaskStartScheduler+0xc8>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009970:	2301      	movs	r3, #1
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e001      	b.n	800997a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009976:	2300      	movs	r3, #0
 8009978:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d102      	bne.n	8009986 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009980:	f000 fe0e 	bl	800a5a0 <xTimerCreateTimerTask>
 8009984:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d11b      	bne.n	80099c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	613b      	str	r3, [r7, #16]
}
 800999e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099a0:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <vTaskStartScheduler+0xcc>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3354      	adds	r3, #84	; 0x54
 80099a6:	4a15      	ldr	r2, [pc, #84]	; (80099fc <vTaskStartScheduler+0xd0>)
 80099a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099aa:	4b15      	ldr	r3, [pc, #84]	; (8009a00 <vTaskStartScheduler+0xd4>)
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295
 80099b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099b2:	4b14      	ldr	r3, [pc, #80]	; (8009a04 <vTaskStartScheduler+0xd8>)
 80099b4:	2201      	movs	r2, #1
 80099b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099b8:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <vTaskStartScheduler+0xdc>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099be:	f001 f9c7 	bl	800ad50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099c2:	e00e      	b.n	80099e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ca:	d10a      	bne.n	80099e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	60fb      	str	r3, [r7, #12]
}
 80099de:	bf00      	nop
 80099e0:	e7fe      	b.n	80099e0 <vTaskStartScheduler+0xb4>
}
 80099e2:	bf00      	nop
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	0800b73c 	.word	0x0800b73c
 80099f0:	0800a031 	.word	0x0800a031
 80099f4:	20000f10 	.word	0x20000f10
 80099f8:	20000a18 	.word	0x20000a18
 80099fc:	2000005c 	.word	0x2000005c
 8009a00:	20000f0c 	.word	0x20000f0c
 8009a04:	20000ef8 	.word	0x20000ef8
 8009a08:	20000ef0 	.word	0x20000ef0

08009a0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <vTaskSuspendAll+0x18>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3301      	adds	r3, #1
 8009a16:	4a03      	ldr	r2, [pc, #12]	; (8009a24 <vTaskSuspendAll+0x18>)
 8009a18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a1a:	bf00      	nop
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	20000f14 	.word	0x20000f14

08009a28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a36:	4b42      	ldr	r3, [pc, #264]	; (8009b40 <xTaskResumeAll+0x118>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10a      	bne.n	8009a54 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	603b      	str	r3, [r7, #0]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a54:	f001 fa1e 	bl	800ae94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a58:	4b39      	ldr	r3, [pc, #228]	; (8009b40 <xTaskResumeAll+0x118>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	4a38      	ldr	r2, [pc, #224]	; (8009b40 <xTaskResumeAll+0x118>)
 8009a60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a62:	4b37      	ldr	r3, [pc, #220]	; (8009b40 <xTaskResumeAll+0x118>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d162      	bne.n	8009b30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a6a:	4b36      	ldr	r3, [pc, #216]	; (8009b44 <xTaskResumeAll+0x11c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d05e      	beq.n	8009b30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a72:	e02f      	b.n	8009ad4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a74:	4b34      	ldr	r3, [pc, #208]	; (8009b48 <xTaskResumeAll+0x120>)
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3318      	adds	r3, #24
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fe fd2f 	bl	80084e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fd2a 	bl	80084e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a94:	4b2d      	ldr	r3, [pc, #180]	; (8009b4c <xTaskResumeAll+0x124>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d903      	bls.n	8009aa4 <xTaskResumeAll+0x7c>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	4a2a      	ldr	r2, [pc, #168]	; (8009b4c <xTaskResumeAll+0x124>)
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4a27      	ldr	r2, [pc, #156]	; (8009b50 <xTaskResumeAll+0x128>)
 8009ab2:	441a      	add	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f7fe fcb5 	bl	800842a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac4:	4b23      	ldr	r3, [pc, #140]	; (8009b54 <xTaskResumeAll+0x12c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d302      	bcc.n	8009ad4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ace:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <xTaskResumeAll+0x130>)
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ad4:	4b1c      	ldr	r3, [pc, #112]	; (8009b48 <xTaskResumeAll+0x120>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1cb      	bne.n	8009a74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ae2:	f000 fb5f 	bl	800a1a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ae6:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <xTaskResumeAll+0x134>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d010      	beq.n	8009b14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009af2:	f000 f847 	bl	8009b84 <xTaskIncrementTick>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009afc:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <xTaskResumeAll+0x130>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1f1      	bne.n	8009af2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b0e:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <xTaskResumeAll+0x134>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b14:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <xTaskResumeAll+0x130>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d009      	beq.n	8009b30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b20:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <xTaskResumeAll+0x138>)
 8009b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b30:	f001 f9e0 	bl	800aef4 <vPortExitCritical>

	return xAlreadyYielded;
 8009b34:	68bb      	ldr	r3, [r7, #8]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000f14 	.word	0x20000f14
 8009b44:	20000eec 	.word	0x20000eec
 8009b48:	20000eac 	.word	0x20000eac
 8009b4c:	20000ef4 	.word	0x20000ef4
 8009b50:	20000a1c 	.word	0x20000a1c
 8009b54:	20000a18 	.word	0x20000a18
 8009b58:	20000f00 	.word	0x20000f00
 8009b5c:	20000efc 	.word	0x20000efc
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b6a:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <xTaskGetTickCount+0x1c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b70:	687b      	ldr	r3, [r7, #4]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	20000ef0 	.word	0x20000ef0

08009b84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b8e:	4b4f      	ldr	r3, [pc, #316]	; (8009ccc <xTaskIncrementTick+0x148>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f040 808f 	bne.w	8009cb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b98:	4b4d      	ldr	r3, [pc, #308]	; (8009cd0 <xTaskIncrementTick+0x14c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ba0:	4a4b      	ldr	r2, [pc, #300]	; (8009cd0 <xTaskIncrementTick+0x14c>)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d120      	bne.n	8009bee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bac:	4b49      	ldr	r3, [pc, #292]	; (8009cd4 <xTaskIncrementTick+0x150>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <xTaskIncrementTick+0x48>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	603b      	str	r3, [r7, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xTaskIncrementTick+0x46>
 8009bcc:	4b41      	ldr	r3, [pc, #260]	; (8009cd4 <xTaskIncrementTick+0x150>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	4b41      	ldr	r3, [pc, #260]	; (8009cd8 <xTaskIncrementTick+0x154>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a3f      	ldr	r2, [pc, #252]	; (8009cd4 <xTaskIncrementTick+0x150>)
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	4a3f      	ldr	r2, [pc, #252]	; (8009cd8 <xTaskIncrementTick+0x154>)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	4b3e      	ldr	r3, [pc, #248]	; (8009cdc <xTaskIncrementTick+0x158>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3301      	adds	r3, #1
 8009be6:	4a3d      	ldr	r2, [pc, #244]	; (8009cdc <xTaskIncrementTick+0x158>)
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	f000 fadb 	bl	800a1a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bee:	4b3c      	ldr	r3, [pc, #240]	; (8009ce0 <xTaskIncrementTick+0x15c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d349      	bcc.n	8009c8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bf8:	4b36      	ldr	r3, [pc, #216]	; (8009cd4 <xTaskIncrementTick+0x150>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c02:	4b37      	ldr	r3, [pc, #220]	; (8009ce0 <xTaskIncrementTick+0x15c>)
 8009c04:	f04f 32ff 	mov.w	r2, #4294967295
 8009c08:	601a      	str	r2, [r3, #0]
					break;
 8009c0a:	e03f      	b.n	8009c8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0c:	4b31      	ldr	r3, [pc, #196]	; (8009cd4 <xTaskIncrementTick+0x150>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d203      	bcs.n	8009c2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c24:	4a2e      	ldr	r2, [pc, #184]	; (8009ce0 <xTaskIncrementTick+0x15c>)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c2a:	e02f      	b.n	8009c8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe fc57 	bl	80084e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	3318      	adds	r3, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fc4e 	bl	80084e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4c:	4b25      	ldr	r3, [pc, #148]	; (8009ce4 <xTaskIncrementTick+0x160>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d903      	bls.n	8009c5c <xTaskIncrementTick+0xd8>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	4a22      	ldr	r2, [pc, #136]	; (8009ce4 <xTaskIncrementTick+0x160>)
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4a1f      	ldr	r2, [pc, #124]	; (8009ce8 <xTaskIncrementTick+0x164>)
 8009c6a:	441a      	add	r2, r3
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4619      	mov	r1, r3
 8009c72:	4610      	mov	r0, r2
 8009c74:	f7fe fbd9 	bl	800842a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c7c:	4b1b      	ldr	r3, [pc, #108]	; (8009cec <xTaskIncrementTick+0x168>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d3b8      	bcc.n	8009bf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c86:	2301      	movs	r3, #1
 8009c88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c8a:	e7b5      	b.n	8009bf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c8c:	4b17      	ldr	r3, [pc, #92]	; (8009cec <xTaskIncrementTick+0x168>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c92:	4915      	ldr	r1, [pc, #84]	; (8009ce8 <xTaskIncrementTick+0x164>)
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d901      	bls.n	8009ca8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ca8:	4b11      	ldr	r3, [pc, #68]	; (8009cf0 <xTaskIncrementTick+0x16c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d007      	beq.n	8009cc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	e004      	b.n	8009cc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <xTaskIncrementTick+0x170>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	4a0d      	ldr	r2, [pc, #52]	; (8009cf4 <xTaskIncrementTick+0x170>)
 8009cbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cc0:	697b      	ldr	r3, [r7, #20]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000f14 	.word	0x20000f14
 8009cd0:	20000ef0 	.word	0x20000ef0
 8009cd4:	20000ea4 	.word	0x20000ea4
 8009cd8:	20000ea8 	.word	0x20000ea8
 8009cdc:	20000f04 	.word	0x20000f04
 8009ce0:	20000f0c 	.word	0x20000f0c
 8009ce4:	20000ef4 	.word	0x20000ef4
 8009ce8:	20000a1c 	.word	0x20000a1c
 8009cec:	20000a18 	.word	0x20000a18
 8009cf0:	20000f00 	.word	0x20000f00
 8009cf4:	20000efc 	.word	0x20000efc

08009cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cfe:	4b2a      	ldr	r3, [pc, #168]	; (8009da8 <vTaskSwitchContext+0xb0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d06:	4b29      	ldr	r3, [pc, #164]	; (8009dac <vTaskSwitchContext+0xb4>)
 8009d08:	2201      	movs	r2, #1
 8009d0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d0c:	e046      	b.n	8009d9c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009d0e:	4b27      	ldr	r3, [pc, #156]	; (8009dac <vTaskSwitchContext+0xb4>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d14:	4b26      	ldr	r3, [pc, #152]	; (8009db0 <vTaskSwitchContext+0xb8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60fb      	str	r3, [r7, #12]
 8009d1a:	e010      	b.n	8009d3e <vTaskSwitchContext+0x46>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10a      	bne.n	8009d38 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	607b      	str	r3, [r7, #4]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <vTaskSwitchContext+0x3e>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	491d      	ldr	r1, [pc, #116]	; (8009db4 <vTaskSwitchContext+0xbc>)
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0e4      	beq.n	8009d1c <vTaskSwitchContext+0x24>
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4613      	mov	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4a15      	ldr	r2, [pc, #84]	; (8009db4 <vTaskSwitchContext+0xbc>)
 8009d5e:	4413      	add	r3, r2
 8009d60:	60bb      	str	r3, [r7, #8]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	605a      	str	r2, [r3, #4]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	3308      	adds	r3, #8
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d104      	bne.n	8009d82 <vTaskSwitchContext+0x8a>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	605a      	str	r2, [r3, #4]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	4a0b      	ldr	r2, [pc, #44]	; (8009db8 <vTaskSwitchContext+0xc0>)
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	4a08      	ldr	r2, [pc, #32]	; (8009db0 <vTaskSwitchContext+0xb8>)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <vTaskSwitchContext+0xc0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3354      	adds	r3, #84	; 0x54
 8009d98:	4a08      	ldr	r2, [pc, #32]	; (8009dbc <vTaskSwitchContext+0xc4>)
 8009d9a:	6013      	str	r3, [r2, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	20000f14 	.word	0x20000f14
 8009dac:	20000f00 	.word	0x20000f00
 8009db0:	20000ef4 	.word	0x20000ef4
 8009db4:	20000a1c 	.word	0x20000a1c
 8009db8:	20000a18 	.word	0x20000a18
 8009dbc:	2000005c 	.word	0x2000005c

08009dc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60fb      	str	r3, [r7, #12]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009de6:	4b07      	ldr	r3, [pc, #28]	; (8009e04 <vTaskPlaceOnEventList+0x44>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3318      	adds	r3, #24
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7fe fb3f 	bl	8008472 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009df4:	2101      	movs	r1, #1
 8009df6:	6838      	ldr	r0, [r7, #0]
 8009df8:	f000 fb7e 	bl	800a4f8 <prvAddCurrentTaskToDelayedList>
}
 8009dfc:	bf00      	nop
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	20000a18 	.word	0x20000a18

08009e08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	617b      	str	r3, [r7, #20]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e30:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <vTaskPlaceOnEventListRestricted+0x54>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3318      	adds	r3, #24
 8009e36:	4619      	mov	r1, r3
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7fe faf6 	bl	800842a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e44:	f04f 33ff 	mov.w	r3, #4294967295
 8009e48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	68b8      	ldr	r0, [r7, #8]
 8009e4e:	f000 fb53 	bl	800a4f8 <prvAddCurrentTaskToDelayedList>
	}
 8009e52:	bf00      	nop
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20000a18 	.word	0x20000a18

08009e60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10a      	bne.n	8009e8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	60fb      	str	r3, [r7, #12]
}
 8009e88:	bf00      	nop
 8009e8a:	e7fe      	b.n	8009e8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	3318      	adds	r3, #24
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe fb27 	bl	80084e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e96:	4b1e      	ldr	r3, [pc, #120]	; (8009f10 <xTaskRemoveFromEventList+0xb0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d11d      	bne.n	8009eda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe fb1e 	bl	80084e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eac:	4b19      	ldr	r3, [pc, #100]	; (8009f14 <xTaskRemoveFromEventList+0xb4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d903      	bls.n	8009ebc <xTaskRemoveFromEventList+0x5c>
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	4a16      	ldr	r2, [pc, #88]	; (8009f14 <xTaskRemoveFromEventList+0xb4>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4a13      	ldr	r2, [pc, #76]	; (8009f18 <xTaskRemoveFromEventList+0xb8>)
 8009eca:	441a      	add	r2, r3
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f7fe faa9 	bl	800842a <vListInsertEnd>
 8009ed8:	e005      	b.n	8009ee6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	3318      	adds	r3, #24
 8009ede:	4619      	mov	r1, r3
 8009ee0:	480e      	ldr	r0, [pc, #56]	; (8009f1c <xTaskRemoveFromEventList+0xbc>)
 8009ee2:	f7fe faa2 	bl	800842a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <xTaskRemoveFromEventList+0xc0>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d905      	bls.n	8009f00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ef8:	4b0a      	ldr	r3, [pc, #40]	; (8009f24 <xTaskRemoveFromEventList+0xc4>)
 8009efa:	2201      	movs	r2, #1
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	e001      	b.n	8009f04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f04:	697b      	ldr	r3, [r7, #20]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20000f14 	.word	0x20000f14
 8009f14:	20000ef4 	.word	0x20000ef4
 8009f18:	20000a1c 	.word	0x20000a1c
 8009f1c:	20000eac 	.word	0x20000eac
 8009f20:	20000a18 	.word	0x20000a18
 8009f24:	20000f00 	.word	0x20000f00

08009f28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f30:	4b06      	ldr	r3, [pc, #24]	; (8009f4c <vTaskInternalSetTimeOutState+0x24>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <vTaskInternalSetTimeOutState+0x28>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	605a      	str	r2, [r3, #4]
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	20000f04 	.word	0x20000f04
 8009f50:	20000ef0 	.word	0x20000ef0

08009f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10a      	bne.n	8009f7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	613b      	str	r3, [r7, #16]
}
 8009f76:	bf00      	nop
 8009f78:	e7fe      	b.n	8009f78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	60fb      	str	r3, [r7, #12]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f96:	f000 ff7d 	bl	800ae94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f9a:	4b1d      	ldr	r3, [pc, #116]	; (800a010 <xTaskCheckForTimeOut+0xbc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb2:	d102      	bne.n	8009fba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61fb      	str	r3, [r7, #28]
 8009fb8:	e023      	b.n	800a002 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	4b15      	ldr	r3, [pc, #84]	; (800a014 <xTaskCheckForTimeOut+0xc0>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d007      	beq.n	8009fd6 <xTaskCheckForTimeOut+0x82>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d302      	bcc.n	8009fd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	61fb      	str	r3, [r7, #28]
 8009fd4:	e015      	b.n	800a002 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d20b      	bcs.n	8009ff8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	1ad2      	subs	r2, r2, r3
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff ff9b 	bl	8009f28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	e004      	b.n	800a002 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ffe:	2301      	movs	r3, #1
 800a000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a002:	f000 ff77 	bl	800aef4 <vPortExitCritical>

	return xReturn;
 800a006:	69fb      	ldr	r3, [r7, #28]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3720      	adds	r7, #32
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20000ef0 	.word	0x20000ef0
 800a014:	20000f04 	.word	0x20000f04

0800a018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a01c:	4b03      	ldr	r3, [pc, #12]	; (800a02c <vTaskMissedYield+0x14>)
 800a01e:	2201      	movs	r2, #1
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	bf00      	nop
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	20000f00 	.word	0x20000f00

0800a030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a038:	f000 f852 	bl	800a0e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a03c:	4b06      	ldr	r3, [pc, #24]	; (800a058 <prvIdleTask+0x28>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d9f9      	bls.n	800a038 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <prvIdleTask+0x2c>)
 800a046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04a:	601a      	str	r2, [r3, #0]
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a054:	e7f0      	b.n	800a038 <prvIdleTask+0x8>
 800a056:	bf00      	nop
 800a058:	20000a1c 	.word	0x20000a1c
 800a05c:	e000ed04 	.word	0xe000ed04

0800a060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a066:	2300      	movs	r3, #0
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	e00c      	b.n	800a086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4a12      	ldr	r2, [pc, #72]	; (800a0c0 <prvInitialiseTaskLists+0x60>)
 800a078:	4413      	add	r3, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe f9a8 	bl	80083d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3301      	adds	r3, #1
 800a084:	607b      	str	r3, [r7, #4]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b37      	cmp	r3, #55	; 0x37
 800a08a:	d9ef      	bls.n	800a06c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a08c:	480d      	ldr	r0, [pc, #52]	; (800a0c4 <prvInitialiseTaskLists+0x64>)
 800a08e:	f7fe f99f 	bl	80083d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a092:	480d      	ldr	r0, [pc, #52]	; (800a0c8 <prvInitialiseTaskLists+0x68>)
 800a094:	f7fe f99c 	bl	80083d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a098:	480c      	ldr	r0, [pc, #48]	; (800a0cc <prvInitialiseTaskLists+0x6c>)
 800a09a:	f7fe f999 	bl	80083d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a09e:	480c      	ldr	r0, [pc, #48]	; (800a0d0 <prvInitialiseTaskLists+0x70>)
 800a0a0:	f7fe f996 	bl	80083d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0a4:	480b      	ldr	r0, [pc, #44]	; (800a0d4 <prvInitialiseTaskLists+0x74>)
 800a0a6:	f7fe f993 	bl	80083d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	; (800a0d8 <prvInitialiseTaskLists+0x78>)
 800a0ac:	4a05      	ldr	r2, [pc, #20]	; (800a0c4 <prvInitialiseTaskLists+0x64>)
 800a0ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0b0:	4b0a      	ldr	r3, [pc, #40]	; (800a0dc <prvInitialiseTaskLists+0x7c>)
 800a0b2:	4a05      	ldr	r2, [pc, #20]	; (800a0c8 <prvInitialiseTaskLists+0x68>)
 800a0b4:	601a      	str	r2, [r3, #0]
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000a1c 	.word	0x20000a1c
 800a0c4:	20000e7c 	.word	0x20000e7c
 800a0c8:	20000e90 	.word	0x20000e90
 800a0cc:	20000eac 	.word	0x20000eac
 800a0d0:	20000ec0 	.word	0x20000ec0
 800a0d4:	20000ed8 	.word	0x20000ed8
 800a0d8:	20000ea4 	.word	0x20000ea4
 800a0dc:	20000ea8 	.word	0x20000ea8

0800a0e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0e6:	e019      	b.n	800a11c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0e8:	f000 fed4 	bl	800ae94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ec:	4b10      	ldr	r3, [pc, #64]	; (800a130 <prvCheckTasksWaitingTermination+0x50>)
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fe f9f3 	bl	80084e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0fe:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <prvCheckTasksWaitingTermination+0x54>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3b01      	subs	r3, #1
 800a104:	4a0b      	ldr	r2, [pc, #44]	; (800a134 <prvCheckTasksWaitingTermination+0x54>)
 800a106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <prvCheckTasksWaitingTermination+0x58>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <prvCheckTasksWaitingTermination+0x58>)
 800a110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a112:	f000 feef 	bl	800aef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f810 	bl	800a13c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a11c:	4b06      	ldr	r3, [pc, #24]	; (800a138 <prvCheckTasksWaitingTermination+0x58>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1e1      	bne.n	800a0e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000ec0 	.word	0x20000ec0
 800a134:	20000eec 	.word	0x20000eec
 800a138:	20000ed4 	.word	0x20000ed4

0800a13c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3354      	adds	r3, #84	; 0x54
 800a148:	4618      	mov	r0, r3
 800a14a:	f001 f9b7 	bl	800b4bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a154:	2b00      	cmp	r3, #0
 800a156:	d108      	bne.n	800a16a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15c:	4618      	mov	r0, r3
 800a15e:	f001 f887 	bl	800b270 <vPortFree>
				vPortFree( pxTCB );
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 f884 	bl	800b270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a168:	e018      	b.n	800a19c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a170:	2b01      	cmp	r3, #1
 800a172:	d103      	bne.n	800a17c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 f87b 	bl	800b270 <vPortFree>
	}
 800a17a:	e00f      	b.n	800a19c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a182:	2b02      	cmp	r3, #2
 800a184:	d00a      	beq.n	800a19c <prvDeleteTCB+0x60>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	60fb      	str	r3, [r7, #12]
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <prvDeleteTCB+0x5e>
	}
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1aa:	4b0c      	ldr	r3, [pc, #48]	; (800a1dc <prvResetNextTaskUnblockTime+0x38>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d104      	bne.n	800a1be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1b4:	4b0a      	ldr	r3, [pc, #40]	; (800a1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1bc:	e008      	b.n	800a1d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1be:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <prvResetNextTaskUnblockTime+0x38>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	4a04      	ldr	r2, [pc, #16]	; (800a1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ce:	6013      	str	r3, [r2, #0]
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	20000ea4 	.word	0x20000ea4
 800a1e0:	20000f0c 	.word	0x20000f0c

0800a1e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1ea:	4b0b      	ldr	r3, [pc, #44]	; (800a218 <xTaskGetSchedulerState+0x34>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d102      	bne.n	800a1f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	607b      	str	r3, [r7, #4]
 800a1f6:	e008      	b.n	800a20a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f8:	4b08      	ldr	r3, [pc, #32]	; (800a21c <xTaskGetSchedulerState+0x38>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d102      	bne.n	800a206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a200:	2302      	movs	r3, #2
 800a202:	607b      	str	r3, [r7, #4]
 800a204:	e001      	b.n	800a20a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a206:	2300      	movs	r3, #0
 800a208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a20a:	687b      	ldr	r3, [r7, #4]
	}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	20000ef8 	.word	0x20000ef8
 800a21c:	20000f14 	.word	0x20000f14

0800a220 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d051      	beq.n	800a2da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23a:	4b2a      	ldr	r3, [pc, #168]	; (800a2e4 <xTaskPriorityInherit+0xc4>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	429a      	cmp	r2, r3
 800a242:	d241      	bcs.n	800a2c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	db06      	blt.n	800a25a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a24c:	4b25      	ldr	r3, [pc, #148]	; (800a2e4 <xTaskPriorityInherit+0xc4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a252:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	6959      	ldr	r1, [r3, #20]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4a1f      	ldr	r2, [pc, #124]	; (800a2e8 <xTaskPriorityInherit+0xc8>)
 800a26c:	4413      	add	r3, r2
 800a26e:	4299      	cmp	r1, r3
 800a270:	d122      	bne.n	800a2b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	3304      	adds	r3, #4
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe f934 	bl	80084e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a27c:	4b19      	ldr	r3, [pc, #100]	; (800a2e4 <xTaskPriorityInherit+0xc4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28a:	4b18      	ldr	r3, [pc, #96]	; (800a2ec <xTaskPriorityInherit+0xcc>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d903      	bls.n	800a29a <xTaskPriorityInherit+0x7a>
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	4a15      	ldr	r2, [pc, #84]	; (800a2ec <xTaskPriorityInherit+0xcc>)
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4a10      	ldr	r2, [pc, #64]	; (800a2e8 <xTaskPriorityInherit+0xc8>)
 800a2a8:	441a      	add	r2, r3
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	f7fe f8ba 	bl	800842a <vListInsertEnd>
 800a2b6:	e004      	b.n	800a2c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <xTaskPriorityInherit+0xc4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	e008      	b.n	800a2da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2cc:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <xTaskPriorityInherit+0xc4>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d201      	bcs.n	800a2da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2da:	68fb      	ldr	r3, [r7, #12]
	}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20000a18 	.word	0x20000a18
 800a2e8:	20000a1c 	.word	0x20000a1c
 800a2ec:	20000ef4 	.word	0x20000ef4

0800a2f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d056      	beq.n	800a3b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a306:	4b2e      	ldr	r3, [pc, #184]	; (800a3c0 <xTaskPriorityDisinherit+0xd0>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d00a      	beq.n	800a326 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	60fb      	str	r3, [r7, #12]
}
 800a322:	bf00      	nop
 800a324:	e7fe      	b.n	800a324 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	60bb      	str	r3, [r7, #8]
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a348:	1e5a      	subs	r2, r3, #1
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a356:	429a      	cmp	r2, r3
 800a358:	d02c      	beq.n	800a3b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d128      	bne.n	800a3b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	3304      	adds	r3, #4
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe f8bc 	bl	80084e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a384:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <xTaskPriorityDisinherit+0xd4>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d903      	bls.n	800a394 <xTaskPriorityDisinherit+0xa4>
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a390:	4a0c      	ldr	r2, [pc, #48]	; (800a3c4 <xTaskPriorityDisinherit+0xd4>)
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4a09      	ldr	r2, [pc, #36]	; (800a3c8 <xTaskPriorityDisinherit+0xd8>)
 800a3a2:	441a      	add	r2, r3
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	f7fe f83d 	bl	800842a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3b4:	697b      	ldr	r3, [r7, #20]
	}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000a18 	.word	0x20000a18
 800a3c4:	20000ef4 	.word	0x20000ef4
 800a3c8:	20000a1c 	.word	0x20000a1c

0800a3cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d06a      	beq.n	800a4ba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	60fb      	str	r3, [r7, #12]
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d902      	bls.n	800a412 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	61fb      	str	r3, [r7, #28]
 800a410:	e002      	b.n	800a418 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a416:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	69fa      	ldr	r2, [r7, #28]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d04b      	beq.n	800a4ba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d146      	bne.n	800a4ba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a42c:	4b25      	ldr	r3, [pc, #148]	; (800a4c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	429a      	cmp	r2, r3
 800a434:	d10a      	bne.n	800a44c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	60bb      	str	r3, [r7, #8]
}
 800a448:	bf00      	nop
 800a44a:	e7fe      	b.n	800a44a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	69fa      	ldr	r2, [r7, #28]
 800a456:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	db04      	blt.n	800a46a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	6959      	ldr	r1, [r3, #20]
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4a13      	ldr	r2, [pc, #76]	; (800a4c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a47a:	4413      	add	r3, r2
 800a47c:	4299      	cmp	r1, r3
 800a47e:	d11c      	bne.n	800a4ba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	3304      	adds	r3, #4
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe f82d 	bl	80084e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48e:	4b0f      	ldr	r3, [pc, #60]	; (800a4cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	429a      	cmp	r2, r3
 800a494:	d903      	bls.n	800a49e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	4a0c      	ldr	r2, [pc, #48]	; (800a4cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4a07      	ldr	r2, [pc, #28]	; (800a4c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a4ac:	441a      	add	r2, r3
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f7fd ffb8 	bl	800842a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4ba:	bf00      	nop
 800a4bc:	3720      	adds	r7, #32
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000a18 	.word	0x20000a18
 800a4c8:	20000a1c 	.word	0x20000a1c
 800a4cc:	20000ef4 	.word	0x20000ef4

0800a4d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4d4:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4dc:	4b05      	ldr	r3, [pc, #20]	; (800a4f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4e2:	3201      	adds	r2, #1
 800a4e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a4e6:	4b03      	ldr	r3, [pc, #12]	; (800a4f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
	}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	20000a18 	.word	0x20000a18

0800a4f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a502:	4b21      	ldr	r3, [pc, #132]	; (800a588 <prvAddCurrentTaskToDelayedList+0x90>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a508:	4b20      	ldr	r3, [pc, #128]	; (800a58c <prvAddCurrentTaskToDelayedList+0x94>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fd ffe8 	bl	80084e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51a:	d10a      	bne.n	800a532 <prvAddCurrentTaskToDelayedList+0x3a>
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d007      	beq.n	800a532 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a522:	4b1a      	ldr	r3, [pc, #104]	; (800a58c <prvAddCurrentTaskToDelayedList+0x94>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3304      	adds	r3, #4
 800a528:	4619      	mov	r1, r3
 800a52a:	4819      	ldr	r0, [pc, #100]	; (800a590 <prvAddCurrentTaskToDelayedList+0x98>)
 800a52c:	f7fd ff7d 	bl	800842a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a530:	e026      	b.n	800a580 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4413      	add	r3, r2
 800a538:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a53a:	4b14      	ldr	r3, [pc, #80]	; (800a58c <prvAddCurrentTaskToDelayedList+0x94>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	429a      	cmp	r2, r3
 800a548:	d209      	bcs.n	800a55e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a54a:	4b12      	ldr	r3, [pc, #72]	; (800a594 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <prvAddCurrentTaskToDelayedList+0x94>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3304      	adds	r3, #4
 800a554:	4619      	mov	r1, r3
 800a556:	4610      	mov	r0, r2
 800a558:	f7fd ff8b 	bl	8008472 <vListInsert>
}
 800a55c:	e010      	b.n	800a580 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a55e:	4b0e      	ldr	r3, [pc, #56]	; (800a598 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <prvAddCurrentTaskToDelayedList+0x94>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3304      	adds	r3, #4
 800a568:	4619      	mov	r1, r3
 800a56a:	4610      	mov	r0, r2
 800a56c:	f7fd ff81 	bl	8008472 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a570:	4b0a      	ldr	r3, [pc, #40]	; (800a59c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	429a      	cmp	r2, r3
 800a578:	d202      	bcs.n	800a580 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a57a:	4a08      	ldr	r2, [pc, #32]	; (800a59c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	6013      	str	r3, [r2, #0]
}
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	20000ef0 	.word	0x20000ef0
 800a58c:	20000a18 	.word	0x20000a18
 800a590:	20000ed8 	.word	0x20000ed8
 800a594:	20000ea8 	.word	0x20000ea8
 800a598:	20000ea4 	.word	0x20000ea4
 800a59c:	20000f0c 	.word	0x20000f0c

0800a5a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5aa:	f000 fb07 	bl	800abbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5ae:	4b1c      	ldr	r3, [pc, #112]	; (800a620 <xTimerCreateTimerTask+0x80>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d021      	beq.n	800a5fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5be:	1d3a      	adds	r2, r7, #4
 800a5c0:	f107 0108 	add.w	r1, r7, #8
 800a5c4:	f107 030c 	add.w	r3, r7, #12
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fd fee7 	bl	800839c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	9202      	str	r2, [sp, #8]
 800a5d6:	9301      	str	r3, [sp, #4]
 800a5d8:	2302      	movs	r3, #2
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	460a      	mov	r2, r1
 800a5e0:	4910      	ldr	r1, [pc, #64]	; (800a624 <xTimerCreateTimerTask+0x84>)
 800a5e2:	4811      	ldr	r0, [pc, #68]	; (800a628 <xTimerCreateTimerTask+0x88>)
 800a5e4:	f7fe ffb6 	bl	8009554 <xTaskCreateStatic>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	4a10      	ldr	r2, [pc, #64]	; (800a62c <xTimerCreateTimerTask+0x8c>)
 800a5ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5ee:	4b0f      	ldr	r3, [pc, #60]	; (800a62c <xTimerCreateTimerTask+0x8c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	613b      	str	r3, [r7, #16]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a616:	697b      	ldr	r3, [r7, #20]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20000f48 	.word	0x20000f48
 800a624:	0800b744 	.word	0x0800b744
 800a628:	0800a765 	.word	0x0800a765
 800a62c:	20000f4c 	.word	0x20000f4c

0800a630 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08a      	sub	sp, #40	; 0x28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a63e:	2300      	movs	r3, #0
 800a640:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10a      	bne.n	800a65e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	623b      	str	r3, [r7, #32]
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a65e:	4b1a      	ldr	r3, [pc, #104]	; (800a6c8 <xTimerGenericCommand+0x98>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d02a      	beq.n	800a6bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b05      	cmp	r3, #5
 800a676:	dc18      	bgt.n	800a6aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a678:	f7ff fdb4 	bl	800a1e4 <xTaskGetSchedulerState>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d109      	bne.n	800a696 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a682:	4b11      	ldr	r3, [pc, #68]	; (800a6c8 <xTimerGenericCommand+0x98>)
 800a684:	6818      	ldr	r0, [r3, #0]
 800a686:	f107 0110 	add.w	r1, r7, #16
 800a68a:	2300      	movs	r3, #0
 800a68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a68e:	f7fe f8fb 	bl	8008888 <xQueueGenericSend>
 800a692:	6278      	str	r0, [r7, #36]	; 0x24
 800a694:	e012      	b.n	800a6bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a696:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <xTimerGenericCommand+0x98>)
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	f107 0110 	add.w	r1, r7, #16
 800a69e:	2300      	movs	r3, #0
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f7fe f8f1 	bl	8008888 <xQueueGenericSend>
 800a6a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a6a8:	e008      	b.n	800a6bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6aa:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <xTimerGenericCommand+0x98>)
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	f107 0110 	add.w	r1, r7, #16
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	f7fe f9e5 	bl	8008a84 <xQueueGenericSendFromISR>
 800a6ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3728      	adds	r7, #40	; 0x28
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000f48 	.word	0x20000f48

0800a6cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6d6:	4b22      	ldr	r3, [pc, #136]	; (800a760 <prvProcessExpiredTimer+0x94>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fd fefd 	bl	80084e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d022      	beq.n	800a73e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	699a      	ldr	r2, [r3, #24]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	18d1      	adds	r1, r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	6978      	ldr	r0, [r7, #20]
 800a706:	f000 f8d1 	bl	800a8ac <prvInsertTimerInActiveList>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01f      	beq.n	800a750 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a710:	2300      	movs	r3, #0
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	2300      	movs	r3, #0
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	2100      	movs	r1, #0
 800a71a:	6978      	ldr	r0, [r7, #20]
 800a71c:	f7ff ff88 	bl	800a630 <xTimerGenericCommand>
 800a720:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d113      	bne.n	800a750 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	60fb      	str	r3, [r7, #12]
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a744:	f023 0301 	bic.w	r3, r3, #1
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	6a1b      	ldr	r3, [r3, #32]
 800a754:	6978      	ldr	r0, [r7, #20]
 800a756:	4798      	blx	r3
}
 800a758:	bf00      	nop
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20000f40 	.word	0x20000f40

0800a764 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a76c:	f107 0308 	add.w	r3, r7, #8
 800a770:	4618      	mov	r0, r3
 800a772:	f000 f857 	bl	800a824 <prvGetNextExpireTime>
 800a776:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4619      	mov	r1, r3
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 f803 	bl	800a788 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a782:	f000 f8d5 	bl	800a930 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a786:	e7f1      	b.n	800a76c <prvTimerTask+0x8>

0800a788 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a792:	f7ff f93b 	bl	8009a0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 f866 	bl	800a86c <prvSampleTimeNow>
 800a7a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d130      	bne.n	800a80a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10a      	bne.n	800a7c4 <prvProcessTimerOrBlockTask+0x3c>
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d806      	bhi.n	800a7c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7b6:	f7ff f937 	bl	8009a28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7ba:	68f9      	ldr	r1, [r7, #12]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff ff85 	bl	800a6cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7c2:	e024      	b.n	800a80e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d008      	beq.n	800a7dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7ca:	4b13      	ldr	r3, [pc, #76]	; (800a818 <prvProcessTimerOrBlockTask+0x90>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <prvProcessTimerOrBlockTask+0x50>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <prvProcessTimerOrBlockTask+0x52>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7dc:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <prvProcessTimerOrBlockTask+0x94>)
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	f7fe fe7f 	bl	80094ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7ee:	f7ff f91b 	bl	8009a28 <xTaskResumeAll>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10a      	bne.n	800a80e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7f8:	4b09      	ldr	r3, [pc, #36]	; (800a820 <prvProcessTimerOrBlockTask+0x98>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
}
 800a808:	e001      	b.n	800a80e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a80a:	f7ff f90d 	bl	8009a28 <xTaskResumeAll>
}
 800a80e:	bf00      	nop
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20000f44 	.word	0x20000f44
 800a81c:	20000f48 	.word	0x20000f48
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a82c:	4b0e      	ldr	r3, [pc, #56]	; (800a868 <prvGetNextExpireTime+0x44>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <prvGetNextExpireTime+0x16>
 800a836:	2201      	movs	r2, #1
 800a838:	e000      	b.n	800a83c <prvGetNextExpireTime+0x18>
 800a83a:	2200      	movs	r2, #0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d105      	bne.n	800a854 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a848:	4b07      	ldr	r3, [pc, #28]	; (800a868 <prvGetNextExpireTime+0x44>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60fb      	str	r3, [r7, #12]
 800a852:	e001      	b.n	800a858 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a858:	68fb      	ldr	r3, [r7, #12]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	20000f40 	.word	0x20000f40

0800a86c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a874:	f7ff f976 	bl	8009b64 <xTaskGetTickCount>
 800a878:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a87a:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <prvSampleTimeNow+0x3c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	429a      	cmp	r2, r3
 800a882:	d205      	bcs.n	800a890 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a884:	f000 f936 	bl	800aaf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	e002      	b.n	800a896 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a896:	4a04      	ldr	r2, [pc, #16]	; (800a8a8 <prvSampleTimeNow+0x3c>)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a89c:	68fb      	ldr	r3, [r7, #12]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000f50 	.word	0x20000f50

0800a8ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d812      	bhi.n	800a8f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d302      	bcc.n	800a8e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	617b      	str	r3, [r7, #20]
 800a8e4:	e01b      	b.n	800a91e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8e6:	4b10      	ldr	r3, [pc, #64]	; (800a928 <prvInsertTimerInActiveList+0x7c>)
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	f7fd fdbe 	bl	8008472 <vListInsert>
 800a8f6:	e012      	b.n	800a91e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d206      	bcs.n	800a90e <prvInsertTimerInActiveList+0x62>
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	429a      	cmp	r2, r3
 800a906:	d302      	bcc.n	800a90e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a908:	2301      	movs	r3, #1
 800a90a:	617b      	str	r3, [r7, #20]
 800a90c:	e007      	b.n	800a91e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a90e:	4b07      	ldr	r3, [pc, #28]	; (800a92c <prvInsertTimerInActiveList+0x80>)
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3304      	adds	r3, #4
 800a916:	4619      	mov	r1, r3
 800a918:	4610      	mov	r0, r2
 800a91a:	f7fd fdaa 	bl	8008472 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a91e:	697b      	ldr	r3, [r7, #20]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	20000f44 	.word	0x20000f44
 800a92c:	20000f40 	.word	0x20000f40

0800a930 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08e      	sub	sp, #56	; 0x38
 800a934:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a936:	e0ca      	b.n	800aace <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da18      	bge.n	800a970 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a93e:	1d3b      	adds	r3, r7, #4
 800a940:	3304      	adds	r3, #4
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10a      	bne.n	800a960 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	61fb      	str	r3, [r7, #28]
}
 800a95c:	bf00      	nop
 800a95e:	e7fe      	b.n	800a95e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a966:	6850      	ldr	r0, [r2, #4]
 800a968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a96a:	6892      	ldr	r2, [r2, #8]
 800a96c:	4611      	mov	r1, r2
 800a96e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	f2c0 80ab 	blt.w	800aace <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d004      	beq.n	800a98e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a986:	3304      	adds	r3, #4
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fd fdab 	bl	80084e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a98e:	463b      	mov	r3, r7
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff ff6b 	bl	800a86c <prvSampleTimeNow>
 800a996:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b09      	cmp	r3, #9
 800a99c:	f200 8096 	bhi.w	800aacc <prvProcessReceivedCommands+0x19c>
 800a9a0:	a201      	add	r2, pc, #4	; (adr r2, 800a9a8 <prvProcessReceivedCommands+0x78>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9d1 	.word	0x0800a9d1
 800a9ac:	0800a9d1 	.word	0x0800a9d1
 800a9b0:	0800a9d1 	.word	0x0800a9d1
 800a9b4:	0800aa45 	.word	0x0800aa45
 800a9b8:	0800aa59 	.word	0x0800aa59
 800a9bc:	0800aaa3 	.word	0x0800aaa3
 800a9c0:	0800a9d1 	.word	0x0800a9d1
 800a9c4:	0800a9d1 	.word	0x0800a9d1
 800a9c8:	0800aa45 	.word	0x0800aa45
 800a9cc:	0800aa59 	.word	0x0800aa59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9d6:	f043 0301 	orr.w	r3, r3, #1
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	18d1      	adds	r1, r2, r3
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f0:	f7ff ff5c 	bl	800a8ac <prvInsertTimerInActiveList>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d069      	beq.n	800aace <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d05e      	beq.n	800aace <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	441a      	add	r2, r3
 800aa18:	2300      	movs	r3, #0
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	2100      	movs	r1, #0
 800aa20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa22:	f7ff fe05 	bl	800a630 <xTimerGenericCommand>
 800aa26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d14f      	bne.n	800aace <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	61bb      	str	r3, [r7, #24]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa4a:	f023 0301 	bic.w	r3, r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa56:	e03a      	b.n	800aace <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa5e:	f043 0301 	orr.w	r3, r3, #1
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	617b      	str	r3, [r7, #20]
}
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	699a      	ldr	r2, [r3, #24]
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	18d1      	adds	r1, r2, r3
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa9c:	f7ff ff06 	bl	800a8ac <prvInsertTimerInActiveList>
					break;
 800aaa0:	e015      	b.n	800aace <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d103      	bne.n	800aab8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab2:	f000 fbdd 	bl	800b270 <vPortFree>
 800aab6:	e00a      	b.n	800aace <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aabe:	f023 0301 	bic.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aaca:	e000      	b.n	800aace <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800aacc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aace:	4b08      	ldr	r3, [pc, #32]	; (800aaf0 <prvProcessReceivedCommands+0x1c0>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	1d39      	adds	r1, r7, #4
 800aad4:	2200      	movs	r2, #0
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe f8fc 	bl	8008cd4 <xQueueReceive>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f47f af2a 	bne.w	800a938 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
 800aae8:	3730      	adds	r7, #48	; 0x30
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	20000f48 	.word	0x20000f48

0800aaf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aafa:	e048      	b.n	800ab8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aafc:	4b2d      	ldr	r3, [pc, #180]	; (800abb4 <prvSwitchTimerLists+0xc0>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab06:	4b2b      	ldr	r3, [pc, #172]	; (800abb4 <prvSwitchTimerLists+0xc0>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fd fce5 	bl	80084e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab28:	f003 0304 	and.w	r3, r3, #4
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d02e      	beq.n	800ab8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	4413      	add	r3, r2
 800ab38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d90e      	bls.n	800ab60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab4e:	4b19      	ldr	r3, [pc, #100]	; (800abb4 <prvSwitchTimerLists+0xc0>)
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3304      	adds	r3, #4
 800ab56:	4619      	mov	r1, r3
 800ab58:	4610      	mov	r0, r2
 800ab5a:	f7fd fc8a 	bl	8008472 <vListInsert>
 800ab5e:	e016      	b.n	800ab8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab60:	2300      	movs	r3, #0
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	2300      	movs	r3, #0
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	2100      	movs	r1, #0
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff fd60 	bl	800a630 <xTimerGenericCommand>
 800ab70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	603b      	str	r3, [r7, #0]
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab8e:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <prvSwitchTimerLists+0xc0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1b1      	bne.n	800aafc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab98:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <prvSwitchTimerLists+0xc0>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab9e:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <prvSwitchTimerLists+0xc4>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a04      	ldr	r2, [pc, #16]	; (800abb4 <prvSwitchTimerLists+0xc0>)
 800aba4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aba6:	4a04      	ldr	r2, [pc, #16]	; (800abb8 <prvSwitchTimerLists+0xc4>)
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	6013      	str	r3, [r2, #0]
}
 800abac:	bf00      	nop
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20000f40 	.word	0x20000f40
 800abb8:	20000f44 	.word	0x20000f44

0800abbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abc2:	f000 f967 	bl	800ae94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abc6:	4b15      	ldr	r3, [pc, #84]	; (800ac1c <prvCheckForValidListAndQueue+0x60>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d120      	bne.n	800ac10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abce:	4814      	ldr	r0, [pc, #80]	; (800ac20 <prvCheckForValidListAndQueue+0x64>)
 800abd0:	f7fd fbfe 	bl	80083d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abd4:	4813      	ldr	r0, [pc, #76]	; (800ac24 <prvCheckForValidListAndQueue+0x68>)
 800abd6:	f7fd fbfb 	bl	80083d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abda:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <prvCheckForValidListAndQueue+0x6c>)
 800abdc:	4a10      	ldr	r2, [pc, #64]	; (800ac20 <prvCheckForValidListAndQueue+0x64>)
 800abde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abe0:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <prvCheckForValidListAndQueue+0x70>)
 800abe2:	4a10      	ldr	r2, [pc, #64]	; (800ac24 <prvCheckForValidListAndQueue+0x68>)
 800abe4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abe6:	2300      	movs	r3, #0
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	4b11      	ldr	r3, [pc, #68]	; (800ac30 <prvCheckForValidListAndQueue+0x74>)
 800abec:	4a11      	ldr	r2, [pc, #68]	; (800ac34 <prvCheckForValidListAndQueue+0x78>)
 800abee:	2110      	movs	r1, #16
 800abf0:	200a      	movs	r0, #10
 800abf2:	f7fd fd09 	bl	8008608 <xQueueGenericCreateStatic>
 800abf6:	4603      	mov	r3, r0
 800abf8:	4a08      	ldr	r2, [pc, #32]	; (800ac1c <prvCheckForValidListAndQueue+0x60>)
 800abfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800abfc:	4b07      	ldr	r3, [pc, #28]	; (800ac1c <prvCheckForValidListAndQueue+0x60>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d005      	beq.n	800ac10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <prvCheckForValidListAndQueue+0x60>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	490b      	ldr	r1, [pc, #44]	; (800ac38 <prvCheckForValidListAndQueue+0x7c>)
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fc1a 	bl	8009444 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac10:	f000 f970 	bl	800aef4 <vPortExitCritical>
}
 800ac14:	bf00      	nop
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20000f48 	.word	0x20000f48
 800ac20:	20000f18 	.word	0x20000f18
 800ac24:	20000f2c 	.word	0x20000f2c
 800ac28:	20000f40 	.word	0x20000f40
 800ac2c:	20000f44 	.word	0x20000f44
 800ac30:	20000ff4 	.word	0x20000ff4
 800ac34:	20000f54 	.word	0x20000f54
 800ac38:	0800b74c 	.word	0x0800b74c

0800ac3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	3b04      	subs	r3, #4
 800ac4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3b04      	subs	r3, #4
 800ac5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f023 0201 	bic.w	r2, r3, #1
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3b04      	subs	r3, #4
 800ac6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac6c:	4a0c      	ldr	r2, [pc, #48]	; (800aca0 <pxPortInitialiseStack+0x64>)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3b14      	subs	r3, #20
 800ac76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f06f 0202 	mvn.w	r2, #2
 800ac8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3b20      	subs	r3, #32
 800ac90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac92:	68fb      	ldr	r3, [r7, #12]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	0800aca5 	.word	0x0800aca5

0800aca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acae:	4b12      	ldr	r3, [pc, #72]	; (800acf8 <prvTaskExitError+0x54>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d00a      	beq.n	800acce <prvTaskExitError+0x2a>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	60fb      	str	r3, [r7, #12]
}
 800acca:	bf00      	nop
 800accc:	e7fe      	b.n	800accc <prvTaskExitError+0x28>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	60bb      	str	r3, [r7, #8]
}
 800ace0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ace2:	bf00      	nop
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0fc      	beq.n	800ace4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acea:	bf00      	nop
 800acec:	bf00      	nop
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	2000000c 	.word	0x2000000c
 800acfc:	00000000 	.word	0x00000000

0800ad00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <pxCurrentTCBConst2>)
 800ad02:	6819      	ldr	r1, [r3, #0]
 800ad04:	6808      	ldr	r0, [r1, #0]
 800ad06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0a:	f380 8809 	msr	PSP, r0
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f04f 0000 	mov.w	r0, #0
 800ad16:	f380 8811 	msr	BASEPRI, r0
 800ad1a:	4770      	bx	lr
 800ad1c:	f3af 8000 	nop.w

0800ad20 <pxCurrentTCBConst2>:
 800ad20:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop

0800ad28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad28:	4808      	ldr	r0, [pc, #32]	; (800ad4c <prvPortStartFirstTask+0x24>)
 800ad2a:	6800      	ldr	r0, [r0, #0]
 800ad2c:	6800      	ldr	r0, [r0, #0]
 800ad2e:	f380 8808 	msr	MSP, r0
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8814 	msr	CONTROL, r0
 800ad3a:	b662      	cpsie	i
 800ad3c:	b661      	cpsie	f
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	df00      	svc	0
 800ad48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad4a:	bf00      	nop
 800ad4c:	e000ed08 	.word	0xe000ed08

0800ad50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad56:	4b46      	ldr	r3, [pc, #280]	; (800ae70 <xPortStartScheduler+0x120>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a46      	ldr	r2, [pc, #280]	; (800ae74 <xPortStartScheduler+0x124>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d10a      	bne.n	800ad76 <xPortStartScheduler+0x26>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	613b      	str	r3, [r7, #16]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad76:	4b3e      	ldr	r3, [pc, #248]	; (800ae70 <xPortStartScheduler+0x120>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a3f      	ldr	r2, [pc, #252]	; (800ae78 <xPortStartScheduler+0x128>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d10a      	bne.n	800ad96 <xPortStartScheduler+0x46>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	60fb      	str	r3, [r7, #12]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad96:	4b39      	ldr	r3, [pc, #228]	; (800ae7c <xPortStartScheduler+0x12c>)
 800ad98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	4b31      	ldr	r3, [pc, #196]	; (800ae80 <xPortStartScheduler+0x130>)
 800adbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adbe:	4b31      	ldr	r3, [pc, #196]	; (800ae84 <xPortStartScheduler+0x134>)
 800adc0:	2207      	movs	r2, #7
 800adc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adc4:	e009      	b.n	800adda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800adc6:	4b2f      	ldr	r3, [pc, #188]	; (800ae84 <xPortStartScheduler+0x134>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3b01      	subs	r3, #1
 800adcc:	4a2d      	ldr	r2, [pc, #180]	; (800ae84 <xPortStartScheduler+0x134>)
 800adce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	b2db      	uxtb	r3, r3
 800add8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adda:	78fb      	ldrb	r3, [r7, #3]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade2:	2b80      	cmp	r3, #128	; 0x80
 800ade4:	d0ef      	beq.n	800adc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ade6:	4b27      	ldr	r3, [pc, #156]	; (800ae84 <xPortStartScheduler+0x134>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f1c3 0307 	rsb	r3, r3, #7
 800adee:	2b04      	cmp	r3, #4
 800adf0:	d00a      	beq.n	800ae08 <xPortStartScheduler+0xb8>
	__asm volatile
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	60bb      	str	r3, [r7, #8]
}
 800ae04:	bf00      	nop
 800ae06:	e7fe      	b.n	800ae06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae08:	4b1e      	ldr	r3, [pc, #120]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	4a1d      	ldr	r2, [pc, #116]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae1a:	4a1a      	ldr	r2, [pc, #104]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae26:	4b18      	ldr	r3, [pc, #96]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a17      	ldr	r2, [pc, #92]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae32:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a14      	ldr	r2, [pc, #80]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae3e:	f000 f8dd 	bl	800affc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae42:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <xPortStartScheduler+0x13c>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae48:	f000 f8fc 	bl	800b044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae4c:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <xPortStartScheduler+0x140>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a0f      	ldr	r2, [pc, #60]	; (800ae90 <xPortStartScheduler+0x140>)
 800ae52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae58:	f7ff ff66 	bl	800ad28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae5c:	f7fe ff4c 	bl	8009cf8 <vTaskSwitchContext>
	prvTaskExitError();
 800ae60:	f7ff ff20 	bl	800aca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	e000ed00 	.word	0xe000ed00
 800ae74:	410fc271 	.word	0x410fc271
 800ae78:	410fc270 	.word	0x410fc270
 800ae7c:	e000e400 	.word	0xe000e400
 800ae80:	20001044 	.word	0x20001044
 800ae84:	20001048 	.word	0x20001048
 800ae88:	e000ed20 	.word	0xe000ed20
 800ae8c:	2000000c 	.word	0x2000000c
 800ae90:	e000ef34 	.word	0xe000ef34

0800ae94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	607b      	str	r3, [r7, #4]
}
 800aeac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <vPortEnterCritical+0x58>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	4a0d      	ldr	r2, [pc, #52]	; (800aeec <vPortEnterCritical+0x58>)
 800aeb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aeb8:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <vPortEnterCritical+0x58>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d10f      	bne.n	800aee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aec0:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <vPortEnterCritical+0x5c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	603b      	str	r3, [r7, #0]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <vPortEnterCritical+0x4a>
	}
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	2000000c 	.word	0x2000000c
 800aef0:	e000ed04 	.word	0xe000ed04

0800aef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aefa:	4b12      	ldr	r3, [pc, #72]	; (800af44 <vPortExitCritical+0x50>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10a      	bne.n	800af18 <vPortExitCritical+0x24>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	607b      	str	r3, [r7, #4]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af18:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <vPortExitCritical+0x50>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	4a09      	ldr	r2, [pc, #36]	; (800af44 <vPortExitCritical+0x50>)
 800af20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af22:	4b08      	ldr	r3, [pc, #32]	; (800af44 <vPortExitCritical+0x50>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <vPortExitCritical+0x42>
 800af2a:	2300      	movs	r3, #0
 800af2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	f383 8811 	msr	BASEPRI, r3
}
 800af34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af36:	bf00      	nop
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	2000000c 	.word	0x2000000c
	...

0800af50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af50:	f3ef 8009 	mrs	r0, PSP
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <pxCurrentTCBConst>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	f01e 0f10 	tst.w	lr, #16
 800af60:	bf08      	it	eq
 800af62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	6010      	str	r0, [r2, #0]
 800af6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af74:	f380 8811 	msr	BASEPRI, r0
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f7fe feba 	bl	8009cf8 <vTaskSwitchContext>
 800af84:	f04f 0000 	mov.w	r0, #0
 800af88:	f380 8811 	msr	BASEPRI, r0
 800af8c:	bc09      	pop	{r0, r3}
 800af8e:	6819      	ldr	r1, [r3, #0]
 800af90:	6808      	ldr	r0, [r1, #0]
 800af92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af96:	f01e 0f10 	tst.w	lr, #16
 800af9a:	bf08      	it	eq
 800af9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afa0:	f380 8809 	msr	PSP, r0
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst>:
 800afb0:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afd2:	f7fe fdd7 	bl	8009b84 <xTaskIncrementTick>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <xPortSysTickHandler+0x40>)
 800afde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	2300      	movs	r3, #0
 800afe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f383 8811 	msr	BASEPRI, r3
}
 800afee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b000:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <vPortSetupTimerInterrupt+0x38>)
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b00c:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <vPortSetupTimerInterrupt+0x3c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a0a      	ldr	r2, [pc, #40]	; (800b03c <vPortSetupTimerInterrupt+0x40>)
 800b012:	fba2 2303 	umull	r2, r3, r2, r3
 800b016:	099b      	lsrs	r3, r3, #6
 800b018:	4a09      	ldr	r2, [pc, #36]	; (800b040 <vPortSetupTimerInterrupt+0x44>)
 800b01a:	3b01      	subs	r3, #1
 800b01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b01e:	4b04      	ldr	r3, [pc, #16]	; (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b020:	2207      	movs	r2, #7
 800b022:	601a      	str	r2, [r3, #0]
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	e000e010 	.word	0xe000e010
 800b034:	e000e018 	.word	0xe000e018
 800b038:	20000000 	.word	0x20000000
 800b03c:	10624dd3 	.word	0x10624dd3
 800b040:	e000e014 	.word	0xe000e014

0800b044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b054 <vPortEnableVFP+0x10>
 800b048:	6801      	ldr	r1, [r0, #0]
 800b04a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b04e:	6001      	str	r1, [r0, #0]
 800b050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b052:	bf00      	nop
 800b054:	e000ed88 	.word	0xe000ed88

0800b058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b05e:	f3ef 8305 	mrs	r3, IPSR
 800b062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b0f      	cmp	r3, #15
 800b068:	d914      	bls.n	800b094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b06a:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <vPortValidateInterruptPriority+0x70>)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4413      	add	r3, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b074:	4b15      	ldr	r3, [pc, #84]	; (800b0cc <vPortValidateInterruptPriority+0x74>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	7afa      	ldrb	r2, [r7, #11]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d20a      	bcs.n	800b094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	607b      	str	r3, [r7, #4]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b094:	4b0e      	ldr	r3, [pc, #56]	; (800b0d0 <vPortValidateInterruptPriority+0x78>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b09c:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <vPortValidateInterruptPriority+0x7c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d90a      	bls.n	800b0ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	603b      	str	r3, [r7, #0]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <vPortValidateInterruptPriority+0x60>
	}
 800b0ba:	bf00      	nop
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	e000e3f0 	.word	0xe000e3f0
 800b0cc:	20001044 	.word	0x20001044
 800b0d0:	e000ed0c 	.word	0xe000ed0c
 800b0d4:	20001048 	.word	0x20001048

0800b0d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08a      	sub	sp, #40	; 0x28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0e4:	f7fe fc92 	bl	8009a0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0e8:	4b5b      	ldr	r3, [pc, #364]	; (800b258 <pvPortMalloc+0x180>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0f0:	f000 f920 	bl	800b334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0f4:	4b59      	ldr	r3, [pc, #356]	; (800b25c <pvPortMalloc+0x184>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f040 8093 	bne.w	800b228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01d      	beq.n	800b144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b108:	2208      	movs	r2, #8
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4413      	add	r3, r2
 800b10e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f003 0307 	and.w	r3, r3, #7
 800b116:	2b00      	cmp	r3, #0
 800b118:	d014      	beq.n	800b144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f023 0307 	bic.w	r3, r3, #7
 800b120:	3308      	adds	r3, #8
 800b122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <pvPortMalloc+0x6c>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	617b      	str	r3, [r7, #20]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d06e      	beq.n	800b228 <pvPortMalloc+0x150>
 800b14a:	4b45      	ldr	r3, [pc, #276]	; (800b260 <pvPortMalloc+0x188>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	429a      	cmp	r2, r3
 800b152:	d869      	bhi.n	800b228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b154:	4b43      	ldr	r3, [pc, #268]	; (800b264 <pvPortMalloc+0x18c>)
 800b156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b158:	4b42      	ldr	r3, [pc, #264]	; (800b264 <pvPortMalloc+0x18c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b15e:	e004      	b.n	800b16a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	429a      	cmp	r2, r3
 800b172:	d903      	bls.n	800b17c <pvPortMalloc+0xa4>
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1f1      	bne.n	800b160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b17c:	4b36      	ldr	r3, [pc, #216]	; (800b258 <pvPortMalloc+0x180>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b182:	429a      	cmp	r2, r3
 800b184:	d050      	beq.n	800b228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b186:	6a3b      	ldr	r3, [r7, #32]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2208      	movs	r2, #8
 800b18c:	4413      	add	r3, r2
 800b18e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	1ad2      	subs	r2, r2, r3
 800b1a0:	2308      	movs	r3, #8
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d91f      	bls.n	800b1e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	613b      	str	r3, [r7, #16]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	1ad2      	subs	r2, r2, r3
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1e2:	69b8      	ldr	r0, [r7, #24]
 800b1e4:	f000 f908 	bl	800b3f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1e8:	4b1d      	ldr	r3, [pc, #116]	; (800b260 <pvPortMalloc+0x188>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	4a1b      	ldr	r2, [pc, #108]	; (800b260 <pvPortMalloc+0x188>)
 800b1f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1f6:	4b1a      	ldr	r3, [pc, #104]	; (800b260 <pvPortMalloc+0x188>)
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	4b1b      	ldr	r3, [pc, #108]	; (800b268 <pvPortMalloc+0x190>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d203      	bcs.n	800b20a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b202:	4b17      	ldr	r3, [pc, #92]	; (800b260 <pvPortMalloc+0x188>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a18      	ldr	r2, [pc, #96]	; (800b268 <pvPortMalloc+0x190>)
 800b208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	4b13      	ldr	r3, [pc, #76]	; (800b25c <pvPortMalloc+0x184>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	431a      	orrs	r2, r3
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b21e:	4b13      	ldr	r3, [pc, #76]	; (800b26c <pvPortMalloc+0x194>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	4a11      	ldr	r2, [pc, #68]	; (800b26c <pvPortMalloc+0x194>)
 800b226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b228:	f7fe fbfe 	bl	8009a28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00a      	beq.n	800b24c <pvPortMalloc+0x174>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	60fb      	str	r3, [r7, #12]
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <pvPortMalloc+0x172>
	return pvReturn;
 800b24c:	69fb      	ldr	r3, [r7, #28]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3728      	adds	r7, #40	; 0x28
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20002980 	.word	0x20002980
 800b25c:	20002994 	.word	0x20002994
 800b260:	20002984 	.word	0x20002984
 800b264:	20002978 	.word	0x20002978
 800b268:	20002988 	.word	0x20002988
 800b26c:	2000298c 	.word	0x2000298c

0800b270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d04d      	beq.n	800b31e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b282:	2308      	movs	r3, #8
 800b284:	425b      	negs	r3, r3
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	4413      	add	r3, r2
 800b28a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	4b24      	ldr	r3, [pc, #144]	; (800b328 <vPortFree+0xb8>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4013      	ands	r3, r2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <vPortFree+0x44>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	60fb      	str	r3, [r7, #12]
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00a      	beq.n	800b2d2 <vPortFree+0x62>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	60bb      	str	r3, [r7, #8]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	4b14      	ldr	r3, [pc, #80]	; (800b328 <vPortFree+0xb8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d01e      	beq.n	800b31e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d11a      	bne.n	800b31e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	4b0e      	ldr	r3, [pc, #56]	; (800b328 <vPortFree+0xb8>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	43db      	mvns	r3, r3
 800b2f2:	401a      	ands	r2, r3
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2f8:	f7fe fb88 	bl	8009a0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <vPortFree+0xbc>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4413      	add	r3, r2
 800b306:	4a09      	ldr	r2, [pc, #36]	; (800b32c <vPortFree+0xbc>)
 800b308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b30a:	6938      	ldr	r0, [r7, #16]
 800b30c:	f000 f874 	bl	800b3f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b310:	4b07      	ldr	r3, [pc, #28]	; (800b330 <vPortFree+0xc0>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	3301      	adds	r3, #1
 800b316:	4a06      	ldr	r2, [pc, #24]	; (800b330 <vPortFree+0xc0>)
 800b318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b31a:	f7fe fb85 	bl	8009a28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b31e:	bf00      	nop
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	20002994 	.word	0x20002994
 800b32c:	20002984 	.word	0x20002984
 800b330:	20002990 	.word	0x20002990

0800b334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b33a:	f641 132c 	movw	r3, #6444	; 0x192c
 800b33e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b340:	4b27      	ldr	r3, [pc, #156]	; (800b3e0 <prvHeapInit+0xac>)
 800b342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f003 0307 	and.w	r3, r3, #7
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00c      	beq.n	800b368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3307      	adds	r3, #7
 800b352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0307 	bic.w	r3, r3, #7
 800b35a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	4a1f      	ldr	r2, [pc, #124]	; (800b3e0 <prvHeapInit+0xac>)
 800b364:	4413      	add	r3, r2
 800b366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b36c:	4a1d      	ldr	r2, [pc, #116]	; (800b3e4 <prvHeapInit+0xb0>)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b372:	4b1c      	ldr	r3, [pc, #112]	; (800b3e4 <prvHeapInit+0xb0>)
 800b374:	2200      	movs	r2, #0
 800b376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	4413      	add	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b380:	2208      	movs	r2, #8
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	1a9b      	subs	r3, r3, r2
 800b386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f023 0307 	bic.w	r3, r3, #7
 800b38e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4a15      	ldr	r2, [pc, #84]	; (800b3e8 <prvHeapInit+0xb4>)
 800b394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b396:	4b14      	ldr	r3, [pc, #80]	; (800b3e8 <prvHeapInit+0xb4>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2200      	movs	r2, #0
 800b39c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b39e:	4b12      	ldr	r3, [pc, #72]	; (800b3e8 <prvHeapInit+0xb4>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	1ad2      	subs	r2, r2, r3
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3b4:	4b0c      	ldr	r3, [pc, #48]	; (800b3e8 <prvHeapInit+0xb4>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4a0a      	ldr	r2, [pc, #40]	; (800b3ec <prvHeapInit+0xb8>)
 800b3c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	4a09      	ldr	r2, [pc, #36]	; (800b3f0 <prvHeapInit+0xbc>)
 800b3ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3cc:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <prvHeapInit+0xc0>)
 800b3ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3d2:	601a      	str	r2, [r3, #0]
}
 800b3d4:	bf00      	nop
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	2000104c 	.word	0x2000104c
 800b3e4:	20002978 	.word	0x20002978
 800b3e8:	20002980 	.word	0x20002980
 800b3ec:	20002988 	.word	0x20002988
 800b3f0:	20002984 	.word	0x20002984
 800b3f4:	20002994 	.word	0x20002994

0800b3f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b400:	4b28      	ldr	r3, [pc, #160]	; (800b4a4 <prvInsertBlockIntoFreeList+0xac>)
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	e002      	b.n	800b40c <prvInsertBlockIntoFreeList+0x14>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	429a      	cmp	r2, r3
 800b414:	d8f7      	bhi.n	800b406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	4413      	add	r3, r2
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	429a      	cmp	r2, r3
 800b426:	d108      	bne.n	800b43a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	441a      	add	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	441a      	add	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d118      	bne.n	800b480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	4b15      	ldr	r3, [pc, #84]	; (800b4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d00d      	beq.n	800b476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	441a      	add	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e008      	b.n	800b488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b476:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	e003      	b.n	800b488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d002      	beq.n	800b496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b496:	bf00      	nop
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	20002978 	.word	0x20002978
 800b4a8:	20002980 	.word	0x20002980

0800b4ac <memset>:
 800b4ac:	4402      	add	r2, r0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d100      	bne.n	800b4b6 <memset+0xa>
 800b4b4:	4770      	bx	lr
 800b4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4ba:	e7f9      	b.n	800b4b0 <memset+0x4>

0800b4bc <_reclaim_reent>:
 800b4bc:	4b29      	ldr	r3, [pc, #164]	; (800b564 <_reclaim_reent+0xa8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4283      	cmp	r3, r0
 800b4c2:	b570      	push	{r4, r5, r6, lr}
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	d04b      	beq.n	800b560 <_reclaim_reent+0xa4>
 800b4c8:	69c3      	ldr	r3, [r0, #28]
 800b4ca:	b143      	cbz	r3, 800b4de <_reclaim_reent+0x22>
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d144      	bne.n	800b55c <_reclaim_reent+0xa0>
 800b4d2:	69e3      	ldr	r3, [r4, #28]
 800b4d4:	6819      	ldr	r1, [r3, #0]
 800b4d6:	b111      	cbz	r1, 800b4de <_reclaim_reent+0x22>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 f879 	bl	800b5d0 <_free_r>
 800b4de:	6961      	ldr	r1, [r4, #20]
 800b4e0:	b111      	cbz	r1, 800b4e8 <_reclaim_reent+0x2c>
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f874 	bl	800b5d0 <_free_r>
 800b4e8:	69e1      	ldr	r1, [r4, #28]
 800b4ea:	b111      	cbz	r1, 800b4f2 <_reclaim_reent+0x36>
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 f86f 	bl	800b5d0 <_free_r>
 800b4f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b4f4:	b111      	cbz	r1, 800b4fc <_reclaim_reent+0x40>
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 f86a 	bl	800b5d0 <_free_r>
 800b4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4fe:	b111      	cbz	r1, 800b506 <_reclaim_reent+0x4a>
 800b500:	4620      	mov	r0, r4
 800b502:	f000 f865 	bl	800b5d0 <_free_r>
 800b506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b508:	b111      	cbz	r1, 800b510 <_reclaim_reent+0x54>
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 f860 	bl	800b5d0 <_free_r>
 800b510:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b512:	b111      	cbz	r1, 800b51a <_reclaim_reent+0x5e>
 800b514:	4620      	mov	r0, r4
 800b516:	f000 f85b 	bl	800b5d0 <_free_r>
 800b51a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b51c:	b111      	cbz	r1, 800b524 <_reclaim_reent+0x68>
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 f856 	bl	800b5d0 <_free_r>
 800b524:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b526:	b111      	cbz	r1, 800b52e <_reclaim_reent+0x72>
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 f851 	bl	800b5d0 <_free_r>
 800b52e:	6a23      	ldr	r3, [r4, #32]
 800b530:	b1b3      	cbz	r3, 800b560 <_reclaim_reent+0xa4>
 800b532:	4620      	mov	r0, r4
 800b534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b538:	4718      	bx	r3
 800b53a:	5949      	ldr	r1, [r1, r5]
 800b53c:	b941      	cbnz	r1, 800b550 <_reclaim_reent+0x94>
 800b53e:	3504      	adds	r5, #4
 800b540:	69e3      	ldr	r3, [r4, #28]
 800b542:	2d80      	cmp	r5, #128	; 0x80
 800b544:	68d9      	ldr	r1, [r3, #12]
 800b546:	d1f8      	bne.n	800b53a <_reclaim_reent+0x7e>
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 f841 	bl	800b5d0 <_free_r>
 800b54e:	e7c0      	b.n	800b4d2 <_reclaim_reent+0x16>
 800b550:	680e      	ldr	r6, [r1, #0]
 800b552:	4620      	mov	r0, r4
 800b554:	f000 f83c 	bl	800b5d0 <_free_r>
 800b558:	4631      	mov	r1, r6
 800b55a:	e7ef      	b.n	800b53c <_reclaim_reent+0x80>
 800b55c:	2500      	movs	r5, #0
 800b55e:	e7ef      	b.n	800b540 <_reclaim_reent+0x84>
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	bf00      	nop
 800b564:	2000005c 	.word	0x2000005c

0800b568 <__libc_init_array>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	4d0d      	ldr	r5, [pc, #52]	; (800b5a0 <__libc_init_array+0x38>)
 800b56c:	4c0d      	ldr	r4, [pc, #52]	; (800b5a4 <__libc_init_array+0x3c>)
 800b56e:	1b64      	subs	r4, r4, r5
 800b570:	10a4      	asrs	r4, r4, #2
 800b572:	2600      	movs	r6, #0
 800b574:	42a6      	cmp	r6, r4
 800b576:	d109      	bne.n	800b58c <__libc_init_array+0x24>
 800b578:	4d0b      	ldr	r5, [pc, #44]	; (800b5a8 <__libc_init_array+0x40>)
 800b57a:	4c0c      	ldr	r4, [pc, #48]	; (800b5ac <__libc_init_array+0x44>)
 800b57c:	f000 f880 	bl	800b680 <_init>
 800b580:	1b64      	subs	r4, r4, r5
 800b582:	10a4      	asrs	r4, r4, #2
 800b584:	2600      	movs	r6, #0
 800b586:	42a6      	cmp	r6, r4
 800b588:	d105      	bne.n	800b596 <__libc_init_array+0x2e>
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
 800b58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b590:	4798      	blx	r3
 800b592:	3601      	adds	r6, #1
 800b594:	e7ee      	b.n	800b574 <__libc_init_array+0xc>
 800b596:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59a:	4798      	blx	r3
 800b59c:	3601      	adds	r6, #1
 800b59e:	e7f2      	b.n	800b586 <__libc_init_array+0x1e>
 800b5a0:	0800b8f0 	.word	0x0800b8f0
 800b5a4:	0800b8f0 	.word	0x0800b8f0
 800b5a8:	0800b8f0 	.word	0x0800b8f0
 800b5ac:	0800b8f4 	.word	0x0800b8f4

0800b5b0 <__retarget_lock_acquire_recursive>:
 800b5b0:	4770      	bx	lr

0800b5b2 <__retarget_lock_release_recursive>:
 800b5b2:	4770      	bx	lr

0800b5b4 <memcpy>:
 800b5b4:	440a      	add	r2, r1
 800b5b6:	4291      	cmp	r1, r2
 800b5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5bc:	d100      	bne.n	800b5c0 <memcpy+0xc>
 800b5be:	4770      	bx	lr
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ca:	4291      	cmp	r1, r2
 800b5cc:	d1f9      	bne.n	800b5c2 <memcpy+0xe>
 800b5ce:	bd10      	pop	{r4, pc}

0800b5d0 <_free_r>:
 800b5d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	d044      	beq.n	800b660 <_free_r+0x90>
 800b5d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5da:	9001      	str	r0, [sp, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f1a1 0404 	sub.w	r4, r1, #4
 800b5e2:	bfb8      	it	lt
 800b5e4:	18e4      	addlt	r4, r4, r3
 800b5e6:	f000 f83f 	bl	800b668 <__malloc_lock>
 800b5ea:	4a1e      	ldr	r2, [pc, #120]	; (800b664 <_free_r+0x94>)
 800b5ec:	9801      	ldr	r0, [sp, #4]
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	b933      	cbnz	r3, 800b600 <_free_r+0x30>
 800b5f2:	6063      	str	r3, [r4, #4]
 800b5f4:	6014      	str	r4, [r2, #0]
 800b5f6:	b003      	add	sp, #12
 800b5f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5fc:	f000 b83a 	b.w	800b674 <__malloc_unlock>
 800b600:	42a3      	cmp	r3, r4
 800b602:	d908      	bls.n	800b616 <_free_r+0x46>
 800b604:	6825      	ldr	r5, [r4, #0]
 800b606:	1961      	adds	r1, r4, r5
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf01      	itttt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	1949      	addeq	r1, r1, r5
 800b612:	6021      	streq	r1, [r4, #0]
 800b614:	e7ed      	b.n	800b5f2 <_free_r+0x22>
 800b616:	461a      	mov	r2, r3
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	b10b      	cbz	r3, 800b620 <_free_r+0x50>
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	d9fa      	bls.n	800b616 <_free_r+0x46>
 800b620:	6811      	ldr	r1, [r2, #0]
 800b622:	1855      	adds	r5, r2, r1
 800b624:	42a5      	cmp	r5, r4
 800b626:	d10b      	bne.n	800b640 <_free_r+0x70>
 800b628:	6824      	ldr	r4, [r4, #0]
 800b62a:	4421      	add	r1, r4
 800b62c:	1854      	adds	r4, r2, r1
 800b62e:	42a3      	cmp	r3, r4
 800b630:	6011      	str	r1, [r2, #0]
 800b632:	d1e0      	bne.n	800b5f6 <_free_r+0x26>
 800b634:	681c      	ldr	r4, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	6053      	str	r3, [r2, #4]
 800b63a:	440c      	add	r4, r1
 800b63c:	6014      	str	r4, [r2, #0]
 800b63e:	e7da      	b.n	800b5f6 <_free_r+0x26>
 800b640:	d902      	bls.n	800b648 <_free_r+0x78>
 800b642:	230c      	movs	r3, #12
 800b644:	6003      	str	r3, [r0, #0]
 800b646:	e7d6      	b.n	800b5f6 <_free_r+0x26>
 800b648:	6825      	ldr	r5, [r4, #0]
 800b64a:	1961      	adds	r1, r4, r5
 800b64c:	428b      	cmp	r3, r1
 800b64e:	bf04      	itt	eq
 800b650:	6819      	ldreq	r1, [r3, #0]
 800b652:	685b      	ldreq	r3, [r3, #4]
 800b654:	6063      	str	r3, [r4, #4]
 800b656:	bf04      	itt	eq
 800b658:	1949      	addeq	r1, r1, r5
 800b65a:	6021      	streq	r1, [r4, #0]
 800b65c:	6054      	str	r4, [r2, #4]
 800b65e:	e7ca      	b.n	800b5f6 <_free_r+0x26>
 800b660:	b003      	add	sp, #12
 800b662:	bd30      	pop	{r4, r5, pc}
 800b664:	20002ad4 	.word	0x20002ad4

0800b668 <__malloc_lock>:
 800b668:	4801      	ldr	r0, [pc, #4]	; (800b670 <__malloc_lock+0x8>)
 800b66a:	f7ff bfa1 	b.w	800b5b0 <__retarget_lock_acquire_recursive>
 800b66e:	bf00      	nop
 800b670:	20002ad0 	.word	0x20002ad0

0800b674 <__malloc_unlock>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__malloc_unlock+0x8>)
 800b676:	f7ff bf9c 	b.w	800b5b2 <__retarget_lock_release_recursive>
 800b67a:	bf00      	nop
 800b67c:	20002ad0 	.word	0x20002ad0

0800b680 <_init>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	bf00      	nop
 800b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b686:	bc08      	pop	{r3}
 800b688:	469e      	mov	lr, r3
 800b68a:	4770      	bx	lr

0800b68c <_fini>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	bf00      	nop
 800b690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b692:	bc08      	pop	{r3}
 800b694:	469e      	mov	lr, r3
 800b696:	4770      	bx	lr
