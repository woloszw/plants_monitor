
plants_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b6b8  0800b6b8  0001b6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b908  0800b908  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b908  0800b908  0001b908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b910  0800b910  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b910  0800b910  0001b910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b914  0800b914  0001b914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a78  20000060  0800b978  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad8  0800b978  00022ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002471b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004814  00000000  00000000  000447ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d40  00000000  00000000  00049008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a3  00000000  00000000  0004ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c7a  00000000  00000000  0004c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000224fc  00000000  00000000  00070065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee077  00000000  00000000  00092561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008230  00000000  00000000  001805d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00188808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b6a0 	.word	0x0800b6a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800b6a0 	.word	0x0800b6a0

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00a fb2b 	bl	800b4cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ee2:	f002 fc5f 	bl	80037a4 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000eec:	f000 fad4 	bl	8001498 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000efc:	f004 f88e 	bl	800501c <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f06:	f000 fac7 	bl	8001498 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_ADC1_Init+0xec>)
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0e:	2306      	movs	r3, #6
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f12:	2305      	movs	r3, #5
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000f28:	f003 fa42 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f32:	f000 fab1 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000007c 	.word	0x2000007c
 8000f44:	04300002 	.word	0x04300002

08000f48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09e      	sub	sp, #120	; 0x78
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2250      	movs	r2, #80	; 0x50
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00a faaf 	bl	800b4cc <memset>
  if(adcHandle->Instance==ADC1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f76:	d13c      	bne.n	8000ff2 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f82:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 f9fb 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f000 fa80 	bl	8001498 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ANALOG_IN_Pin;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f004 f9e5 	bl	80053ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2012      	movs	r0, #18
 8000fe8:	f004 f9b8 	bl	800535c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fec:	2012      	movs	r0, #18
 8000fee:	f004 f9cf 	bl	8005390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3778      	adds	r7, #120	; 0x78
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <readADCData>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
uint32_t readADCData(ADC_HandleTypeDef _adcHandle)
{
 8001000:	b084      	sub	sp, #16
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	f107 0c10 	add.w	ip, r7, #16
 800100c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t analogReadValue;

	HAL_ADC_Start(&_adcHandle);
 8001010:	f107 0010 	add.w	r0, r7, #16
 8001014:	f002 fd74 	bl	8003b00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&_adcHandle, 1000);
 8001018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101c:	f107 0010 	add.w	r0, r7, #16
 8001020:	f002 fe6c 	bl	8003cfc <HAL_ADC_PollForConversion>

	analogReadValue = (uint32_t) HAL_ADC_GetValue(&_adcHandle);
 8001024:	f107 0010 	add.w	r0, r7, #16
 8001028:	f002 ff5c 	bl	8003ee4 <HAL_ADC_GetValue>
 800102c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&_adcHandle);
 800102e:	f107 0010 	add.w	r0, r7, #16
 8001032:	f002 fe2f 	bl	8003c94 <HAL_ADC_Stop>

	return analogReadValue;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001042:	b004      	add	sp, #16
 8001044:	4770      	bx	lr
	...

08001048 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UART_Semaphore */
  UART_SemaphoreHandle = osSemaphoreNew(1, 0, &UART_Semaphore_attributes);
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <MX_FREERTOS_Init+0x98>)
 800104e:	2100      	movs	r1, #0
 8001050:	2001      	movs	r0, #1
 8001052:	f006 ff44 	bl	8007ede <osSemaphoreNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <MX_FREERTOS_Init+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Semaphore */
  ADC_SemaphoreHandle = osSemaphoreNew(1, 0, &ADC_Semaphore_attributes);
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <MX_FREERTOS_Init+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	2001      	movs	r0, #1
 8001062:	f006 ff3c 	bl	8007ede <osSemaphoreNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <MX_FREERTOS_Init+0xa4>)
 800106a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueToUART */
  queueToUARTHandle = osMessageQueueNew (16, sizeof(SensorData), &queueToUART_attributes);
 800106c:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <MX_FREERTOS_Init+0xa8>)
 800106e:	2108      	movs	r1, #8
 8001070:	2010      	movs	r0, #16
 8001072:	f007 f853 	bl	800811c <osMessageQueueNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <MX_FREERTOS_Init+0xac>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of queueToPump */
  queueToPumpHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueToPump_attributes);
 800107c:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <MX_FREERTOS_Init+0xb0>)
 800107e:	2102      	movs	r1, #2
 8001080:	2010      	movs	r0, #16
 8001082:	f007 f84b 	bl	800811c <osMessageQueueNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_FREERTOS_Init+0xb4>)
 800108a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensAnalog01 */
  sensAnalog01Handle = osThreadNew(sensAnalog01Task, NULL, &sensAnalog01_attributes);
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_FREERTOS_Init+0xb8>)
 800108e:	2100      	movs	r1, #0
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <MX_FREERTOS_Init+0xbc>)
 8001092:	f006 fe77 	bl	8007d84 <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <MX_FREERTOS_Init+0xc0>)
 800109a:	6013      	str	r3, [r2, #0]

  /* creation of sensUART */
  sensUARTHandle = osThreadNew(sensUARTTask, NULL, &sensUART_attributes);
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_FREERTOS_Init+0xc4>)
 800109e:	2100      	movs	r1, #0
 80010a0:	481b      	ldr	r0, [pc, #108]	; (8001110 <MX_FREERTOS_Init+0xc8>)
 80010a2:	f006 fe6f 	bl	8007d84 <osThreadNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <MX_FREERTOS_Init+0xcc>)
 80010aa:	6013      	str	r3, [r2, #0]

  /* creation of sensI2C */
  sensI2CHandle = osThreadNew(sensI2CTask, NULL, &sensI2C_attributes);
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <MX_FREERTOS_Init+0xd0>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	481a      	ldr	r0, [pc, #104]	; (800111c <MX_FREERTOS_Init+0xd4>)
 80010b2:	f006 fe67 	bl	8007d84 <osThreadNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <MX_FREERTOS_Init+0xd8>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* creation of sensAnalog02 */
  sensAnalog02Handle = osThreadNew(sensAnalog02Task, NULL, &sensAnalog02_attributes);
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <MX_FREERTOS_Init+0xdc>)
 80010be:	2100      	movs	r1, #0
 80010c0:	4819      	ldr	r0, [pc, #100]	; (8001128 <MX_FREERTOS_Init+0xe0>)
 80010c2:	f006 fe5f 	bl	8007d84 <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <MX_FREERTOS_Init+0xe4>)
 80010ca:	6013      	str	r3, [r2, #0]

  /* creation of pumpTask */
  pumpTaskHandle = osThreadNew(StartPumpTask, NULL, &pumpTask_attributes);
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_FREERTOS_Init+0xe8>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4818      	ldr	r0, [pc, #96]	; (8001134 <MX_FREERTOS_Init+0xec>)
 80010d2:	f006 fe57 	bl	8007d84 <osThreadNew>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_FREERTOS_Init+0xf0>)
 80010da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	0800b858 	.word	0x0800b858
 80010e4:	20000104 	.word	0x20000104
 80010e8:	0800b868 	.word	0x0800b868
 80010ec:	20000108 	.word	0x20000108
 80010f0:	0800b828 	.word	0x0800b828
 80010f4:	200000fc 	.word	0x200000fc
 80010f8:	0800b840 	.word	0x0800b840
 80010fc:	20000100 	.word	0x20000100
 8001100:	0800b774 	.word	0x0800b774
 8001104:	0800113d 	.word	0x0800113d
 8001108:	200000e8 	.word	0x200000e8
 800110c:	0800b798 	.word	0x0800b798
 8001110:	080011b1 	.word	0x080011b1
 8001114:	200000ec 	.word	0x200000ec
 8001118:	0800b7bc 	.word	0x0800b7bc
 800111c:	080011e9 	.word	0x080011e9
 8001120:	200000f0 	.word	0x200000f0
 8001124:	0800b7e0 	.word	0x0800b7e0
 8001128:	080011f9 	.word	0x080011f9
 800112c:	200000f4 	.word	0x200000f4
 8001130:	0800b804 	.word	0x0800b804
 8001134:	08001265 	.word	0x08001265
 8001138:	200000f8 	.word	0x200000f8

0800113c <sensAnalog01Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sensAnalog01Task */
void sensAnalog01Task(void *argument)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b09d      	sub	sp, #116	; 0x74
 8001140:	af18      	add	r7, sp, #96	; 0x60
 8001142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog01Task */
	SensorData analog1task =
 8001144:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <sensAnalog01Task+0x64>)
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}
	};

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <sensAnalog01Task+0x68>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2164      	movs	r1, #100	; 0x64
 8001158:	4618      	mov	r0, r3
 800115a:	f006 ff49 	bl	8007ff0 <osSemaphoreAcquire>
	  analog1task.data = readADCData(hadc1);
 800115e:	4c12      	ldr	r4, [pc, #72]	; (80011a8 <sensAnalog01Task+0x6c>)
 8001160:	4668      	mov	r0, sp
 8001162:	f104 0310 	add.w	r3, r4, #16
 8001166:	225c      	movs	r2, #92	; 0x5c
 8001168:	4619      	mov	r1, r3
 800116a:	f00a fa33 	bl	800b5d4 <memcpy>
 800116e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001172:	f7ff ff45 	bl	8001000 <readADCData>
 8001176:	4603      	mov	r3, r0
 8001178:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <sensAnalog01Task+0x68>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f006 ff88 	bl	8008094 <osSemaphoreRelease>
	  //analog1task.data = 4321;

	  if(osOK==osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog1task, 0, osWaitForever))
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <sensAnalog01Task+0x70>)
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	f107 0108 	add.w	r1, r7, #8
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	2200      	movs	r2, #0
 8001192:	f007 f837 	bl	8008204 <osMessageQueuePut>
	  {
		  //printf("Sending %d from %d \n \r", analog1task.data, analog1task.id);
	  }


    osDelay(1000);
 8001196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119a:	f006 fe85 	bl	8007ea8 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 800119e:	e7d8      	b.n	8001152 <sensAnalog01Task+0x16>
 80011a0:	0800b730 	.word	0x0800b730
 80011a4:	20000108 	.word	0x20000108
 80011a8:	2000007c 	.word	0x2000007c
 80011ac:	200000fc 	.word	0x200000fc

080011b0 <sensUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensUARTTask */
void sensUARTTask(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensUARTTask */
	SensorData receivedData;
  /* Infinite loop */
  for(;;)
  {
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <sensUARTTask+0x30>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f107 0108 	add.w	r1, r7, #8
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	2200      	movs	r2, #0
 80011c6:	f007 f87d 	bl	80082c4 <osMessageQueueGet>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f3      	bne.n	80011b8 <sensUARTTask+0x8>
	{
		printf("%d : %d \n \r", receivedData.id, receivedData.data);
 80011d0:	7a3b      	ldrb	r3, [r7, #8]
 80011d2:	4619      	mov	r1, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <sensUARTTask+0x34>)
 80011da:	f001 fdb3 	bl	8002d44 <printf_>
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 80011de:	e7eb      	b.n	80011b8 <sensUARTTask+0x8>
 80011e0:	200000fc 	.word	0x200000fc
 80011e4:	0800b738 	.word	0x0800b738

080011e8 <sensI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensI2CTask */
void sensI2CTask(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensI2CTask */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f006 fe59 	bl	8007ea8 <osDelay>
 80011f6:	e7fb      	b.n	80011f0 <sensI2CTask+0x8>

080011f8 <sensAnalog02Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensAnalog02Task */
void sensAnalog02Task(void *argument)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b09d      	sub	sp, #116	; 0x74
 80011fc:	af18      	add	r7, sp, #96	; 0x60
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog02Task */
	SensorData analog2task =
 8001200:	2302      	movs	r3, #2
 8001202:	723b      	strb	r3, [r7, #8]
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
	};

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <sensAnalog02Task+0x60>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	4618      	mov	r0, r3
 8001210:	f006 feee 	bl	8007ff0 <osSemaphoreAcquire>
	  analog2task.data = readADCData(hadc1);
 8001214:	4c11      	ldr	r4, [pc, #68]	; (800125c <sensAnalog02Task+0x64>)
 8001216:	4668      	mov	r0, sp
 8001218:	f104 0310 	add.w	r3, r4, #16
 800121c:	225c      	movs	r2, #92	; 0x5c
 800121e:	4619      	mov	r1, r3
 8001220:	f00a f9d8 	bl	800b5d4 <memcpy>
 8001224:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001228:	f7ff feea 	bl	8001000 <readADCData>
 800122c:	4603      	mov	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <sensAnalog02Task+0x60>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f006 ff2d 	bl	8008094 <osSemaphoreRelease>
//	  analog2task.data = 1234;
	  if(osOK==osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog2task, 0, osWaitForever))
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <sensAnalog02Task+0x68>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f107 0108 	add.w	r1, r7, #8
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	2200      	movs	r2, #0
 8001248:	f006 ffdc 	bl	8008204 <osMessageQueuePut>
	  {
	  //printf("Sending %d from %d \n \r", analog2task.data, analog2task.id);

	  }
	  osDelay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001250:	f006 fe2a 	bl	8007ea8 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001254:	e7d8      	b.n	8001208 <sensAnalog02Task+0x10>
 8001256:	bf00      	nop
 8001258:	20000108 	.word	0x20000108
 800125c:	2000007c 	.word	0x2000007c
 8001260:	200000fc 	.word	0x200000fc

08001264 <StartPumpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPumpTask */
void StartPumpTask(void *argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPumpTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800126c:	2120      	movs	r1, #32
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f004 fa35 	bl	80056e0 <HAL_GPIO_TogglePin>
//	  if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))
//		  printf("LED ON \n \r");
//	  else
//		  printf("LED OFF \n \r");

	  osDelay(1000);
 8001276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127a:	f006 fe15 	bl	8007ea8 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800127e:	e7f5      	b.n	800126c <StartPumpTask+0x8>

08001280 <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osSemaphoreAcquire(UART_SemaphoreHandle, 100);
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <_putchar+0x38>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2164      	movs	r1, #100	; 0x64
 8001290:	4618      	mov	r0, r3
 8001292:	f006 fead 	bl	8007ff0 <osSemaphoreAcquire>
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &character, 1, 1000);
 8001296:	1df9      	adds	r1, r7, #7
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	2201      	movs	r2, #1
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <_putchar+0x3c>)
 80012a0:	f005 fe36 	bl	8006f10 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart5, (uint8_t*) &character, 1, 1000);
	osSemaphoreRelease(UART_SemaphoreHandle);
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <_putchar+0x38>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f006 fef3 	bl	8008094 <osSemaphoreRelease>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000104 	.word	0x20000104
 80012bc:	20000158 	.word	0x20000158

080012c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b35      	ldr	r3, [pc, #212]	; (80013ac <MX_GPIO_Init+0xec>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a34      	ldr	r2, [pc, #208]	; (80013ac <MX_GPIO_Init+0xec>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b32      	ldr	r3, [pc, #200]	; (80013ac <MX_GPIO_Init+0xec>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ee:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <MX_GPIO_Init+0xec>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <MX_GPIO_Init+0xec>)
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <MX_GPIO_Init+0xec>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_GPIO_Init+0xec>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a28      	ldr	r2, [pc, #160]	; (80013ac <MX_GPIO_Init+0xec>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_GPIO_Init+0xec>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_GPIO_Init+0xec>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a22      	ldr	r2, [pc, #136]	; (80013ac <MX_GPIO_Init+0xec>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_GPIO_Init+0xec>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_GPIO_Init+0xec>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_GPIO_Init+0xec>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_GPIO_Init+0xec>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2120      	movs	r1, #32
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f004 f9ab 	bl	80056b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800135a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001360:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	480f      	ldr	r0, [pc, #60]	; (80013b0 <MX_GPIO_Init+0xf0>)
 8001372:	f004 f81b 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001376:	2320      	movs	r3, #32
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f004 f80c 	bl	80053ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2105      	movs	r1, #5
 8001398:	2028      	movs	r0, #40	; 0x28
 800139a:	f003 ffdf 	bl	800535c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800139e:	2028      	movs	r0, #40	; 0x28
 80013a0:	f003 fff6 	bl	8005390 <HAL_NVIC_EnableIRQ>

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48000800 	.word	0x48000800

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b8:	f001 ff2f 	bl	800321a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013bc:	f000 f80f 	bl	80013de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c0:	f7ff ff7e 	bl	80012c0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80013c4:	f001 fdb4 	bl	8002f30 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80013c8:	f7ff fd46 	bl	8000e58 <MX_ADC1_Init>
  MX_UART5_Init();
 80013cc:	f001 fdfa 	bl	8002fc4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013d0:	f006 fc8e 	bl	8007cf0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80013d4:	f7ff fe38 	bl	8001048 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013d8:	f006 fcae 	bl	8007d38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <main+0x28>

080013de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b094      	sub	sp, #80	; 0x50
 80013e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	2238      	movs	r2, #56	; 0x38
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00a f86d 	bl	800b4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001400:	2000      	movs	r0, #0
 8001402:	f004 f9ab 	bl	800575c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800140a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001410:	2340      	movs	r3, #64	; 0x40
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001414:	2302      	movs	r3, #2
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001418:	2302      	movs	r3, #2
 800141a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800141c:	2304      	movs	r3, #4
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001420:	2355      	movs	r3, #85	; 0x55
 8001422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	4618      	mov	r0, r3
 8001436:	f004 fa45 	bl	80058c4 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001440:	f000 f82a 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2303      	movs	r3, #3
 800144a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2104      	movs	r1, #4
 800145c:	4618      	mov	r0, r3
 800145e:	f004 fd43 	bl	8005ee8 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001468:	f000 f816 	bl	8001498 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3750      	adds	r7, #80	; 0x50
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001486:	f001 fee1 	bl	800324c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012c00 	.word	0x40012c00

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>

080014a2 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <_out_char+0x1e>
    _putchar(character);
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fed2 	bl	8001280 <_putchar>
  }
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e002      	b.n	80014fa <_strnlen_s+0x16>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <_strnlen_s+0x28>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	603a      	str	r2, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f3      	bne.n	80014f4 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	1ad3      	subs	r3, r2, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b2f      	cmp	r3, #47	; 0x2f
 800152c:	d904      	bls.n	8001538 <_is_digit+0x1a>
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b39      	cmp	r3, #57	; 0x39
 8001532:	d801      	bhi.n	8001538 <_is_digit+0x1a>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <_is_digit+0x1c>
 8001538:	2300      	movs	r3, #0
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001558:	e00e      	b.n	8001578 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4618      	mov	r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1c59      	adds	r1, r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6011      	str	r1, [r2, #0]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4403      	add	r3, r0
 8001574:	3b30      	subs	r3, #48	; 0x30
 8001576:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ffcd 	bl	800151e <_is_digit>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1e7      	bne.n	800155a <_atoi+0xe>
  }
  return i;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80015a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d125      	bne.n	80015fc <_out_rev+0x68>
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d120      	bne.n	80015fc <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80015ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e00a      	b.n	80015d6 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	1c53      	adds	r3, r2, #1
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	68fc      	ldr	r4, [r7, #12]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	2020      	movs	r0, #32
 80015ce:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3f0      	bcc.n	80015c0 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80015de:	e00d      	b.n	80015fc <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	3b01      	subs	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	4413      	add	r3, r2
 80015ec:	7818      	ldrb	r0, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	1c53      	adds	r3, r2, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	68fc      	ldr	r4, [r7, #12]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	47a0      	blx	r4
  while (len) {
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ee      	bne.n	80015e0 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00e      	beq.n	800162a <_out_rev+0x96>
    while (idx - start_idx < width) {
 800160c:	e007      	b.n	800161e <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	1c53      	adds	r3, r2, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	68fc      	ldr	r4, [r7, #12]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	2020      	movs	r0, #32
 800161c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001626:	429a      	cmp	r2, r3
 8001628:	d8f1      	bhi.n	800160e <_out_rev+0x7a>
    }
  }

  return idx;
 800162a:	687b      	ldr	r3, [r7, #4]
}
 800162c:	4618      	mov	r0, r3
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}

08001634 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af04      	add	r7, sp, #16
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d136      	bne.n	80016ba <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d018      	beq.n	8001684 <_ntoa_format+0x50>
 8001652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <_ntoa_format+0x50>
 800165c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d104      	bne.n	800166e <_ntoa_format+0x3a>
 8001664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00a      	beq.n	8001684 <_ntoa_format+0x50>
      width--;
 800166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001670:	3b01      	subs	r3, #1
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001674:	e006      	b.n	8001684 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	61fa      	str	r2, [r7, #28]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4413      	add	r3, r2
 8001680:	2230      	movs	r2, #48	; 0x30
 8001682:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	429a      	cmp	r2, r3
 800168a:	d20a      	bcs.n	80016a2 <_ntoa_format+0x6e>
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b1f      	cmp	r3, #31
 8001690:	d9f1      	bls.n	8001676 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001692:	e006      	b.n	80016a2 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	61fa      	str	r2, [r7, #28]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4413      	add	r3, r2
 800169e:	2230      	movs	r2, #48	; 0x30
 80016a0:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <_ntoa_format+0x86>
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d202      	bcs.n	80016ba <_ntoa_format+0x86>
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b1f      	cmp	r3, #31
 80016b8:	d9ec      	bls.n	8001694 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80016ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d058      	beq.n	8001776 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <_ntoa_format+0xc8>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <_ntoa_format+0xc8>
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	429a      	cmp	r2, r3
 80016da:	d003      	beq.n	80016e4 <_ntoa_format+0xb0>
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10b      	bne.n	80016fc <_ntoa_format+0xc8>
      len--;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <_ntoa_format+0xc8>
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d102      	bne.n	80016fc <_ntoa_format+0xc8>
        len--;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d10f      	bne.n	8001722 <_ntoa_format+0xee>
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10a      	bne.n	8001722 <_ntoa_format+0xee>
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b1f      	cmp	r3, #31
 8001710:	d807      	bhi.n	8001722 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	61fa      	str	r2, [r7, #28]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4413      	add	r3, r2
 800171c:	2278      	movs	r2, #120	; 0x78
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e01f      	b.n	8001762 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	2b10      	cmp	r3, #16
 8001726:	d10f      	bne.n	8001748 <_ntoa_format+0x114>
 8001728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00a      	beq.n	8001748 <_ntoa_format+0x114>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	2b1f      	cmp	r3, #31
 8001736:	d807      	bhi.n	8001748 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	61fa      	str	r2, [r7, #28]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4413      	add	r3, r2
 8001742:	2258      	movs	r2, #88	; 0x58
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e00c      	b.n	8001762 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	2b02      	cmp	r3, #2
 800174c:	d109      	bne.n	8001762 <_ntoa_format+0x12e>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	2b1f      	cmp	r3, #31
 8001752:	d806      	bhi.n	8001762 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	61fa      	str	r2, [r7, #28]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4413      	add	r3, r2
 800175e:	2262      	movs	r2, #98	; 0x62
 8001760:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	2b1f      	cmp	r3, #31
 8001766:	d806      	bhi.n	8001776 <_ntoa_format+0x142>
      buf[len++] = '0';
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	61fa      	str	r2, [r7, #28]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4413      	add	r3, r2
 8001772:	2230      	movs	r2, #48	; 0x30
 8001774:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2b1f      	cmp	r3, #31
 800177a:	d824      	bhi.n	80017c6 <_ntoa_format+0x192>
    if (negative) {
 800177c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	61fa      	str	r2, [r7, #28]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4413      	add	r3, r2
 800178e:	222d      	movs	r2, #45	; 0x2d
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e018      	b.n	80017c6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	61fa      	str	r2, [r7, #28]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4413      	add	r3, r2
 80017a8:	222b      	movs	r2, #43	; 0x2b
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e00b      	b.n	80017c6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80017ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	61fa      	str	r2, [r7, #28]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4413      	add	r3, r2
 80017c2:	2220      	movs	r2, #32
 80017c4:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80017c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c8:	9303      	str	r3, [sp, #12]
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fed9 	bl	8001594 <_out_rev>
 80017e2:	4603      	mov	r3, r0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b096      	sub	sp, #88	; 0x58
 80017f0:	af08      	add	r7, sp, #32
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80017fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	d103      	bne.n	800180c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001806:	f023 0310 	bic.w	r3, r3, #16
 800180a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800180c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <_ntoa_long+0x30>
 8001816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001818:	2b00      	cmp	r3, #0
 800181a:	d032      	beq.n	8001882 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800181c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800181e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001820:	fbb3 f2f2 	udiv	r2, r3, r2
 8001824:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001826:	fb01 f202 	mul.w	r2, r1, r2
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001834:	2b09      	cmp	r3, #9
 8001836:	d804      	bhi.n	8001842 <_ntoa_long+0x56>
 8001838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800183c:	3330      	adds	r3, #48	; 0x30
 800183e:	b2da      	uxtb	r2, r3
 8001840:	e00d      	b.n	800185e <_ntoa_long+0x72>
 8001842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <_ntoa_long+0x64>
 800184c:	2241      	movs	r2, #65	; 0x41
 800184e:	e000      	b.n	8001852 <_ntoa_long+0x66>
 8001850:	2261      	movs	r2, #97	; 0x61
 8001852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001856:	4413      	add	r3, r2
 8001858:	b2db      	uxtb	r3, r3
 800185a:	3b0a      	subs	r3, #10
 800185c:	b2da      	uxtb	r2, r3
 800185e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001860:	1c59      	adds	r1, r3, #1
 8001862:	6379      	str	r1, [r7, #52]	; 0x34
 8001864:	3338      	adds	r3, #56	; 0x38
 8001866:	443b      	add	r3, r7
 8001868:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800186c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800186e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <_ntoa_long+0x96>
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	2b1f      	cmp	r3, #31
 8001880:	d9cc      	bls.n	800181c <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001884:	9306      	str	r3, [sp, #24]
 8001886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001888:	9305      	str	r3, [sp, #20]
 800188a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001890:	9303      	str	r3, [sp, #12]
 8001892:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7ff fec3 	bl	8001634 <_ntoa_format>
 80018ae:	4603      	mov	r3, r0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3738      	adds	r7, #56	; 0x38
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b096      	sub	sp, #88	; 0x58
 80018bc:	af08      	add	r7, sp, #32
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80018ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018ce:	4313      	orrs	r3, r2
 80018d0:	d103      	bne.n	80018da <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80018d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018d4:	f023 0310 	bic.w	r3, r3, #16
 80018d8:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80018da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <_ntoa_long_long+0x34>
 80018e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018e8:	4313      	orrs	r3, r2
 80018ea:	d037      	beq.n	800195c <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80018ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018f4:	f7ff f932 	bl	8000b5c <__aeabi_uldivmod>
 80018f8:	4613      	mov	r3, r2
 80018fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80018fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001902:	2b09      	cmp	r3, #9
 8001904:	d804      	bhi.n	8001910 <_ntoa_long_long+0x58>
 8001906:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800190a:	3330      	adds	r3, #48	; 0x30
 800190c:	b2da      	uxtb	r2, r3
 800190e:	e00d      	b.n	800192c <_ntoa_long_long+0x74>
 8001910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_ntoa_long_long+0x66>
 800191a:	2241      	movs	r2, #65	; 0x41
 800191c:	e000      	b.n	8001920 <_ntoa_long_long+0x68>
 800191e:	2261      	movs	r2, #97	; 0x61
 8001920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001924:	4413      	add	r3, r2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3b0a      	subs	r3, #10
 800192a:	b2da      	uxtb	r2, r3
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	1c59      	adds	r1, r3, #1
 8001930:	6379      	str	r1, [r7, #52]	; 0x34
 8001932:	3338      	adds	r3, #56	; 0x38
 8001934:	443b      	add	r3, r7
 8001936:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800193a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800193e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001942:	f7ff f90b 	bl	8000b5c <__aeabi_uldivmod>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800194e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001952:	4313      	orrs	r3, r2
 8001954:	d002      	beq.n	800195c <_ntoa_long_long+0xa4>
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	2b1f      	cmp	r3, #31
 800195a:	d9c7      	bls.n	80018ec <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800195c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800195e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001960:	9206      	str	r2, [sp, #24]
 8001962:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001964:	9205      	str	r2, [sp, #20]
 8001966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001968:	9204      	str	r2, [sp, #16]
 800196a:	9303      	str	r3, [sp, #12]
 800196c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff fe56 	bl	8001634 <_ntoa_format>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3738      	adds	r7, #56	; 0x38
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	0000      	movs	r0, r0
 8001994:	0000      	movs	r0, r0
	...

08001998 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b09d      	sub	sp, #116	; 0x74
 800199c:	af04      	add	r7, sp, #16
 800199e:	6178      	str	r0, [r7, #20]
 80019a0:	6139      	str	r1, [r7, #16]
 80019a2:	60fa      	str	r2, [r7, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80019ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019c2:	f7ff f851 	bl	8000a68 <__aeabi_dcmpeq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80019cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2303      	movs	r3, #3
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	4ba7      	ldr	r3, [pc, #668]	; (8001c78 <_ftoa+0x2e0>)
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	6939      	ldr	r1, [r7, #16]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff fdd6 	bl	8001594 <_out_rev>
 80019e8:	4603      	mov	r3, r0
 80019ea:	e222      	b.n	8001e32 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80019f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f8:	f7ff f840 	bl	8000a7c <__aeabi_dcmplt>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00f      	beq.n	8001a22 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a04:	9303      	str	r3, [sp, #12]
 8001a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	4b9b      	ldr	r3, [pc, #620]	; (8001c7c <_ftoa+0x2e4>)
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	6939      	ldr	r1, [r7, #16]
 8001a18:	6978      	ldr	r0, [r7, #20]
 8001a1a:	f7ff fdbb 	bl	8001594 <_out_rev>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	e207      	b.n	8001e32 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001a22:	f04f 32ff 	mov.w	r2, #4294967295
 8001a26:	4b96      	ldr	r3, [pc, #600]	; (8001c80 <_ftoa+0x2e8>)
 8001a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a2c:	f7ff f844 	bl	8000ab8 <__aeabi_dcmpgt>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01d      	beq.n	8001a72 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <_ftoa+0xac>
 8001a40:	4b90      	ldr	r3, [pc, #576]	; (8001c84 <_ftoa+0x2ec>)
 8001a42:	e000      	b.n	8001a46 <_ftoa+0xae>
 8001a44:	4b90      	ldr	r3, [pc, #576]	; (8001c88 <_ftoa+0x2f0>)
 8001a46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a48:	f002 0204 	and.w	r2, r2, #4
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d001      	beq.n	8001a54 <_ftoa+0xbc>
 8001a50:	2204      	movs	r2, #4
 8001a52:	e000      	b.n	8001a56 <_ftoa+0xbe>
 8001a54:	2203      	movs	r2, #3
 8001a56:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001a58:	9103      	str	r1, [sp, #12]
 8001a5a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a5c:	9102      	str	r1, [sp, #8]
 8001a5e:	9201      	str	r2, [sp, #4]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	6939      	ldr	r1, [r7, #16]
 8001a68:	6978      	ldr	r0, [r7, #20]
 8001a6a:	f7ff fd93 	bl	8001594 <_out_rev>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	e1df      	b.n	8001e32 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001a72:	a37d      	add	r3, pc, #500	; (adr r3, 8001c68 <_ftoa+0x2d0>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a7c:	f7ff f81c 	bl	8000ab8 <__aeabi_dcmpgt>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <_ftoa+0x102>
 8001a86:	a37a      	add	r3, pc, #488	; (adr r3, 8001c70 <_ftoa+0x2d8>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a90:	f7fe fff4 	bl	8000a7c <__aeabi_dcmplt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00f      	beq.n	8001aba <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	ed97 0b00 	vldr	d0, [r7]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	6939      	ldr	r1, [r7, #16]
 8001ab0:	6978      	ldr	r0, [r7, #20]
 8001ab2:	f000 f9c9 	bl	8001e48 <_etoa>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	e1bb      	b.n	8001e32 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001acc:	f7fe ffd6 	bl	8000a7c <__aeabi_dcmplt>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00e      	beq.n	8001af4 <_ftoa+0x15c>
    negative = true;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	f7fe fb9e 	bl	8000228 <__aeabi_dsub>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10d      	bne.n	8001b1a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001afe:	2306      	movs	r3, #6
 8001b00:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001b02:	e00a      	b.n	8001b1a <_ftoa+0x182>
    buf[len++] = '0';
 8001b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b0a:	3360      	adds	r3, #96	; 0x60
 8001b0c:	443b      	add	r3, r7
 8001b0e:	2230      	movs	r2, #48	; 0x30
 8001b10:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b16:	3b01      	subs	r3, #1
 8001b18:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1c:	2b1f      	cmp	r3, #31
 8001b1e:	d802      	bhi.n	8001b26 <_ftoa+0x18e>
 8001b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b22:	2b09      	cmp	r3, #9
 8001b24:	d8ee      	bhi.n	8001b04 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b2a:	f7fe ffcf 	bl	8000acc <__aeabi_d2iz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001b32:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001b34:	f7fe fcc6 	bl	80004c4 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b40:	f7fe fb72 	bl	8000228 <__aeabi_dsub>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4a4f      	ldr	r2, [pc, #316]	; (8001c8c <_ftoa+0x2f4>)
 8001b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd1e 	bl	8000598 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001b64:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b68:	f7fe ffd8 	bl	8000b1c <__aeabi_d2uiz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001b70:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b72:	f7fe fc97 	bl	80004a4 <__aeabi_ui2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b7e:	f7fe fb53 	bl	8000228 <__aeabi_dsub>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <_ftoa+0x2f8>)
 8001b90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b94:	f7fe ff90 	bl	8000ab8 <__aeabi_dcmpgt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d016      	beq.n	8001bcc <_ftoa+0x234>
    ++frac;
 8001b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001ba4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ba6:	f7fe fc7d 	bl	80004a4 <__aeabi_ui2d>
 8001baa:	4a38      	ldr	r2, [pc, #224]	; (8001c8c <_ftoa+0x2f4>)
 8001bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe ff75 	bl	8000aa4 <__aeabi_dcmpge>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01a      	beq.n	8001bf6 <_ftoa+0x25e>
      frac = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8001bca:	e014      	b.n	8001bf6 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <_ftoa+0x2f8>)
 8001bd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001bd6:	f7fe ff51 	bl	8000a7c <__aeabi_dcmplt>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <_ftoa+0x258>
 8001be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d14b      	bne.n	8001c94 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8001bfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001bfe:	f7fe fc61 	bl	80004c4 <__aeabi_i2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c0a:	f7fe fb0d 	bl	8000228 <__aeabi_dsub>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001c16:	2301      	movs	r3, #1
 8001c18:	461c      	mov	r4, r3
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <_ftoa+0x2f8>)
 8001c20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c24:	f7fe ff2a 	bl	8000a7c <__aeabi_dcmplt>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <_ftoa+0x29a>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	461c      	mov	r4, r3
 8001c32:	b2e3      	uxtb	r3, r4
 8001c34:	f083 0301 	eor.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <_ftoa+0x2ba>
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_ftoa+0x2f8>)
 8001c44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c48:	f7fe ff36 	bl	8000ab8 <__aeabi_dcmpgt>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d064      	beq.n	8001d1c <_ftoa+0x384>
 8001c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8081 	beq.w	8001d60 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	3301      	adds	r3, #1
 8001c62:	657b      	str	r3, [r7, #84]	; 0x54
 8001c64:	e07c      	b.n	8001d60 <_ftoa+0x3c8>
 8001c66:	bf00      	nop
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	41cdcd65 	.word	0x41cdcd65
 8001c70:	00000000 	.word	0x00000000
 8001c74:	c1cdcd65 	.word	0xc1cdcd65
 8001c78:	0800b744 	.word	0x0800b744
 8001c7c:	0800b748 	.word	0x0800b748
 8001c80:	7fefffff 	.word	0x7fefffff
 8001c84:	0800b750 	.word	0x0800b750
 8001c88:	0800b758 	.word	0x0800b758
 8001c8c:	0800b878 	.word	0x0800b878
 8001c90:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8001c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001c98:	e01f      	b.n	8001cda <_ftoa+0x342>
      --count;
 8001c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001ca0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <_ftoa+0x4a4>)
 8001ca4:	fba3 2301 	umull	r2, r3, r3, r1
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	1aca      	subs	r2, r1, r3
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb8:	1c59      	adds	r1, r3, #1
 8001cba:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001cbc:	3230      	adds	r2, #48	; 0x30
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	3360      	adds	r3, #96	; 0x60
 8001cc2:	443b      	add	r3, r7
 8001cc4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cca:	4a5c      	ldr	r2, [pc, #368]	; (8001e3c <_ftoa+0x4a4>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8001cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cdc:	2b1f      	cmp	r3, #31
 8001cde:	d9dc      	bls.n	8001c9a <_ftoa+0x302>
 8001ce0:	e009      	b.n	8001cf6 <_ftoa+0x35e>
        break;
 8001ce2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001ce4:	e007      	b.n	8001cf6 <_ftoa+0x35e>
      buf[len++] = '0';
 8001ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cec:	3360      	adds	r3, #96	; 0x60
 8001cee:	443b      	add	r3, r7
 8001cf0:	2230      	movs	r2, #48	; 0x30
 8001cf2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf8:	2b1f      	cmp	r3, #31
 8001cfa:	d804      	bhi.n	8001d06 <_ftoa+0x36e>
 8001cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ef      	bne.n	8001ce6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d08:	2b1f      	cmp	r3, #31
 8001d0a:	d829      	bhi.n	8001d60 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8001d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d12:	3360      	adds	r3, #96	; 0x60
 8001d14:	443b      	add	r3, r7
 8001d16:	222e      	movs	r2, #46	; 0x2e
 8001d18:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d1c:	e020      	b.n	8001d60 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8001d1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d20:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <_ftoa+0x4a8>)
 8001d22:	fb83 1302 	smull	r1, r3, r3, r2
 8001d26:	1099      	asrs	r1, r3, #2
 8001d28:	17d3      	asrs	r3, r2, #31
 8001d2a:	1ac9      	subs	r1, r1, r3
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	1ad1      	subs	r1, r2, r3
 8001d36:	b2ca      	uxtb	r2, r1
 8001d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d3a:	1c59      	adds	r1, r3, #1
 8001d3c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001d3e:	3230      	adds	r2, #48	; 0x30
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	3360      	adds	r3, #96	; 0x60
 8001d44:	443b      	add	r3, r7
 8001d46:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <_ftoa+0x4a8>)
 8001d4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d52:	1092      	asrs	r2, r2, #2
 8001d54:	17db      	asrs	r3, r3, #31
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	657b      	str	r3, [r7, #84]	; 0x54
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d62:	2b1f      	cmp	r3, #31
 8001d64:	d9db      	bls.n	8001d1e <_ftoa+0x386>
 8001d66:	e000      	b.n	8001d6a <_ftoa+0x3d2>
      break;
 8001d68:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d123      	bne.n	8001dbc <_ftoa+0x424>
 8001d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01e      	beq.n	8001dbc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d014      	beq.n	8001dae <_ftoa+0x416>
 8001d84:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <_ftoa+0x3fe>
 8001d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <_ftoa+0x416>
      width--;
 8001d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001d9c:	e007      	b.n	8001dae <_ftoa+0x416>
      buf[len++] = '0';
 8001d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001da4:	3360      	adds	r3, #96	; 0x60
 8001da6:	443b      	add	r3, r7
 8001da8:	2230      	movs	r2, #48	; 0x30
 8001daa:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001dae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d202      	bcs.n	8001dbc <_ftoa+0x424>
 8001db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db8:	2b1f      	cmp	r3, #31
 8001dba:	d9f0      	bls.n	8001d9e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbe:	2b1f      	cmp	r3, #31
 8001dc0:	d827      	bhi.n	8001e12 <_ftoa+0x47a>
    if (negative) {
 8001dc2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <_ftoa+0x444>
      buf[len++] = '-';
 8001dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dd0:	3360      	adds	r3, #96	; 0x60
 8001dd2:	443b      	add	r3, r7
 8001dd4:	222d      	movs	r2, #45	; 0x2d
 8001dd6:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001dda:	e01a      	b.n	8001e12 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8001ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dec:	3360      	adds	r3, #96	; 0x60
 8001dee:	443b      	add	r3, r7
 8001df0:	222b      	movs	r2, #43	; 0x2b
 8001df2:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001df6:	e00c      	b.n	8001e12 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8001df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <_ftoa+0x47a>
      buf[len++] = ' ';
 8001e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e08:	3360      	adds	r3, #96	; 0x60
 8001e0a:	443b      	add	r3, r7
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e14:	9303      	str	r3, [sp, #12]
 8001e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	f107 0318 	add.w	r3, r7, #24
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff fbb2 	bl	8001594 <_out_rev>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3764      	adds	r7, #100	; 0x64
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	cccccccd 	.word	0xcccccccd
 8001e40:	66666667 	.word	0x66666667
 8001e44:	00000000 	.word	0x00000000

08001e48 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e4c:	b09f      	sub	sp, #124	; 0x7c
 8001e4e:	af06      	add	r7, sp, #24
 8001e50:	6278      	str	r0, [r7, #36]	; 0x24
 8001e52:	6239      	str	r1, [r7, #32]
 8001e54:	61fa      	str	r2, [r7, #28]
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001e5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e64:	f7fe fe00 	bl	8000a68 <__aeabi_dcmpeq>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d014      	beq.n	8001e98 <_etoa+0x50>
 8001e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e72:	4bc1      	ldr	r3, [pc, #772]	; (8002178 <_etoa+0x330>)
 8001e74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e78:	f7fe fe1e 	bl	8000ab8 <__aeabi_dcmpgt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10a      	bne.n	8001e98 <_etoa+0x50>
 8001e82:	f04f 32ff 	mov.w	r2, #4294967295
 8001e86:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001e8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e8e:	f7fe fdf5 	bl	8000a7c <__aeabi_dcmplt>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d012      	beq.n	8001ebe <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e9c:	9302      	str	r3, [sp, #8]
 8001e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	ed97 0b04 	vldr	d0, [r7, #16]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	6a39      	ldr	r1, [r7, #32]
 8001eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eb6:	f7ff fd6f 	bl	8001998 <_ftoa>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	e23f      	b.n	800233e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	461e      	mov	r6, r3
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ece:	f7fe fdd5 	bl	8000a7c <__aeabi_dcmplt>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <_etoa+0x94>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	461e      	mov	r6, r3
 8001edc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8001ee0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <_etoa+0xb4>
    value = -value;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	ed97 7b00 	vldr	d7, [r7]
 8001ef8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8001efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001f08:	2306      	movs	r3, #6
 8001f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001f0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001f16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	0d0a      	lsrs	r2, r1, #20
 8001f24:	2300      	movs	r3, #0
 8001f26:	4613      	mov	r3, r2
 8001f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f2c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f36:	4690      	mov	r8, r2
 8001f38:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8001f3c:	4644      	mov	r4, r8
 8001f3e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8001f42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8001f46:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001f4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f4c:	f7fe faba 	bl	80004c4 <__aeabi_i2d>
 8001f50:	a37d      	add	r3, pc, #500	; (adr r3, 8002148 <_etoa+0x300>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fb1f 	bl	8000598 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	a37b      	add	r3, pc, #492	; (adr r3, 8002150 <_etoa+0x308>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe f960 	bl	800022c <__adddf3>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4614      	mov	r4, r2
 8001f72:	461d      	mov	r5, r3
 8001f74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b7f      	ldr	r3, [pc, #508]	; (800217c <_etoa+0x334>)
 8001f7e:	f7fe f953 	bl	8000228 <__aeabi_dsub>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	a373      	add	r3, pc, #460	; (adr r3, 8002158 <_etoa+0x310>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb02 	bl	8000598 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4620      	mov	r0, r4
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	f7fe f946 	bl	800022c <__adddf3>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fd90 	bl	8000acc <__aeabi_d2iz>
 8001fac:	4603      	mov	r3, r0
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8001fb0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001fb2:	f7fe fa87 	bl	80004c4 <__aeabi_i2d>
 8001fb6:	a36a      	add	r3, pc, #424	; (adr r3, 8002160 <_etoa+0x318>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe faec 	bl	8000598 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <_etoa+0x338>)
 8001fce:	f7fe f92d 	bl	800022c <__adddf3>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7fe fd77 	bl	8000acc <__aeabi_d2iz>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001fe2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001fe4:	f7fe fa6e 	bl	80004c4 <__aeabi_i2d>
 8001fe8:	a35f      	add	r3, pc, #380	; (adr r3, 8002168 <_etoa+0x320>)
 8001fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fee:	f7fe fad3 	bl	8000598 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4614      	mov	r4, r2
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ffc:	f7fe fa62 	bl	80004c4 <__aeabi_i2d>
 8002000:	a35b      	add	r3, pc, #364	; (adr r3, 8002170 <_etoa+0x328>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fac7 	bl	8000598 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f909 	bl	8000228 <__aeabi_dsub>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800201e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002022:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002026:	f7fe fab7 	bl	8000598 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002034:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002038:	17da      	asrs	r2, r3, #31
 800203a:	469a      	mov	sl, r3
 800203c:	4693      	mov	fp, r2
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800204a:	2200      	movs	r2, #0
 800204c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002050:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002054:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	f7fe f8e6 	bl	800022c <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4690      	mov	r8, r2
 8002066:	4699      	mov	r9, r3
 8002068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800206c:	f04f 0000 	mov.w	r0, #0
 8002070:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002074:	f7fe f8d8 	bl	8000228 <__aeabi_dsub>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4692      	mov	sl, r2
 800207e:	469b      	mov	fp, r3
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <_etoa+0x33c>)
 8002086:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800208a:	f7fe fbaf 	bl	80007ec <__aeabi_ddiv>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <_etoa+0x340>)
 800209c:	f7fe f8c6 	bl	800022c <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020a8:	f7fe fba0 	bl	80007ec <__aeabi_ddiv>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <_etoa+0x344>)
 80020ba:	f7fe f8b7 	bl	800022c <__adddf3>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020c6:	f7fe fb91 	bl	80007ec <__aeabi_ddiv>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4650      	mov	r0, sl
 80020d0:	4659      	mov	r1, fp
 80020d2:	f7fe f8ab 	bl	800022c <__adddf3>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4640      	mov	r0, r8
 80020dc:	4649      	mov	r1, r9
 80020de:	f7fe fb85 	bl	80007ec <__aeabi_ddiv>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <_etoa+0x348>)
 80020f0:	f7fe f89c 	bl	800022c <__adddf3>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe fa4c 	bl	8000598 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800210c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002110:	f7fe fcb4 	bl	8000a7c <__aeabi_dcmplt>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <_etoa+0x2ee>
    expval--;
 800211a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800211c:	3b01      	subs	r3, #1
 800211e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002120:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <_etoa+0x340>)
 800212a:	f7fe fb5f 	bl	80007ec <__aeabi_ddiv>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002138:	2b63      	cmp	r3, #99	; 0x63
 800213a:	dc2b      	bgt.n	8002194 <_etoa+0x34c>
 800213c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002142:	db27      	blt.n	8002194 <_etoa+0x34c>
 8002144:	2304      	movs	r3, #4
 8002146:	e026      	b.n	8002196 <_etoa+0x34e>
 8002148:	509f79fb 	.word	0x509f79fb
 800214c:	3fd34413 	.word	0x3fd34413
 8002150:	8b60c8b3 	.word	0x8b60c8b3
 8002154:	3fc68a28 	.word	0x3fc68a28
 8002158:	636f4361 	.word	0x636f4361
 800215c:	3fd287a7 	.word	0x3fd287a7
 8002160:	0979a371 	.word	0x0979a371
 8002164:	400a934f 	.word	0x400a934f
 8002168:	bbb55516 	.word	0xbbb55516
 800216c:	40026bb1 	.word	0x40026bb1
 8002170:	fefa39ef 	.word	0xfefa39ef
 8002174:	3fe62e42 	.word	0x3fe62e42
 8002178:	7fefffff 	.word	0x7fefffff
 800217c:	3ff80000 	.word	0x3ff80000
 8002180:	3fe00000 	.word	0x3fe00000
 8002184:	402c0000 	.word	0x402c0000
 8002188:	40240000 	.word	0x40240000
 800218c:	40180000 	.word	0x40180000
 8002190:	3ff00000 	.word	0x3ff00000
 8002194:	2305      	movs	r3, #5
 8002196:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800219c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d03d      	beq.n	8002220 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80021a4:	a368      	add	r3, pc, #416	; (adr r3, 8002348 <_etoa+0x500>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021ae:	f7fe fc79 	bl	8000aa4 <__aeabi_dcmpge>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d024      	beq.n	8002202 <_etoa+0x3ba>
 80021b8:	a365      	add	r3, pc, #404	; (adr r3, 8002350 <_etoa+0x508>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021c2:	f7fe fc5b 	bl	8000a7c <__aeabi_dcmplt>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01a      	beq.n	8002202 <_etoa+0x3ba>
      if ((int)prec > expval) {
 80021cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021d2:	429a      	cmp	r2, r3
 80021d4:	da07      	bge.n	80021e6 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80021d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80021da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021e4:	e002      	b.n	80021ec <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80021ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002200:	e00e      	b.n	8002220 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <_etoa+0x3d8>
 800220a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <_etoa+0x3d8>
        --prec;
 8002216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800221a:	3b01      	subs	r3, #1
 800221c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002224:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002226:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800222a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800222c:	429a      	cmp	r2, r3
 800222e:	d904      	bls.n	800223a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	657b      	str	r3, [r7, #84]	; 0x54
 8002238:	e001      	b.n	800223e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800223e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <_etoa+0x40c>
 800224a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <_etoa+0x426>
    value /= conv.F;
 800225a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800225e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002262:	f7fe fac3 	bl	80007ec <__aeabi_ddiv>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002272:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <_etoa+0x440>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	e003      	b.n	8002290 <_etoa+0x448>
 8002288:	ed97 7b04 	vldr	d7, [r7, #16]
 800228c:	ed87 7b02 	vstr	d7, [r7, #8]
 8002290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	ed97 0b02 	vldr	d0, [r7, #8]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	6a39      	ldr	r1, [r7, #32]
 80022ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022b0:	f7ff fb72 	bl	8001998 <_ftoa>
 80022b4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80022b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d03f      	beq.n	800233c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80022bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <_etoa+0x484>
 80022c8:	2045      	movs	r0, #69	; 0x45
 80022ca:	e000      	b.n	80022ce <_etoa+0x486>
 80022cc:	2065      	movs	r0, #101	; 0x65
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	1c53      	adds	r3, r2, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80022dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bfb8      	it	lt
 80022e2:	425b      	neglt	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e8:	0fdb      	lsrs	r3, r3, #31
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022ee:	3a01      	subs	r2, #1
 80022f0:	2105      	movs	r1, #5
 80022f2:	9105      	str	r1, [sp, #20]
 80022f4:	9204      	str	r2, [sp, #16]
 80022f6:	2200      	movs	r2, #0
 80022f8:	9203      	str	r2, [sp, #12]
 80022fa:	220a      	movs	r2, #10
 80022fc:	9202      	str	r2, [sp, #8]
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	9000      	str	r0, [sp, #0]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	6a39      	ldr	r1, [r7, #32]
 8002308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800230a:	f7ff fa6f 	bl	80017ec <_ntoa_long>
 800230e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00f      	beq.n	800233c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800231c:	e007      	b.n	800232e <_etoa+0x4e6>
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	1c53      	adds	r3, r2, #1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6a39      	ldr	r1, [r7, #32]
 800232a:	2020      	movs	r0, #32
 800232c:	47a0      	blx	r4
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f0      	bhi.n	800231e <_etoa+0x4d6>
    }
  }
  return idx;
 800233c:	69fb      	ldr	r3, [r7, #28]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3764      	adds	r7, #100	; 0x64
 8002342:	46bd      	mov	sp, r7
 8002344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002348:	eb1c432d 	.word	0xeb1c432d
 800234c:	3f1a36e2 	.word	0x3f1a36e2
 8002350:	00000000 	.word	0x00000000
 8002354:	412e8480 	.word	0x412e8480

08002358 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235c:	b0a3      	sub	sp, #140	; 0x8c
 800235e:	af0a      	add	r7, sp, #40	; 0x28
 8002360:	6178      	str	r0, [r7, #20]
 8002362:	6139      	str	r1, [r7, #16]
 8002364:	60fa      	str	r2, [r7, #12]
 8002366:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 84cf 	bne.w	8002d12 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8002374:	4ba8      	ldr	r3, [pc, #672]	; (8002618 <_vsnprintf+0x2c0>)
 8002376:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002378:	f000 bccb 	b.w	8002d12 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b25      	cmp	r3, #37	; 0x25
 8002382:	d00d      	beq.n	80023a0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	7818      	ldrb	r0, [r3, #0]
 8002388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800238a:	1c53      	adds	r3, r2, #1
 800238c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800238e:	697c      	ldr	r4, [r7, #20]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6939      	ldr	r1, [r7, #16]
 8002394:	47a0      	blx	r4
      format++;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3301      	adds	r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
      continue;
 800239c:	f000 bcb9 	b.w	8002d12 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	3b20      	subs	r3, #32
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d857      	bhi.n	8002464 <_vsnprintf+0x10c>
 80023b4:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <_vsnprintf+0x64>)
 80023b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ba:	bf00      	nop
 80023bc:	0800243d 	.word	0x0800243d
 80023c0:	08002465 	.word	0x08002465
 80023c4:	08002465 	.word	0x08002465
 80023c8:	08002451 	.word	0x08002451
 80023cc:	08002465 	.word	0x08002465
 80023d0:	08002465 	.word	0x08002465
 80023d4:	08002465 	.word	0x08002465
 80023d8:	08002465 	.word	0x08002465
 80023dc:	08002465 	.word	0x08002465
 80023e0:	08002465 	.word	0x08002465
 80023e4:	08002465 	.word	0x08002465
 80023e8:	08002429 	.word	0x08002429
 80023ec:	08002465 	.word	0x08002465
 80023f0:	08002415 	.word	0x08002415
 80023f4:	08002465 	.word	0x08002465
 80023f8:	08002465 	.word	0x08002465
 80023fc:	08002401 	.word	0x08002401
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3301      	adds	r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	2301      	movs	r3, #1
 8002410:	653b      	str	r3, [r7, #80]	; 0x50
 8002412:	e02a      	b.n	800246a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	3301      	adds	r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	2301      	movs	r3, #1
 8002424:	653b      	str	r3, [r7, #80]	; 0x50
 8002426:	e020      	b.n	800246a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3301      	adds	r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	2301      	movs	r3, #1
 8002438:	653b      	str	r3, [r7, #80]	; 0x50
 800243a:	e016      	b.n	800246a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800243c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	2301      	movs	r3, #1
 800244c:	653b      	str	r3, [r7, #80]	; 0x50
 800244e:	e00c      	b.n	800246a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002452:	f043 0310 	orr.w	r3, r3, #16
 8002456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	2301      	movs	r3, #1
 8002460:	653b      	str	r3, [r7, #80]	; 0x50
 8002462:	e002      	b.n	800246a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002464:	2300      	movs	r3, #0
 8002466:	653b      	str	r3, [r7, #80]	; 0x50
 8002468:	bf00      	nop
      }
    } while (n);
 800246a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800246c:	2b00      	cmp	r3, #0
 800246e:	d19c      	bne.n	80023aa <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff f850 	bl	800151e <_is_digit>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d006      	beq.n	8002492 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff f85f 	bl	800154c <_atoi>
 800248e:	65b8      	str	r0, [r7, #88]	; 0x58
 8002490:	e01a      	b.n	80024c8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b2a      	cmp	r3, #42	; 0x2a
 8002498:	d116      	bne.n	80024c8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800249a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da07      	bge.n	80024be <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	425b      	negs	r3, r3
 80024ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80024bc:	e001      	b.n	80024c2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b2e      	cmp	r3, #46	; 0x2e
 80024d2:	d127      	bne.n	8002524 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80024d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024da:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	3301      	adds	r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f819 	bl	800151e <_is_digit>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f828 	bl	800154c <_atoi>
 80024fc:	6578      	str	r0, [r7, #84]	; 0x54
 80024fe:	e011      	b.n	8002524 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b2a      	cmp	r3, #42	; 0x2a
 8002506:	d10d      	bne.n	8002524 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800250c:	1d1a      	adds	r2, r3, #4
 800250e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800251c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3301      	adds	r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	3b68      	subs	r3, #104	; 0x68
 800252a:	2b12      	cmp	r3, #18
 800252c:	d866      	bhi.n	80025fc <_vsnprintf+0x2a4>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <_vsnprintf+0x1dc>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	080025a7 	.word	0x080025a7
 8002538:	080025fd 	.word	0x080025fd
 800253c:	080025dd 	.word	0x080025dd
 8002540:	080025fd 	.word	0x080025fd
 8002544:	08002581 	.word	0x08002581
 8002548:	080025fd 	.word	0x080025fd
 800254c:	080025fd 	.word	0x080025fd
 8002550:	080025fd 	.word	0x080025fd
 8002554:	080025fd 	.word	0x080025fd
 8002558:	080025fd 	.word	0x080025fd
 800255c:	080025fd 	.word	0x080025fd
 8002560:	080025fd 	.word	0x080025fd
 8002564:	080025cd 	.word	0x080025cd
 8002568:	080025fd 	.word	0x080025fd
 800256c:	080025fd 	.word	0x080025fd
 8002570:	080025fd 	.word	0x080025fd
 8002574:	080025fd 	.word	0x080025fd
 8002578:	080025fd 	.word	0x080025fd
 800257c:	080025ed 	.word	0x080025ed
      case 'l' :
        flags |= FLAGS_LONG;
 8002580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002586:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b6c      	cmp	r3, #108	; 0x6c
 8002594:	d134      	bne.n	8002600 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
        }
        break;
 80025a4:	e02c      	b.n	8002600 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80025a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3301      	adds	r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b68      	cmp	r3, #104	; 0x68
 80025ba:	d123      	bne.n	8002604 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 80025bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	3301      	adds	r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80025ca:	e01b      	b.n	8002604 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
        break;
 80025da:	e014      	b.n	8002606 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3301      	adds	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
        break;
 80025ea:	e00c      	b.n	8002606 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	3301      	adds	r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
        break;
 80025fa:	e004      	b.n	8002606 <_vsnprintf+0x2ae>
      default :
        break;
 80025fc:	bf00      	nop
 80025fe:	e002      	b.n	8002606 <_vsnprintf+0x2ae>
        break;
 8002600:	bf00      	nop
 8002602:	e000      	b.n	8002606 <_vsnprintf+0x2ae>
        break;
 8002604:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b67      	cmp	r3, #103	; 0x67
 800260c:	f300 80b8 	bgt.w	8002780 <_vsnprintf+0x428>
 8002610:	2b25      	cmp	r3, #37	; 0x25
 8002612:	da27      	bge.n	8002664 <_vsnprintf+0x30c>
 8002614:	e370      	b.n	8002cf8 <_vsnprintf+0x9a0>
 8002616:	bf00      	nop
 8002618:	080014a3 	.word	0x080014a3
 800261c:	3b69      	subs	r3, #105	; 0x69
 800261e:	2201      	movs	r2, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	f249 0241 	movw	r2, #36929	; 0x9041
 8002628:	401a      	ands	r2, r3
 800262a:	2a00      	cmp	r2, #0
 800262c:	bf14      	ite	ne
 800262e:	2201      	movne	r2, #1
 8002630:	2200      	moveq	r2, #0
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	2a00      	cmp	r2, #0
 8002636:	f040 80aa 	bne.w	800278e <_vsnprintf+0x436>
 800263a:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800263e:	2a00      	cmp	r2, #0
 8002640:	bf14      	ite	ne
 8002642:	2201      	movne	r2, #1
 8002644:	2200      	moveq	r2, #0
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	2a00      	cmp	r2, #0
 800264a:	f040 82fb 	bne.w	8002c44 <_vsnprintf+0x8ec>
 800264e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	f040 828d 	bne.w	8002b7c <_vsnprintf+0x824>
 8002662:	e349      	b.n	8002cf8 <_vsnprintf+0x9a0>
 8002664:	3b25      	subs	r3, #37	; 0x25
 8002666:	2b42      	cmp	r3, #66	; 0x42
 8002668:	f200 8346 	bhi.w	8002cf8 <_vsnprintf+0x9a0>
 800266c:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <_vsnprintf+0x31c>)
 800266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002672:	bf00      	nop
 8002674:	08002ce1 	.word	0x08002ce1
 8002678:	08002cf9 	.word	0x08002cf9
 800267c:	08002cf9 	.word	0x08002cf9
 8002680:	08002cf9 	.word	0x08002cf9
 8002684:	08002cf9 	.word	0x08002cf9
 8002688:	08002cf9 	.word	0x08002cf9
 800268c:	08002cf9 	.word	0x08002cf9
 8002690:	08002cf9 	.word	0x08002cf9
 8002694:	08002cf9 	.word	0x08002cf9
 8002698:	08002cf9 	.word	0x08002cf9
 800269c:	08002cf9 	.word	0x08002cf9
 80026a0:	08002cf9 	.word	0x08002cf9
 80026a4:	08002cf9 	.word	0x08002cf9
 80026a8:	08002cf9 	.word	0x08002cf9
 80026ac:	08002cf9 	.word	0x08002cf9
 80026b0:	08002cf9 	.word	0x08002cf9
 80026b4:	08002cf9 	.word	0x08002cf9
 80026b8:	08002cf9 	.word	0x08002cf9
 80026bc:	08002cf9 	.word	0x08002cf9
 80026c0:	08002cf9 	.word	0x08002cf9
 80026c4:	08002cf9 	.word	0x08002cf9
 80026c8:	08002cf9 	.word	0x08002cf9
 80026cc:	08002cf9 	.word	0x08002cf9
 80026d0:	08002cf9 	.word	0x08002cf9
 80026d4:	08002cf9 	.word	0x08002cf9
 80026d8:	08002cf9 	.word	0x08002cf9
 80026dc:	08002cf9 	.word	0x08002cf9
 80026e0:	08002cf9 	.word	0x08002cf9
 80026e4:	08002cf9 	.word	0x08002cf9
 80026e8:	08002cf9 	.word	0x08002cf9
 80026ec:	08002cf9 	.word	0x08002cf9
 80026f0:	08002cf9 	.word	0x08002cf9
 80026f4:	08002a95 	.word	0x08002a95
 80026f8:	08002a45 	.word	0x08002a45
 80026fc:	08002a95 	.word	0x08002a95
 8002700:	08002cf9 	.word	0x08002cf9
 8002704:	08002cf9 	.word	0x08002cf9
 8002708:	08002cf9 	.word	0x08002cf9
 800270c:	08002cf9 	.word	0x08002cf9
 8002710:	08002cf9 	.word	0x08002cf9
 8002714:	08002cf9 	.word	0x08002cf9
 8002718:	08002cf9 	.word	0x08002cf9
 800271c:	08002cf9 	.word	0x08002cf9
 8002720:	08002cf9 	.word	0x08002cf9
 8002724:	08002cf9 	.word	0x08002cf9
 8002728:	08002cf9 	.word	0x08002cf9
 800272c:	08002cf9 	.word	0x08002cf9
 8002730:	08002cf9 	.word	0x08002cf9
 8002734:	08002cf9 	.word	0x08002cf9
 8002738:	08002cf9 	.word	0x08002cf9
 800273c:	08002cf9 	.word	0x08002cf9
 8002740:	0800278f 	.word	0x0800278f
 8002744:	08002cf9 	.word	0x08002cf9
 8002748:	08002cf9 	.word	0x08002cf9
 800274c:	08002cf9 	.word	0x08002cf9
 8002750:	08002cf9 	.word	0x08002cf9
 8002754:	08002cf9 	.word	0x08002cf9
 8002758:	08002cf9 	.word	0x08002cf9
 800275c:	08002cf9 	.word	0x08002cf9
 8002760:	08002cf9 	.word	0x08002cf9
 8002764:	08002cf9 	.word	0x08002cf9
 8002768:	0800278f 	.word	0x0800278f
 800276c:	08002b05 	.word	0x08002b05
 8002770:	0800278f 	.word	0x0800278f
 8002774:	08002a95 	.word	0x08002a95
 8002778:	08002a45 	.word	0x08002a45
 800277c:	08002a95 	.word	0x08002a95
 8002780:	2b78      	cmp	r3, #120	; 0x78
 8002782:	f300 82b9 	bgt.w	8002cf8 <_vsnprintf+0x9a0>
 8002786:	2b69      	cmp	r3, #105	; 0x69
 8002788:	f6bf af48 	bge.w	800261c <_vsnprintf+0x2c4>
 800278c:	e2b4      	b.n	8002cf8 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b78      	cmp	r3, #120	; 0x78
 8002794:	d003      	beq.n	800279e <_vsnprintf+0x446>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b58      	cmp	r3, #88	; 0x58
 800279c:	d102      	bne.n	80027a4 <_vsnprintf+0x44c>
          base = 16U;
 800279e:	2310      	movs	r3, #16
 80027a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a2:	e013      	b.n	80027cc <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b6f      	cmp	r3, #111	; 0x6f
 80027aa:	d102      	bne.n	80027b2 <_vsnprintf+0x45a>
          base =  8U;
 80027ac:	2308      	movs	r3, #8
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b0:	e00c      	b.n	80027cc <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b62      	cmp	r3, #98	; 0x62
 80027b8:	d102      	bne.n	80027c0 <_vsnprintf+0x468>
          base =  2U;
 80027ba:	2302      	movs	r3, #2
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80027be:	e005      	b.n	80027cc <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80027c0:	230a      	movs	r3, #10
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80027c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c6:	f023 0310 	bic.w	r3, r3, #16
 80027ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b58      	cmp	r3, #88	; 0x58
 80027d2:	d103      	bne.n	80027dc <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80027d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d6:	f043 0320 	orr.w	r3, r3, #32
 80027da:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b69      	cmp	r3, #105	; 0x69
 80027e2:	d007      	beq.n	80027f4 <_vsnprintf+0x49c>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b64      	cmp	r3, #100	; 0x64
 80027ea:	d003      	beq.n	80027f4 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80027ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ee:	f023 030c 	bic.w	r3, r3, #12
 80027f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80027f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80027fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b69      	cmp	r3, #105	; 0x69
 800280c:	d004      	beq.n	8002818 <_vsnprintf+0x4c0>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	f040 8098 	bne.w	8002948 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281e:	2b00      	cmp	r3, #0
 8002820:	d031      	beq.n	8002886 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002822:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002826:	3307      	adds	r3, #7
 8002828:	f023 0307 	bic.w	r3, r3, #7
 800282c:	f103 0208 	add.w	r2, r3, #8
 8002830:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800283c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	da06      	bge.n	8002852 <_vsnprintf+0x4fa>
 8002844:	2100      	movs	r1, #0
 8002846:	f1d2 0800 	rsbs	r8, r2, #0
 800284a:	eb61 0903 	sbc.w	r9, r1, r3
 800284e:	4642      	mov	r2, r8
 8002850:	464b      	mov	r3, r9
 8002852:	69f9      	ldr	r1, [r7, #28]
 8002854:	0fc9      	lsrs	r1, r1, #31
 8002856:	b2c9      	uxtb	r1, r1
 8002858:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800285a:	2400      	movs	r4, #0
 800285c:	4682      	mov	sl, r0
 800285e:	46a3      	mov	fp, r4
 8002860:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002862:	9008      	str	r0, [sp, #32]
 8002864:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002866:	9007      	str	r0, [sp, #28]
 8002868:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800286a:	9006      	str	r0, [sp, #24]
 800286c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002870:	9102      	str	r1, [sp, #8]
 8002872:	e9cd 2300 	strd	r2, r3, [sp]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800287a:	6939      	ldr	r1, [r7, #16]
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7ff f81b 	bl	80018b8 <_ntoa_long_long>
 8002882:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002884:	e0da      	b.n	8002a3c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8002890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002894:	1d1a      	adds	r2, r3, #4
 8002896:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bfb8      	it	lt
 80028a4:	425b      	neglt	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	0fdb      	lsrs	r3, r3, #31
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80028b0:	9205      	str	r2, [sp, #20]
 80028b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028b4:	9204      	str	r2, [sp, #16]
 80028b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028b8:	9203      	str	r2, [sp, #12]
 80028ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028bc:	9202      	str	r2, [sp, #8]
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	9100      	str	r1, [sp, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c6:	6939      	ldr	r1, [r7, #16]
 80028c8:	6978      	ldr	r0, [r7, #20]
 80028ca:	f7fe ff8f 	bl	80017ec <_ntoa_long>
 80028ce:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80028d0:	e0b4      	b.n	8002a3c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80028d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <_vsnprintf+0x594>
 80028dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028e0:	1d1a      	adds	r2, r3, #4
 80028e2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e012      	b.n	8002912 <_vsnprintf+0x5ba>
 80028ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <_vsnprintf+0x5ae>
 80028f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028fa:	1d1a      	adds	r2, r3, #4
 80028fc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b21b      	sxth	r3, r3
 8002904:	e005      	b.n	8002912 <_vsnprintf+0x5ba>
 8002906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	2b00      	cmp	r3, #0
 8002918:	bfb8      	it	lt
 800291a:	425b      	neglt	r3, r3
 800291c:	4619      	mov	r1, r3
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	0fdb      	lsrs	r3, r3, #31
 8002922:	b2db      	uxtb	r3, r3
 8002924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002926:	9205      	str	r2, [sp, #20]
 8002928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800292a:	9204      	str	r2, [sp, #16]
 800292c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800292e:	9203      	str	r2, [sp, #12]
 8002930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002932:	9202      	str	r2, [sp, #8]
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	9100      	str	r1, [sp, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800293c:	6939      	ldr	r1, [r7, #16]
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7fe ff54 	bl	80017ec <_ntoa_long>
 8002944:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002946:	e079      	b.n	8002a3c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800294a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294e:	2b00      	cmp	r3, #0
 8002950:	d022      	beq.n	8002998 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002956:	3307      	adds	r3, #7
 8002958:	f023 0307 	bic.w	r3, r3, #7
 800295c:	f103 0208 	add.w	r2, r3, #8
 8002960:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800296a:	2000      	movs	r0, #0
 800296c:	460d      	mov	r5, r1
 800296e:	4606      	mov	r6, r0
 8002970:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002972:	9108      	str	r1, [sp, #32]
 8002974:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002976:	9107      	str	r1, [sp, #28]
 8002978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800297a:	9106      	str	r1, [sp, #24]
 800297c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002980:	2100      	movs	r1, #0
 8002982:	9102      	str	r1, [sp, #8]
 8002984:	e9cd 2300 	strd	r2, r3, [sp]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	6978      	ldr	r0, [r7, #20]
 8002990:	f7fe ff92 	bl	80018b8 <_ntoa_long_long>
 8002994:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002996:	e051      	b.n	8002a3c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80029a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a6:	1d1a      	adds	r2, r3, #4
 80029a8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029b0:	9205      	str	r2, [sp, #20]
 80029b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b4:	9204      	str	r2, [sp, #16]
 80029b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029b8:	9203      	str	r2, [sp, #12]
 80029ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029bc:	9202      	str	r2, [sp, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	9201      	str	r2, [sp, #4]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c8:	6939      	ldr	r1, [r7, #16]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7fe ff0e 	bl	80017ec <_ntoa_long>
 80029d0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80029d2:	e033      	b.n	8002a3c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80029d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <_vsnprintf+0x696>
 80029de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	e012      	b.n	8002a14 <_vsnprintf+0x6bc>
 80029ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <_vsnprintf+0x6b0>
 80029f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029fc:	1d1a      	adds	r2, r3, #4
 80029fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	e005      	b.n	8002a14 <_vsnprintf+0x6bc>
 8002a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a0c:	1d1a      	adds	r2, r3, #4
 8002a0e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a18:	9305      	str	r3, [sp, #20]
 8002a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1c:	9304      	str	r3, [sp, #16]
 8002a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a20:	9303      	str	r3, [sp, #12]
 8002a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a32:	6939      	ldr	r1, [r7, #16]
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f7fe fed9 	bl	80017ec <_ntoa_long>
 8002a3a:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
        break;
 8002a42:	e166      	b.n	8002d12 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b46      	cmp	r3, #70	; 0x46
 8002a4a:	d103      	bne.n	8002a54 <_vsnprintf+0x6fc>
 8002a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4e:	f043 0320 	orr.w	r3, r3, #32
 8002a52:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a58:	3307      	adds	r3, #7
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	f103 0208 	add.w	r2, r3, #8
 8002a62:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a66:	ed93 7b00 	vldr	d7, [r3]
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6c:	9302      	str	r3, [sp, #8]
 8002a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	eeb0 0a47 	vmov.f32	s0, s14
 8002a7a:	eef0 0a67 	vmov.f32	s1, s15
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a82:	6939      	ldr	r1, [r7, #16]
 8002a84:	6978      	ldr	r0, [r7, #20]
 8002a86:	f7fe ff87 	bl	8001998 <_ftoa>
 8002a8a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
        break;
 8002a92:	e13e      	b.n	8002d12 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b67      	cmp	r3, #103	; 0x67
 8002a9a:	d003      	beq.n	8002aa4 <_vsnprintf+0x74c>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b47      	cmp	r3, #71	; 0x47
 8002aa2:	d103      	bne.n	8002aac <_vsnprintf+0x754>
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b45      	cmp	r3, #69	; 0x45
 8002ab2:	d003      	beq.n	8002abc <_vsnprintf+0x764>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b47      	cmp	r3, #71	; 0x47
 8002aba:	d103      	bne.n	8002ac4 <_vsnprintf+0x76c>
 8002abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abe:	f043 0320 	orr.w	r3, r3, #32
 8002ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ac8:	3307      	adds	r3, #7
 8002aca:	f023 0307 	bic.w	r3, r3, #7
 8002ace:	f103 0208 	add.w	r2, r3, #8
 8002ad2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ad6:	ed93 7b00 	vldr	d7, [r3]
 8002ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aea:	eef0 0a67 	vmov.f32	s1, s15
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002af2:	6939      	ldr	r1, [r7, #16]
 8002af4:	6978      	ldr	r0, [r7, #20]
 8002af6:	f7ff f9a7 	bl	8001e48 <_etoa>
 8002afa:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
        break;
 8002b02:	e106      	b.n	8002d12 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002b04:	2301      	movs	r3, #1
 8002b06:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10e      	bne.n	8002b30 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8002b12:	e007      	b.n	8002b24 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8002b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b16:	1c53      	adds	r3, r2, #1
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b1a:	697c      	ldr	r4, [r7, #20]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6939      	ldr	r1, [r7, #16]
 8002b20:	2020      	movs	r0, #32
 8002b22:	47a0      	blx	r4
          while (l++ < width) {
 8002b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	647a      	str	r2, [r7, #68]	; 0x44
 8002b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d8f1      	bhi.n	8002b14 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b34:	1d1a      	adds	r2, r3, #4
 8002b36:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b2d8      	uxtb	r0, r3
 8002b3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b40:	1c53      	adds	r3, r2, #1
 8002b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b44:	697c      	ldr	r4, [r7, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6939      	ldr	r1, [r7, #16]
 8002b4a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00e      	beq.n	8002b74 <_vsnprintf+0x81c>
          while (l++ < width) {
 8002b56:	e007      	b.n	8002b68 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8002b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b5a:	1c53      	adds	r3, r2, #1
 8002b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b5e:	697c      	ldr	r4, [r7, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6939      	ldr	r1, [r7, #16]
 8002b64:	2020      	movs	r0, #32
 8002b66:	47a0      	blx	r4
          while (l++ < width) {
 8002b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	647a      	str	r2, [r7, #68]	; 0x44
 8002b6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f1      	bhi.n	8002b58 <_vsnprintf+0x800>
          }
        }
        format++;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	3301      	adds	r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
        break;
 8002b7a:	e0ca      	b.n	8002d12 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b80:	1d1a      	adds	r2, r3, #4
 8002b82:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <_vsnprintf+0x83c>
 8002b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b92:	e001      	b.n	8002b98 <_vsnprintf+0x840>
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b9c:	f7fe fca2 	bl	80014e4 <_strnlen_s>
 8002ba0:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8002bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	bf28      	it	cs
 8002bb4:	4613      	movcs	r3, r2
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8002bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d11a      	bne.n	8002bf8 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8002bc2:	e007      	b.n	8002bd4 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8002bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc6:	1c53      	adds	r3, r2, #1
 8002bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bca:	697c      	ldr	r4, [r7, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6939      	ldr	r1, [r7, #16]
 8002bd0:	2020      	movs	r0, #32
 8002bd2:	47a0      	blx	r4
          while (l++ < width) {
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d8f1      	bhi.n	8002bc4 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002be0:	e00a      	b.n	8002bf8 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8002be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	643a      	str	r2, [r7, #64]	; 0x40
 8002be8:	7818      	ldrb	r0, [r3, #0]
 8002bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bec:	1c53      	adds	r3, r2, #1
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf0:	697c      	ldr	r4, [r7, #20]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6939      	ldr	r1, [r7, #16]
 8002bf6:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <_vsnprintf+0x8bc>
 8002c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0eb      	beq.n	8002be2 <_vsnprintf+0x88a>
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	657a      	str	r2, [r7, #84]	; 0x54
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e6      	bne.n	8002be2 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00e      	beq.n	8002c3c <_vsnprintf+0x8e4>
          while (l++ < width) {
 8002c1e:	e007      	b.n	8002c30 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8002c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c22:	1c53      	adds	r3, r2, #1
 8002c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c26:	697c      	ldr	r4, [r7, #20]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6939      	ldr	r1, [r7, #16]
 8002c2c:	2020      	movs	r0, #32
 8002c2e:	47a0      	blx	r4
          while (l++ < width) {
 8002c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d8f1      	bhi.n	8002c20 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	60bb      	str	r3, [r7, #8]
        break;
 8002c42:	e066      	b.n	8002d12 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002c44:	2308      	movs	r3, #8
 8002c46:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8002c56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d023      	beq.n	8002ca6 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c62:	1d1a      	adds	r2, r3, #4
 8002c64:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	603a      	str	r2, [r7, #0]
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c74:	9308      	str	r3, [sp, #32]
 8002c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c78:	9307      	str	r3, [sp, #28]
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7c:	9306      	str	r3, [sp, #24]
 8002c7e:	f04f 0210 	mov.w	r2, #16
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c92:	e9cd 3400 	strd	r3, r4, [sp]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c9a:	6939      	ldr	r1, [r7, #16]
 8002c9c:	6978      	ldr	r0, [r7, #20]
 8002c9e:	f7fe fe0b 	bl	80018b8 <_ntoa_long_long>
 8002ca2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002ca4:	e018      	b.n	8002cd8 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002caa:	1d1a      	adds	r2, r3, #4
 8002cac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb6:	9305      	str	r3, [sp, #20]
 8002cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cba:	9304      	str	r3, [sp, #16]
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbe:	9303      	str	r3, [sp, #12]
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	9302      	str	r3, [sp, #8]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	9200      	str	r2, [sp, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cce:	6939      	ldr	r1, [r7, #16]
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	f7fe fd8b 	bl	80017ec <_ntoa_long>
 8002cd6:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
        break;
 8002cde:	e018      	b.n	8002d12 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce2:	1c53      	adds	r3, r2, #1
 8002ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce6:	697c      	ldr	r4, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6939      	ldr	r1, [r7, #16]
 8002cec:	2025      	movs	r0, #37	; 0x25
 8002cee:	47a0      	blx	r4
        format++;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
        break;
 8002cf6:	e00c      	b.n	8002d12 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	7818      	ldrb	r0, [r3, #0]
 8002cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cfe:	1c53      	adds	r3, r2, #1
 8002d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d02:	697c      	ldr	r4, [r7, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6939      	ldr	r1, [r7, #16]
 8002d08:	47a0      	blx	r4
        format++;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
        break;
 8002d10:	bf00      	nop
  while (*format)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f47f ab30 	bne.w	800237c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002d1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <_vsnprintf+0x9d2>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1e5a      	subs	r2, r3, #1
 8002d28:	e000      	b.n	8002d2c <_vsnprintf+0x9d4>
 8002d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d2c:	697c      	ldr	r4, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6939      	ldr	r1, [r7, #16]
 8002d32:	2000      	movs	r0, #0
 8002d34:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3764      	adds	r7, #100	; 0x64
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d42:	bf00      	nop

08002d44 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002d44:	b40f      	push	{r0, r1, r2, r3}
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002d52:	1d39      	adds	r1, r7, #4
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	4806      	ldr	r0, [pc, #24]	; (8002d78 <printf_+0x34>)
 8002d60:	f7ff fafa 	bl	8002358 <_vsnprintf>
 8002d64:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d72:	b004      	add	sp, #16
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	080014bf 	.word	0x080014bf

08002d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_MspInit+0x50>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <HAL_MspInit+0x50>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_MspInit+0x50>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_MspInit+0x50>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HAL_MspInit+0x50>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_MspInit+0x50>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	210f      	movs	r1, #15
 8002db6:	f06f 0001 	mvn.w	r0, #1
 8002dba:	f002 facf 	bl	800535c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002dbe:	f002 fd71 	bl	80058a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	; 0x30
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002de0:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_InitTick+0xc4>)
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <HAL_InitTick+0xc4>)
 8002de6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dea:	6613      	str	r3, [r2, #96]	; 0x60
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <HAL_InitTick+0xc4>)
 8002dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002df8:	f107 020c 	add.w	r2, r7, #12
 8002dfc:	f107 0310 	add.w	r3, r7, #16
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 fa46 	bl	8006294 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002e08:	f003 fa2e 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 8002e0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_InitTick+0xc8>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9b      	lsrs	r3, r3, #18
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <HAL_InitTick+0xcc>)
 8002e1e:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_InitTick+0xd0>)
 8002e20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002e22:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_InitTick+0xcc>)
 8002e24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002e2a:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_InitTick+0xcc>)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_InitTick+0xcc>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_InitTick+0xcc>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002e3c:	4817      	ldr	r0, [pc, #92]	; (8002e9c <HAL_InitTick+0xcc>)
 8002e3e:	f003 fcdd 	bl	80067fc <HAL_TIM_Base_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d11b      	bne.n	8002e88 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002e50:	4812      	ldr	r0, [pc, #72]	; (8002e9c <HAL_InitTick+0xcc>)
 8002e52:	f003 fd35 	bl	80068c0 <HAL_TIM_Base_Start_IT>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002e64:	2019      	movs	r0, #25
 8002e66:	f002 fa93 	bl	8005390 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d808      	bhi.n	8002e82 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002e70:	2200      	movs	r2, #0
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	2019      	movs	r0, #25
 8002e76:	f002 fa71 	bl	800535c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_InitTick+0xd4>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	e002      	b.n	8002e88 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3730      	adds	r7, #48	; 0x30
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	431bde83 	.word	0x431bde83
 8002e9c:	2000010c 	.word	0x2000010c
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eac:	e7fe      	b.n	8002eac <NMI_Handler+0x4>

08002eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eb2:	e7fe      	b.n	8002eb2 <HardFault_Handler+0x4>

08002eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <MemManage_Handler+0x4>

08002eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ebe:	e7fe      	b.n	8002ebe <BusFault_Handler+0x4>

08002ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec4:	e7fe      	b.n	8002ec4 <UsageFault_Handler+0x4>

08002ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <ADC1_2_IRQHandler+0x10>)
 8002eda:	f001 f811 	bl	8003f00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000007c 	.word	0x2000007c

08002ee8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002eee:	f003 fd57 	bl	80069a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000010c 	.word	0x2000010c

08002efc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f04:	f002 fc06 	bl	8005714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <SystemInit+0x20>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <SystemInit+0x20>)
 8002f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart5;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f36:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <MX_LPUART1_UART_Init+0x90>)
 8002f38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f40:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f60:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002f72:	4812      	ldr	r0, [pc, #72]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f74:	f003 ff7c 	bl	8006e70 <HAL_UART_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f7e:	f7fe fa8b 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f82:	2100      	movs	r1, #0
 8002f84:	480d      	ldr	r0, [pc, #52]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f86:	f004 fda5 	bl	8007ad4 <HAL_UARTEx_SetTxFifoThreshold>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002f90:	f7fe fa82 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f94:	2100      	movs	r1, #0
 8002f96:	4809      	ldr	r0, [pc, #36]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002f98:	f004 fdda 	bl	8007b50 <HAL_UARTEx_SetRxFifoThreshold>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002fa2:	f7fe fa79 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <MX_LPUART1_UART_Init+0x8c>)
 8002fa8:	f004 fd5b 	bl	8007a62 <HAL_UARTEx_DisableFifoMode>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002fb2:	f7fe fa71 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000158 	.word	0x20000158
 8002fc0:	40008000 	.word	0x40008000

08002fc4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <MX_UART5_Init+0x90>)
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <MX_UART5_Init+0x94>)
 8002fcc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002fce:	4b21      	ldr	r3, [pc, #132]	; (8003054 <MX_UART5_Init+0x90>)
 8002fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <MX_UART5_Init+0x90>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <MX_UART5_Init+0x90>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <MX_UART5_Init+0x90>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <MX_UART5_Init+0x90>)
 8002fea:	220c      	movs	r2, #12
 8002fec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <MX_UART5_Init+0x90>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <MX_UART5_Init+0x90>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <MX_UART5_Init+0x90>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <MX_UART5_Init+0x90>)
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <MX_UART5_Init+0x90>)
 8003008:	2200      	movs	r2, #0
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800300c:	4811      	ldr	r0, [pc, #68]	; (8003054 <MX_UART5_Init+0x90>)
 800300e:	f003 ff2f 	bl	8006e70 <HAL_UART_Init>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003018:	f7fe fa3e 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800301c:	2100      	movs	r1, #0
 800301e:	480d      	ldr	r0, [pc, #52]	; (8003054 <MX_UART5_Init+0x90>)
 8003020:	f004 fd58 	bl	8007ad4 <HAL_UARTEx_SetTxFifoThreshold>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800302a:	f7fe fa35 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800302e:	2100      	movs	r1, #0
 8003030:	4808      	ldr	r0, [pc, #32]	; (8003054 <MX_UART5_Init+0x90>)
 8003032:	f004 fd8d 	bl	8007b50 <HAL_UARTEx_SetRxFifoThreshold>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800303c:	f7fe fa2c 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003040:	4804      	ldr	r0, [pc, #16]	; (8003054 <MX_UART5_Init+0x90>)
 8003042:	f004 fd0e 	bl	8007a62 <HAL_UARTEx_DisableFifoMode>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800304c:	f7fe fa24 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	200001ec 	.word	0x200001ec
 8003058:	40005000 	.word	0x40005000

0800305c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0a0      	sub	sp, #128	; 0x80
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	2250      	movs	r2, #80	; 0x50
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f008 fa25 	bl	800b4cc <memset>
  if(uartHandle->Instance==LPUART1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4b      	ldr	r2, [pc, #300]	; (80031b4 <HAL_UART_MspInit+0x158>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d137      	bne.n	80030fc <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800308c:	2320      	movs	r3, #32
 800308e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003090:	2300      	movs	r3, #0
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4618      	mov	r0, r3
 800309a:	f003 f973 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030a4:	f7fe f9f8 	bl	8001498 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80030a8:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	4a42      	ldr	r2, [pc, #264]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80030b4:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80030d8:	230c      	movs	r3, #12
 80030da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80030e8:	230c      	movs	r3, #12
 80030ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030f0:	4619      	mov	r1, r3
 80030f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030f6:	f002 f959 	bl	80053ac <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80030fa:	e057      	b.n	80031ac <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==UART5)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2e      	ldr	r2, [pc, #184]	; (80031bc <HAL_UART_MspInit+0x160>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d152      	bne.n	80031ac <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003106:	2310      	movs	r3, #16
 8003108:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800310a:	2300      	movs	r3, #0
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800310e:	f107 031c 	add.w	r3, r7, #28
 8003112:	4618      	mov	r0, r3
 8003114:	f003 f936 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800311e:	f7fe f9bb 	bl	8001498 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 8003128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800312c:	6593      	str	r3, [r2, #88]	; 0x58
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 8003148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003152:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_UART_MspInit+0x15c>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800316a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800317c:	2305      	movs	r3, #5
 800317e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003180:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003184:	4619      	mov	r1, r3
 8003186:	480e      	ldr	r0, [pc, #56]	; (80031c0 <HAL_UART_MspInit+0x164>)
 8003188:	f002 f910 	bl	80053ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800318c:	2304      	movs	r3, #4
 800318e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003198:	2300      	movs	r3, #0
 800319a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800319c:	2305      	movs	r3, #5
 800319e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031a4:	4619      	mov	r1, r3
 80031a6:	4807      	ldr	r0, [pc, #28]	; (80031c4 <HAL_UART_MspInit+0x168>)
 80031a8:	f002 f900 	bl	80053ac <HAL_GPIO_Init>
}
 80031ac:	bf00      	nop
 80031ae:	3780      	adds	r7, #128	; 0x80
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40008000 	.word	0x40008000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40005000 	.word	0x40005000
 80031c0:	48000800 	.word	0x48000800
 80031c4:	48000c00 	.word	0x48000c00

080031c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031c8:	480d      	ldr	r0, [pc, #52]	; (8003200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031cc:	f7ff fe9e 	bl	8002f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d0:	480c      	ldr	r0, [pc, #48]	; (8003204 <LoopForever+0x6>)
  ldr r1, =_edata
 80031d2:	490d      	ldr	r1, [pc, #52]	; (8003208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <LoopForever+0xe>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031e8:	4c0a      	ldr	r4, [pc, #40]	; (8003214 <LoopForever+0x16>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031f6:	f008 f9c7 	bl	800b588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031fa:	f7fe f8db 	bl	80013b4 <main>

080031fe <LoopForever>:

LoopForever:
    b LoopForever
 80031fe:	e7fe      	b.n	80031fe <LoopForever>
  ldr   r0, =_estack
 8003200:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003208:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800320c:	0800b918 	.word	0x0800b918
  ldr r2, =_sbss
 8003210:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003214:	20002ad8 	.word	0x20002ad8

08003218 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC3_IRQHandler>

0800321a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003224:	2003      	movs	r0, #3
 8003226:	f002 f88e 	bl	8005346 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800322a:	200f      	movs	r0, #15
 800322c:	f7ff fdd0 	bl	8002dd0 <HAL_InitTick>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	71fb      	strb	r3, [r7, #7]
 800323a:	e001      	b.n	8003240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800323c:	f7ff fd9e 	bl	8002d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003240:	79fb      	ldrb	r3, [r7, #7]

}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_IncTick+0x1c>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_IncTick+0x20>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4413      	add	r3, r2
 800325a:	4a03      	ldr	r2, [pc, #12]	; (8003268 <HAL_IncTick+0x1c>)
 800325c:	6013      	str	r3, [r2, #0]
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	20000280 	.word	0x20000280
 800326c:	20000008 	.word	0x20000008

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000280 	.word	0x20000280

08003288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	609a      	str	r2, [r3, #8]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	609a      	str	r2, [r3, #8]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3360      	adds	r3, #96	; 0x60
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <LL_ADC_SetOffset+0x44>)
 8003312:	4013      	ands	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	4313      	orrs	r3, r2
 8003320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	03fff000 	.word	0x03fff000

08003338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3360      	adds	r3, #96	; 0x60
 8003346:	461a      	mov	r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3360      	adds	r3, #96	; 0x60
 8003374:	461a      	mov	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	431a      	orrs	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800339a:	b480      	push	{r7}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3360      	adds	r3, #96	; 0x60
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	431a      	orrs	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3360      	adds	r3, #96	; 0x60
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	615a      	str	r2, [r3, #20]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003452:	b480      	push	{r7}
 8003454:	b087      	sub	sp, #28
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3330      	adds	r3, #48	; 0x30
 8003462:	461a      	mov	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	4413      	add	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	211f      	movs	r1, #31
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	401a      	ands	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0e9b      	lsrs	r3, r3, #26
 800348a:	f003 011f 	and.w	r1, r3, #31
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	431a      	orrs	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3314      	adds	r3, #20
 80034e0:	461a      	mov	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	0e5b      	lsrs	r3, r3, #25
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	4413      	add	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	0d1b      	lsrs	r3, r3, #20
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	2107      	movs	r1, #7
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	401a      	ands	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0d1b      	lsrs	r3, r3, #20
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	431a      	orrs	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0318 	and.w	r3, r3, #24
 800354a:	4908      	ldr	r1, [pc, #32]	; (800356c <LL_ADC_SetChannelSingleDiff+0x44>)
 800354c:	40d9      	lsrs	r1, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	400b      	ands	r3, r1
 8003552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003556:	431a      	orrs	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	0007ffff 	.word	0x0007ffff

08003570 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 031f 	and.w	r3, r3, #31
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80035b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6093      	str	r3, [r2, #8]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e0:	d101      	bne.n	80035e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003608:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003630:	d101      	bne.n	8003636 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003654:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800367c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003680:	f043 0202 	orr.w	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <LL_ADC_IsEnabled+0x18>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <LL_ADC_IsEnabled+0x1a>
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d101      	bne.n	80036d2 <LL_ADC_IsDisableOngoing+0x18>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <LL_ADC_IsDisableOngoing+0x1a>
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b04      	cmp	r3, #4
 8003742:	d101      	bne.n	8003748 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003766:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	d101      	bne.n	8003796 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e19b      	b.n	8003af6 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fd fbbb 	bl	8000f48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fef1 	bl	80035cc <LL_ADC_IsDeepPowerDownEnabled>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fed7 	bl	80035a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff ff0c 	bl	800361c <LL_ADC_IsInternalRegulatorEnabled>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d115      	bne.n	8003836 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fef0 	bl	80035f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003814:	4b97      	ldr	r3, [pc, #604]	; (8003a74 <HAL_ADC_Init+0x2d0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	4a97      	ldr	r2, [pc, #604]	; (8003a78 <HAL_ADC_Init+0x2d4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003828:	e002      	b.n	8003830 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3b01      	subs	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f9      	bne.n	800382a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff feee 	bl	800361c <LL_ADC_IsInternalRegulatorEnabled>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff62 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 800386c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8134 	bne.w	8003ae4 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 8130 	bne.w	8003ae4 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800388c:	f043 0202 	orr.w	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fefb 	bl	8003694 <LL_ADC_IsEnabled>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d137      	bne.n	8003914 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ac:	d004      	beq.n	80038b8 <HAL_ADC_Init+0x114>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a72      	ldr	r2, [pc, #456]	; (8003a7c <HAL_ADC_Init+0x2d8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10f      	bne.n	80038d8 <HAL_ADC_Init+0x134>
 80038b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80038bc:	f7ff feea 	bl	8003694 <LL_ADC_IsEnabled>
 80038c0:	4604      	mov	r4, r0
 80038c2:	486e      	ldr	r0, [pc, #440]	; (8003a7c <HAL_ADC_Init+0x2d8>)
 80038c4:	f7ff fee6 	bl	8003694 <LL_ADC_IsEnabled>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4323      	orrs	r3, r4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e008      	b.n	80038ea <HAL_ADC_Init+0x146>
 80038d8:	4869      	ldr	r0, [pc, #420]	; (8003a80 <HAL_ADC_Init+0x2dc>)
 80038da:	f7ff fedb 	bl	8003694 <LL_ADC_IsEnabled>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d012      	beq.n	8003914 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f6:	d004      	beq.n	8003902 <HAL_ADC_Init+0x15e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a5f      	ldr	r2, [pc, #380]	; (8003a7c <HAL_ADC_Init+0x2d8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_ADC_Init+0x162>
 8003902:	4a60      	ldr	r2, [pc, #384]	; (8003a84 <HAL_ADC_Init+0x2e0>)
 8003904:	e000      	b.n	8003908 <HAL_ADC_Init+0x164>
 8003906:	4a60      	ldr	r2, [pc, #384]	; (8003a88 <HAL_ADC_Init+0x2e4>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f7ff fcba 	bl	8003288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7f5b      	ldrb	r3, [r3, #29]
 8003918:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800391e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003924:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800392a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003932:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800393e:	2b01      	cmp	r3, #1
 8003940:	d106      	bne.n	8003950 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	3b01      	subs	r3, #1
 8003948:	045b      	lsls	r3, r3, #17
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	4b46      	ldr	r3, [pc, #280]	; (8003a8c <HAL_ADC_Init+0x2e8>)
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	69b9      	ldr	r1, [r7, #24]
 800397c:	430b      	orrs	r3, r1
 800397e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff feef 	bl	800377e <LL_ADC_INJ_IsConversionOngoing>
 80039a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d17b      	bne.n	8003aa0 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d178      	bne.n	8003aa0 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ca:	f023 0302 	bic.w	r3, r3, #2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d017      	beq.n	8003a10 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80039ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6911      	ldr	r1, [r2, #16]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003a0e:	e013      	b.n	8003a38 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a34:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d126      	bne.n	8003a90 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a58:	4311      	orrs	r1, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a5e:	4311      	orrs	r1, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a64:	430a      	orrs	r2, r1
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	611a      	str	r2, [r3, #16]
 8003a72:	e015      	b.n	8003aa0 <HAL_ADC_Init+0x2fc>
 8003a74:	20000000 	.word	0x20000000
 8003a78:	053e2d63 	.word	0x053e2d63
 8003a7c:	50000100 	.word	0x50000100
 8003a80:	50000400 	.word	0x50000400
 8003a84:	50000300 	.word	0x50000300
 8003a88:	50000700 	.word	0x50000700
 8003a8c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f023 010f 	bic.w	r1, r3, #15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac0:	e007      	b.n	8003ad2 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 020f 	bic.w	r2, r2, #15
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ae2:	e007      	b.n	8003af4 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	f043 0210 	orr.w	r2, r3, #16
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd90      	pop	{r4, r7, pc}
 8003afe:	bf00      	nop

08003b00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b10:	d004      	beq.n	8003b1c <HAL_ADC_Start+0x1c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <HAL_ADC_Start+0x188>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_Start+0x20>
 8003b1c:	4b5b      	ldr	r3, [pc, #364]	; (8003c8c <HAL_ADC_Start+0x18c>)
 8003b1e:	e000      	b.n	8003b22 <HAL_ADC_Start+0x22>
 8003b20:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_ADC_Start+0x190>)
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fd24 	bl	8003570 <LL_ADC_GetMultimode>
 8003b28:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fdfe 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 809f 	bne.w	8003c7a <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_Start+0x4a>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e09a      	b.n	8003c80 <HAL_ADC_Start+0x180>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 f914 	bl	8004d80 <ADC_Enable>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 8086 	bne.w	8003c70 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	; (8003c88 <HAL_ADC_Start+0x188>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d002      	beq.n	8003b88 <HAL_ADC_Start+0x88>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	e001      	b.n	8003b8c <HAL_ADC_Start+0x8c>
 8003b88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d002      	beq.n	8003b9a <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb2:	d106      	bne.n	8003bc2 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	f023 0206 	bic.w	r2, r3, #6
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60
 8003bc0:	e002      	b.n	8003bc8 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	221c      	movs	r2, #28
 8003bce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <HAL_ADC_Start+0x188>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d002      	beq.n	8003be8 <HAL_ADC_Start+0xe8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	e001      	b.n	8003bec <HAL_ADC_Start+0xec>
 8003be8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d008      	beq.n	8003c06 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d002      	beq.n	8003c06 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b09      	cmp	r3, #9
 8003c04:	d114      	bne.n	8003c30 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fd59 	bl	80036e0 <LL_ADC_REG_StartConversion>
 8003c2e:	e026      	b.n	8003c7e <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <HAL_ADC_Start+0x188>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d002      	beq.n	8003c4c <HAL_ADC_Start+0x14c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	e001      	b.n	8003c50 <HAL_ADC_Start+0x150>
 8003c4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c50:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00f      	beq.n	8003c7e <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c6e:	e006      	b.n	8003c7e <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003c78:	e001      	b.n	8003c7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	50000100 	.word	0x50000100
 8003c8c:	50000300 	.word	0x50000300
 8003c90:	50000700 	.word	0x50000700

08003c94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_Stop+0x16>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e023      	b.n	8003cf2 <HAL_ADC_Stop+0x5e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003cb2:	2103      	movs	r1, #3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 ffa7 	bl	8004c08 <ADC_ConversionStop>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d111      	bne.n	8003ce8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f001 f8f1 	bl	8004eac <ADC_Disable>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0e:	d004      	beq.n	8003d1a <HAL_ADC_PollForConversion+0x1e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a70      	ldr	r2, [pc, #448]	; (8003ed8 <HAL_ADC_PollForConversion+0x1dc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_PollForConversion+0x22>
 8003d1a:	4b70      	ldr	r3, [pc, #448]	; (8003edc <HAL_ADC_PollForConversion+0x1e0>)
 8003d1c:	e000      	b.n	8003d20 <HAL_ADC_PollForConversion+0x24>
 8003d1e:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <HAL_ADC_PollForConversion+0x1e4>)
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fc25 	bl	8003570 <LL_ADC_GetMultimode>
 8003d26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d102      	bne.n	8003d36 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003d30:	2308      	movs	r3, #8
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	e037      	b.n	8003da6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d002      	beq.n	8003d48 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d111      	bne.n	8003d6c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e0b3      	b.n	8003ece <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d66:	2304      	movs	r3, #4
 8003d68:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003d6a:	e01c      	b.n	8003da6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d74:	d004      	beq.n	8003d80 <HAL_ADC_PollForConversion+0x84>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a57      	ldr	r2, [pc, #348]	; (8003ed8 <HAL_ADC_PollForConversion+0x1dc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_PollForConversion+0x88>
 8003d80:	4b56      	ldr	r3, [pc, #344]	; (8003edc <HAL_ADC_PollForConversion+0x1e0>)
 8003d82:	e000      	b.n	8003d86 <HAL_ADC_PollForConversion+0x8a>
 8003d84:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <HAL_ADC_PollForConversion+0x1e4>)
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fc00 	bl	800358c <LL_ADC_GetMultiDMATransfer>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e095      	b.n	8003ece <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003da2:	2304      	movs	r3, #4
 8003da4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003da6:	f7ff fa63 	bl	8003270 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dac:	e021      	b.n	8003df2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d01d      	beq.n	8003df2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003db6:	f7ff fa5b 	bl	8003270 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <HAL_ADC_PollForConversion+0xd0>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d112      	bne.n	8003df2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e06d      	b.n	8003ece <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0d6      	beq.n	8003dae <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fb0b 	bl	800342c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01c      	beq.n	8003e56 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	7f5b      	ldrb	r3, [r3, #29]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d118      	bne.n	8003e56 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d111      	bne.n	8003e56 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_ADC_PollForConversion+0x1dc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d002      	beq.n	8003e66 <HAL_ADC_PollForConversion+0x16a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	e001      	b.n	8003e6a <HAL_ADC_PollForConversion+0x16e>
 8003e66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d008      	beq.n	8003e84 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d002      	beq.n	8003e84 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b09      	cmp	r3, #9
 8003e82:	d104      	bne.n	8003e8e <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	e00d      	b.n	8003eaa <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <HAL_ADC_PollForConversion+0x1dc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d002      	beq.n	8003e9e <HAL_ADC_PollForConversion+0x1a2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	e001      	b.n	8003ea2 <HAL_ADC_PollForConversion+0x1a6>
 8003e9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ea2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d104      	bne.n	8003eba <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e008      	b.n	8003ecc <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d103      	bne.n	8003ecc <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	220c      	movs	r2, #12
 8003eca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	50000100 	.word	0x50000100
 8003edc:	50000300 	.word	0x50000300
 8003ee0:	50000700 	.word	0x50000700

08003ee4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f24:	d004      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x30>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a87      	ldr	r2, [pc, #540]	; (8004148 <HAL_ADC_IRQHandler+0x248>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_IRQHandler+0x34>
 8003f30:	4b86      	ldr	r3, [pc, #536]	; (800414c <HAL_ADC_IRQHandler+0x24c>)
 8003f32:	e000      	b.n	8003f36 <HAL_ADC_IRQHandler+0x36>
 8003f34:	4b86      	ldr	r3, [pc, #536]	; (8004150 <HAL_ADC_IRQHandler+0x250>)
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fb1a 	bl	8003570 <LL_ADC_GetMultimode>
 8003f3c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d017      	beq.n	8003f78 <HAL_ADC_IRQHandler+0x78>
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d012      	beq.n	8003f78 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d105      	bne.n	8003f6a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f001 f84b 	bl	8005006 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2202      	movs	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_IRQHandler+0x8c>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8085 	beq.w	80040a2 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d07f      	beq.n	80040a2 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fa34 	bl	800342c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d064      	beq.n	8004094 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a5e      	ldr	r2, [pc, #376]	; (8004148 <HAL_ADC_IRQHandler+0x248>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d002      	beq.n	8003fda <HAL_ADC_IRQHandler+0xda>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	e001      	b.n	8003fde <HAL_ADC_IRQHandler+0xde>
 8003fda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d008      	beq.n	8003ff8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b05      	cmp	r3, #5
 8003ff0:	d002      	beq.n	8003ff8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b09      	cmp	r3, #9
 8003ff6:	d104      	bne.n	8004002 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	e00d      	b.n	800401e <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a50      	ldr	r2, [pc, #320]	; (8004148 <HAL_ADC_IRQHandler+0x248>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d002      	beq.n	8004012 <HAL_ADC_IRQHandler+0x112>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	e001      	b.n	8004016 <HAL_ADC_IRQHandler+0x116>
 8004012:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004016:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d135      	bne.n	8004094 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b08      	cmp	r3, #8
 8004034:	d12e      	bne.n	8004094 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fb78 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11a      	bne.n	800407c <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 020c 	bic.w	r2, r2, #12
 8004054:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d112      	bne.n	8004094 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	65da      	str	r2, [r3, #92]	; 0x5c
 800407a:	e00b      	b.n	8004094 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	f043 0210 	orr.w	r2, r3, #16
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f96d 	bl	8004374 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	220c      	movs	r2, #12
 80040a0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_ADC_IRQHandler+0x1b6>
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a1 	beq.w	8004204 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 809b 	beq.w	8004204 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff f9dd 	bl	80034aa <LL_ADC_INJ_IsTriggerSourceSWStart>
 80040f0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f998 	bl	800342c <LL_ADC_REG_IsTriggerSourceSWStart>
 80040fc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a11      	ldr	r2, [pc, #68]	; (8004148 <HAL_ADC_IRQHandler+0x248>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d002      	beq.n	800410e <HAL_ADC_IRQHandler+0x20e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	e001      	b.n	8004112 <HAL_ADC_IRQHandler+0x212>
 800410e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	4293      	cmp	r3, r2
 8004118:	d008      	beq.n	800412c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b06      	cmp	r3, #6
 8004124:	d002      	beq.n	800412c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b07      	cmp	r3, #7
 800412a:	d104      	bne.n	8004136 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	e014      	b.n	8004160 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a03      	ldr	r2, [pc, #12]	; (8004148 <HAL_ADC_IRQHandler+0x248>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_ADC_IRQHandler+0x254>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	e008      	b.n	8004158 <HAL_ADC_IRQHandler+0x258>
 8004146:	bf00      	nop
 8004148:	50000100 	.word	0x50000100
 800414c:	50000300 	.word	0x50000300
 8004150:	50000700 	.word	0x50000700
 8004154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004158:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d047      	beq.n	80041f6 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <HAL_ADC_IRQHandler+0x280>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d03f      	beq.n	80041f6 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800417c:	2b00      	cmp	r3, #0
 800417e:	d13a      	bne.n	80041f6 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d133      	bne.n	80041f6 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d12e      	bne.n	80041f6 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff faee 	bl	800377e <LL_ADC_INJ_IsConversionOngoing>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11a      	bne.n	80041de <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041b6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d112      	bne.n	80041f6 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	f043 0201 	orr.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
 80041dc:	e00b      	b.n	80041f6 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	f043 0210 	orr.w	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ee:	f043 0201 	orr.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fedd 	bl	8004fb6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2260      	movs	r2, #96	; 0x60
 8004202:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d011      	beq.n	8004232 <HAL_ADC_IRQHandler+0x332>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00c      	beq.n	8004232 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8af 	bl	8004388 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d012      	beq.n	8004262 <HAL_ADC_IRQHandler+0x362>
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fec3 	bl	8004fde <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004260:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004268:	2b00      	cmp	r3, #0
 800426a:	d012      	beq.n	8004292 <HAL_ADC_IRQHandler+0x392>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 feb5 	bl	8004ff2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004290:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d043      	beq.n	8004324 <HAL_ADC_IRQHandler+0x424>
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d03e      	beq.n	8004324 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 80042ae:	2301      	movs	r3, #1
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
 80042b2:	e021      	b.n	80042f8 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d015      	beq.n	80042e6 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c2:	d004      	beq.n	80042ce <HAL_ADC_IRQHandler+0x3ce>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <HAL_ADC_IRQHandler+0x468>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <HAL_ADC_IRQHandler+0x3d2>
 80042ce:	4b27      	ldr	r3, [pc, #156]	; (800436c <HAL_ADC_IRQHandler+0x46c>)
 80042d0:	e000      	b.n	80042d4 <HAL_ADC_IRQHandler+0x3d4>
 80042d2:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_ADC_IRQHandler+0x470>)
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff f959 	bl	800358c <LL_ADC_GetMultiDMATransfer>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80042e0:	2301      	movs	r3, #1
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
 80042e4:	e008      	b.n	80042f8 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80042f4:	2301      	movs	r3, #1
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10e      	bne.n	800431c <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f840 	bl	800439c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2210      	movs	r2, #16
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432a:	2b00      	cmp	r3, #0
 800432c:	d018      	beq.n	8004360 <HAL_ADC_IRQHandler+0x460>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004348:	f043 0208 	orr.w	r2, r3, #8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004358:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fe35 	bl	8004fca <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004360:	bf00      	nop
 8004362:	3728      	adds	r7, #40	; 0x28
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	50000100 	.word	0x50000100
 800436c:	50000300 	.word	0x50000300
 8004370:	50000700 	.word	0x50000700

08004374 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b0b6      	sub	sp, #216	; 0xd8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x24>
 80043ce:	2302      	movs	r3, #2
 80043d0:	f000 bc04 	b.w	8004bdc <HAL_ADC_ConfigChannel+0x82c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff f9a5 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 83e8 	bne.w	8004bbe <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7ff f829 	bl	8003452 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff f993 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 800440a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f9b3 	bl	800377e <LL_ADC_INJ_IsConversionOngoing>
 8004418:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800441c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 81d9 	bne.w	80047d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004426:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 81d4 	bne.w	80047d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004438:	d10f      	bne.n	800445a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	4619      	mov	r1, r3
 8004446:	f7ff f843 	bl	80034d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe ffd7 	bl	8003406 <LL_ADC_SetSamplingTimeCommonConfig>
 8004458:	e00e      	b.n	8004478 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	461a      	mov	r2, r3
 8004468:	f7ff f832 	bl	80034d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe ffc7 	bl	8003406 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	08db      	lsrs	r3, r3, #3
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d022      	beq.n	80044e0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6919      	ldr	r1, [r3, #16]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044aa:	f7fe ff21 	bl	80032f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fe ff6d 	bl	800339a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x126>
 80044d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d4:	e000      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x128>
 80044d6:	2300      	movs	r3, #0
 80044d8:	461a      	mov	r2, r3
 80044da:	f7fe ff79 	bl	80033d0 <LL_ADC_SetOffsetSaturation>
 80044de:	e17b      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe ff26 	bl	8003338 <LL_ADC_GetOffsetChannel>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <HAL_ADC_ConfigChannel+0x15c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe ff1b 	bl	8003338 <LL_ADC_GetOffsetChannel>
 8004502:	4603      	mov	r3, r0
 8004504:	0e9b      	lsrs	r3, r3, #26
 8004506:	f003 021f 	and.w	r2, r3, #31
 800450a:	e01e      	b.n	800454a <HAL_ADC_ConfigChannel+0x19a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe ff10 	bl	8003338 <LL_ADC_GetOffsetChannel>
 8004518:	4603      	mov	r3, r0
 800451a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800452a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800452e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800453a:	2320      	movs	r3, #32
 800453c:	e004      	b.n	8004548 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800453e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004542:	fab3 f383 	clz	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004552:	2b00      	cmp	r3, #0
 8004554:	d105      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x1b2>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	0e9b      	lsrs	r3, r3, #26
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	e018      	b.n	8004594 <HAL_ADC_ConfigChannel+0x1e4>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800456e:	fa93 f3a3 	rbit	r3, r3
 8004572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800457a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800457e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004586:	2320      	movs	r3, #32
 8004588:	e004      	b.n	8004594 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800458a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004594:	429a      	cmp	r2, r3
 8004596:	d106      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2200      	movs	r2, #0
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fedf 	bl	8003364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2101      	movs	r1, #1
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fec3 	bl	8003338 <LL_ADC_GetOffsetChannel>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x222>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe feb8 	bl	8003338 <LL_ADC_GetOffsetChannel>
 80045c8:	4603      	mov	r3, r0
 80045ca:	0e9b      	lsrs	r3, r3, #26
 80045cc:	f003 021f 	and.w	r2, r3, #31
 80045d0:	e01e      	b.n	8004610 <HAL_ADC_ConfigChannel+0x260>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2101      	movs	r1, #1
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe fead 	bl	8003338 <LL_ADC_GetOffsetChannel>
 80045de:	4603      	mov	r3, r0
 80045e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045e8:	fa93 f3a3 	rbit	r3, r3
 80045ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80045f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80045f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004600:	2320      	movs	r3, #32
 8004602:	e004      	b.n	800460e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004608:	fab3 f383 	clz	r3, r3
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x278>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0e9b      	lsrs	r3, r3, #26
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	e018      	b.n	800465a <HAL_ADC_ConfigChannel+0x2aa>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800463c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800464c:	2320      	movs	r3, #32
 800464e:	e004      	b.n	800465a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800465a:	429a      	cmp	r2, r3
 800465c:	d106      	bne.n	800466c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	2101      	movs	r1, #1
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fe7c 	bl	8003364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2102      	movs	r1, #2
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fe60 	bl	8003338 <LL_ADC_GetOffsetChannel>
 8004678:	4603      	mov	r3, r0
 800467a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x2e8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2102      	movs	r1, #2
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe fe55 	bl	8003338 <LL_ADC_GetOffsetChannel>
 800468e:	4603      	mov	r3, r0
 8004690:	0e9b      	lsrs	r3, r3, #26
 8004692:	f003 021f 	and.w	r2, r3, #31
 8004696:	e01e      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x326>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2102      	movs	r1, #2
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fe4a 	bl	8003338 <LL_ADC_GetOffsetChannel>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80046b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80046be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80046c6:	2320      	movs	r3, #32
 80046c8:	e004      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80046ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x33e>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	0e9b      	lsrs	r3, r3, #26
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	e016      	b.n	800471c <HAL_ADC_ConfigChannel+0x36c>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800470e:	2320      	movs	r3, #32
 8004710:	e004      	b.n	800471c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004716:	fab3 f383 	clz	r3, r3
 800471a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800471c:	429a      	cmp	r2, r3
 800471e:	d106      	bne.n	800472e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2200      	movs	r2, #0
 8004726:	2102      	movs	r1, #2
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fe1b 	bl	8003364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2103      	movs	r1, #3
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe fdff 	bl	8003338 <LL_ADC_GetOffsetChannel>
 800473a:	4603      	mov	r3, r0
 800473c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <HAL_ADC_ConfigChannel+0x3aa>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2103      	movs	r1, #3
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fdf4 	bl	8003338 <LL_ADC_GetOffsetChannel>
 8004750:	4603      	mov	r3, r0
 8004752:	0e9b      	lsrs	r3, r3, #26
 8004754:	f003 021f 	and.w	r2, r3, #31
 8004758:	e017      	b.n	800478a <HAL_ADC_ConfigChannel+0x3da>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2103      	movs	r1, #3
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe fde9 	bl	8003338 <LL_ADC_GetOffsetChannel>
 8004766:	4603      	mov	r3, r0
 8004768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004774:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	e003      	b.n	8004788 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x3f2>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	e011      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x416>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80047b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80047ba:	2320      	movs	r3, #32
 80047bc:	e003      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80047be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d106      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	2103      	movs	r1, #3
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fdc6 	bl	8003364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe ff59 	bl	8003694 <LL_ADC_IsEnabled>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f040 813d 	bne.w	8004a64 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6819      	ldr	r1, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fe fe96 	bl	8003528 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4aa2      	ldr	r2, [pc, #648]	; (8004a8c <HAL_ADC_ConfigChannel+0x6dc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	f040 812e 	bne.w	8004a64 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10b      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x480>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	0e9b      	lsrs	r3, r3, #26
 800481e:	3301      	adds	r3, #1
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2b09      	cmp	r3, #9
 8004826:	bf94      	ite	ls
 8004828:	2301      	movls	r3, #1
 800482a:	2300      	movhi	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e019      	b.n	8004864 <HAL_ADC_ConfigChannel+0x4b4>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004838:	fa93 f3a3 	rbit	r3, r3
 800483c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800483e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004840:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004848:	2320      	movs	r3, #32
 800484a:	e003      	b.n	8004854 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800484c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484e:	fab3 f383 	clz	r3, r3
 8004852:	b2db      	uxtb	r3, r3
 8004854:	3301      	adds	r3, #1
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	2b09      	cmp	r3, #9
 800485c:	bf94      	ite	ls
 800485e:	2301      	movls	r3, #1
 8004860:	2300      	movhi	r3, #0
 8004862:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004864:	2b00      	cmp	r3, #0
 8004866:	d079      	beq.n	800495c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x4d4>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	0e9b      	lsrs	r3, r3, #26
 800487a:	3301      	adds	r3, #1
 800487c:	069b      	lsls	r3, r3, #26
 800487e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004882:	e015      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x500>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004894:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800489c:	2320      	movs	r3, #32
 800489e:	e003      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80048a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	3301      	adds	r3, #1
 80048aa:	069b      	lsls	r3, r3, #26
 80048ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x520>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0e9b      	lsrs	r3, r3, #26
 80048c2:	3301      	adds	r3, #1
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	2101      	movs	r1, #1
 80048ca:	fa01 f303 	lsl.w	r3, r1, r3
 80048ce:	e017      	b.n	8004900 <HAL_ADC_ConfigChannel+0x550>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80048de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80048e8:	2320      	movs	r3, #32
 80048ea:	e003      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ee:	fab3 f383 	clz	r3, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	3301      	adds	r3, #1
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	ea42 0103 	orr.w	r1, r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x576>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	0e9b      	lsrs	r3, r3, #26
 8004916:	3301      	adds	r3, #1
 8004918:	f003 021f 	and.w	r2, r3, #31
 800491c:	4613      	mov	r3, r2
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4413      	add	r3, r2
 8004922:	051b      	lsls	r3, r3, #20
 8004924:	e018      	b.n	8004958 <HAL_ADC_ConfigChannel+0x5a8>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800493e:	2320      	movs	r3, #32
 8004940:	e003      	b.n	800494a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004944:	fab3 f383 	clz	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	4613      	mov	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4413      	add	r3, r2
 8004956:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004958:	430b      	orrs	r3, r1
 800495a:	e07e      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x5c8>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	0e9b      	lsrs	r3, r3, #26
 800496e:	3301      	adds	r3, #1
 8004970:	069b      	lsls	r3, r3, #26
 8004972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004976:	e015      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x5f4>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	fa93 f3a3 	rbit	r3, r3
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004990:	2320      	movs	r3, #32
 8004992:	e003      	b.n	800499c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	fab3 f383 	clz	r3, r3
 800499a:	b2db      	uxtb	r3, r3
 800499c:	3301      	adds	r3, #1
 800499e:	069b      	lsls	r3, r3, #26
 80049a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d109      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x614>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	3301      	adds	r3, #1
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f303 	lsl.w	r3, r1, r3
 80049c2:	e017      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x644>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	fa93 f3a3 	rbit	r3, r3
 80049d0:	61fb      	str	r3, [r7, #28]
  return result;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80049dc:	2320      	movs	r3, #32
 80049de:	e003      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	fab3 f383 	clz	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	3301      	adds	r3, #1
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2101      	movs	r1, #1
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	ea42 0103 	orr.w	r1, r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10d      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x670>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	0e9b      	lsrs	r3, r3, #26
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	f003 021f 	and.w	r2, r3, #31
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	3b1e      	subs	r3, #30
 8004a18:	051b      	lsls	r3, r3, #20
 8004a1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	e01b      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x6a8>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	613b      	str	r3, [r7, #16]
  return result;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	f003 021f 	and.w	r2, r3, #31
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	3b1e      	subs	r3, #30
 8004a52:	051b      	lsls	r3, r3, #20
 8004a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f7fe fd36 	bl	80034d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <HAL_ADC_ConfigChannel+0x6e0>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80af 	beq.w	8004bd0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7a:	d004      	beq.n	8004a86 <HAL_ADC_ConfigChannel+0x6d6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <HAL_ADC_ConfigChannel+0x6e4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10a      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x6ec>
 8004a86:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <HAL_ADC_ConfigChannel+0x6e8>)
 8004a88:	e009      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x6ee>
 8004a8a:	bf00      	nop
 8004a8c:	407f0000 	.word	0x407f0000
 8004a90:	80080000 	.word	0x80080000
 8004a94:	50000100 	.word	0x50000100
 8004a98:	50000300 	.word	0x50000300
 8004a9c:	4b51      	ldr	r3, [pc, #324]	; (8004be4 <HAL_ADC_ConfigChannel+0x834>)
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe fc18 	bl	80032d4 <LL_ADC_GetCommonPathInternalCh>
 8004aa4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a4e      	ldr	r2, [pc, #312]	; (8004be8 <HAL_ADC_ConfigChannel+0x838>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_ADC_ConfigChannel+0x70c>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4d      	ldr	r2, [pc, #308]	; (8004bec <HAL_ADC_ConfigChannel+0x83c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d134      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004abc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d12e      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad0:	d17e      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ada:	d004      	beq.n	8004ae6 <HAL_ADC_ConfigChannel+0x736>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a43      	ldr	r2, [pc, #268]	; (8004bf0 <HAL_ADC_ConfigChannel+0x840>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d101      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x73a>
 8004ae6:	4a43      	ldr	r2, [pc, #268]	; (8004bf4 <HAL_ADC_ConfigChannel+0x844>)
 8004ae8:	e000      	b.n	8004aec <HAL_ADC_ConfigChannel+0x73c>
 8004aea:	4a3e      	ldr	r2, [pc, #248]	; (8004be4 <HAL_ADC_ConfigChannel+0x834>)
 8004aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004af0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f7fe fbd9 	bl	80032ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004afc:	4b3e      	ldr	r3, [pc, #248]	; (8004bf8 <HAL_ADC_ConfigChannel+0x848>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	4a3e      	ldr	r2, [pc, #248]	; (8004bfc <HAL_ADC_ConfigChannel+0x84c>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b16:	e002      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f9      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b24:	e054      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a35      	ldr	r2, [pc, #212]	; (8004c00 <HAL_ADC_ConfigChannel+0x850>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d120      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d11a      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b44:	d144      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b4e:	d004      	beq.n	8004b5a <HAL_ADC_ConfigChannel+0x7aa>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <HAL_ADC_ConfigChannel+0x840>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d101      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x7ae>
 8004b5a:	4a26      	ldr	r2, [pc, #152]	; (8004bf4 <HAL_ADC_ConfigChannel+0x844>)
 8004b5c:	e000      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x7b0>
 8004b5e:	4a21      	ldr	r2, [pc, #132]	; (8004be4 <HAL_ADC_ConfigChannel+0x834>)
 8004b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f7fe fb9f 	bl	80032ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b70:	e02e      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <HAL_ADC_ConfigChannel+0x854>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d129      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d123      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_ADC_ConfigChannel+0x840>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01e      	beq.n	8004bd0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b9a:	d004      	beq.n	8004ba6 <HAL_ADC_ConfigChannel+0x7f6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <HAL_ADC_ConfigChannel+0x840>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d101      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x7fa>
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_ADC_ConfigChannel+0x844>)
 8004ba8:	e000      	b.n	8004bac <HAL_ADC_ConfigChannel+0x7fc>
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <HAL_ADC_ConfigChannel+0x834>)
 8004bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7fe fb79 	bl	80032ae <LL_ADC_SetCommonPathInternalCh>
 8004bbc:	e008      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bd8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	37d8      	adds	r7, #216	; 0xd8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	50000700 	.word	0x50000700
 8004be8:	c3210000 	.word	0xc3210000
 8004bec:	90c00010 	.word	0x90c00010
 8004bf0:	50000100 	.word	0x50000100
 8004bf4:	50000300 	.word	0x50000300
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	053e2d63 	.word	0x053e2d63
 8004c00:	c7520000 	.word	0xc7520000
 8004c04:	cb840000 	.word	0xcb840000

08004c08 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fd86 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 8004c24:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fda7 	bl	800377e <LL_ADC_INJ_IsConversionOngoing>
 8004c30:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8098 	beq.w	8004d70 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02a      	beq.n	8004ca4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7f5b      	ldrb	r3, [r3, #29]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d126      	bne.n	8004ca4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7f1b      	ldrb	r3, [r3, #28]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d122      	bne.n	8004ca4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c62:	e014      	b.n	8004c8e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4a45      	ldr	r2, [pc, #276]	; (8004d7c <ADC_ConversionStop+0x174>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d90d      	bls.n	8004c88 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	f043 0210 	orr.w	r2, r3, #16
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7c:	f043 0201 	orr.w	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e074      	b.n	8004d72 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d1e3      	bne.n	8004c64 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2240      	movs	r2, #64	; 0x40
 8004ca2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d014      	beq.n	8004cd4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fd3e 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00c      	beq.n	8004cd4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fcfb 	bl	80036ba <LL_ADC_IsDisableOngoing>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d104      	bne.n	8004cd4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fd1a 	bl	8003708 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d014      	beq.n	8004d04 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fd4d 	bl	800377e <LL_ADC_INJ_IsConversionOngoing>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00c      	beq.n	8004d04 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fce3 	bl	80036ba <LL_ADC_IsDisableOngoing>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe fd29 	bl	8003756 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d005      	beq.n	8004d16 <ADC_ConversionStop+0x10e>
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d105      	bne.n	8004d1c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004d10:	230c      	movs	r3, #12
 8004d12:	617b      	str	r3, [r7, #20]
        break;
 8004d14:	e005      	b.n	8004d22 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004d16:	2308      	movs	r3, #8
 8004d18:	617b      	str	r3, [r7, #20]
        break;
 8004d1a:	e002      	b.n	8004d22 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	617b      	str	r3, [r7, #20]
        break;
 8004d20:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004d22:	f7fe faa5 	bl	8003270 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d28:	e01b      	b.n	8004d62 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d2a:	f7fe faa1 	bl	8003270 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d914      	bls.n	8004d62 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4a:	f043 0210 	orr.w	r2, r3, #16
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e007      	b.n	8004d72 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1dc      	bne.n	8004d2a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	a33fffff 	.word	0xa33fffff

08004d80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe fc7f 	bl	8003694 <LL_ADC_IsEnabled>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d176      	bne.n	8004e8a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	4b3c      	ldr	r3, [pc, #240]	; (8004e94 <ADC_Enable+0x114>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00d      	beq.n	8004dc6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e062      	b.n	8004e8c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fc3a 	bl	8003644 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dd8:	d004      	beq.n	8004de4 <ADC_Enable+0x64>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a2e      	ldr	r2, [pc, #184]	; (8004e98 <ADC_Enable+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <ADC_Enable+0x68>
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <ADC_Enable+0x11c>)
 8004de6:	e000      	b.n	8004dea <ADC_Enable+0x6a>
 8004de8:	4b2d      	ldr	r3, [pc, #180]	; (8004ea0 <ADC_Enable+0x120>)
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fa72 	bl	80032d4 <LL_ADC_GetCommonPathInternalCh>
 8004df0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d013      	beq.n	8004e22 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dfa:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <ADC_Enable+0x124>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	4a29      	ldr	r2, [pc, #164]	; (8004ea8 <ADC_Enable+0x128>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e14:	e002      	b.n	8004e1c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f9      	bne.n	8004e16 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e22:	f7fe fa25 	bl	8003270 <HAL_GetTick>
 8004e26:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e28:	e028      	b.n	8004e7c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fe fc30 	bl	8003694 <LL_ADC_IsEnabled>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fc00 	bl	8003644 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e44:	f7fe fa14 	bl	8003270 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d914      	bls.n	8004e7c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d00d      	beq.n	8004e7c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e64:	f043 0210 	orr.w	r2, r3, #16
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e70:	f043 0201 	orr.w	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d1cf      	bne.n	8004e2a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	8000003f 	.word	0x8000003f
 8004e98:	50000100 	.word	0x50000100
 8004e9c:	50000300 	.word	0x50000300
 8004ea0:	50000700 	.word	0x50000700
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	053e2d63 	.word	0x053e2d63

08004eac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fbfe 	bl	80036ba <LL_ADC_IsDisableOngoing>
 8004ebe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fbe5 	bl	8003694 <LL_ADC_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d047      	beq.n	8004f60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d144      	bne.n	8004f60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 030d 	and.w	r3, r3, #13
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d10c      	bne.n	8004efe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fbbf 	bl	800366c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ef6:	f7fe f9bb 	bl	8003270 <HAL_GetTick>
 8004efa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004efc:	e029      	b.n	8004f52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	f043 0210 	orr.w	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e023      	b.n	8004f62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f1a:	f7fe f9a9 	bl	8003270 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d914      	bls.n	8004f52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3a:	f043 0210 	orr.w	r2, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f46:	f043 0201 	orr.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e007      	b.n	8004f62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1dc      	bne.n	8004f1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <LL_ADC_IsEnabled>:
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <LL_ADC_IsEnabled+0x18>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <LL_ADC_IsEnabled+0x1a>
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d101      	bne.n	8004fa8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b0a1      	sub	sp, #132	; 0x84
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005036:	2302      	movs	r3, #2
 8005038:	e0cb      	b.n	80051d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005042:	2300      	movs	r3, #0
 8005044:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005046:	2300      	movs	r3, #0
 8005048:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005052:	d102      	bne.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005054:	4b61      	ldr	r3, [pc, #388]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	e001      	b.n	800505e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0aa      	b.n	80051d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff86 	bl	8004f90 <LL_ADC_REG_IsConversionOngoing>
 8005084:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff80 	bl	8004f90 <LL_ADC_REG_IsConversionOngoing>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 808c 	bne.w	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 8088 	bne.w	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050a8:	d004      	beq.n	80050b4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a4b      	ldr	r2, [pc, #300]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80050b4:	4b4a      	ldr	r3, [pc, #296]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80050b6:	e000      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80050b8:	4b4a      	ldr	r3, [pc, #296]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80050ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d041      	beq.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6859      	ldr	r1, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050d6:	035b      	lsls	r3, r3, #13
 80050d8:	430b      	orrs	r3, r1
 80050da:	431a      	orrs	r2, r3
 80050dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e8:	d004      	beq.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10f      	bne.n	8005114 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80050f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050f8:	f7ff ff37 	bl	8004f6a <LL_ADC_IsEnabled>
 80050fc:	4604      	mov	r4, r0
 80050fe:	4837      	ldr	r0, [pc, #220]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005100:	f7ff ff33 	bl	8004f6a <LL_ADC_IsEnabled>
 8005104:	4603      	mov	r3, r0
 8005106:	4323      	orrs	r3, r4
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e008      	b.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005114:	4834      	ldr	r0, [pc, #208]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005116:	f7ff ff28 	bl	8004f6a <LL_ADC_IsEnabled>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d04c      	beq.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800512a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005132:	f023 030f 	bic.w	r3, r3, #15
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	6811      	ldr	r1, [r2, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	430a      	orrs	r2, r1
 8005140:	431a      	orrs	r2, r3
 8005142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005144:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005146:	e03d      	b.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005152:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800515c:	d004      	beq.n	8005168 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10f      	bne.n	8005188 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8005168:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800516c:	f7ff fefd 	bl	8004f6a <LL_ADC_IsEnabled>
 8005170:	4604      	mov	r4, r0
 8005172:	481a      	ldr	r0, [pc, #104]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005174:	f7ff fef9 	bl	8004f6a <LL_ADC_IsEnabled>
 8005178:	4603      	mov	r3, r0
 800517a:	4323      	orrs	r3, r4
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e008      	b.n	800519a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005188:	4817      	ldr	r0, [pc, #92]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800518a:	f7ff feee 	bl	8004f6a <LL_ADC_IsEnabled>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d012      	beq.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800519e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051a6:	f023 030f 	bic.w	r3, r3, #15
 80051aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80051ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051ae:	e009      	b.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	f043 0220 	orr.w	r2, r3, #32
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80051c2:	e000      	b.n	80051c6 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80051ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3784      	adds	r7, #132	; 0x84
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}
 80051da:	bf00      	nop
 80051dc:	50000100 	.word	0x50000100
 80051e0:	50000300 	.word	0x50000300
 80051e4:	50000700 	.word	0x50000700
 80051e8:	50000400 	.word	0x50000400

080051ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <__NVIC_SetPriorityGrouping+0x44>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005208:	4013      	ands	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800521e:	4a04      	ldr	r2, [pc, #16]	; (8005230 <__NVIC_SetPriorityGrouping+0x44>)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	60d3      	str	r3, [r2, #12]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <__NVIC_GetPriorityGrouping+0x18>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	f003 0307 	and.w	r3, r3, #7
}
 8005242:	4618      	mov	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000ed00 	.word	0xe000ed00

08005250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	db0b      	blt.n	800527a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	f003 021f 	and.w	r2, r3, #31
 8005268:	4907      	ldr	r1, [pc, #28]	; (8005288 <__NVIC_EnableIRQ+0x38>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2001      	movs	r0, #1
 8005272:	fa00 f202 	lsl.w	r2, r0, r2
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000e100 	.word	0xe000e100

0800528c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529c:	2b00      	cmp	r3, #0
 800529e:	db0a      	blt.n	80052b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	490c      	ldr	r1, [pc, #48]	; (80052d8 <__NVIC_SetPriority+0x4c>)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	0112      	lsls	r2, r2, #4
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	440b      	add	r3, r1
 80052b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b4:	e00a      	b.n	80052cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	4908      	ldr	r1, [pc, #32]	; (80052dc <__NVIC_SetPriority+0x50>)
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	3b04      	subs	r3, #4
 80052c4:	0112      	lsls	r2, r2, #4
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	440b      	add	r3, r1
 80052ca:	761a      	strb	r2, [r3, #24]
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000e100 	.word	0xe000e100
 80052dc:	e000ed00 	.word	0xe000ed00

080052e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f1c3 0307 	rsb	r3, r3, #7
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	bf28      	it	cs
 80052fe:	2304      	movcs	r3, #4
 8005300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3304      	adds	r3, #4
 8005306:	2b06      	cmp	r3, #6
 8005308:	d902      	bls.n	8005310 <NVIC_EncodePriority+0x30>
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3b03      	subs	r3, #3
 800530e:	e000      	b.n	8005312 <NVIC_EncodePriority+0x32>
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005314:	f04f 32ff 	mov.w	r2, #4294967295
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	401a      	ands	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005328:	f04f 31ff 	mov.w	r1, #4294967295
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	43d9      	mvns	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005338:	4313      	orrs	r3, r2
         );
}
 800533a:	4618      	mov	r0, r3
 800533c:	3724      	adds	r7, #36	; 0x24
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ff4c 	bl	80051ec <__NVIC_SetPriorityGrouping>
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800536a:	f7ff ff63 	bl	8005234 <__NVIC_GetPriorityGrouping>
 800536e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	6978      	ldr	r0, [r7, #20]
 8005376:	f7ff ffb3 	bl	80052e0 <NVIC_EncodePriority>
 800537a:	4602      	mov	r2, r0
 800537c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005380:	4611      	mov	r1, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ff82 	bl	800528c <__NVIC_SetPriority>
}
 8005388:	bf00      	nop
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff56 	bl	8005250 <__NVIC_EnableIRQ>
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053ba:	e15a      	b.n	8005672 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	2101      	movs	r1, #1
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	4013      	ands	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 814c 	beq.w	800566c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d005      	beq.n	80053ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d130      	bne.n	800544e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	2203      	movs	r2, #3
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4013      	ands	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005422:	2201      	movs	r2, #1
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4013      	ands	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	f003 0201 	and.w	r2, r3, #1
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b03      	cmp	r3, #3
 8005458:	d017      	beq.n	800548a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	2203      	movs	r2, #3
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43db      	mvns	r3, r3
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d123      	bne.n	80054de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	08da      	lsrs	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3208      	adds	r2, #8
 800549e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	220f      	movs	r2, #15
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4013      	ands	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	08da      	lsrs	r2, r3, #3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3208      	adds	r2, #8
 80054d8:	6939      	ldr	r1, [r7, #16]
 80054da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	2203      	movs	r2, #3
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f003 0203 	and.w	r2, r3, #3
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80a6 	beq.w	800566c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005520:	4b5b      	ldr	r3, [pc, #364]	; (8005690 <HAL_GPIO_Init+0x2e4>)
 8005522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005524:	4a5a      	ldr	r2, [pc, #360]	; (8005690 <HAL_GPIO_Init+0x2e4>)
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	6613      	str	r3, [r2, #96]	; 0x60
 800552c:	4b58      	ldr	r3, [pc, #352]	; (8005690 <HAL_GPIO_Init+0x2e4>)
 800552e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005538:	4a56      	ldr	r2, [pc, #344]	; (8005694 <HAL_GPIO_Init+0x2e8>)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	089b      	lsrs	r3, r3, #2
 800553e:	3302      	adds	r3, #2
 8005540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	220f      	movs	r2, #15
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005562:	d01f      	beq.n	80055a4 <HAL_GPIO_Init+0x1f8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a4c      	ldr	r2, [pc, #304]	; (8005698 <HAL_GPIO_Init+0x2ec>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d019      	beq.n	80055a0 <HAL_GPIO_Init+0x1f4>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a4b      	ldr	r2, [pc, #300]	; (800569c <HAL_GPIO_Init+0x2f0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <HAL_GPIO_Init+0x1f0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a4a      	ldr	r2, [pc, #296]	; (80056a0 <HAL_GPIO_Init+0x2f4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00d      	beq.n	8005598 <HAL_GPIO_Init+0x1ec>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a49      	ldr	r2, [pc, #292]	; (80056a4 <HAL_GPIO_Init+0x2f8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <HAL_GPIO_Init+0x1e8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a48      	ldr	r2, [pc, #288]	; (80056a8 <HAL_GPIO_Init+0x2fc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d101      	bne.n	8005590 <HAL_GPIO_Init+0x1e4>
 800558c:	2305      	movs	r3, #5
 800558e:	e00a      	b.n	80055a6 <HAL_GPIO_Init+0x1fa>
 8005590:	2306      	movs	r3, #6
 8005592:	e008      	b.n	80055a6 <HAL_GPIO_Init+0x1fa>
 8005594:	2304      	movs	r3, #4
 8005596:	e006      	b.n	80055a6 <HAL_GPIO_Init+0x1fa>
 8005598:	2303      	movs	r3, #3
 800559a:	e004      	b.n	80055a6 <HAL_GPIO_Init+0x1fa>
 800559c:	2302      	movs	r3, #2
 800559e:	e002      	b.n	80055a6 <HAL_GPIO_Init+0x1fa>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <HAL_GPIO_Init+0x1fa>
 80055a4:	2300      	movs	r3, #0
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	f002 0203 	and.w	r2, r2, #3
 80055ac:	0092      	lsls	r2, r2, #2
 80055ae:	4093      	lsls	r3, r2
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055b6:	4937      	ldr	r1, [pc, #220]	; (8005694 <HAL_GPIO_Init+0x2e8>)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	3302      	adds	r3, #2
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055c4:	4b39      	ldr	r3, [pc, #228]	; (80056ac <HAL_GPIO_Init+0x300>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4013      	ands	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055e8:	4a30      	ldr	r2, [pc, #192]	; (80056ac <HAL_GPIO_Init+0x300>)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055ee:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <HAL_GPIO_Init+0x300>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	43db      	mvns	r3, r3
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4013      	ands	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005612:	4a26      	ldr	r2, [pc, #152]	; (80056ac <HAL_GPIO_Init+0x300>)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005618:	4b24      	ldr	r3, [pc, #144]	; (80056ac <HAL_GPIO_Init+0x300>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	43db      	mvns	r3, r3
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800563c:	4a1b      	ldr	r2, [pc, #108]	; (80056ac <HAL_GPIO_Init+0x300>)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005642:	4b1a      	ldr	r3, [pc, #104]	; (80056ac <HAL_GPIO_Init+0x300>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	43db      	mvns	r3, r3
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4013      	ands	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005666:	4a11      	ldr	r2, [pc, #68]	; (80056ac <HAL_GPIO_Init+0x300>)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3301      	adds	r3, #1
 8005670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	f47f ae9d 	bne.w	80053bc <HAL_GPIO_Init+0x10>
  }
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	40021000 	.word	0x40021000
 8005694:	40010000 	.word	0x40010000
 8005698:	48000400 	.word	0x48000400
 800569c:	48000800 	.word	0x48000800
 80056a0:	48000c00 	.word	0x48000c00
 80056a4:	48001000 	.word	0x48001000
 80056a8:	48001400 	.word	0x48001400
 80056ac:	40010400 	.word	0x40010400

080056b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	807b      	strh	r3, [r7, #2]
 80056bc:	4613      	mov	r3, r2
 80056be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056c0:	787b      	ldrb	r3, [r7, #1]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056c6:	887a      	ldrh	r2, [r7, #2]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056cc:	e002      	b.n	80056d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056ce:	887a      	ldrh	r2, [r7, #2]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056f2:	887a      	ldrh	r2, [r7, #2]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4013      	ands	r3, r2
 80056f8:	041a      	lsls	r2, r3, #16
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	43d9      	mvns	r1, r3
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	400b      	ands	r3, r1
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	619a      	str	r2, [r3, #24]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800572a:	4a05      	ldr	r2, [pc, #20]	; (8005740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f806 	bl	8005744 <HAL_GPIO_EXTI_Callback>
  }
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40010400 	.word	0x40010400

08005744 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d141      	bne.n	80057ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800576a:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005776:	d131      	bne.n	80057dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005778:	4b47      	ldr	r3, [pc, #284]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577e:	4a46      	ldr	r2, [pc, #280]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005788:	4b43      	ldr	r3, [pc, #268]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005790:	4a41      	ldr	r2, [pc, #260]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005796:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005798:	4b40      	ldr	r3, [pc, #256]	; (800589c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2232      	movs	r2, #50	; 0x32
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	4a3f      	ldr	r2, [pc, #252]	; (80058a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	0c9b      	lsrs	r3, r3, #18
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ae:	e002      	b.n	80057b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057b6:	4b38      	ldr	r3, [pc, #224]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c2:	d102      	bne.n	80057ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f2      	bne.n	80057b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ca:	4b33      	ldr	r3, [pc, #204]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d6:	d158      	bne.n	800588a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e057      	b.n	800588c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057dc:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e2:	4a2d      	ldr	r2, [pc, #180]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057ec:	e04d      	b.n	800588a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f4:	d141      	bne.n	800587a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057f6:	4b28      	ldr	r3, [pc, #160]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005802:	d131      	bne.n	8005868 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005804:	4b24      	ldr	r3, [pc, #144]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800580a:	4a23      	ldr	r2, [pc, #140]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005814:	4b20      	ldr	r3, [pc, #128]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800581c:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800581e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005822:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005824:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2232      	movs	r2, #50	; 0x32
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	0c9b      	lsrs	r3, r3, #18
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800583a:	e002      	b.n	8005842 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3b01      	subs	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005842:	4b15      	ldr	r3, [pc, #84]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584e:	d102      	bne.n	8005856 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f2      	bne.n	800583c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005856:	4b10      	ldr	r3, [pc, #64]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005862:	d112      	bne.n	800588a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e011      	b.n	800588c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586e:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005878:	e007      	b.n	800588a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800587a:	4b07      	ldr	r3, [pc, #28]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005888:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	40007000 	.word	0x40007000
 800589c:	20000000 	.word	0x20000000
 80058a0:	431bde83 	.word	0x431bde83

080058a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058b2:	6093      	str	r3, [r2, #8]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40007000 	.word	0x40007000

080058c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e2fe      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d075      	beq.n	80059ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058e2:	4b97      	ldr	r3, [pc, #604]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
 80058ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058ec:	4b94      	ldr	r3, [pc, #592]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b0c      	cmp	r3, #12
 80058fa:	d102      	bne.n	8005902 <HAL_RCC_OscConfig+0x3e>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d002      	beq.n	8005908 <HAL_RCC_OscConfig+0x44>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d10b      	bne.n	8005920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005908:	4b8d      	ldr	r3, [pc, #564]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d05b      	beq.n	80059cc <HAL_RCC_OscConfig+0x108>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d157      	bne.n	80059cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e2d9      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005928:	d106      	bne.n	8005938 <HAL_RCC_OscConfig+0x74>
 800592a:	4b85      	ldr	r3, [pc, #532]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a84      	ldr	r2, [pc, #528]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e01d      	b.n	8005974 <HAL_RCC_OscConfig+0xb0>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x98>
 8005942:	4b7f      	ldr	r3, [pc, #508]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a7e      	ldr	r2, [pc, #504]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	4b7c      	ldr	r3, [pc, #496]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a7b      	ldr	r2, [pc, #492]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e00b      	b.n	8005974 <HAL_RCC_OscConfig+0xb0>
 800595c:	4b78      	ldr	r3, [pc, #480]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a77      	ldr	r2, [pc, #476]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	4b75      	ldr	r3, [pc, #468]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a74      	ldr	r2, [pc, #464]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 800596e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d013      	beq.n	80059a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd fc78 	bl	8003270 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005984:	f7fd fc74 	bl	8003270 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b64      	cmp	r3, #100	; 0x64
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e29e      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005996:	4b6a      	ldr	r3, [pc, #424]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0xc0>
 80059a2:	e014      	b.n	80059ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fd fc64 	bl	8003270 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ac:	f7fd fc60 	bl	8003270 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	; 0x64
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e28a      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059be:	4b60      	ldr	r3, [pc, #384]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0xe8>
 80059ca:	e000      	b.n	80059ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d075      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059da:	4b59      	ldr	r3, [pc, #356]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059e4:	4b56      	ldr	r3, [pc, #344]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d102      	bne.n	80059fa <HAL_RCC_OscConfig+0x136>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d002      	beq.n	8005a00 <HAL_RCC_OscConfig+0x13c>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d11f      	bne.n	8005a40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a00:	4b4f      	ldr	r3, [pc, #316]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCC_OscConfig+0x154>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e25d      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a18:	4b49      	ldr	r3, [pc, #292]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	061b      	lsls	r3, r3, #24
 8005a26:	4946      	ldr	r1, [pc, #280]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a2c:	4b45      	ldr	r3, [pc, #276]	; (8005b44 <HAL_RCC_OscConfig+0x280>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fd f9cd 	bl	8002dd0 <HAL_InitTick>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d043      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e249      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d023      	beq.n	8005a90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a48:	4b3d      	ldr	r3, [pc, #244]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a3c      	ldr	r2, [pc, #240]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fd fc0c 	bl	8003270 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5c:	f7fd fc08 	bl	8003270 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e232      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a6e:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7a:	4b31      	ldr	r3, [pc, #196]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	061b      	lsls	r3, r3, #24
 8005a88:	492d      	ldr	r1, [pc, #180]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	604b      	str	r3, [r1, #4]
 8005a8e:	e01a      	b.n	8005ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a90:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fd fbe8 	bl	8003270 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa4:	f7fd fbe4 	bl	8003270 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e20e      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ab6:	4b22      	ldr	r3, [pc, #136]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f0      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x1e0>
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d041      	beq.n	8005b56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01c      	beq.n	8005b14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ada:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aea:	f7fd fbc1 	bl	8003270 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af2:	f7fd fbbd 	bl	8003270 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e1e7      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b04:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0ef      	beq.n	8005af2 <HAL_RCC_OscConfig+0x22e>
 8005b12:	e020      	b.n	8005b56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1a:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <HAL_RCC_OscConfig+0x27c>)
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b24:	f7fd fba4 	bl	8003270 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b2a:	e00d      	b.n	8005b48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2c:	f7fd fba0 	bl	8003270 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d906      	bls.n	8005b48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e1ca      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
 8005b44:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b48:	4b8c      	ldr	r3, [pc, #560]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1ea      	bne.n	8005b2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80a6 	beq.w	8005cb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b64:	2300      	movs	r3, #0
 8005b66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b68:	4b84      	ldr	r3, [pc, #528]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_RCC_OscConfig+0x2b4>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x2b6>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00d      	beq.n	8005b9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7e:	4b7f      	ldr	r3, [pc, #508]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b82:	4a7e      	ldr	r2, [pc, #504]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b88:	6593      	str	r3, [r2, #88]	; 0x58
 8005b8a:	4b7c      	ldr	r3, [pc, #496]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b96:	2301      	movs	r3, #1
 8005b98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b9a:	4b79      	ldr	r3, [pc, #484]	; (8005d80 <HAL_RCC_OscConfig+0x4bc>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d118      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ba6:	4b76      	ldr	r3, [pc, #472]	; (8005d80 <HAL_RCC_OscConfig+0x4bc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a75      	ldr	r2, [pc, #468]	; (8005d80 <HAL_RCC_OscConfig+0x4bc>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb2:	f7fd fb5d 	bl	8003270 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bba:	f7fd fb59 	bl	8003270 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e183      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bcc:	4b6c      	ldr	r3, [pc, #432]	; (8005d80 <HAL_RCC_OscConfig+0x4bc>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d108      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x32e>
 8005be0:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	4a65      	ldr	r2, [pc, #404]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bf0:	e024      	b.n	8005c3c <HAL_RCC_OscConfig+0x378>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d110      	bne.n	8005c1c <HAL_RCC_OscConfig+0x358>
 8005bfa:	4b60      	ldr	r3, [pc, #384]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c00:	4a5e      	ldr	r2, [pc, #376]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c02:	f043 0304 	orr.w	r3, r3, #4
 8005c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c0a:	4b5c      	ldr	r3, [pc, #368]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	4a5a      	ldr	r2, [pc, #360]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c1a:	e00f      	b.n	8005c3c <HAL_RCC_OscConfig+0x378>
 8005c1c:	4b57      	ldr	r3, [pc, #348]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	4a56      	ldr	r2, [pc, #344]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c2c:	4b53      	ldr	r3, [pc, #332]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	4a52      	ldr	r2, [pc, #328]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c34:	f023 0304 	bic.w	r3, r3, #4
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d016      	beq.n	8005c72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fd fb14 	bl	8003270 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4c:	f7fd fb10 	bl	8003270 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e138      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c62:	4b46      	ldr	r3, [pc, #280]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0ed      	beq.n	8005c4c <HAL_RCC_OscConfig+0x388>
 8005c70:	e015      	b.n	8005c9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c72:	f7fd fafd 	bl	8003270 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c78:	e00a      	b.n	8005c90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7a:	f7fd faf9 	bl	8003270 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e121      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c90:	4b3a      	ldr	r3, [pc, #232]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1ed      	bne.n	8005c7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d105      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca4:	4b35      	ldr	r3, [pc, #212]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca8:	4a34      	ldr	r2, [pc, #208]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d03c      	beq.n	8005d36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01c      	beq.n	8005cfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cca:	4a2c      	ldr	r2, [pc, #176]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd4:	f7fd facc 	bl	8003270 <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cdc:	f7fd fac8 	bl	8003270 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e0f2      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cee:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0ef      	beq.n	8005cdc <HAL_RCC_OscConfig+0x418>
 8005cfc:	e01b      	b.n	8005d36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d04:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0e:	f7fd faaf 	bl	8003270 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d16:	f7fd faab 	bl	8003270 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e0d5      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1ef      	bne.n	8005d16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80c9 	beq.w	8005ed2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b0c      	cmp	r3, #12
 8005d4a:	f000 8083 	beq.w	8005e54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d15e      	bne.n	8005e14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <HAL_RCC_OscConfig+0x4b8>)
 8005d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d62:	f7fd fa85 	bl	8003270 <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d68:	e00c      	b.n	8005d84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6a:	f7fd fa81 	bl	8003270 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d905      	bls.n	8005d84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e0ab      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d84:	4b55      	ldr	r3, [pc, #340]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1ec      	bne.n	8005d6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d90:	4b52      	ldr	r3, [pc, #328]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	4b52      	ldr	r3, [pc, #328]	; (8005ee0 <HAL_RCC_OscConfig+0x61c>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6a11      	ldr	r1, [r2, #32]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005da0:	3a01      	subs	r2, #1
 8005da2:	0112      	lsls	r2, r2, #4
 8005da4:	4311      	orrs	r1, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005daa:	0212      	lsls	r2, r2, #8
 8005dac:	4311      	orrs	r1, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005db2:	0852      	lsrs	r2, r2, #1
 8005db4:	3a01      	subs	r2, #1
 8005db6:	0552      	lsls	r2, r2, #21
 8005db8:	4311      	orrs	r1, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dbe:	0852      	lsrs	r2, r2, #1
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	0652      	lsls	r2, r2, #25
 8005dc4:	4311      	orrs	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dca:	06d2      	lsls	r2, r2, #27
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	4943      	ldr	r1, [pc, #268]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dd4:	4b41      	ldr	r3, [pc, #260]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a40      	ldr	r2, [pc, #256]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005de0:	4b3e      	ldr	r3, [pc, #248]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4a3d      	ldr	r2, [pc, #244]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fd fa40 	bl	8003270 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df4:	f7fd fa3c 	bl	8003270 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e066      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e06:	4b35      	ldr	r3, [pc, #212]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0f0      	beq.n	8005df4 <HAL_RCC_OscConfig+0x530>
 8005e12:	e05e      	b.n	8005ed2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e14:	4b31      	ldr	r3, [pc, #196]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a30      	ldr	r2, [pc, #192]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e20:	f7fd fa26 	bl	8003270 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fd fa22 	bl	8003270 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e04c      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e3a:	4b28      	ldr	r3, [pc, #160]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e46:	4b25      	ldr	r3, [pc, #148]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	4924      	ldr	r1, [pc, #144]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005e4c:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <HAL_RCC_OscConfig+0x620>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	60cb      	str	r3, [r1, #12]
 8005e52:	e03e      	b.n	8005ed2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e039      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e60:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <HAL_RCC_OscConfig+0x618>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 0203 	and.w	r2, r3, #3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d12c      	bne.n	8005ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d123      	bne.n	8005ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d11b      	bne.n	8005ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d113      	bne.n	8005ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d109      	bne.n	8005ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d001      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	019f800c 	.word	0x019f800c
 8005ee4:	feeefffc 	.word	0xfeeefffc

08005ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e11e      	b.n	800613e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f00:	4b91      	ldr	r3, [pc, #580]	; (8006148 <HAL_RCC_ClockConfig+0x260>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d910      	bls.n	8005f30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0e:	4b8e      	ldr	r3, [pc, #568]	; (8006148 <HAL_RCC_ClockConfig+0x260>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f023 020f 	bic.w	r2, r3, #15
 8005f16:	498c      	ldr	r1, [pc, #560]	; (8006148 <HAL_RCC_ClockConfig+0x260>)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1e:	4b8a      	ldr	r3, [pc, #552]	; (8006148 <HAL_RCC_ClockConfig+0x260>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e106      	b.n	800613e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d073      	beq.n	8006024 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d129      	bne.n	8005f98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f44:	4b81      	ldr	r3, [pc, #516]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0f4      	b.n	800613e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f54:	f000 f9d0 	bl	80062f8 <RCC_GetSysClockFreqFromPLLSource>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4a7c      	ldr	r2, [pc, #496]	; (8006150 <HAL_RCC_ClockConfig+0x268>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d93f      	bls.n	8005fe2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f62:	4b7a      	ldr	r3, [pc, #488]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d033      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d12f      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f82:	4b72      	ldr	r3, [pc, #456]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f8a:	4a70      	ldr	r2, [pc, #448]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	e024      	b.n	8005fe2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fa0:	4b6a      	ldr	r3, [pc, #424]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0c6      	b.n	800613e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fb0:	4b66      	ldr	r3, [pc, #408]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0be      	b.n	800613e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005fc0:	f000 f8ce 	bl	8006160 <HAL_RCC_GetSysClockFreq>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4a61      	ldr	r2, [pc, #388]	; (8006150 <HAL_RCC_ClockConfig+0x268>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d909      	bls.n	8005fe2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fce:	4b5f      	ldr	r3, [pc, #380]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fd6:	4a5d      	ldr	r2, [pc, #372]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005fde:	2380      	movs	r3, #128	; 0x80
 8005fe0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fe2:	4b5a      	ldr	r3, [pc, #360]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f023 0203 	bic.w	r2, r3, #3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4957      	ldr	r1, [pc, #348]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff4:	f7fd f93c 	bl	8003270 <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffa:	e00a      	b.n	8006012 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ffc:	f7fd f938 	bl	8003270 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f241 3288 	movw	r2, #5000	; 0x1388
 800600a:	4293      	cmp	r3, r2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e095      	b.n	800613e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006012:	4b4e      	ldr	r3, [pc, #312]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 020c 	and.w	r2, r3, #12
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	429a      	cmp	r2, r3
 8006022:	d1eb      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d023      	beq.n	8006078 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800603c:	4b43      	ldr	r3, [pc, #268]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4a42      	ldr	r2, [pc, #264]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8006042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006046:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006054:	4b3d      	ldr	r3, [pc, #244]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800605c:	4a3b      	ldr	r2, [pc, #236]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 800605e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006062:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006064:	4b39      	ldr	r3, [pc, #228]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4936      	ldr	r1, [pc, #216]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8006072:	4313      	orrs	r3, r2
 8006074:	608b      	str	r3, [r1, #8]
 8006076:	e008      	b.n	800608a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b80      	cmp	r3, #128	; 0x80
 800607c:	d105      	bne.n	800608a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800607e:	4b33      	ldr	r3, [pc, #204]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	4a32      	ldr	r2, [pc, #200]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8006084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006088:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800608a:	4b2f      	ldr	r3, [pc, #188]	; (8006148 <HAL_RCC_ClockConfig+0x260>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d21d      	bcs.n	80060d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006098:	4b2b      	ldr	r3, [pc, #172]	; (8006148 <HAL_RCC_ClockConfig+0x260>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f023 020f 	bic.w	r2, r3, #15
 80060a0:	4929      	ldr	r1, [pc, #164]	; (8006148 <HAL_RCC_ClockConfig+0x260>)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060a8:	f7fd f8e2 	bl	8003270 <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ae:	e00a      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b0:	f7fd f8de 	bl	8003270 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e03b      	b.n	800613e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c6:	4b20      	ldr	r3, [pc, #128]	; (8006148 <HAL_RCC_ClockConfig+0x260>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d1ed      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d008      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	4917      	ldr	r1, [pc, #92]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	490f      	ldr	r1, [pc, #60]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 800610e:	4313      	orrs	r3, r2
 8006110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006112:	f000 f825 	bl	8006160 <HAL_RCC_GetSysClockFreq>
 8006116:	4602      	mov	r2, r0
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <HAL_RCC_ClockConfig+0x264>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	490c      	ldr	r1, [pc, #48]	; (8006154 <HAL_RCC_ClockConfig+0x26c>)
 8006124:	5ccb      	ldrb	r3, [r1, r3]
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	fa22 f303 	lsr.w	r3, r2, r3
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_RCC_ClockConfig+0x270>)
 8006130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <HAL_RCC_ClockConfig+0x274>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fc fe4a 	bl	8002dd0 <HAL_InitTick>
 800613c:	4603      	mov	r3, r0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40022000 	.word	0x40022000
 800614c:	40021000 	.word	0x40021000
 8006150:	04c4b400 	.word	0x04c4b400
 8006154:	0800b8c8 	.word	0x0800b8c8
 8006158:	20000000 	.word	0x20000000
 800615c:	20000004 	.word	0x20000004

08006160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006166:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 030c 	and.w	r3, r3, #12
 800616e:	2b04      	cmp	r3, #4
 8006170:	d102      	bne.n	8006178 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006172:	4b2a      	ldr	r3, [pc, #168]	; (800621c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	e047      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 030c 	and.w	r3, r3, #12
 8006180:	2b08      	cmp	r3, #8
 8006182:	d102      	bne.n	800618a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006184:	4b26      	ldr	r3, [pc, #152]	; (8006220 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	e03e      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800618a:	4b23      	ldr	r3, [pc, #140]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 030c 	and.w	r3, r3, #12
 8006192:	2b0c      	cmp	r3, #12
 8006194:	d136      	bne.n	8006204 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006196:	4b20      	ldr	r3, [pc, #128]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061a0:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	3301      	adds	r3, #1
 80061ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d10c      	bne.n	80061ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061b4:	4a1a      	ldr	r2, [pc, #104]	; (8006220 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	4a16      	ldr	r2, [pc, #88]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061be:	68d2      	ldr	r2, [r2, #12]
 80061c0:	0a12      	lsrs	r2, r2, #8
 80061c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	617b      	str	r3, [r7, #20]
      break;
 80061cc:	e00c      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ce:	4a13      	ldr	r2, [pc, #76]	; (800621c <HAL_RCC_GetSysClockFreq+0xbc>)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	4a10      	ldr	r2, [pc, #64]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d8:	68d2      	ldr	r2, [r2, #12]
 80061da:	0a12      	lsrs	r2, r2, #8
 80061dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061e0:	fb02 f303 	mul.w	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
      break;
 80061e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061e8:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	0e5b      	lsrs	r3, r3, #25
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	3301      	adds	r3, #1
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	e001      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006208:	693b      	ldr	r3, [r7, #16]
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	00f42400 	.word	0x00f42400
 8006220:	016e3600 	.word	0x016e3600

08006224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006228:	4b03      	ldr	r3, [pc, #12]	; (8006238 <HAL_RCC_GetHCLKFreq+0x14>)
 800622a:	681b      	ldr	r3, [r3, #0]
}
 800622c:	4618      	mov	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000000 	.word	0x20000000

0800623c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006240:	f7ff fff0 	bl	8006224 <HAL_RCC_GetHCLKFreq>
 8006244:	4602      	mov	r2, r0
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	4904      	ldr	r1, [pc, #16]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006252:	5ccb      	ldrb	r3, [r1, r3]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40021000 	.word	0x40021000
 8006264:	0800b8d8 	.word	0x0800b8d8

08006268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800626c:	f7ff ffda 	bl	8006224 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	0adb      	lsrs	r3, r3, #11
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4904      	ldr	r1, [pc, #16]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40021000 	.word	0x40021000
 8006290:	0800b8d8 	.word	0x0800b8d8

08006294 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	220f      	movs	r2, #15
 80062a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80062a4:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <HAL_RCC_GetClockConfig+0x5c>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0203 	and.w	r2, r3, #3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80062b0:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <HAL_RCC_GetClockConfig+0x5c>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <HAL_RCC_GetClockConfig+0x5c>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <HAL_RCC_GetClockConfig+0x5c>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	08db      	lsrs	r3, r3, #3
 80062ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80062d6:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <HAL_RCC_GetClockConfig+0x60>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	601a      	str	r2, [r3, #0]
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40022000 	.word	0x40022000

080062f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062fe:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006308:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b03      	cmp	r3, #3
 800631a:	d10c      	bne.n	8006336 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800631c:	4a17      	ldr	r2, [pc, #92]	; (800637c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	4a14      	ldr	r2, [pc, #80]	; (8006378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006326:	68d2      	ldr	r2, [r2, #12]
 8006328:	0a12      	lsrs	r2, r2, #8
 800632a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800632e:	fb02 f303 	mul.w	r3, r2, r3
 8006332:	617b      	str	r3, [r7, #20]
    break;
 8006334:	e00c      	b.n	8006350 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	fbb2 f3f3 	udiv	r3, r2, r3
 800633e:	4a0e      	ldr	r2, [pc, #56]	; (8006378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006340:	68d2      	ldr	r2, [r2, #12]
 8006342:	0a12      	lsrs	r2, r2, #8
 8006344:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006348:	fb02 f303 	mul.w	r3, r2, r3
 800634c:	617b      	str	r3, [r7, #20]
    break;
 800634e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006350:	4b09      	ldr	r3, [pc, #36]	; (8006378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	0e5b      	lsrs	r3, r3, #25
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	3301      	adds	r3, #1
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800636a:	687b      	ldr	r3, [r7, #4]
}
 800636c:	4618      	mov	r0, r3
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	40021000 	.word	0x40021000
 800637c:	016e3600 	.word	0x016e3600
 8006380:	00f42400 	.word	0x00f42400

08006384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800638c:	2300      	movs	r3, #0
 800638e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006390:	2300      	movs	r3, #0
 8006392:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8098 	beq.w	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a2:	2300      	movs	r3, #0
 80063a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063a6:	4b43      	ldr	r3, [pc, #268]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10d      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063b2:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	4a3f      	ldr	r2, [pc, #252]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063bc:	6593      	str	r3, [r2, #88]	; 0x58
 80063be:	4b3d      	ldr	r3, [pc, #244]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c6:	60bb      	str	r3, [r7, #8]
 80063c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ca:	2301      	movs	r3, #1
 80063cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063ce:	4b3a      	ldr	r3, [pc, #232]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a39      	ldr	r2, [pc, #228]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063da:	f7fc ff49 	bl	8003270 <HAL_GetTick>
 80063de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e0:	e009      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e2:	f7fc ff45 	bl	8003270 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d902      	bls.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	74fb      	strb	r3, [r7, #19]
        break;
 80063f4:	e005      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063f6:	4b30      	ldr	r3, [pc, #192]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0ef      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006402:	7cfb      	ldrb	r3, [r7, #19]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d159      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006408:	4b2a      	ldr	r3, [pc, #168]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006412:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01e      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	429a      	cmp	r2, r3
 8006422:	d019      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006424:	4b23      	ldr	r3, [pc, #140]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006430:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800643c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006440:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006450:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d016      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006462:	f7fc ff05 	bl	8003270 <HAL_GetTick>
 8006466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006468:	e00b      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800646a:	f7fc ff01 	bl	8003270 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	f241 3288 	movw	r2, #5000	; 0x1388
 8006478:	4293      	cmp	r3, r2
 800647a:	d902      	bls.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	74fb      	strb	r3, [r7, #19]
            break;
 8006480:	e006      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ec      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006490:	7cfb      	ldrb	r3, [r7, #19]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a4:	4903      	ldr	r1, [pc, #12]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064ac:	e008      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	74bb      	strb	r3, [r7, #18]
 80064b2:	e005      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064b4:	40021000 	.word	0x40021000
 80064b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	7cfb      	ldrb	r3, [r7, #19]
 80064be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064c0:	7c7b      	ldrb	r3, [r7, #17]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d105      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064c6:	4ba7      	ldr	r3, [pc, #668]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	4aa6      	ldr	r2, [pc, #664]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064de:	4ba1      	ldr	r3, [pc, #644]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e4:	f023 0203 	bic.w	r2, r3, #3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	499d      	ldr	r1, [pc, #628]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006500:	4b98      	ldr	r3, [pc, #608]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006506:	f023 020c 	bic.w	r2, r3, #12
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	4995      	ldr	r1, [pc, #596]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006522:	4b90      	ldr	r3, [pc, #576]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006528:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	498c      	ldr	r1, [pc, #560]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006544:	4b87      	ldr	r3, [pc, #540]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	4984      	ldr	r1, [pc, #528]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006566:	4b7f      	ldr	r3, [pc, #508]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	497b      	ldr	r1, [pc, #492]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	4313      	orrs	r3, r2
 8006578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006588:	4b76      	ldr	r3, [pc, #472]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	4973      	ldr	r1, [pc, #460]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065aa:	4b6e      	ldr	r3, [pc, #440]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	496a      	ldr	r1, [pc, #424]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065cc:	4b65      	ldr	r3, [pc, #404]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	4962      	ldr	r1, [pc, #392]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ee:	4b5d      	ldr	r3, [pc, #372]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	4959      	ldr	r1, [pc, #356]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006610:	4b54      	ldr	r3, [pc, #336]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006616:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	4951      	ldr	r1, [pc, #324]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662e:	2b00      	cmp	r3, #0
 8006630:	d015      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006632:	4b4c      	ldr	r3, [pc, #304]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4948      	ldr	r1, [pc, #288]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006650:	d105      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006652:	4b44      	ldr	r3, [pc, #272]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	4a43      	ldr	r2, [pc, #268]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800665c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006666:	2b00      	cmp	r3, #0
 8006668:	d015      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800666a:	4b3e      	ldr	r3, [pc, #248]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006670:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	493a      	ldr	r1, [pc, #232]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006688:	d105      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800668a:	4b36      	ldr	r3, [pc, #216]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	4a35      	ldr	r2, [pc, #212]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006694:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d015      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066a2:	4b30      	ldr	r3, [pc, #192]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b0:	492c      	ldr	r1, [pc, #176]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066c0:	d105      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066c2:	4b28      	ldr	r3, [pc, #160]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	4a27      	ldr	r2, [pc, #156]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066cc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d015      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066da:	4b22      	ldr	r3, [pc, #136]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	491e      	ldr	r1, [pc, #120]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066f8:	d105      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066fa:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	4a19      	ldr	r2, [pc, #100]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006704:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d015      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	4910      	ldr	r1, [pc, #64]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006730:	d105      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	4a0b      	ldr	r2, [pc, #44]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800673c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d018      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	4902      	ldr	r1, [pc, #8]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	e001      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006764:	40021000 	.word	0x40021000
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800676e:	d105      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006770:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d015      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006788:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	4918      	ldr	r1, [pc, #96]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006798:	4313      	orrs	r3, r2
 800679a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a6:	d105      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4a12      	ldr	r2, [pc, #72]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d015      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067c0:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ce:	490a      	ldr	r1, [pc, #40]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067de:	d105      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40021000 	.word	0x40021000

080067fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e049      	b.n	80068a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f841 	bl	80068aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f000 fa28 	bl	8006c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d001      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e04f      	b.n	8006978 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0201 	orr.w	r2, r2, #1
 80068ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a23      	ldr	r2, [pc, #140]	; (8006984 <HAL_TIM_Base_Start_IT+0xc4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d01d      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d018      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1f      	ldr	r2, [pc, #124]	; (8006988 <HAL_TIM_Base_Start_IT+0xc8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1e      	ldr	r2, [pc, #120]	; (800698c <HAL_TIM_Base_Start_IT+0xcc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d00e      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <HAL_TIM_Base_Start_IT+0xd0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d009      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <HAL_TIM_Base_Start_IT+0xd4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d004      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a19      	ldr	r2, [pc, #100]	; (8006998 <HAL_TIM_Base_Start_IT+0xd8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d115      	bne.n	8006962 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	4b17      	ldr	r3, [pc, #92]	; (800699c <HAL_TIM_Base_Start_IT+0xdc>)
 800693e:	4013      	ands	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b06      	cmp	r3, #6
 8006946:	d015      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0xb4>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694e:	d011      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006960:	e008      	b.n	8006974 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e000      	b.n	8006976 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006974:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40013400 	.word	0x40013400
 8006994:	40014000 	.word	0x40014000
 8006998:	40015000 	.word	0x40015000
 800699c:	00010007 	.word	0x00010007

080069a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d020      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0202 	mvn.w	r2, #2
 80069d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f931 	bl	8006c52 <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f923 	bl	8006c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f934 	bl	8006c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d020      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0204 	mvn.w	r2, #4
 8006a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f90b 	bl	8006c52 <HAL_TIM_IC_CaptureCallback>
 8006a3c:	e005      	b.n	8006a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f8fd 	bl	8006c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f90e 	bl	8006c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d020      	beq.n	8006a9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01b      	beq.n	8006a9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0208 	mvn.w	r2, #8
 8006a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f8e5 	bl	8006c52 <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8d7 	bl	8006c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f8e8 	bl	8006c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d020      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0210 	mvn.w	r2, #16
 8006ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2208      	movs	r2, #8
 8006abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8bf 	bl	8006c52 <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8b1 	bl	8006c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f8c2 	bl	8006c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00c      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0201 	mvn.w	r2, #1
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fa fcb4 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d104      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f95f 	bl	8006df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00c      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f957 	bl	8006e0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00c      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f87c 	bl	8006c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00c      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f06f 0220 	mvn.w	r2, #32
 8006b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f91f 	bl	8006de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00c      	beq.n	8006bca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f92b 	bl	8006e20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00c      	beq.n	8006bee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f923 	bl	8006e34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00c      	beq.n	8006c12 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f91b 	bl	8006e48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00c      	beq.n	8006c36 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f913 	bl	8006e5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a48      	ldr	r2, [pc, #288]	; (8006dc4 <TIM_Base_SetConfig+0x134>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cae:	d00f      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a45      	ldr	r2, [pc, #276]	; (8006dc8 <TIM_Base_SetConfig+0x138>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a44      	ldr	r2, [pc, #272]	; (8006dcc <TIM_Base_SetConfig+0x13c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a43      	ldr	r2, [pc, #268]	; (8006dd0 <TIM_Base_SetConfig+0x140>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a42      	ldr	r2, [pc, #264]	; (8006dd4 <TIM_Base_SetConfig+0x144>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d108      	bne.n	8006ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a37      	ldr	r2, [pc, #220]	; (8006dc4 <TIM_Base_SetConfig+0x134>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01f      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf0:	d01b      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a34      	ldr	r2, [pc, #208]	; (8006dc8 <TIM_Base_SetConfig+0x138>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d017      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a33      	ldr	r2, [pc, #204]	; (8006dcc <TIM_Base_SetConfig+0x13c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a32      	ldr	r2, [pc, #200]	; (8006dd0 <TIM_Base_SetConfig+0x140>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00f      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a32      	ldr	r2, [pc, #200]	; (8006dd8 <TIM_Base_SetConfig+0x148>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a31      	ldr	r2, [pc, #196]	; (8006ddc <TIM_Base_SetConfig+0x14c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a30      	ldr	r2, [pc, #192]	; (8006de0 <TIM_Base_SetConfig+0x150>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <TIM_Base_SetConfig+0x144>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a18      	ldr	r2, [pc, #96]	; (8006dc4 <TIM_Base_SetConfig+0x134>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d013      	beq.n	8006d90 <TIM_Base_SetConfig+0x100>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a19      	ldr	r2, [pc, #100]	; (8006dd0 <TIM_Base_SetConfig+0x140>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00f      	beq.n	8006d90 <TIM_Base_SetConfig+0x100>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <TIM_Base_SetConfig+0x148>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <TIM_Base_SetConfig+0x100>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <TIM_Base_SetConfig+0x14c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d007      	beq.n	8006d90 <TIM_Base_SetConfig+0x100>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <TIM_Base_SetConfig+0x150>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_Base_SetConfig+0x100>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a12      	ldr	r2, [pc, #72]	; (8006dd4 <TIM_Base_SetConfig+0x144>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d103      	bne.n	8006d98 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d105      	bne.n	8006db6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f023 0201 	bic.w	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	611a      	str	r2, [r3, #16]
  }
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	40000800 	.word	0x40000800
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40015000 	.word	0x40015000
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e042      	b.n	8006f08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fc f8e1 	bl	800305c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2224      	movs	r2, #36	; 0x24
 8006e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fbb2 	bl	8007624 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f8b3 	bl	800702c <UART_SetConfig>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e01b      	b.n	8006f08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc31 	bl	8007768 <UART_CheckIdleState>
 8006f06:	4603      	mov	r3, r0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	; 0x28
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d17b      	bne.n	8007022 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <HAL_UART_Transmit+0x26>
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e074      	b.n	8007024 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2221      	movs	r2, #33	; 0x21
 8006f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f4a:	f7fc f991 	bl	8003270 <HAL_GetTick>
 8006f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f68:	d108      	bne.n	8006f7c <HAL_UART_Transmit+0x6c>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	e003      	b.n	8006f84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f84:	e030      	b.n	8006fe8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2180      	movs	r1, #128	; 0x80
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fc93 	bl	80078bc <UART_WaitOnFlagUntilTimeout>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e03d      	b.n	8007024 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	e007      	b.n	8006fd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1c8      	bne.n	8006f86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2140      	movs	r1, #64	; 0x40
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fc5c 	bl	80078bc <UART_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e006      	b.n	8007024 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	e000      	b.n	8007024 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007022:	2302      	movs	r3, #2
  }
}
 8007024:	4618      	mov	r0, r3
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800702c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007030:	b08c      	sub	sp, #48	; 0x30
 8007032:	af00      	add	r7, sp, #0
 8007034:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	431a      	orrs	r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	431a      	orrs	r2, r3
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	4313      	orrs	r3, r2
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4baa      	ldr	r3, [pc, #680]	; (8007304 <UART_SetConfig+0x2d8>)
 800705c:	4013      	ands	r3, r2
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007064:	430b      	orrs	r3, r1
 8007066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a9f      	ldr	r2, [pc, #636]	; (8007308 <UART_SetConfig+0x2dc>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d004      	beq.n	8007098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007094:	4313      	orrs	r3, r2
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80070a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	f023 010f 	bic.w	r1, r3, #15
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a90      	ldr	r2, [pc, #576]	; (800730c <UART_SetConfig+0x2e0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d125      	bne.n	800711c <UART_SetConfig+0xf0>
 80070d0:	4b8f      	ldr	r3, [pc, #572]	; (8007310 <UART_SetConfig+0x2e4>)
 80070d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d81a      	bhi.n	8007114 <UART_SetConfig+0xe8>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <UART_SetConfig+0xb8>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	08007105 	.word	0x08007105
 80070ec:	080070fd 	.word	0x080070fd
 80070f0:	0800710d 	.word	0x0800710d
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e116      	b.n	800732a <UART_SetConfig+0x2fe>
 80070fc:	2302      	movs	r3, #2
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007102:	e112      	b.n	800732a <UART_SetConfig+0x2fe>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710a:	e10e      	b.n	800732a <UART_SetConfig+0x2fe>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007112:	e10a      	b.n	800732a <UART_SetConfig+0x2fe>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711a:	e106      	b.n	800732a <UART_SetConfig+0x2fe>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a7c      	ldr	r2, [pc, #496]	; (8007314 <UART_SetConfig+0x2e8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d138      	bne.n	8007198 <UART_SetConfig+0x16c>
 8007126:	4b7a      	ldr	r3, [pc, #488]	; (8007310 <UART_SetConfig+0x2e4>)
 8007128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712c:	f003 030c 	and.w	r3, r3, #12
 8007130:	2b0c      	cmp	r3, #12
 8007132:	d82d      	bhi.n	8007190 <UART_SetConfig+0x164>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0x110>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007171 	.word	0x08007171
 8007140:	08007191 	.word	0x08007191
 8007144:	08007191 	.word	0x08007191
 8007148:	08007191 	.word	0x08007191
 800714c:	08007181 	.word	0x08007181
 8007150:	08007191 	.word	0x08007191
 8007154:	08007191 	.word	0x08007191
 8007158:	08007191 	.word	0x08007191
 800715c:	08007179 	.word	0x08007179
 8007160:	08007191 	.word	0x08007191
 8007164:	08007191 	.word	0x08007191
 8007168:	08007191 	.word	0x08007191
 800716c:	08007189 	.word	0x08007189
 8007170:	2300      	movs	r3, #0
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007176:	e0d8      	b.n	800732a <UART_SetConfig+0x2fe>
 8007178:	2302      	movs	r3, #2
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717e:	e0d4      	b.n	800732a <UART_SetConfig+0x2fe>
 8007180:	2304      	movs	r3, #4
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007186:	e0d0      	b.n	800732a <UART_SetConfig+0x2fe>
 8007188:	2308      	movs	r3, #8
 800718a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800718e:	e0cc      	b.n	800732a <UART_SetConfig+0x2fe>
 8007190:	2310      	movs	r3, #16
 8007192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007196:	e0c8      	b.n	800732a <UART_SetConfig+0x2fe>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5e      	ldr	r2, [pc, #376]	; (8007318 <UART_SetConfig+0x2ec>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d125      	bne.n	80071ee <UART_SetConfig+0x1c2>
 80071a2:	4b5b      	ldr	r3, [pc, #364]	; (8007310 <UART_SetConfig+0x2e4>)
 80071a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071ac:	2b30      	cmp	r3, #48	; 0x30
 80071ae:	d016      	beq.n	80071de <UART_SetConfig+0x1b2>
 80071b0:	2b30      	cmp	r3, #48	; 0x30
 80071b2:	d818      	bhi.n	80071e6 <UART_SetConfig+0x1ba>
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d00a      	beq.n	80071ce <UART_SetConfig+0x1a2>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d814      	bhi.n	80071e6 <UART_SetConfig+0x1ba>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <UART_SetConfig+0x19a>
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d008      	beq.n	80071d6 <UART_SetConfig+0x1aa>
 80071c4:	e00f      	b.n	80071e6 <UART_SetConfig+0x1ba>
 80071c6:	2300      	movs	r3, #0
 80071c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071cc:	e0ad      	b.n	800732a <UART_SetConfig+0x2fe>
 80071ce:	2302      	movs	r3, #2
 80071d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d4:	e0a9      	b.n	800732a <UART_SetConfig+0x2fe>
 80071d6:	2304      	movs	r3, #4
 80071d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071dc:	e0a5      	b.n	800732a <UART_SetConfig+0x2fe>
 80071de:	2308      	movs	r3, #8
 80071e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e4:	e0a1      	b.n	800732a <UART_SetConfig+0x2fe>
 80071e6:	2310      	movs	r3, #16
 80071e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ec:	e09d      	b.n	800732a <UART_SetConfig+0x2fe>
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a4a      	ldr	r2, [pc, #296]	; (800731c <UART_SetConfig+0x2f0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d125      	bne.n	8007244 <UART_SetConfig+0x218>
 80071f8:	4b45      	ldr	r3, [pc, #276]	; (8007310 <UART_SetConfig+0x2e4>)
 80071fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007202:	2bc0      	cmp	r3, #192	; 0xc0
 8007204:	d016      	beq.n	8007234 <UART_SetConfig+0x208>
 8007206:	2bc0      	cmp	r3, #192	; 0xc0
 8007208:	d818      	bhi.n	800723c <UART_SetConfig+0x210>
 800720a:	2b80      	cmp	r3, #128	; 0x80
 800720c:	d00a      	beq.n	8007224 <UART_SetConfig+0x1f8>
 800720e:	2b80      	cmp	r3, #128	; 0x80
 8007210:	d814      	bhi.n	800723c <UART_SetConfig+0x210>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <UART_SetConfig+0x1f0>
 8007216:	2b40      	cmp	r3, #64	; 0x40
 8007218:	d008      	beq.n	800722c <UART_SetConfig+0x200>
 800721a:	e00f      	b.n	800723c <UART_SetConfig+0x210>
 800721c:	2300      	movs	r3, #0
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007222:	e082      	b.n	800732a <UART_SetConfig+0x2fe>
 8007224:	2302      	movs	r3, #2
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722a:	e07e      	b.n	800732a <UART_SetConfig+0x2fe>
 800722c:	2304      	movs	r3, #4
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007232:	e07a      	b.n	800732a <UART_SetConfig+0x2fe>
 8007234:	2308      	movs	r3, #8
 8007236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800723a:	e076      	b.n	800732a <UART_SetConfig+0x2fe>
 800723c:	2310      	movs	r3, #16
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007242:	e072      	b.n	800732a <UART_SetConfig+0x2fe>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a35      	ldr	r2, [pc, #212]	; (8007320 <UART_SetConfig+0x2f4>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d12a      	bne.n	80072a4 <UART_SetConfig+0x278>
 800724e:	4b30      	ldr	r3, [pc, #192]	; (8007310 <UART_SetConfig+0x2e4>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800725c:	d01a      	beq.n	8007294 <UART_SetConfig+0x268>
 800725e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007262:	d81b      	bhi.n	800729c <UART_SetConfig+0x270>
 8007264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007268:	d00c      	beq.n	8007284 <UART_SetConfig+0x258>
 800726a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800726e:	d815      	bhi.n	800729c <UART_SetConfig+0x270>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <UART_SetConfig+0x250>
 8007274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007278:	d008      	beq.n	800728c <UART_SetConfig+0x260>
 800727a:	e00f      	b.n	800729c <UART_SetConfig+0x270>
 800727c:	2300      	movs	r3, #0
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e052      	b.n	800732a <UART_SetConfig+0x2fe>
 8007284:	2302      	movs	r3, #2
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728a:	e04e      	b.n	800732a <UART_SetConfig+0x2fe>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007292:	e04a      	b.n	800732a <UART_SetConfig+0x2fe>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729a:	e046      	b.n	800732a <UART_SetConfig+0x2fe>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a2:	e042      	b.n	800732a <UART_SetConfig+0x2fe>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a17      	ldr	r2, [pc, #92]	; (8007308 <UART_SetConfig+0x2dc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d13a      	bne.n	8007324 <UART_SetConfig+0x2f8>
 80072ae:	4b18      	ldr	r3, [pc, #96]	; (8007310 <UART_SetConfig+0x2e4>)
 80072b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072bc:	d01a      	beq.n	80072f4 <UART_SetConfig+0x2c8>
 80072be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072c2:	d81b      	bhi.n	80072fc <UART_SetConfig+0x2d0>
 80072c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c8:	d00c      	beq.n	80072e4 <UART_SetConfig+0x2b8>
 80072ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ce:	d815      	bhi.n	80072fc <UART_SetConfig+0x2d0>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <UART_SetConfig+0x2b0>
 80072d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d8:	d008      	beq.n	80072ec <UART_SetConfig+0x2c0>
 80072da:	e00f      	b.n	80072fc <UART_SetConfig+0x2d0>
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e022      	b.n	800732a <UART_SetConfig+0x2fe>
 80072e4:	2302      	movs	r3, #2
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e01e      	b.n	800732a <UART_SetConfig+0x2fe>
 80072ec:	2304      	movs	r3, #4
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f2:	e01a      	b.n	800732a <UART_SetConfig+0x2fe>
 80072f4:	2308      	movs	r3, #8
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fa:	e016      	b.n	800732a <UART_SetConfig+0x2fe>
 80072fc:	2310      	movs	r3, #16
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007302:	e012      	b.n	800732a <UART_SetConfig+0x2fe>
 8007304:	cfff69f3 	.word	0xcfff69f3
 8007308:	40008000 	.word	0x40008000
 800730c:	40013800 	.word	0x40013800
 8007310:	40021000 	.word	0x40021000
 8007314:	40004400 	.word	0x40004400
 8007318:	40004800 	.word	0x40004800
 800731c:	40004c00 	.word	0x40004c00
 8007320:	40005000 	.word	0x40005000
 8007324:	2310      	movs	r3, #16
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4aae      	ldr	r2, [pc, #696]	; (80075e8 <UART_SetConfig+0x5bc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	f040 8097 	bne.w	8007464 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007336:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800733a:	2b08      	cmp	r3, #8
 800733c:	d823      	bhi.n	8007386 <UART_SetConfig+0x35a>
 800733e:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <UART_SetConfig+0x318>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	08007369 	.word	0x08007369
 8007348:	08007387 	.word	0x08007387
 800734c:	08007371 	.word	0x08007371
 8007350:	08007387 	.word	0x08007387
 8007354:	08007377 	.word	0x08007377
 8007358:	08007387 	.word	0x08007387
 800735c:	08007387 	.word	0x08007387
 8007360:	08007387 	.word	0x08007387
 8007364:	0800737f 	.word	0x0800737f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fe ff68 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 800736c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800736e:	e010      	b.n	8007392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007370:	4b9e      	ldr	r3, [pc, #632]	; (80075ec <UART_SetConfig+0x5c0>)
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007374:	e00d      	b.n	8007392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007376:	f7fe fef3 	bl	8006160 <HAL_RCC_GetSysClockFreq>
 800737a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800737c:	e009      	b.n	8007392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007384:	e005      	b.n	8007392 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007390:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8130 	beq.w	80075fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	4a94      	ldr	r2, [pc, #592]	; (80075f0 <UART_SetConfig+0x5c4>)
 80073a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4413      	add	r3, r2
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d305      	bcc.n	80073ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d903      	bls.n	80073d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073d0:	e113      	b.n	80075fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	2200      	movs	r2, #0
 80073d6:	60bb      	str	r3, [r7, #8]
 80073d8:	60fa      	str	r2, [r7, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	4a84      	ldr	r2, [pc, #528]	; (80075f0 <UART_SetConfig+0x5c4>)
 80073e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2200      	movs	r2, #0
 80073e8:	603b      	str	r3, [r7, #0]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073f4:	f7f9 fbb2 	bl	8000b5c <__aeabi_uldivmod>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4610      	mov	r0, r2
 80073fe:	4619      	mov	r1, r3
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	020b      	lsls	r3, r1, #8
 800740a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800740e:	0202      	lsls	r2, r0, #8
 8007410:	6979      	ldr	r1, [r7, #20]
 8007412:	6849      	ldr	r1, [r1, #4]
 8007414:	0849      	lsrs	r1, r1, #1
 8007416:	2000      	movs	r0, #0
 8007418:	460c      	mov	r4, r1
 800741a:	4605      	mov	r5, r0
 800741c:	eb12 0804 	adds.w	r8, r2, r4
 8007420:	eb43 0905 	adc.w	r9, r3, r5
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	469a      	mov	sl, r3
 800742c:	4693      	mov	fp, r2
 800742e:	4652      	mov	r2, sl
 8007430:	465b      	mov	r3, fp
 8007432:	4640      	mov	r0, r8
 8007434:	4649      	mov	r1, r9
 8007436:	f7f9 fb91 	bl	8000b5c <__aeabi_uldivmod>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4613      	mov	r3, r2
 8007440:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007448:	d308      	bcc.n	800745c <UART_SetConfig+0x430>
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007450:	d204      	bcs.n	800745c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a3a      	ldr	r2, [r7, #32]
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	e0ce      	b.n	80075fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007462:	e0ca      	b.n	80075fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746c:	d166      	bne.n	800753c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800746e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007472:	2b08      	cmp	r3, #8
 8007474:	d827      	bhi.n	80074c6 <UART_SetConfig+0x49a>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <UART_SetConfig+0x450>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a9 	.word	0x080074a9
 8007484:	080074b1 	.word	0x080074b1
 8007488:	080074c7 	.word	0x080074c7
 800748c:	080074b7 	.word	0x080074b7
 8007490:	080074c7 	.word	0x080074c7
 8007494:	080074c7 	.word	0x080074c7
 8007498:	080074c7 	.word	0x080074c7
 800749c:	080074bf 	.word	0x080074bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a0:	f7fe fecc 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 80074a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074a6:	e014      	b.n	80074d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a8:	f7fe fede 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 80074ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074ae:	e010      	b.n	80074d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b0:	4b4e      	ldr	r3, [pc, #312]	; (80075ec <UART_SetConfig+0x5c0>)
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074b4:	e00d      	b.n	80074d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b6:	f7fe fe53 	bl	8006160 <HAL_RCC_GetSysClockFreq>
 80074ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074bc:	e009      	b.n	80074d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074c4:	e005      	b.n	80074d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8090 	beq.w	80075fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	4a44      	ldr	r2, [pc, #272]	; (80075f0 <UART_SetConfig+0x5c4>)
 80074e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e4:	461a      	mov	r2, r3
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ec:	005a      	lsls	r2, r3, #1
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	085b      	lsrs	r3, r3, #1
 80074f4:	441a      	add	r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	2b0f      	cmp	r3, #15
 8007504:	d916      	bls.n	8007534 <UART_SetConfig+0x508>
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750c:	d212      	bcs.n	8007534 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	b29b      	uxth	r3, r3
 8007512:	f023 030f 	bic.w	r3, r3, #15
 8007516:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	b29b      	uxth	r3, r3
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	b29a      	uxth	r2, r3
 8007524:	8bfb      	ldrh	r3, [r7, #30]
 8007526:	4313      	orrs	r3, r2
 8007528:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	8bfa      	ldrh	r2, [r7, #30]
 8007530:	60da      	str	r2, [r3, #12]
 8007532:	e062      	b.n	80075fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800753a:	e05e      	b.n	80075fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800753c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007540:	2b08      	cmp	r3, #8
 8007542:	d828      	bhi.n	8007596 <UART_SetConfig+0x56a>
 8007544:	a201      	add	r2, pc, #4	; (adr r2, 800754c <UART_SetConfig+0x520>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	08007571 	.word	0x08007571
 8007550:	08007579 	.word	0x08007579
 8007554:	08007581 	.word	0x08007581
 8007558:	08007597 	.word	0x08007597
 800755c:	08007587 	.word	0x08007587
 8007560:	08007597 	.word	0x08007597
 8007564:	08007597 	.word	0x08007597
 8007568:	08007597 	.word	0x08007597
 800756c:	0800758f 	.word	0x0800758f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007570:	f7fe fe64 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 8007574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007576:	e014      	b.n	80075a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007578:	f7fe fe76 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 800757c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800757e:	e010      	b.n	80075a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007580:	4b1a      	ldr	r3, [pc, #104]	; (80075ec <UART_SetConfig+0x5c0>)
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007584:	e00d      	b.n	80075a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007586:	f7fe fdeb 	bl	8006160 <HAL_RCC_GetSysClockFreq>
 800758a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800758c:	e009      	b.n	80075a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800758e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007594:	e005      	b.n	80075a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075a0:	bf00      	nop
    }

    if (pclk != 0U)
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d028      	beq.n	80075fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	4a10      	ldr	r2, [pc, #64]	; (80075f0 <UART_SetConfig+0x5c4>)
 80075ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	085b      	lsrs	r3, r3, #1
 80075c0:	441a      	add	r2, r3
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	2b0f      	cmp	r3, #15
 80075d0:	d910      	bls.n	80075f4 <UART_SetConfig+0x5c8>
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d8:	d20c      	bcs.n	80075f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60da      	str	r2, [r3, #12]
 80075e4:	e009      	b.n	80075fa <UART_SetConfig+0x5ce>
 80075e6:	bf00      	nop
 80075e8:	40008000 	.word	0x40008000
 80075ec:	00f42400 	.word	0x00f42400
 80075f0:	0800b8e0 	.word	0x0800b8e0
      }
      else
      {
        ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2201      	movs	r2, #1
 8007606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2200      	movs	r2, #0
 800760e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2200      	movs	r2, #0
 8007614:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007616:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800761a:	4618      	mov	r0, r3
 800761c:	3730      	adds	r7, #48	; 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01a      	beq.n	800773a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007722:	d10a      	bne.n	800773a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	605a      	str	r2, [r3, #4]
  }
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b098      	sub	sp, #96	; 0x60
 800776c:	af02      	add	r7, sp, #8
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007778:	f7fb fd7a 	bl	8003270 <HAL_GetTick>
 800777c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b08      	cmp	r3, #8
 800778a:	d12f      	bne.n	80077ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800778c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007794:	2200      	movs	r2, #0
 8007796:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f88e 	bl	80078bc <UART_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d022      	beq.n	80077ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ba:	653b      	str	r3, [r7, #80]	; 0x50
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c4:	647b      	str	r3, [r7, #68]	; 0x44
 80077c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e063      	b.n	80078b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0304 	and.w	r3, r3, #4
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d149      	bne.n	800788e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007802:	2200      	movs	r2, #0
 8007804:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f857 	bl	80078bc <UART_WaitOnFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d03c      	beq.n	800788e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	623b      	str	r3, [r7, #32]
   return(result);
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007832:	633b      	str	r3, [r7, #48]	; 0x30
 8007834:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	60fb      	str	r3, [r7, #12]
   return(result);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	64bb      	str	r3, [r7, #72]	; 0x48
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007866:	61fa      	str	r2, [r7, #28]
 8007868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	69b9      	ldr	r1, [r7, #24]
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	617b      	str	r3, [r7, #20]
   return(result);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e012      	b.n	80078b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3758      	adds	r7, #88	; 0x58
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	4613      	mov	r3, r2
 80078ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078cc:	e04f      	b.n	800796e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d4:	d04b      	beq.n	800796e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078d6:	f7fb fccb 	bl	8003270 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d302      	bcc.n	80078ec <UART_WaitOnFlagUntilTimeout+0x30>
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e04e      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d037      	beq.n	800796e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b80      	cmp	r3, #128	; 0x80
 8007902:	d034      	beq.n	800796e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d031      	beq.n	800796e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b08      	cmp	r3, #8
 8007916:	d110      	bne.n	800793a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2208      	movs	r2, #8
 800791e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f838 	bl	8007996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2208      	movs	r2, #8
 800792a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e029      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007948:	d111      	bne.n	800796e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f81e 	bl	8007996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e00f      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4013      	ands	r3, r2
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	429a      	cmp	r2, r3
 800797c:	bf0c      	ite	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	2300      	movne	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	429a      	cmp	r2, r3
 800798a:	d0a0      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007996:	b480      	push	{r7}
 8007998:	b095      	sub	sp, #84	; 0x54
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079bc:	643b      	str	r3, [r7, #64]	; 0x40
 80079be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3308      	adds	r3, #8
 80079d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e3      	bne.n	80079d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d118      	bne.n	8007a42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f023 0310 	bic.w	r3, r3, #16
 8007a24:	647b      	str	r3, [r7, #68]	; 0x44
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6979      	ldr	r1, [r7, #20]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e6      	bne.n	8007a10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a56:	bf00      	nop
 8007a58:	3754      	adds	r7, #84	; 0x54
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e027      	b.n	8007ac8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2224      	movs	r2, #36	; 0x24
 8007a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007aa6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e02d      	b.n	8007b48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2224      	movs	r2, #36	; 0x24
 8007af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0201 	bic.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f84f 	bl	8007bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e02d      	b.n	8007bc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2224      	movs	r2, #36	; 0x24
 8007b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f811 	bl	8007bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d108      	bne.n	8007bee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bec:	e031      	b.n	8007c52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bee:	2308      	movs	r3, #8
 8007bf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	0e5b      	lsrs	r3, r3, #25
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	0f5b      	lsrs	r3, r3, #29
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	7b3a      	ldrb	r2, [r7, #12]
 8007c1a:	4911      	ldr	r1, [pc, #68]	; (8007c60 <UARTEx_SetNbDataToProcess+0x94>)
 8007c1c:	5c8a      	ldrb	r2, [r1, r2]
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c22:	7b3a      	ldrb	r2, [r7, #12]
 8007c24:	490f      	ldr	r1, [pc, #60]	; (8007c64 <UARTEx_SetNbDataToProcess+0x98>)
 8007c26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	7b7a      	ldrb	r2, [r7, #13]
 8007c38:	4909      	ldr	r1, [pc, #36]	; (8007c60 <UARTEx_SetNbDataToProcess+0x94>)
 8007c3a:	5c8a      	ldrb	r2, [r1, r2]
 8007c3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c40:	7b7a      	ldrb	r2, [r7, #13]
 8007c42:	4908      	ldr	r1, [pc, #32]	; (8007c64 <UARTEx_SetNbDataToProcess+0x98>)
 8007c44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	0800b8f8 	.word	0x0800b8f8
 8007c64:	0800b900 	.word	0x0800b900

08007c68 <__NVIC_SetPriority>:
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db0a      	blt.n	8007c92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	490c      	ldr	r1, [pc, #48]	; (8007cb4 <__NVIC_SetPriority+0x4c>)
 8007c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c86:	0112      	lsls	r2, r2, #4
 8007c88:	b2d2      	uxtb	r2, r2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c90:	e00a      	b.n	8007ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	4908      	ldr	r1, [pc, #32]	; (8007cb8 <__NVIC_SetPriority+0x50>)
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	f003 030f 	and.w	r3, r3, #15
 8007c9e:	3b04      	subs	r3, #4
 8007ca0:	0112      	lsls	r2, r2, #4
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	440b      	add	r3, r1
 8007ca6:	761a      	strb	r2, [r3, #24]
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	e000e100 	.word	0xe000e100
 8007cb8:	e000ed00 	.word	0xe000ed00

08007cbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <SysTick_Handler+0x1c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007cc4:	f002 fa9a 	bl	800a1fc <xTaskGetSchedulerState>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d001      	beq.n	8007cd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007cce:	f003 f983 	bl	800afd8 <xPortSysTickHandler>
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	e000e010 	.word	0xe000e010

08007cdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f06f 0004 	mvn.w	r0, #4
 8007ce6:	f7ff ffbf 	bl	8007c68 <__NVIC_SetPriority>
#endif
}
 8007cea:	bf00      	nop
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cf6:	f3ef 8305 	mrs	r3, IPSR
 8007cfa:	603b      	str	r3, [r7, #0]
  return(result);
 8007cfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d02:	f06f 0305 	mvn.w	r3, #5
 8007d06:	607b      	str	r3, [r7, #4]
 8007d08:	e00c      	b.n	8007d24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <osKernelInitialize+0x44>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d12:	4b08      	ldr	r3, [pc, #32]	; (8007d34 <osKernelInitialize+0x44>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	e002      	b.n	8007d24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d24:	687b      	ldr	r3, [r7, #4]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000284 	.word	0x20000284

08007d38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d3e:	f3ef 8305 	mrs	r3, IPSR
 8007d42:	603b      	str	r3, [r7, #0]
  return(result);
 8007d44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d4a:	f06f 0305 	mvn.w	r3, #5
 8007d4e:	607b      	str	r3, [r7, #4]
 8007d50:	e010      	b.n	8007d74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d52:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <osKernelStart+0x48>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d109      	bne.n	8007d6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d5a:	f7ff ffbf 	bl	8007cdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d5e:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <osKernelStart+0x48>)
 8007d60:	2202      	movs	r2, #2
 8007d62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d64:	f001 fdee 	bl	8009944 <vTaskStartScheduler>
      stat = osOK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	e002      	b.n	8007d74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d74:	687b      	ldr	r3, [r7, #4]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000284 	.word	0x20000284

08007d84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08e      	sub	sp, #56	; 0x38
 8007d88:	af04      	add	r7, sp, #16
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d94:	f3ef 8305 	mrs	r3, IPSR
 8007d98:	617b      	str	r3, [r7, #20]
  return(result);
 8007d9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d17e      	bne.n	8007e9e <osThreadNew+0x11a>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d07b      	beq.n	8007e9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007da6:	2380      	movs	r3, #128	; 0x80
 8007da8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007daa:	2318      	movs	r3, #24
 8007dac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007db2:	f04f 33ff 	mov.w	r3, #4294967295
 8007db6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d045      	beq.n	8007e4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <osThreadNew+0x48>
        name = attr->name;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d008      	beq.n	8007df2 <osThreadNew+0x6e>
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	2b38      	cmp	r3, #56	; 0x38
 8007de4:	d805      	bhi.n	8007df2 <osThreadNew+0x6e>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <osThreadNew+0x72>
        return (NULL);
 8007df2:	2300      	movs	r3, #0
 8007df4:	e054      	b.n	8007ea0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	089b      	lsrs	r3, r3, #2
 8007e04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00e      	beq.n	8007e2c <osThreadNew+0xa8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2ba7      	cmp	r3, #167	; 0xa7
 8007e14:	d90a      	bls.n	8007e2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <osThreadNew+0xa8>
        mem = 1;
 8007e26:	2301      	movs	r3, #1
 8007e28:	61bb      	str	r3, [r7, #24]
 8007e2a:	e010      	b.n	8007e4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10c      	bne.n	8007e4e <osThreadNew+0xca>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d108      	bne.n	8007e4e <osThreadNew+0xca>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d104      	bne.n	8007e4e <osThreadNew+0xca>
          mem = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61bb      	str	r3, [r7, #24]
 8007e48:	e001      	b.n	8007e4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d110      	bne.n	8007e76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e5c:	9202      	str	r2, [sp, #8]
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6a3a      	ldr	r2, [r7, #32]
 8007e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f001 fb7e 	bl	800956c <xTaskCreateStatic>
 8007e70:	4603      	mov	r3, r0
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	e013      	b.n	8007e9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d110      	bne.n	8007e9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	f107 0310 	add.w	r3, r7, #16
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f001 fbc9 	bl	8009626 <xTaskCreate>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d001      	beq.n	8007e9e <osThreadNew+0x11a>
            hTask = NULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e9e:	693b      	ldr	r3, [r7, #16]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3728      	adds	r7, #40	; 0x28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb0:	f3ef 8305 	mrs	r3, IPSR
 8007eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <osDelay+0x1c>
    stat = osErrorISR;
 8007ebc:	f06f 0305 	mvn.w	r3, #5
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e007      	b.n	8007ed4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fd04 	bl	80098dc <vTaskDelay>
    }
  }

  return (stat);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b08a      	sub	sp, #40	; 0x28
 8007ee2:	af02      	add	r7, sp, #8
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eee:	f3ef 8305 	mrs	r3, IPSR
 8007ef2:	613b      	str	r3, [r7, #16]
  return(result);
 8007ef4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d175      	bne.n	8007fe6 <osSemaphoreNew+0x108>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d072      	beq.n	8007fe6 <osSemaphoreNew+0x108>
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d86e      	bhi.n	8007fe6 <osSemaphoreNew+0x108>
    mem = -1;
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d015      	beq.n	8007f40 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d006      	beq.n	8007f2a <osSemaphoreNew+0x4c>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b4f      	cmp	r3, #79	; 0x4f
 8007f22:	d902      	bls.n	8007f2a <osSemaphoreNew+0x4c>
        mem = 1;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61bb      	str	r3, [r7, #24]
 8007f28:	e00c      	b.n	8007f44 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d108      	bne.n	8007f44 <osSemaphoreNew+0x66>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d104      	bne.n	8007f44 <osSemaphoreNew+0x66>
          mem = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61bb      	str	r3, [r7, #24]
 8007f3e:	e001      	b.n	8007f44 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d04c      	beq.n	8007fe6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d128      	bne.n	8007fa4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d10a      	bne.n	8007f6e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	9200      	str	r2, [sp, #0]
 8007f60:	2200      	movs	r2, #0
 8007f62:	2100      	movs	r1, #0
 8007f64:	2001      	movs	r0, #1
 8007f66:	f000 fb5b 	bl	8008620 <xQueueGenericCreateStatic>
 8007f6a:	61f8      	str	r0, [r7, #28]
 8007f6c:	e005      	b.n	8007f7a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007f6e:	2203      	movs	r2, #3
 8007f70:	2100      	movs	r1, #0
 8007f72:	2001      	movs	r0, #1
 8007f74:	f000 fbcc 	bl	8008710 <xQueueGenericCreate>
 8007f78:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d022      	beq.n	8007fc6 <osSemaphoreNew+0xe8>
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01f      	beq.n	8007fc6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007f86:	2300      	movs	r3, #0
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	69f8      	ldr	r0, [r7, #28]
 8007f8e:	f000 fc87 	bl	80088a0 <xQueueGenericSend>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d016      	beq.n	8007fc6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007f98:	69f8      	ldr	r0, [r7, #28]
 8007f9a:	f001 f913 	bl	80091c4 <vQueueDelete>
            hSemaphore = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61fb      	str	r3, [r7, #28]
 8007fa2:	e010      	b.n	8007fc6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d108      	bne.n	8007fbc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 fc09 	bl	80087ca <xQueueCreateCountingSemaphoreStatic>
 8007fb8:	61f8      	str	r0, [r7, #28]
 8007fba:	e004      	b.n	8007fc6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fc3a 	bl	8008838 <xQueueCreateCountingSemaphore>
 8007fc4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00c      	beq.n	8007fe6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <osSemaphoreNew+0xfc>
          name = attr->name;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	e001      	b.n	8007fde <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007fde:	6979      	ldr	r1, [r7, #20]
 8007fe0:	69f8      	ldr	r0, [r7, #28]
 8007fe2:	f001 fa3b 	bl	800945c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007fe6:	69fb      	ldr	r3, [r7, #28]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3720      	adds	r7, #32
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d103      	bne.n	8008010 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008008:	f06f 0303 	mvn.w	r3, #3
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	e039      	b.n	8008084 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008010:	f3ef 8305 	mrs	r3, IPSR
 8008014:	60fb      	str	r3, [r7, #12]
  return(result);
 8008016:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008018:	2b00      	cmp	r3, #0
 800801a:	d022      	beq.n	8008062 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008022:	f06f 0303 	mvn.w	r3, #3
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e02c      	b.n	8008084 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800802a:	2300      	movs	r3, #0
 800802c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	461a      	mov	r2, r3
 8008034:	2100      	movs	r1, #0
 8008036:	6938      	ldr	r0, [r7, #16]
 8008038:	f001 f844 	bl	80090c4 <xQueueReceiveFromISR>
 800803c:	4603      	mov	r3, r0
 800803e:	2b01      	cmp	r3, #1
 8008040:	d003      	beq.n	800804a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008042:	f06f 0302 	mvn.w	r3, #2
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	e01c      	b.n	8008084 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d019      	beq.n	8008084 <osSemaphoreAcquire+0x94>
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <osSemaphoreAcquire+0xa0>)
 8008052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	e010      	b.n	8008084 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6938      	ldr	r0, [r7, #16]
 8008066:	f000 ff21 	bl	8008eac <xQueueSemaphoreTake>
 800806a:	4603      	mov	r3, r0
 800806c:	2b01      	cmp	r3, #1
 800806e:	d009      	beq.n	8008084 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008076:	f06f 0301 	mvn.w	r3, #1
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	e002      	b.n	8008084 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800807e:	f06f 0302 	mvn.w	r3, #2
 8008082:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008084:	697b      	ldr	r3, [r7, #20]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80080aa:	f06f 0303 	mvn.w	r3, #3
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e02c      	b.n	800810c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080b2:	f3ef 8305 	mrs	r3, IPSR
 80080b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80080b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d01a      	beq.n	80080f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80080be:	2300      	movs	r3, #0
 80080c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80080c2:	f107 0308 	add.w	r3, r7, #8
 80080c6:	4619      	mov	r1, r3
 80080c8:	6938      	ldr	r0, [r7, #16]
 80080ca:	f000 fd82 	bl	8008bd2 <xQueueGiveFromISR>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d003      	beq.n	80080dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80080d4:	f06f 0302 	mvn.w	r3, #2
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e017      	b.n	800810c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d014      	beq.n	800810c <osSemaphoreRelease+0x78>
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <osSemaphoreRelease+0x84>)
 80080e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	e00b      	b.n	800810c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80080f4:	2300      	movs	r3, #0
 80080f6:	2200      	movs	r2, #0
 80080f8:	2100      	movs	r1, #0
 80080fa:	6938      	ldr	r0, [r7, #16]
 80080fc:	f000 fbd0 	bl	80088a0 <xQueueGenericSend>
 8008100:	4603      	mov	r3, r0
 8008102:	2b01      	cmp	r3, #1
 8008104:	d002      	beq.n	800810c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008106:	f06f 0302 	mvn.w	r3, #2
 800810a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800810c:	697b      	ldr	r3, [r7, #20]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800811c:	b580      	push	{r7, lr}
 800811e:	b08a      	sub	sp, #40	; 0x28
 8008120:	af02      	add	r7, sp, #8
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008128:	2300      	movs	r3, #0
 800812a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800812c:	f3ef 8305 	mrs	r3, IPSR
 8008130:	613b      	str	r3, [r7, #16]
  return(result);
 8008132:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008134:	2b00      	cmp	r3, #0
 8008136:	d15f      	bne.n	80081f8 <osMessageQueueNew+0xdc>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d05c      	beq.n	80081f8 <osMessageQueueNew+0xdc>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d059      	beq.n	80081f8 <osMessageQueueNew+0xdc>
    mem = -1;
 8008144:	f04f 33ff 	mov.w	r3, #4294967295
 8008148:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d029      	beq.n	80081a4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d012      	beq.n	800817e <osMessageQueueNew+0x62>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b4f      	cmp	r3, #79	; 0x4f
 800815e:	d90e      	bls.n	800817e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695a      	ldr	r2, [r3, #20]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	fb01 f303 	mul.w	r3, r1, r3
 8008174:	429a      	cmp	r2, r3
 8008176:	d302      	bcc.n	800817e <osMessageQueueNew+0x62>
        mem = 1;
 8008178:	2301      	movs	r3, #1
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	e014      	b.n	80081a8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d110      	bne.n	80081a8 <osMessageQueueNew+0x8c>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10c      	bne.n	80081a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008192:	2b00      	cmp	r3, #0
 8008194:	d108      	bne.n	80081a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <osMessageQueueNew+0x8c>
          mem = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	61bb      	str	r3, [r7, #24]
 80081a2:	e001      	b.n	80081a8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d10b      	bne.n	80081c6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2100      	movs	r1, #0
 80081b8:	9100      	str	r1, [sp, #0]
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 fa2f 	bl	8008620 <xQueueGenericCreateStatic>
 80081c2:	61f8      	str	r0, [r7, #28]
 80081c4:	e008      	b.n	80081d8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d105      	bne.n	80081d8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80081cc:	2200      	movs	r2, #0
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fa9d 	bl	8008710 <xQueueGenericCreate>
 80081d6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00c      	beq.n	80081f8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <osMessageQueueNew+0xd0>
        name = attr->name;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e001      	b.n	80081f0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80081f0:	6979      	ldr	r1, [r7, #20]
 80081f2:	69f8      	ldr	r0, [r7, #28]
 80081f4:	f001 f932 	bl	800945c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80081f8:	69fb      	ldr	r3, [r7, #28]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3720      	adds	r7, #32
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	4613      	mov	r3, r2
 8008212:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008218:	2300      	movs	r3, #0
 800821a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800821c:	f3ef 8305 	mrs	r3, IPSR
 8008220:	617b      	str	r3, [r7, #20]
  return(result);
 8008222:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008224:	2b00      	cmp	r3, #0
 8008226:	d028      	beq.n	800827a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <osMessageQueuePut+0x36>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <osMessageQueuePut+0x36>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800823a:	f06f 0303 	mvn.w	r3, #3
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	e038      	b.n	80082b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008242:	2300      	movs	r3, #0
 8008244:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008246:	f107 0210 	add.w	r2, r7, #16
 800824a:	2300      	movs	r3, #0
 800824c:	68b9      	ldr	r1, [r7, #8]
 800824e:	69b8      	ldr	r0, [r7, #24]
 8008250:	f000 fc24 	bl	8008a9c <xQueueGenericSendFromISR>
 8008254:	4603      	mov	r3, r0
 8008256:	2b01      	cmp	r3, #1
 8008258:	d003      	beq.n	8008262 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800825a:	f06f 0302 	mvn.w	r3, #2
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	e028      	b.n	80082b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d025      	beq.n	80082b4 <osMessageQueuePut+0xb0>
 8008268:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <osMessageQueuePut+0xbc>)
 800826a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	e01c      	b.n	80082b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <osMessageQueuePut+0x82>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d103      	bne.n	800828e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008286:	f06f 0303 	mvn.w	r3, #3
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	e012      	b.n	80082b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800828e:	2300      	movs	r3, #0
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	69b8      	ldr	r0, [r7, #24]
 8008296:	f000 fb03 	bl	80088a0 <xQueueGenericSend>
 800829a:	4603      	mov	r3, r0
 800829c:	2b01      	cmp	r3, #1
 800829e:	d009      	beq.n	80082b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80082a6:	f06f 0301 	mvn.w	r3, #1
 80082aa:	61fb      	str	r3, [r7, #28]
 80082ac:	e002      	b.n	80082b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80082ae:	f06f 0302 	mvn.w	r3, #2
 80082b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80082b4:	69fb      	ldr	r3, [r7, #28]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3720      	adds	r7, #32
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082da:	f3ef 8305 	mrs	r3, IPSR
 80082de:	617b      	str	r3, [r7, #20]
  return(result);
 80082e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d028      	beq.n	8008338 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <osMessageQueueGet+0x34>
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <osMessageQueueGet+0x34>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80082f8:	f06f 0303 	mvn.w	r3, #3
 80082fc:	61fb      	str	r3, [r7, #28]
 80082fe:	e037      	b.n	8008370 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008304:	f107 0310 	add.w	r3, r7, #16
 8008308:	461a      	mov	r2, r3
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	69b8      	ldr	r0, [r7, #24]
 800830e:	f000 fed9 	bl	80090c4 <xQueueReceiveFromISR>
 8008312:	4603      	mov	r3, r0
 8008314:	2b01      	cmp	r3, #1
 8008316:	d003      	beq.n	8008320 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008318:	f06f 0302 	mvn.w	r3, #2
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	e027      	b.n	8008370 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d024      	beq.n	8008370 <osMessageQueueGet+0xac>
 8008326:	4b15      	ldr	r3, [pc, #84]	; (800837c <osMessageQueueGet+0xb8>)
 8008328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	e01b      	b.n	8008370 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <osMessageQueueGet+0x80>
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d103      	bne.n	800834c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008344:	f06f 0303 	mvn.w	r3, #3
 8008348:	61fb      	str	r3, [r7, #28]
 800834a:	e011      	b.n	8008370 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	69b8      	ldr	r0, [r7, #24]
 8008352:	f000 fccb 	bl	8008cec <xQueueReceive>
 8008356:	4603      	mov	r3, r0
 8008358:	2b01      	cmp	r3, #1
 800835a:	d009      	beq.n	8008370 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008362:	f06f 0301 	mvn.w	r3, #1
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e002      	b.n	8008370 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800836a:	f06f 0302 	mvn.w	r3, #2
 800836e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008370:	69fb      	ldr	r3, [r7, #28]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4a07      	ldr	r2, [pc, #28]	; (80083ac <vApplicationGetIdleTaskMemory+0x2c>)
 8008390:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	4a06      	ldr	r2, [pc, #24]	; (80083b0 <vApplicationGetIdleTaskMemory+0x30>)
 8008396:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2280      	movs	r2, #128	; 0x80
 800839c:	601a      	str	r2, [r3, #0]
}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	20000288 	.word	0x20000288
 80083b0:	20000330 	.word	0x20000330

080083b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a07      	ldr	r2, [pc, #28]	; (80083e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80083c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4a06      	ldr	r2, [pc, #24]	; (80083e4 <vApplicationGetTimerTaskMemory+0x30>)
 80083ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	20000530 	.word	0x20000530
 80083e4:	200005d8 	.word	0x200005d8

080083e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f103 0208 	add.w	r2, r3, #8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008400:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f103 0208 	add.w	r2, r3, #8
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f103 0208 	add.w	r2, r3, #8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008442:	b480      	push	{r7}
 8008444:	b085      	sub	sp, #20
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
}
 800847e:	bf00      	nop
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d103      	bne.n	80084aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	e00c      	b.n	80084c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3308      	adds	r3, #8
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e002      	b.n	80084b8 <vListInsert+0x2e>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d2f6      	bcs.n	80084b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	601a      	str	r2, [r3, #0]
}
 80084f0:	bf00      	nop
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6892      	ldr	r2, [r2, #8]
 8008512:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6852      	ldr	r2, [r2, #4]
 800851c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	429a      	cmp	r2, r3
 8008526:	d103      	bne.n	8008530 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	1e5a      	subs	r2, r3, #1
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800857a:	f002 fc9b 	bl	800aeb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800858a:	fb01 f303 	mul.w	r3, r1, r3
 800858e:	441a      	add	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	3b01      	subs	r3, #1
 80085ac:	68f9      	ldr	r1, [r7, #12]
 80085ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	441a      	add	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	22ff      	movs	r2, #255	; 0xff
 80085be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d114      	bne.n	80085fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01a      	beq.n	800860e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3310      	adds	r3, #16
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 fc4b 	bl	8009e78 <xTaskRemoveFromEventList>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <xQueueGenericReset+0xcc>)
 80085ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	e009      	b.n	800860e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3310      	adds	r3, #16
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fef2 	bl	80083e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3324      	adds	r3, #36	; 0x24
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff feed 	bl	80083e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800860e:	f002 fc81 	bl	800af14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008612:	2301      	movs	r3, #1
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	; 0x38
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008646:	bf00      	nop
 8008648:	e7fe      	b.n	8008648 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <xQueueGenericCreateStatic+0x52>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <xQueueGenericCreateStatic+0x56>
 8008672:	2301      	movs	r3, #1
 8008674:	e000      	b.n	8008678 <xQueueGenericCreateStatic+0x58>
 8008676:	2300      	movs	r3, #0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	623b      	str	r3, [r7, #32]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <xQueueGenericCreateStatic+0x7e>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <xQueueGenericCreateStatic+0x82>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <xQueueGenericCreateStatic+0x84>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	61fb      	str	r3, [r7, #28]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086be:	2350      	movs	r3, #80	; 0x50
 80086c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b50      	cmp	r3, #80	; 0x50
 80086c6:	d00a      	beq.n	80086de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	61bb      	str	r3, [r7, #24]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	4613      	mov	r3, r2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f83f 	bl	8008784 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008708:	4618      	mov	r0, r3
 800870a:	3730      	adds	r7, #48	; 0x30
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	; 0x28
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	4613      	mov	r3, r2
 800871c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	613b      	str	r3, [r7, #16]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	3350      	adds	r3, #80	; 0x50
 8008748:	4618      	mov	r0, r3
 800874a:	f002 fcd5 	bl	800b0f8 <pvPortMalloc>
 800874e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d011      	beq.n	800877a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	3350      	adds	r3, #80	; 0x50
 800875e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008768:	79fa      	ldrb	r2, [r7, #7]
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4613      	mov	r3, r2
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f805 	bl	8008784 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800877a:	69bb      	ldr	r3, [r7, #24]
	}
 800877c:	4618      	mov	r0, r3
 800877e:	3720      	adds	r7, #32
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e002      	b.n	80087a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087b2:	2101      	movs	r1, #1
 80087b4:	69b8      	ldr	r0, [r7, #24]
 80087b6:	f7ff fecb 	bl	8008550 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b08a      	sub	sp, #40	; 0x28
 80087ce:	af02      	add	r7, sp, #8
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	61bb      	str	r3, [r7, #24]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d90a      	bls.n	8008810 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	617b      	str	r3, [r7, #20]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008810:	2302      	movs	r3, #2
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	2100      	movs	r1, #0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff ff00 	bl	8008620 <xQueueGenericCreateStatic>
 8008820:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800882e:	69fb      	ldr	r3, [r7, #28]
	}
 8008830:	4618      	mov	r0, r3
 8008832:	3720      	adds	r7, #32
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	613b      	str	r3, [r7, #16]
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d90a      	bls.n	800887c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60fb      	str	r3, [r7, #12]
}
 8008878:	bf00      	nop
 800887a:	e7fe      	b.n	800887a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800887c:	2202      	movs	r2, #2
 800887e:	2100      	movs	r1, #0
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff ff45 	bl	8008710 <xQueueGenericCreate>
 8008886:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008894:	697b      	ldr	r3, [r7, #20]
	}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08e      	sub	sp, #56	; 0x38
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088ae:	2300      	movs	r3, #0
 80088b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10a      	bne.n	80088d2 <xQueueGenericSend+0x32>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d103      	bne.n	80088e0 <xQueueGenericSend+0x40>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <xQueueGenericSend+0x44>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <xQueueGenericSend+0x46>
 80088e4:	2300      	movs	r3, #0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <xQueueGenericSend+0x60>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d103      	bne.n	800890e <xQueueGenericSend+0x6e>
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <xQueueGenericSend+0x72>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <xQueueGenericSend+0x74>
 8008912:	2300      	movs	r3, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xQueueGenericSend+0x8e>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	623b      	str	r3, [r7, #32]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800892e:	f001 fc65 	bl	800a1fc <xTaskGetSchedulerState>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <xQueueGenericSend+0x9e>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <xQueueGenericSend+0xa2>
 800893e:	2301      	movs	r3, #1
 8008940:	e000      	b.n	8008944 <xQueueGenericSend+0xa4>
 8008942:	2300      	movs	r3, #0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <xQueueGenericSend+0xbe>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	61fb      	str	r3, [r7, #28]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800895e:	f002 faa9 	bl	800aeb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896a:	429a      	cmp	r2, r3
 800896c:	d302      	bcc.n	8008974 <xQueueGenericSend+0xd4>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b02      	cmp	r3, #2
 8008972:	d129      	bne.n	80089c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800897a:	f000 fc5e 	bl	800923a <prvCopyDataToQueue>
 800897e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	d010      	beq.n	80089aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	3324      	adds	r3, #36	; 0x24
 800898c:	4618      	mov	r0, r3
 800898e:	f001 fa73 	bl	8009e78 <xTaskRemoveFromEventList>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d013      	beq.n	80089c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008998:	4b3f      	ldr	r3, [pc, #252]	; (8008a98 <xQueueGenericSend+0x1f8>)
 800899a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	e00a      	b.n	80089c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d007      	beq.n	80089c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089b0:	4b39      	ldr	r3, [pc, #228]	; (8008a98 <xQueueGenericSend+0x1f8>)
 80089b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089c0:	f002 faa8 	bl	800af14 <vPortExitCritical>
				return pdPASS;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e063      	b.n	8008a90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d103      	bne.n	80089d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ce:	f002 faa1 	bl	800af14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e05c      	b.n	8008a90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089dc:	f107 0314 	add.w	r3, r7, #20
 80089e0:	4618      	mov	r0, r3
 80089e2:	f001 faad 	bl	8009f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ea:	f002 fa93 	bl	800af14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089ee:	f001 f819 	bl	8009a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089f2:	f002 fa5f 	bl	800aeb4 <vPortEnterCritical>
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089fc:	b25b      	sxtb	r3, r3
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d103      	bne.n	8008a0c <xQueueGenericSend+0x16c>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a12:	b25b      	sxtb	r3, r3
 8008a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a18:	d103      	bne.n	8008a22 <xQueueGenericSend+0x182>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a22:	f002 fa77 	bl	800af14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a26:	1d3a      	adds	r2, r7, #4
 8008a28:	f107 0314 	add.w	r3, r7, #20
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 fa9c 	bl	8009f6c <xTaskCheckForTimeOut>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d124      	bne.n	8008a84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a3c:	f000 fcf5 	bl	800942a <prvIsQueueFull>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d018      	beq.n	8008a78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	3310      	adds	r3, #16
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 f9c2 	bl	8009dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a56:	f000 fc80 	bl	800935a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a5a:	f000 fff1 	bl	8009a40 <xTaskResumeAll>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f47f af7c 	bne.w	800895e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a66:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <xQueueGenericSend+0x1f8>)
 8008a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	e772      	b.n	800895e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a7a:	f000 fc6e 	bl	800935a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a7e:	f000 ffdf 	bl	8009a40 <xTaskResumeAll>
 8008a82:	e76c      	b.n	800895e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a86:	f000 fc68 	bl	800935a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a8a:	f000 ffd9 	bl	8009a40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3738      	adds	r7, #56	; 0x38
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	e000ed04 	.word	0xe000ed04

08008a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b090      	sub	sp, #64	; 0x40
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10a      	bne.n	8008aca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d103      	bne.n	8008ad8 <xQueueGenericSendFromISR+0x3c>
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <xQueueGenericSendFromISR+0x40>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <xQueueGenericSendFromISR+0x42>
 8008adc:	2300      	movs	r3, #0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d103      	bne.n	8008b06 <xQueueGenericSendFromISR+0x6a>
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <xQueueGenericSendFromISR+0x6e>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <xQueueGenericSendFromISR+0x70>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10a      	bne.n	8008b26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	623b      	str	r3, [r7, #32]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b26:	f002 faa7 	bl	800b078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	61fa      	str	r2, [r7, #28]
 8008b40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d302      	bcc.n	8008b58 <xQueueGenericSendFromISR+0xbc>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d12f      	bne.n	8008bb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	68b9      	ldr	r1, [r7, #8]
 8008b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b6e:	f000 fb64 	bl	800923a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7a:	d112      	bne.n	8008ba2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d016      	beq.n	8008bb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	3324      	adds	r3, #36	; 0x24
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 f975 	bl	8009e78 <xTaskRemoveFromEventList>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00e      	beq.n	8008bb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00b      	beq.n	8008bb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	e007      	b.n	8008bb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	b25a      	sxtb	r2, r3
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008bb6:	e001      	b.n	8008bbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3740      	adds	r7, #64	; 0x40
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b08e      	sub	sp, #56	; 0x38
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	623b      	str	r3, [r7, #32]
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00a      	beq.n	8008c1a <xQueueGiveFromISR+0x48>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	61fb      	str	r3, [r7, #28]
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d103      	bne.n	8008c2a <xQueueGiveFromISR+0x58>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <xQueueGiveFromISR+0x5c>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGiveFromISR+0x5e>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	61bb      	str	r3, [r7, #24]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c4a:	f002 fa15 	bl	800b078 <vPortValidateInterruptPriority>
	__asm volatile
 8008c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	617a      	str	r2, [r7, #20]
 8008c64:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c66:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d22b      	bcs.n	8008cd2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d112      	bne.n	8008cbc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d016      	beq.n	8008ccc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	3324      	adds	r3, #36	; 0x24
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 f8e8 	bl	8009e78 <xTaskRemoveFromEventList>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00e      	beq.n	8008ccc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	e007      	b.n	8008ccc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	b25a      	sxtb	r2, r3
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd0:	e001      	b.n	8008cd6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f383 8811 	msr	BASEPRI, r3
}
 8008ce0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3738      	adds	r7, #56	; 0x38
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08c      	sub	sp, #48	; 0x30
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <xQueueReceive+0x30>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	623b      	str	r3, [r7, #32]
}
 8008d18:	bf00      	nop
 8008d1a:	e7fe      	b.n	8008d1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d103      	bne.n	8008d2a <xQueueReceive+0x3e>
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <xQueueReceive+0x42>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <xQueueReceive+0x44>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xQueueReceive+0x5e>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	61fb      	str	r3, [r7, #28]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d4a:	f001 fa57 	bl	800a1fc <xTaskGetSchedulerState>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <xQueueReceive+0x6e>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <xQueueReceive+0x72>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <xQueueReceive+0x74>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <xQueueReceive+0x8e>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	61bb      	str	r3, [r7, #24]
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d7a:	f002 f89b 	bl	800aeb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01f      	beq.n	8008dca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8e:	f000 fabe 	bl	800930e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	1e5a      	subs	r2, r3, #1
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00f      	beq.n	8008dc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	3310      	adds	r3, #16
 8008da6:	4618      	mov	r0, r3
 8008da8:	f001 f866 	bl	8009e78 <xTaskRemoveFromEventList>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d007      	beq.n	8008dc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008db2:	4b3d      	ldr	r3, [pc, #244]	; (8008ea8 <xQueueReceive+0x1bc>)
 8008db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008dc2:	f002 f8a7 	bl	800af14 <vPortExitCritical>
				return pdPASS;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e069      	b.n	8008e9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dd0:	f002 f8a0 	bl	800af14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e062      	b.n	8008e9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dde:	f107 0310 	add.w	r3, r7, #16
 8008de2:	4618      	mov	r0, r3
 8008de4:	f001 f8ac 	bl	8009f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008de8:	2301      	movs	r3, #1
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dec:	f002 f892 	bl	800af14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008df0:	f000 fe18 	bl	8009a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008df4:	f002 f85e 	bl	800aeb4 <vPortEnterCritical>
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dfe:	b25b      	sxtb	r3, r3
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d103      	bne.n	8008e0e <xQueueReceive+0x122>
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e14:	b25b      	sxtb	r3, r3
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d103      	bne.n	8008e24 <xQueueReceive+0x138>
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e24:	f002 f876 	bl	800af14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e28:	1d3a      	adds	r2, r7, #4
 8008e2a:	f107 0310 	add.w	r3, r7, #16
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 f89b 	bl	8009f6c <xTaskCheckForTimeOut>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d123      	bne.n	8008e84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e3e:	f000 fade 	bl	80093fe <prvIsQueueEmpty>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d017      	beq.n	8008e78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	3324      	adds	r3, #36	; 0x24
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4611      	mov	r1, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 ffc1 	bl	8009dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e58:	f000 fa7f 	bl	800935a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e5c:	f000 fdf0 	bl	8009a40 <xTaskResumeAll>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d189      	bne.n	8008d7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e66:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <xQueueReceive+0x1bc>)
 8008e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	e780      	b.n	8008d7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e7a:	f000 fa6e 	bl	800935a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e7e:	f000 fddf 	bl	8009a40 <xTaskResumeAll>
 8008e82:	e77a      	b.n	8008d7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e86:	f000 fa68 	bl	800935a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e8a:	f000 fdd9 	bl	8009a40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e90:	f000 fab5 	bl	80093fe <prvIsQueueEmpty>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f43f af6f 	beq.w	8008d7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3730      	adds	r7, #48	; 0x30
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08e      	sub	sp, #56	; 0x38
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	623b      	str	r3, [r7, #32]
}
 8008eda:	bf00      	nop
 8008edc:	e7fe      	b.n	8008edc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	61fb      	str	r3, [r7, #28]
}
 8008ef8:	bf00      	nop
 8008efa:	e7fe      	b.n	8008efa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008efc:	f001 f97e 	bl	800a1fc <xTaskGetSchedulerState>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <xQueueSemaphoreTake+0x60>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <xQueueSemaphoreTake+0x64>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <xQueueSemaphoreTake+0x66>
 8008f10:	2300      	movs	r3, #0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10a      	bne.n	8008f2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	61bb      	str	r3, [r7, #24]
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f2c:	f001 ffc2 	bl	800aeb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d024      	beq.n	8008f86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	1e5a      	subs	r2, r3, #1
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f4c:	f001 facc 	bl	800a4e8 <pvTaskIncrementMutexHeldCount>
 8008f50:	4602      	mov	r2, r0
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00f      	beq.n	8008f7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	3310      	adds	r3, #16
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 ff88 	bl	8009e78 <xTaskRemoveFromEventList>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d007      	beq.n	8008f7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f6e:	4b54      	ldr	r3, [pc, #336]	; (80090c0 <xQueueSemaphoreTake+0x214>)
 8008f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f7e:	f001 ffc9 	bl	800af14 <vPortExitCritical>
				return pdPASS;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e097      	b.n	80090b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d111      	bne.n	8008fb0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00a      	beq.n	8008fa8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	617b      	str	r3, [r7, #20]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008fa8:	f001 ffb4 	bl	800af14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e082      	b.n	80090b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fb6:	f107 030c 	add.w	r3, r7, #12
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 ffc0 	bl	8009f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fc4:	f001 ffa6 	bl	800af14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fc8:	f000 fd2c 	bl	8009a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fcc:	f001 ff72 	bl	800aeb4 <vPortEnterCritical>
 8008fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fd6:	b25b      	sxtb	r3, r3
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fdc:	d103      	bne.n	8008fe6 <xQueueSemaphoreTake+0x13a>
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fec:	b25b      	sxtb	r3, r3
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d103      	bne.n	8008ffc <xQueueSemaphoreTake+0x150>
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ffc:	f001 ff8a 	bl	800af14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009000:	463a      	mov	r2, r7
 8009002:	f107 030c 	add.w	r3, r7, #12
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f000 ffaf 	bl	8009f6c <xTaskCheckForTimeOut>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d132      	bne.n	800907a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009016:	f000 f9f2 	bl	80093fe <prvIsQueueEmpty>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d026      	beq.n	800906e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d109      	bne.n	800903c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009028:	f001 ff44 	bl	800aeb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	4618      	mov	r0, r3
 8009032:	f001 f901 	bl	800a238 <xTaskPriorityInherit>
 8009036:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009038:	f001 ff6c 	bl	800af14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	3324      	adds	r3, #36	; 0x24
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	4611      	mov	r1, r2
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fec7 	bl	8009dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800904a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800904c:	f000 f985 	bl	800935a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009050:	f000 fcf6 	bl	8009a40 <xTaskResumeAll>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	f47f af68 	bne.w	8008f2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800905c:	4b18      	ldr	r3, [pc, #96]	; (80090c0 <xQueueSemaphoreTake+0x214>)
 800905e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	e75e      	b.n	8008f2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800906e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009070:	f000 f973 	bl	800935a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009074:	f000 fce4 	bl	8009a40 <xTaskResumeAll>
 8009078:	e758      	b.n	8008f2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800907a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800907c:	f000 f96d 	bl	800935a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009080:	f000 fcde 	bl	8009a40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009086:	f000 f9ba 	bl	80093fe <prvIsQueueEmpty>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	f43f af4d 	beq.w	8008f2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00d      	beq.n	80090b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009098:	f001 ff0c 	bl	800aeb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800909c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800909e:	f000 f8b4 	bl	800920a <prvGetDisinheritPriorityAfterTimeout>
 80090a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80090a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 f99a 	bl	800a3e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80090b0:	f001 ff30 	bl	800af14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3738      	adds	r7, #56	; 0x38
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	e000ed04 	.word	0xe000ed04

080090c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08e      	sub	sp, #56	; 0x38
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	623b      	str	r3, [r7, #32]
}
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d103      	bne.n	80090fe <xQueueReceiveFromISR+0x3a>
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <xQueueReceiveFromISR+0x3e>
 80090fe:	2301      	movs	r3, #1
 8009100:	e000      	b.n	8009104 <xQueueReceiveFromISR+0x40>
 8009102:	2300      	movs	r3, #0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10a      	bne.n	800911e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	61fb      	str	r3, [r7, #28]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800911e:	f001 ffab 	bl	800b078 <vPortValidateInterruptPriority>
	__asm volatile
 8009122:	f3ef 8211 	mrs	r2, BASEPRI
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	61ba      	str	r2, [r7, #24]
 8009138:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800913a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800913c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	2b00      	cmp	r3, #0
 8009148:	d02f      	beq.n	80091aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009158:	f000 f8d9 	bl	800930e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	1e5a      	subs	r2, r3, #1
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009164:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916c:	d112      	bne.n	8009194 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d016      	beq.n	80091a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	3310      	adds	r3, #16
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fe7c 	bl	8009e78 <xTaskRemoveFromEventList>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00e      	beq.n	80091a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e007      	b.n	80091a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009198:	3301      	adds	r3, #1
 800919a:	b2db      	uxtb	r3, r3
 800919c:	b25a      	sxtb	r2, r3
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80091a4:	2301      	movs	r3, #1
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
 80091a8:	e001      	b.n	80091ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f383 8811 	msr	BASEPRI, r3
}
 80091b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3738      	adds	r7, #56	; 0x38
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <vQueueDelete+0x28>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	60bb      	str	r3, [r7, #8]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f95f 	bl	80094b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f002 f847 	bl	800b290 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009202:	bf00      	nop
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800920a:	b480      	push	{r7}
 800920c:	b085      	sub	sp, #20
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	2b00      	cmp	r3, #0
 8009218:	d006      	beq.n	8009228 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e001      	b.n	800922c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800922c:	68fb      	ldr	r3, [r7, #12]
	}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b086      	sub	sp, #24
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10d      	bne.n	8009274 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d14d      	bne.n	80092fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	4618      	mov	r0, r3
 8009266:	f001 f84f 	bl	800a308 <xTaskPriorityDisinherit>
 800926a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	609a      	str	r2, [r3, #8]
 8009272:	e043      	b.n	80092fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d119      	bne.n	80092ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6858      	ldr	r0, [r3, #4]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009282:	461a      	mov	r2, r3
 8009284:	68b9      	ldr	r1, [r7, #8]
 8009286:	f002 f9a5 	bl	800b5d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	441a      	add	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d32b      	bcc.n	80092fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	605a      	str	r2, [r3, #4]
 80092ac:	e026      	b.n	80092fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	68d8      	ldr	r0, [r3, #12]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	461a      	mov	r2, r3
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	f002 f98b 	bl	800b5d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	425b      	negs	r3, r3
 80092c8:	441a      	add	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d207      	bcs.n	80092ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	425b      	negs	r3, r3
 80092e4:	441a      	add	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d105      	bne.n	80092fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009304:	697b      	ldr	r3, [r7, #20]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931c:	2b00      	cmp	r3, #0
 800931e:	d018      	beq.n	8009352 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009328:	441a      	add	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	429a      	cmp	r2, r3
 8009338:	d303      	bcc.n	8009342 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68d9      	ldr	r1, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	461a      	mov	r2, r3
 800934c:	6838      	ldr	r0, [r7, #0]
 800934e:	f002 f941 	bl	800b5d4 <memcpy>
	}
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009362:	f001 fda7 	bl	800aeb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800936c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800936e:	e011      	b.n	8009394 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d012      	beq.n	800939e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3324      	adds	r3, #36	; 0x24
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fd7b 	bl	8009e78 <xTaskRemoveFromEventList>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009388:	f000 fe52 	bl	800a030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	3b01      	subs	r3, #1
 8009390:	b2db      	uxtb	r3, r3
 8009392:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009398:	2b00      	cmp	r3, #0
 800939a:	dce9      	bgt.n	8009370 <prvUnlockQueue+0x16>
 800939c:	e000      	b.n	80093a0 <prvUnlockQueue+0x46>
					break;
 800939e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	22ff      	movs	r2, #255	; 0xff
 80093a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093a8:	f001 fdb4 	bl	800af14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093ac:	f001 fd82 	bl	800aeb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093b8:	e011      	b.n	80093de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d012      	beq.n	80093e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3310      	adds	r3, #16
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fd56 	bl	8009e78 <xTaskRemoveFromEventList>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093d2:	f000 fe2d 	bl	800a030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	3b01      	subs	r3, #1
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	dce9      	bgt.n	80093ba <prvUnlockQueue+0x60>
 80093e6:	e000      	b.n	80093ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	22ff      	movs	r2, #255	; 0xff
 80093ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093f2:	f001 fd8f 	bl	800af14 <vPortExitCritical>
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009406:	f001 fd55 	bl	800aeb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	2b00      	cmp	r3, #0
 8009410:	d102      	bne.n	8009418 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009412:	2301      	movs	r3, #1
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	e001      	b.n	800941c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800941c:	f001 fd7a 	bl	800af14 <vPortExitCritical>

	return xReturn;
 8009420:	68fb      	ldr	r3, [r7, #12]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009432:	f001 fd3f 	bl	800aeb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800943e:	429a      	cmp	r2, r3
 8009440:	d102      	bne.n	8009448 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009442:	2301      	movs	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	e001      	b.n	800944c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800944c:	f001 fd62 	bl	800af14 <vPortExitCritical>

	return xReturn;
 8009450:	68fb      	ldr	r3, [r7, #12]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	e014      	b.n	8009496 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800946c:	4a0f      	ldr	r2, [pc, #60]	; (80094ac <vQueueAddToRegistry+0x50>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009478:	490c      	ldr	r1, [pc, #48]	; (80094ac <vQueueAddToRegistry+0x50>)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009482:	4a0a      	ldr	r2, [pc, #40]	; (80094ac <vQueueAddToRegistry+0x50>)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	4413      	add	r3, r2
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800948e:	e006      	b.n	800949e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b07      	cmp	r3, #7
 800949a:	d9e7      	bls.n	800946c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	200009d8 	.word	0x200009d8

080094b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	e016      	b.n	80094ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80094be:	4a10      	ldr	r2, [pc, #64]	; (8009500 <vQueueUnregisterQueue+0x50>)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d10b      	bne.n	80094e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094ce:	4a0c      	ldr	r2, [pc, #48]	; (8009500 <vQueueUnregisterQueue+0x50>)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2100      	movs	r1, #0
 80094d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094d8:	4a09      	ldr	r2, [pc, #36]	; (8009500 <vQueueUnregisterQueue+0x50>)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	00db      	lsls	r3, r3, #3
 80094de:	4413      	add	r3, r2
 80094e0:	2200      	movs	r2, #0
 80094e2:	605a      	str	r2, [r3, #4]
				break;
 80094e4:	e006      	b.n	80094f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3301      	adds	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b07      	cmp	r3, #7
 80094f0:	d9e5      	bls.n	80094be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094f2:	bf00      	nop
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	200009d8 	.word	0x200009d8

08009504 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009514:	f001 fcce 	bl	800aeb4 <vPortEnterCritical>
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800951e:	b25b      	sxtb	r3, r3
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009524:	d103      	bne.n	800952e <vQueueWaitForMessageRestricted+0x2a>
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009534:	b25b      	sxtb	r3, r3
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d103      	bne.n	8009544 <vQueueWaitForMessageRestricted+0x40>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009544:	f001 fce6 	bl	800af14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	2b00      	cmp	r3, #0
 800954e:	d106      	bne.n	800955e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	3324      	adds	r3, #36	; 0x24
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	68b9      	ldr	r1, [r7, #8]
 8009558:	4618      	mov	r0, r3
 800955a:	f000 fc61 	bl	8009e20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800955e:	6978      	ldr	r0, [r7, #20]
 8009560:	f7ff fefb 	bl	800935a <prvUnlockQueue>
	}
 8009564:	bf00      	nop
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08e      	sub	sp, #56	; 0x38
 8009570:	af04      	add	r7, sp, #16
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800957a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	623b      	str	r3, [r7, #32]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	61fb      	str	r3, [r7, #28]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095b2:	23a8      	movs	r3, #168	; 0xa8
 80095b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2ba8      	cmp	r3, #168	; 0xa8
 80095ba:	d00a      	beq.n	80095d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	61bb      	str	r3, [r7, #24]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d01e      	beq.n	8009618 <xTaskCreateStatic+0xac>
 80095da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01b      	beq.n	8009618 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	2202      	movs	r2, #2
 80095ee:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095f2:	2300      	movs	r3, #0
 80095f4:	9303      	str	r3, [sp, #12]
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	9302      	str	r3, [sp, #8]
 80095fa:	f107 0314 	add.w	r3, r7, #20
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	68b9      	ldr	r1, [r7, #8]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 f850 	bl	80096b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009612:	f000 f8f3 	bl	80097fc <prvAddNewTaskToReadyList>
 8009616:	e001      	b.n	800961c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009618:	2300      	movs	r3, #0
 800961a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800961c:	697b      	ldr	r3, [r7, #20]
	}
 800961e:	4618      	mov	r0, r3
 8009620:	3728      	adds	r7, #40	; 0x28
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009626:	b580      	push	{r7, lr}
 8009628:	b08c      	sub	sp, #48	; 0x30
 800962a:	af04      	add	r7, sp, #16
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	603b      	str	r3, [r7, #0]
 8009632:	4613      	mov	r3, r2
 8009634:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009636:	88fb      	ldrh	r3, [r7, #6]
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4618      	mov	r0, r3
 800963c:	f001 fd5c 	bl	800b0f8 <pvPortMalloc>
 8009640:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00e      	beq.n	8009666 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009648:	20a8      	movs	r0, #168	; 0xa8
 800964a:	f001 fd55 	bl	800b0f8 <pvPortMalloc>
 800964e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	631a      	str	r2, [r3, #48]	; 0x30
 800965c:	e005      	b.n	800966a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800965e:	6978      	ldr	r0, [r7, #20]
 8009660:	f001 fe16 	bl	800b290 <vPortFree>
 8009664:	e001      	b.n	800966a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009666:	2300      	movs	r3, #0
 8009668:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d017      	beq.n	80096a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009678:	88fa      	ldrh	r2, [r7, #6]
 800967a:	2300      	movs	r3, #0
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	9302      	str	r3, [sp, #8]
 8009682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 f80e 	bl	80096b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009694:	69f8      	ldr	r0, [r7, #28]
 8009696:	f000 f8b1 	bl	80097fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800969a:	2301      	movs	r3, #1
 800969c:	61bb      	str	r3, [r7, #24]
 800969e:	e002      	b.n	80096a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096a0:	f04f 33ff 	mov.w	r3, #4294967295
 80096a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096a6:	69bb      	ldr	r3, [r7, #24]
	}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3720      	adds	r7, #32
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	461a      	mov	r2, r3
 80096c8:	21a5      	movs	r1, #165	; 0xa5
 80096ca:	f001 feff 	bl	800b4cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096d8:	3b01      	subs	r3, #1
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f023 0307 	bic.w	r3, r3, #7
 80096e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	f003 0307 	and.w	r3, r3, #7
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <prvInitialiseNewTask+0x58>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	617b      	str	r3, [r7, #20]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d01f      	beq.n	800974e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800970e:	2300      	movs	r3, #0
 8009710:	61fb      	str	r3, [r7, #28]
 8009712:	e012      	b.n	800973a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	7819      	ldrb	r1, [r3, #0]
 800971c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	4413      	add	r3, r2
 8009722:	3334      	adds	r3, #52	; 0x34
 8009724:	460a      	mov	r2, r1
 8009726:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	4413      	add	r3, r2
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d006      	beq.n	8009742 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	3301      	adds	r3, #1
 8009738:	61fb      	str	r3, [r7, #28]
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	2b0f      	cmp	r3, #15
 800973e:	d9e9      	bls.n	8009714 <prvInitialiseNewTask+0x64>
 8009740:	e000      	b.n	8009744 <prvInitialiseNewTask+0x94>
			{
				break;
 8009742:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800974c:	e003      	b.n	8009756 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	2b37      	cmp	r3, #55	; 0x37
 800975a:	d901      	bls.n	8009760 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800975c:	2337      	movs	r3, #55	; 0x37
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009764:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800976a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	2200      	movs	r2, #0
 8009770:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	3304      	adds	r3, #4
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fe56 	bl	8008428 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	3318      	adds	r3, #24
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fe51 	bl	8008428 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800978a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	2200      	movs	r2, #0
 80097a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ae:	3354      	adds	r3, #84	; 0x54
 80097b0:	224c      	movs	r2, #76	; 0x4c
 80097b2:	2100      	movs	r1, #0
 80097b4:	4618      	mov	r0, r3
 80097b6:	f001 fe89 	bl	800b4cc <memset>
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	4a0c      	ldr	r2, [pc, #48]	; (80097f0 <prvInitialiseNewTask+0x140>)
 80097be:	659a      	str	r2, [r3, #88]	; 0x58
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	4a0c      	ldr	r2, [pc, #48]	; (80097f4 <prvInitialiseNewTask+0x144>)
 80097c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	4a0b      	ldr	r2, [pc, #44]	; (80097f8 <prvInitialiseNewTask+0x148>)
 80097ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	69b8      	ldr	r0, [r7, #24]
 80097d2:	f001 fa3f 	bl	800ac54 <pxPortInitialiseStack>
 80097d6:	4602      	mov	r2, r0
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097e8:	bf00      	nop
 80097ea:	3720      	adds	r7, #32
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20002998 	.word	0x20002998
 80097f4:	20002a00 	.word	0x20002a00
 80097f8:	20002a68 	.word	0x20002a68

080097fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009804:	f001 fb56 	bl	800aeb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009808:	4b2d      	ldr	r3, [pc, #180]	; (80098c0 <prvAddNewTaskToReadyList+0xc4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3301      	adds	r3, #1
 800980e:	4a2c      	ldr	r2, [pc, #176]	; (80098c0 <prvAddNewTaskToReadyList+0xc4>)
 8009810:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009812:	4b2c      	ldr	r3, [pc, #176]	; (80098c4 <prvAddNewTaskToReadyList+0xc8>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d109      	bne.n	800982e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800981a:	4a2a      	ldr	r2, [pc, #168]	; (80098c4 <prvAddNewTaskToReadyList+0xc8>)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009820:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <prvAddNewTaskToReadyList+0xc4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d110      	bne.n	800984a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009828:	f000 fc26 	bl	800a078 <prvInitialiseTaskLists>
 800982c:	e00d      	b.n	800984a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800982e:	4b26      	ldr	r3, [pc, #152]	; (80098c8 <prvAddNewTaskToReadyList+0xcc>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009836:	4b23      	ldr	r3, [pc, #140]	; (80098c4 <prvAddNewTaskToReadyList+0xc8>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	429a      	cmp	r2, r3
 8009842:	d802      	bhi.n	800984a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009844:	4a1f      	ldr	r2, [pc, #124]	; (80098c4 <prvAddNewTaskToReadyList+0xc8>)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800984a:	4b20      	ldr	r3, [pc, #128]	; (80098cc <prvAddNewTaskToReadyList+0xd0>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3301      	adds	r3, #1
 8009850:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <prvAddNewTaskToReadyList+0xd0>)
 8009852:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009854:	4b1d      	ldr	r3, [pc, #116]	; (80098cc <prvAddNewTaskToReadyList+0xd0>)
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009860:	4b1b      	ldr	r3, [pc, #108]	; (80098d0 <prvAddNewTaskToReadyList+0xd4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	d903      	bls.n	8009870 <prvAddNewTaskToReadyList+0x74>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <prvAddNewTaskToReadyList+0xd4>)
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4a15      	ldr	r2, [pc, #84]	; (80098d4 <prvAddNewTaskToReadyList+0xd8>)
 800987e:	441a      	add	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3304      	adds	r3, #4
 8009884:	4619      	mov	r1, r3
 8009886:	4610      	mov	r0, r2
 8009888:	f7fe fddb 	bl	8008442 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800988c:	f001 fb42 	bl	800af14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009890:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <prvAddNewTaskToReadyList+0xcc>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00e      	beq.n	80098b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <prvAddNewTaskToReadyList+0xc8>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d207      	bcs.n	80098b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098a6:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvAddNewTaskToReadyList+0xdc>)
 80098a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098b6:	bf00      	nop
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000eec 	.word	0x20000eec
 80098c4:	20000a18 	.word	0x20000a18
 80098c8:	20000ef8 	.word	0x20000ef8
 80098cc:	20000f08 	.word	0x20000f08
 80098d0:	20000ef4 	.word	0x20000ef4
 80098d4:	20000a1c 	.word	0x20000a1c
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d017      	beq.n	800991e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <vTaskDelay+0x60>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <vTaskDelay+0x30>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60bb      	str	r3, [r7, #8]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800990c:	f000 f88a 	bl	8009a24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009910:	2100      	movs	r1, #0
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fdfc 	bl	800a510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009918:	f000 f892 	bl	8009a40 <xTaskResumeAll>
 800991c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d107      	bne.n	8009934 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009924:	4b06      	ldr	r3, [pc, #24]	; (8009940 <vTaskDelay+0x64>)
 8009926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009934:	bf00      	nop
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20000f14 	.word	0x20000f14
 8009940:	e000ed04 	.word	0xe000ed04

08009944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08a      	sub	sp, #40	; 0x28
 8009948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009952:	463a      	mov	r2, r7
 8009954:	1d39      	adds	r1, r7, #4
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fd10 	bl	8008380 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	9202      	str	r2, [sp, #8]
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	2300      	movs	r3, #0
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	2300      	movs	r3, #0
 8009970:	460a      	mov	r2, r1
 8009972:	4924      	ldr	r1, [pc, #144]	; (8009a04 <vTaskStartScheduler+0xc0>)
 8009974:	4824      	ldr	r0, [pc, #144]	; (8009a08 <vTaskStartScheduler+0xc4>)
 8009976:	f7ff fdf9 	bl	800956c <xTaskCreateStatic>
 800997a:	4603      	mov	r3, r0
 800997c:	4a23      	ldr	r2, [pc, #140]	; (8009a0c <vTaskStartScheduler+0xc8>)
 800997e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009980:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <vTaskStartScheduler+0xc8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009988:	2301      	movs	r3, #1
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	e001      	b.n	8009992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d102      	bne.n	800999e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009998:	f000 fe0e 	bl	800a5b8 <xTimerCreateTimerTask>
 800999c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d11b      	bne.n	80099dc <vTaskStartScheduler+0x98>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	613b      	str	r3, [r7, #16]
}
 80099b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099b8:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <vTaskStartScheduler+0xcc>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3354      	adds	r3, #84	; 0x54
 80099be:	4a15      	ldr	r2, [pc, #84]	; (8009a14 <vTaskStartScheduler+0xd0>)
 80099c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099c2:	4b15      	ldr	r3, [pc, #84]	; (8009a18 <vTaskStartScheduler+0xd4>)
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099ca:	4b14      	ldr	r3, [pc, #80]	; (8009a1c <vTaskStartScheduler+0xd8>)
 80099cc:	2201      	movs	r2, #1
 80099ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099d0:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <vTaskStartScheduler+0xdc>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099d6:	f001 f9cb 	bl	800ad70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099da:	e00e      	b.n	80099fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e2:	d10a      	bne.n	80099fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60fb      	str	r3, [r7, #12]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <vTaskStartScheduler+0xb4>
}
 80099fa:	bf00      	nop
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	0800b75c 	.word	0x0800b75c
 8009a08:	0800a049 	.word	0x0800a049
 8009a0c:	20000f10 	.word	0x20000f10
 8009a10:	20000a18 	.word	0x20000a18
 8009a14:	2000005c 	.word	0x2000005c
 8009a18:	20000f0c 	.word	0x20000f0c
 8009a1c:	20000ef8 	.word	0x20000ef8
 8009a20:	20000ef0 	.word	0x20000ef0

08009a24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a24:	b480      	push	{r7}
 8009a26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a28:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <vTaskSuspendAll+0x18>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	4a03      	ldr	r2, [pc, #12]	; (8009a3c <vTaskSuspendAll+0x18>)
 8009a30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a32:	bf00      	nop
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000f14 	.word	0x20000f14

08009a40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a4e:	4b42      	ldr	r3, [pc, #264]	; (8009b58 <xTaskResumeAll+0x118>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <xTaskResumeAll+0x2c>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	603b      	str	r3, [r7, #0]
}
 8009a68:	bf00      	nop
 8009a6a:	e7fe      	b.n	8009a6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a6c:	f001 fa22 	bl	800aeb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a70:	4b39      	ldr	r3, [pc, #228]	; (8009b58 <xTaskResumeAll+0x118>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	4a38      	ldr	r2, [pc, #224]	; (8009b58 <xTaskResumeAll+0x118>)
 8009a78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a7a:	4b37      	ldr	r3, [pc, #220]	; (8009b58 <xTaskResumeAll+0x118>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d162      	bne.n	8009b48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a82:	4b36      	ldr	r3, [pc, #216]	; (8009b5c <xTaskResumeAll+0x11c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d05e      	beq.n	8009b48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a8a:	e02f      	b.n	8009aec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a8c:	4b34      	ldr	r3, [pc, #208]	; (8009b60 <xTaskResumeAll+0x120>)
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3318      	adds	r3, #24
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fd2f 	bl	80084fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fd2a 	bl	80084fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4b2d      	ldr	r3, [pc, #180]	; (8009b64 <xTaskResumeAll+0x124>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d903      	bls.n	8009abc <xTaskResumeAll+0x7c>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	4a2a      	ldr	r2, [pc, #168]	; (8009b64 <xTaskResumeAll+0x124>)
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4a27      	ldr	r2, [pc, #156]	; (8009b68 <xTaskResumeAll+0x128>)
 8009aca:	441a      	add	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7fe fcb5 	bl	8008442 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009adc:	4b23      	ldr	r3, [pc, #140]	; (8009b6c <xTaskResumeAll+0x12c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d302      	bcc.n	8009aec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ae6:	4b22      	ldr	r3, [pc, #136]	; (8009b70 <xTaskResumeAll+0x130>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aec:	4b1c      	ldr	r3, [pc, #112]	; (8009b60 <xTaskResumeAll+0x120>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1cb      	bne.n	8009a8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009afa:	f000 fb5f 	bl	800a1bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009afe:	4b1d      	ldr	r3, [pc, #116]	; (8009b74 <xTaskResumeAll+0x134>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d010      	beq.n	8009b2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b0a:	f000 f847 	bl	8009b9c <xTaskIncrementTick>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b14:	4b16      	ldr	r3, [pc, #88]	; (8009b70 <xTaskResumeAll+0x130>)
 8009b16:	2201      	movs	r2, #1
 8009b18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1f1      	bne.n	8009b0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b26:	4b13      	ldr	r3, [pc, #76]	; (8009b74 <xTaskResumeAll+0x134>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b2c:	4b10      	ldr	r3, [pc, #64]	; (8009b70 <xTaskResumeAll+0x130>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d009      	beq.n	8009b48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b34:	2301      	movs	r3, #1
 8009b36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b38:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <xTaskResumeAll+0x138>)
 8009b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b48:	f001 f9e4 	bl	800af14 <vPortExitCritical>

	return xAlreadyYielded;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000f14 	.word	0x20000f14
 8009b5c:	20000eec 	.word	0x20000eec
 8009b60:	20000eac 	.word	0x20000eac
 8009b64:	20000ef4 	.word	0x20000ef4
 8009b68:	20000a1c 	.word	0x20000a1c
 8009b6c:	20000a18 	.word	0x20000a18
 8009b70:	20000f00 	.word	0x20000f00
 8009b74:	20000efc 	.word	0x20000efc
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <xTaskGetTickCount+0x1c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b88:	687b      	ldr	r3, [r7, #4]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	20000ef0 	.word	0x20000ef0

08009b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba6:	4b4f      	ldr	r3, [pc, #316]	; (8009ce4 <xTaskIncrementTick+0x148>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f040 808f 	bne.w	8009cce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bb0:	4b4d      	ldr	r3, [pc, #308]	; (8009ce8 <xTaskIncrementTick+0x14c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bb8:	4a4b      	ldr	r2, [pc, #300]	; (8009ce8 <xTaskIncrementTick+0x14c>)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d120      	bne.n	8009c06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bc4:	4b49      	ldr	r3, [pc, #292]	; (8009cec <xTaskIncrementTick+0x150>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	603b      	str	r3, [r7, #0]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <xTaskIncrementTick+0x46>
 8009be4:	4b41      	ldr	r3, [pc, #260]	; (8009cec <xTaskIncrementTick+0x150>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60fb      	str	r3, [r7, #12]
 8009bea:	4b41      	ldr	r3, [pc, #260]	; (8009cf0 <xTaskIncrementTick+0x154>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a3f      	ldr	r2, [pc, #252]	; (8009cec <xTaskIncrementTick+0x150>)
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	4a3f      	ldr	r2, [pc, #252]	; (8009cf0 <xTaskIncrementTick+0x154>)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	4b3e      	ldr	r3, [pc, #248]	; (8009cf4 <xTaskIncrementTick+0x158>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	4a3d      	ldr	r2, [pc, #244]	; (8009cf4 <xTaskIncrementTick+0x158>)
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	f000 fadb 	bl	800a1bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c06:	4b3c      	ldr	r3, [pc, #240]	; (8009cf8 <xTaskIncrementTick+0x15c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d349      	bcc.n	8009ca4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c10:	4b36      	ldr	r3, [pc, #216]	; (8009cec <xTaskIncrementTick+0x150>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d104      	bne.n	8009c24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c1a:	4b37      	ldr	r3, [pc, #220]	; (8009cf8 <xTaskIncrementTick+0x15c>)
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c20:	601a      	str	r2, [r3, #0]
					break;
 8009c22:	e03f      	b.n	8009ca4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c24:	4b31      	ldr	r3, [pc, #196]	; (8009cec <xTaskIncrementTick+0x150>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d203      	bcs.n	8009c44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c3c:	4a2e      	ldr	r2, [pc, #184]	; (8009cf8 <xTaskIncrementTick+0x15c>)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c42:	e02f      	b.n	8009ca4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	3304      	adds	r3, #4
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe fc57 	bl	80084fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d004      	beq.n	8009c60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	3318      	adds	r3, #24
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe fc4e 	bl	80084fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c64:	4b25      	ldr	r3, [pc, #148]	; (8009cfc <xTaskIncrementTick+0x160>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d903      	bls.n	8009c74 <xTaskIncrementTick+0xd8>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c70:	4a22      	ldr	r2, [pc, #136]	; (8009cfc <xTaskIncrementTick+0x160>)
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4a1f      	ldr	r2, [pc, #124]	; (8009d00 <xTaskIncrementTick+0x164>)
 8009c82:	441a      	add	r2, r3
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f7fe fbd9 	bl	8008442 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c94:	4b1b      	ldr	r3, [pc, #108]	; (8009d04 <xTaskIncrementTick+0x168>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d3b8      	bcc.n	8009c10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ca2:	e7b5      	b.n	8009c10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ca4:	4b17      	ldr	r3, [pc, #92]	; (8009d04 <xTaskIncrementTick+0x168>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009caa:	4915      	ldr	r1, [pc, #84]	; (8009d00 <xTaskIncrementTick+0x164>)
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d901      	bls.n	8009cc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cc0:	4b11      	ldr	r3, [pc, #68]	; (8009d08 <xTaskIncrementTick+0x16c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d007      	beq.n	8009cd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	617b      	str	r3, [r7, #20]
 8009ccc:	e004      	b.n	8009cd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cce:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <xTaskIncrementTick+0x170>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	4a0d      	ldr	r2, [pc, #52]	; (8009d0c <xTaskIncrementTick+0x170>)
 8009cd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cd8:	697b      	ldr	r3, [r7, #20]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000f14 	.word	0x20000f14
 8009ce8:	20000ef0 	.word	0x20000ef0
 8009cec:	20000ea4 	.word	0x20000ea4
 8009cf0:	20000ea8 	.word	0x20000ea8
 8009cf4:	20000f04 	.word	0x20000f04
 8009cf8:	20000f0c 	.word	0x20000f0c
 8009cfc:	20000ef4 	.word	0x20000ef4
 8009d00:	20000a1c 	.word	0x20000a1c
 8009d04:	20000a18 	.word	0x20000a18
 8009d08:	20000f00 	.word	0x20000f00
 8009d0c:	20000efc 	.word	0x20000efc

08009d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d16:	4b2a      	ldr	r3, [pc, #168]	; (8009dc0 <vTaskSwitchContext+0xb0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d1e:	4b29      	ldr	r3, [pc, #164]	; (8009dc4 <vTaskSwitchContext+0xb4>)
 8009d20:	2201      	movs	r2, #1
 8009d22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d24:	e046      	b.n	8009db4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009d26:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <vTaskSwitchContext+0xb4>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d2c:	4b26      	ldr	r3, [pc, #152]	; (8009dc8 <vTaskSwitchContext+0xb8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	e010      	b.n	8009d56 <vTaskSwitchContext+0x46>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	607b      	str	r3, [r7, #4]
}
 8009d4c:	bf00      	nop
 8009d4e:	e7fe      	b.n	8009d4e <vTaskSwitchContext+0x3e>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	60fb      	str	r3, [r7, #12]
 8009d56:	491d      	ldr	r1, [pc, #116]	; (8009dcc <vTaskSwitchContext+0xbc>)
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	440b      	add	r3, r1
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0e4      	beq.n	8009d34 <vTaskSwitchContext+0x24>
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4a15      	ldr	r2, [pc, #84]	; (8009dcc <vTaskSwitchContext+0xbc>)
 8009d76:	4413      	add	r3, r2
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	605a      	str	r2, [r3, #4]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d104      	bne.n	8009d9a <vTaskSwitchContext+0x8a>
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	605a      	str	r2, [r3, #4]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	4a0b      	ldr	r2, [pc, #44]	; (8009dd0 <vTaskSwitchContext+0xc0>)
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	4a08      	ldr	r2, [pc, #32]	; (8009dc8 <vTaskSwitchContext+0xb8>)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <vTaskSwitchContext+0xc0>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3354      	adds	r3, #84	; 0x54
 8009db0:	4a08      	ldr	r2, [pc, #32]	; (8009dd4 <vTaskSwitchContext+0xc4>)
 8009db2:	6013      	str	r3, [r2, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	20000f14 	.word	0x20000f14
 8009dc4:	20000f00 	.word	0x20000f00
 8009dc8:	20000ef4 	.word	0x20000ef4
 8009dcc:	20000a1c 	.word	0x20000a1c
 8009dd0:	20000a18 	.word	0x20000a18
 8009dd4:	2000005c 	.word	0x2000005c

08009dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	60fb      	str	r3, [r7, #12]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dfe:	4b07      	ldr	r3, [pc, #28]	; (8009e1c <vTaskPlaceOnEventList+0x44>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3318      	adds	r3, #24
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7fe fb3f 	bl	800848a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	6838      	ldr	r0, [r7, #0]
 8009e10:	f000 fb7e 	bl	800a510 <prvAddCurrentTaskToDelayedList>
}
 8009e14:	bf00      	nop
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	20000a18 	.word	0x20000a18

08009e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	617b      	str	r3, [r7, #20]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e48:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3318      	adds	r3, #24
 8009e4e:	4619      	mov	r1, r3
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f7fe faf6 	bl	8008442 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	68b8      	ldr	r0, [r7, #8]
 8009e66:	f000 fb53 	bl	800a510 <prvAddCurrentTaskToDelayedList>
	}
 8009e6a:	bf00      	nop
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20000a18 	.word	0x20000a18

08009e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	60fb      	str	r3, [r7, #12]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	3318      	adds	r3, #24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe fb27 	bl	80084fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eae:	4b1e      	ldr	r3, [pc, #120]	; (8009f28 <xTaskRemoveFromEventList+0xb0>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d11d      	bne.n	8009ef2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fb1e 	bl	80084fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec4:	4b19      	ldr	r3, [pc, #100]	; (8009f2c <xTaskRemoveFromEventList+0xb4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d903      	bls.n	8009ed4 <xTaskRemoveFromEventList+0x5c>
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	4a16      	ldr	r2, [pc, #88]	; (8009f2c <xTaskRemoveFromEventList+0xb4>)
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4a13      	ldr	r2, [pc, #76]	; (8009f30 <xTaskRemoveFromEventList+0xb8>)
 8009ee2:	441a      	add	r2, r3
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4610      	mov	r0, r2
 8009eec:	f7fe faa9 	bl	8008442 <vListInsertEnd>
 8009ef0:	e005      	b.n	8009efe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	3318      	adds	r3, #24
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	480e      	ldr	r0, [pc, #56]	; (8009f34 <xTaskRemoveFromEventList+0xbc>)
 8009efa:	f7fe faa2 	bl	8008442 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f02:	4b0d      	ldr	r3, [pc, #52]	; (8009f38 <xTaskRemoveFromEventList+0xc0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d905      	bls.n	8009f18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f10:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <xTaskRemoveFromEventList+0xc4>)
 8009f12:	2201      	movs	r2, #1
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	e001      	b.n	8009f1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f1c:	697b      	ldr	r3, [r7, #20]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20000f14 	.word	0x20000f14
 8009f2c:	20000ef4 	.word	0x20000ef4
 8009f30:	20000a1c 	.word	0x20000a1c
 8009f34:	20000eac 	.word	0x20000eac
 8009f38:	20000a18 	.word	0x20000a18
 8009f3c:	20000f00 	.word	0x20000f00

08009f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <vTaskInternalSetTimeOutState+0x24>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f50:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <vTaskInternalSetTimeOutState+0x28>)
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	20000f04 	.word	0x20000f04
 8009f68:	20000ef0 	.word	0x20000ef0

08009f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	613b      	str	r3, [r7, #16]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	60fb      	str	r3, [r7, #12]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009fae:	f000 ff81 	bl	800aeb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fb2:	4b1d      	ldr	r3, [pc, #116]	; (800a028 <xTaskCheckForTimeOut+0xbc>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fca:	d102      	bne.n	8009fd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	61fb      	str	r3, [r7, #28]
 8009fd0:	e023      	b.n	800a01a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	4b15      	ldr	r3, [pc, #84]	; (800a02c <xTaskCheckForTimeOut+0xc0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d007      	beq.n	8009fee <xTaskCheckForTimeOut+0x82>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	69ba      	ldr	r2, [r7, #24]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d302      	bcc.n	8009fee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	e015      	b.n	800a01a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d20b      	bcs.n	800a010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ff9b 	bl	8009f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
 800a00e:	e004      	b.n	800a01a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a016:	2301      	movs	r3, #1
 800a018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a01a:	f000 ff7b 	bl	800af14 <vPortExitCritical>

	return xReturn;
 800a01e:	69fb      	ldr	r3, [r7, #28]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20000ef0 	.word	0x20000ef0
 800a02c:	20000f04 	.word	0x20000f04

0800a030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a034:	4b03      	ldr	r3, [pc, #12]	; (800a044 <vTaskMissedYield+0x14>)
 800a036:	2201      	movs	r2, #1
 800a038:	601a      	str	r2, [r3, #0]
}
 800a03a:	bf00      	nop
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	20000f00 	.word	0x20000f00

0800a048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a050:	f000 f852 	bl	800a0f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a054:	4b06      	ldr	r3, [pc, #24]	; (800a070 <prvIdleTask+0x28>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d9f9      	bls.n	800a050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <prvIdleTask+0x2c>)
 800a05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a06c:	e7f0      	b.n	800a050 <prvIdleTask+0x8>
 800a06e:	bf00      	nop
 800a070:	20000a1c 	.word	0x20000a1c
 800a074:	e000ed04 	.word	0xe000ed04

0800a078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a07e:	2300      	movs	r3, #0
 800a080:	607b      	str	r3, [r7, #4]
 800a082:	e00c      	b.n	800a09e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4a12      	ldr	r2, [pc, #72]	; (800a0d8 <prvInitialiseTaskLists+0x60>)
 800a090:	4413      	add	r3, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe f9a8 	bl	80083e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3301      	adds	r3, #1
 800a09c:	607b      	str	r3, [r7, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b37      	cmp	r3, #55	; 0x37
 800a0a2:	d9ef      	bls.n	800a084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0a4:	480d      	ldr	r0, [pc, #52]	; (800a0dc <prvInitialiseTaskLists+0x64>)
 800a0a6:	f7fe f99f 	bl	80083e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0aa:	480d      	ldr	r0, [pc, #52]	; (800a0e0 <prvInitialiseTaskLists+0x68>)
 800a0ac:	f7fe f99c 	bl	80083e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0b0:	480c      	ldr	r0, [pc, #48]	; (800a0e4 <prvInitialiseTaskLists+0x6c>)
 800a0b2:	f7fe f999 	bl	80083e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0b6:	480c      	ldr	r0, [pc, #48]	; (800a0e8 <prvInitialiseTaskLists+0x70>)
 800a0b8:	f7fe f996 	bl	80083e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0bc:	480b      	ldr	r0, [pc, #44]	; (800a0ec <prvInitialiseTaskLists+0x74>)
 800a0be:	f7fe f993 	bl	80083e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <prvInitialiseTaskLists+0x78>)
 800a0c4:	4a05      	ldr	r2, [pc, #20]	; (800a0dc <prvInitialiseTaskLists+0x64>)
 800a0c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0c8:	4b0a      	ldr	r3, [pc, #40]	; (800a0f4 <prvInitialiseTaskLists+0x7c>)
 800a0ca:	4a05      	ldr	r2, [pc, #20]	; (800a0e0 <prvInitialiseTaskLists+0x68>)
 800a0cc:	601a      	str	r2, [r3, #0]
}
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20000a1c 	.word	0x20000a1c
 800a0dc:	20000e7c 	.word	0x20000e7c
 800a0e0:	20000e90 	.word	0x20000e90
 800a0e4:	20000eac 	.word	0x20000eac
 800a0e8:	20000ec0 	.word	0x20000ec0
 800a0ec:	20000ed8 	.word	0x20000ed8
 800a0f0:	20000ea4 	.word	0x20000ea4
 800a0f4:	20000ea8 	.word	0x20000ea8

0800a0f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0fe:	e019      	b.n	800a134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a100:	f000 fed8 	bl	800aeb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a104:	4b10      	ldr	r3, [pc, #64]	; (800a148 <prvCheckTasksWaitingTermination+0x50>)
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3304      	adds	r3, #4
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe f9f3 	bl	80084fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <prvCheckTasksWaitingTermination+0x54>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	4a0b      	ldr	r2, [pc, #44]	; (800a14c <prvCheckTasksWaitingTermination+0x54>)
 800a11e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <prvCheckTasksWaitingTermination+0x58>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3b01      	subs	r3, #1
 800a126:	4a0a      	ldr	r2, [pc, #40]	; (800a150 <prvCheckTasksWaitingTermination+0x58>)
 800a128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a12a:	f000 fef3 	bl	800af14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f810 	bl	800a154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <prvCheckTasksWaitingTermination+0x58>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e1      	bne.n	800a100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a13c:	bf00      	nop
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000ec0 	.word	0x20000ec0
 800a14c:	20000eec 	.word	0x20000eec
 800a150:	20000ed4 	.word	0x20000ed4

0800a154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3354      	adds	r3, #84	; 0x54
 800a160:	4618      	mov	r0, r3
 800a162:	f001 f9bb 	bl	800b4dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d108      	bne.n	800a182 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a174:	4618      	mov	r0, r3
 800a176:	f001 f88b 	bl	800b290 <vPortFree>
				vPortFree( pxTCB );
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f001 f888 	bl	800b290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a180:	e018      	b.n	800a1b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d103      	bne.n	800a194 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 f87f 	bl	800b290 <vPortFree>
	}
 800a192:	e00f      	b.n	800a1b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d00a      	beq.n	800a1b4 <prvDeleteTCB+0x60>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	60fb      	str	r3, [r7, #12]
}
 800a1b0:	bf00      	nop
 800a1b2:	e7fe      	b.n	800a1b2 <prvDeleteTCB+0x5e>
	}
 800a1b4:	bf00      	nop
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1c2:	4b0c      	ldr	r3, [pc, #48]	; (800a1f4 <prvResetNextTaskUnblockTime+0x38>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1d4:	e008      	b.n	800a1e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1d6:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <prvResetNextTaskUnblockTime+0x38>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	4a04      	ldr	r2, [pc, #16]	; (800a1f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1e6:	6013      	str	r3, [r2, #0]
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	20000ea4 	.word	0x20000ea4
 800a1f8:	20000f0c 	.word	0x20000f0c

0800a1fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <xTaskGetSchedulerState+0x34>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a20a:	2301      	movs	r3, #1
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	e008      	b.n	800a222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a210:	4b08      	ldr	r3, [pc, #32]	; (800a234 <xTaskGetSchedulerState+0x38>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a218:	2302      	movs	r3, #2
 800a21a:	607b      	str	r3, [r7, #4]
 800a21c:	e001      	b.n	800a222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a21e:	2300      	movs	r3, #0
 800a220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a222:	687b      	ldr	r3, [r7, #4]
	}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	20000ef8 	.word	0x20000ef8
 800a234:	20000f14 	.word	0x20000f14

0800a238 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a244:	2300      	movs	r3, #0
 800a246:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d051      	beq.n	800a2f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	4b2a      	ldr	r3, [pc, #168]	; (800a2fc <xTaskPriorityInherit+0xc4>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d241      	bcs.n	800a2e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	2b00      	cmp	r3, #0
 800a262:	db06      	blt.n	800a272 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a264:	4b25      	ldr	r3, [pc, #148]	; (800a2fc <xTaskPriorityInherit+0xc4>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6959      	ldr	r1, [r3, #20]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4a1f      	ldr	r2, [pc, #124]	; (800a300 <xTaskPriorityInherit+0xc8>)
 800a284:	4413      	add	r3, r2
 800a286:	4299      	cmp	r1, r3
 800a288:	d122      	bne.n	800a2d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	3304      	adds	r3, #4
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe f934 	bl	80084fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a294:	4b19      	ldr	r3, [pc, #100]	; (800a2fc <xTaskPriorityInherit+0xc4>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a2:	4b18      	ldr	r3, [pc, #96]	; (800a304 <xTaskPriorityInherit+0xcc>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d903      	bls.n	800a2b2 <xTaskPriorityInherit+0x7a>
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	4a15      	ldr	r2, [pc, #84]	; (800a304 <xTaskPriorityInherit+0xcc>)
 800a2b0:	6013      	str	r3, [r2, #0]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4a10      	ldr	r2, [pc, #64]	; (800a300 <xTaskPriorityInherit+0xc8>)
 800a2c0:	441a      	add	r2, r3
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f7fe f8ba 	bl	8008442 <vListInsertEnd>
 800a2ce:	e004      	b.n	800a2da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <xTaskPriorityInherit+0xc4>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	e008      	b.n	800a2f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <xTaskPriorityInherit+0xc4>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d201      	bcs.n	800a2f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
	}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	20000a18 	.word	0x20000a18
 800a300:	20000a1c 	.word	0x20000a1c
 800a304:	20000ef4 	.word	0x20000ef4

0800a308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a314:	2300      	movs	r3, #0
 800a316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d056      	beq.n	800a3cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a31e:	4b2e      	ldr	r3, [pc, #184]	; (800a3d8 <xTaskPriorityDisinherit+0xd0>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	429a      	cmp	r2, r3
 800a326:	d00a      	beq.n	800a33e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60fb      	str	r3, [r7, #12]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10a      	bne.n	800a35c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	60bb      	str	r3, [r7, #8]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a360:	1e5a      	subs	r2, r3, #1
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36e:	429a      	cmp	r2, r3
 800a370:	d02c      	beq.n	800a3cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a376:	2b00      	cmp	r3, #0
 800a378:	d128      	bne.n	800a3cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe f8bc 	bl	80084fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39c:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <xTaskPriorityDisinherit+0xd4>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d903      	bls.n	800a3ac <xTaskPriorityDisinherit+0xa4>
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	4a0c      	ldr	r2, [pc, #48]	; (800a3dc <xTaskPriorityDisinherit+0xd4>)
 800a3aa:	6013      	str	r3, [r2, #0]
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4a09      	ldr	r2, [pc, #36]	; (800a3e0 <xTaskPriorityDisinherit+0xd8>)
 800a3ba:	441a      	add	r2, r3
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f7fe f83d 	bl	8008442 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3cc:	697b      	ldr	r3, [r7, #20]
	}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000a18 	.word	0x20000a18
 800a3dc:	20000ef4 	.word	0x20000ef4
 800a3e0:	20000a1c 	.word	0x20000a1c

0800a3e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d06a      	beq.n	800a4d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	60fb      	str	r3, [r7, #12]
}
 800a416:	bf00      	nop
 800a418:	e7fe      	b.n	800a418 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	429a      	cmp	r2, r3
 800a422:	d902      	bls.n	800a42a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	61fb      	str	r3, [r7, #28]
 800a428:	e002      	b.n	800a430 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	69fa      	ldr	r2, [r7, #28]
 800a436:	429a      	cmp	r2, r3
 800a438:	d04b      	beq.n	800a4d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	429a      	cmp	r2, r3
 800a442:	d146      	bne.n	800a4d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a444:	4b25      	ldr	r3, [pc, #148]	; (800a4dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d10a      	bne.n	800a464 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	60bb      	str	r3, [r7, #8]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	69fa      	ldr	r2, [r7, #28]
 800a46e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	2b00      	cmp	r3, #0
 800a476:	db04      	blt.n	800a482 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	6959      	ldr	r1, [r3, #20]
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4a13      	ldr	r2, [pc, #76]	; (800a4e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a492:	4413      	add	r3, r2
 800a494:	4299      	cmp	r1, r3
 800a496:	d11c      	bne.n	800a4d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe f82d 	bl	80084fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a6:	4b0f      	ldr	r3, [pc, #60]	; (800a4e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d903      	bls.n	800a4b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b2:	4a0c      	ldr	r2, [pc, #48]	; (800a4e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4a07      	ldr	r2, [pc, #28]	; (800a4e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a4c4:	441a      	add	r2, r3
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	f7fd ffb8 	bl	8008442 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4d2:	bf00      	nop
 800a4d4:	3720      	adds	r7, #32
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000a18 	.word	0x20000a18
 800a4e0:	20000a1c 	.word	0x20000a1c
 800a4e4:	20000ef4 	.word	0x20000ef4

0800a4e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4e8:	b480      	push	{r7}
 800a4ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4ec:	4b07      	ldr	r3, [pc, #28]	; (800a50c <pvTaskIncrementMutexHeldCount+0x24>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d004      	beq.n	800a4fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4f4:	4b05      	ldr	r3, [pc, #20]	; (800a50c <pvTaskIncrementMutexHeldCount+0x24>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a4fe:	4b03      	ldr	r3, [pc, #12]	; (800a50c <pvTaskIncrementMutexHeldCount+0x24>)
 800a500:	681b      	ldr	r3, [r3, #0]
	}
 800a502:	4618      	mov	r0, r3
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	20000a18 	.word	0x20000a18

0800a510 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a51a:	4b21      	ldr	r3, [pc, #132]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a520:	4b20      	ldr	r3, [pc, #128]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3304      	adds	r3, #4
 800a526:	4618      	mov	r0, r3
 800a528:	f7fd ffe8 	bl	80084fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a532:	d10a      	bne.n	800a54a <prvAddCurrentTaskToDelayedList+0x3a>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d007      	beq.n	800a54a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a53a:	4b1a      	ldr	r3, [pc, #104]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3304      	adds	r3, #4
 800a540:	4619      	mov	r1, r3
 800a542:	4819      	ldr	r0, [pc, #100]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a544:	f7fd ff7d 	bl	8008442 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a548:	e026      	b.n	800a598 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4413      	add	r3, r2
 800a550:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a552:	4b14      	ldr	r3, [pc, #80]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d209      	bcs.n	800a576 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a562:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f7fd ff8b 	bl	800848a <vListInsert>
}
 800a574:	e010      	b.n	800a598 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a576:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3304      	adds	r3, #4
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7fd ff81 	bl	800848a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d202      	bcs.n	800a598 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a592:	4a08      	ldr	r2, [pc, #32]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	6013      	str	r3, [r2, #0]
}
 800a598:	bf00      	nop
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20000ef0 	.word	0x20000ef0
 800a5a4:	20000a18 	.word	0x20000a18
 800a5a8:	20000ed8 	.word	0x20000ed8
 800a5ac:	20000ea8 	.word	0x20000ea8
 800a5b0:	20000ea4 	.word	0x20000ea4
 800a5b4:	20000f0c 	.word	0x20000f0c

0800a5b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5c2:	f000 fb07 	bl	800abd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5c6:	4b1c      	ldr	r3, [pc, #112]	; (800a638 <xTimerCreateTimerTask+0x80>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d021      	beq.n	800a612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5d6:	1d3a      	adds	r2, r7, #4
 800a5d8:	f107 0108 	add.w	r1, r7, #8
 800a5dc:	f107 030c 	add.w	r3, r7, #12
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fd fee7 	bl	80083b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	9202      	str	r2, [sp, #8]
 800a5ee:	9301      	str	r3, [sp, #4]
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	460a      	mov	r2, r1
 800a5f8:	4910      	ldr	r1, [pc, #64]	; (800a63c <xTimerCreateTimerTask+0x84>)
 800a5fa:	4811      	ldr	r0, [pc, #68]	; (800a640 <xTimerCreateTimerTask+0x88>)
 800a5fc:	f7fe ffb6 	bl	800956c <xTaskCreateStatic>
 800a600:	4603      	mov	r3, r0
 800a602:	4a10      	ldr	r2, [pc, #64]	; (800a644 <xTimerCreateTimerTask+0x8c>)
 800a604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a606:	4b0f      	ldr	r3, [pc, #60]	; (800a644 <xTimerCreateTimerTask+0x8c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d001      	beq.n	800a612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a60e:	2301      	movs	r3, #1
 800a610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	613b      	str	r3, [r7, #16]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a62e:	697b      	ldr	r3, [r7, #20]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000f48 	.word	0x20000f48
 800a63c:	0800b764 	.word	0x0800b764
 800a640:	0800a77d 	.word	0x0800a77d
 800a644:	20000f4c 	.word	0x20000f4c

0800a648 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08a      	sub	sp, #40	; 0x28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a656:	2300      	movs	r3, #0
 800a658:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	623b      	str	r3, [r7, #32]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a676:	4b1a      	ldr	r3, [pc, #104]	; (800a6e0 <xTimerGenericCommand+0x98>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d02a      	beq.n	800a6d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b05      	cmp	r3, #5
 800a68e:	dc18      	bgt.n	800a6c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a690:	f7ff fdb4 	bl	800a1fc <xTaskGetSchedulerState>
 800a694:	4603      	mov	r3, r0
 800a696:	2b02      	cmp	r3, #2
 800a698:	d109      	bne.n	800a6ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a69a:	4b11      	ldr	r3, [pc, #68]	; (800a6e0 <xTimerGenericCommand+0x98>)
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	f107 0110 	add.w	r1, r7, #16
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a6:	f7fe f8fb 	bl	80088a0 <xQueueGenericSend>
 800a6aa:	6278      	str	r0, [r7, #36]	; 0x24
 800a6ac:	e012      	b.n	800a6d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6ae:	4b0c      	ldr	r3, [pc, #48]	; (800a6e0 <xTimerGenericCommand+0x98>)
 800a6b0:	6818      	ldr	r0, [r3, #0]
 800a6b2:	f107 0110 	add.w	r1, r7, #16
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f7fe f8f1 	bl	80088a0 <xQueueGenericSend>
 800a6be:	6278      	str	r0, [r7, #36]	; 0x24
 800a6c0:	e008      	b.n	800a6d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6c2:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <xTimerGenericCommand+0x98>)
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	f107 0110 	add.w	r1, r7, #16
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	f7fe f9e5 	bl	8008a9c <xQueueGenericSendFromISR>
 800a6d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3728      	adds	r7, #40	; 0x28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20000f48 	.word	0x20000f48

0800a6e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af02      	add	r7, sp, #8
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ee:	4b22      	ldr	r3, [pc, #136]	; (800a778 <prvProcessExpiredTimer+0x94>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fd fefd 	bl	80084fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d022      	beq.n	800a756 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	699a      	ldr	r2, [r3, #24]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	18d1      	adds	r1, r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	6978      	ldr	r0, [r7, #20]
 800a71e:	f000 f8d1 	bl	800a8c4 <prvInsertTimerInActiveList>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d01f      	beq.n	800a768 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a728:	2300      	movs	r3, #0
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	2300      	movs	r3, #0
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	2100      	movs	r1, #0
 800a732:	6978      	ldr	r0, [r7, #20]
 800a734:	f7ff ff88 	bl	800a648 <xTimerGenericCommand>
 800a738:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d113      	bne.n	800a768 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	60fb      	str	r3, [r7, #12]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a75c:	f023 0301 	bic.w	r3, r3, #1
 800a760:	b2da      	uxtb	r2, r3
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	6a1b      	ldr	r3, [r3, #32]
 800a76c:	6978      	ldr	r0, [r7, #20]
 800a76e:	4798      	blx	r3
}
 800a770:	bf00      	nop
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20000f40 	.word	0x20000f40

0800a77c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a784:	f107 0308 	add.w	r3, r7, #8
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 f857 	bl	800a83c <prvGetNextExpireTime>
 800a78e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	4619      	mov	r1, r3
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 f803 	bl	800a7a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a79a:	f000 f8d5 	bl	800a948 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a79e:	e7f1      	b.n	800a784 <prvTimerTask+0x8>

0800a7a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7aa:	f7ff f93b 	bl	8009a24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f866 	bl	800a884 <prvSampleTimeNow>
 800a7b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d130      	bne.n	800a822 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <prvProcessTimerOrBlockTask+0x3c>
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d806      	bhi.n	800a7dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7ce:	f7ff f937 	bl	8009a40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7d2:	68f9      	ldr	r1, [r7, #12]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff ff85 	bl	800a6e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7da:	e024      	b.n	800a826 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d008      	beq.n	800a7f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7e2:	4b13      	ldr	r3, [pc, #76]	; (800a830 <prvProcessTimerOrBlockTask+0x90>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d101      	bne.n	800a7f0 <prvProcessTimerOrBlockTask+0x50>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e000      	b.n	800a7f2 <prvProcessTimerOrBlockTask+0x52>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7f4:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <prvProcessTimerOrBlockTask+0x94>)
 800a7f6:	6818      	ldr	r0, [r3, #0]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	4619      	mov	r1, r3
 800a802:	f7fe fe7f 	bl	8009504 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a806:	f7ff f91b 	bl	8009a40 <xTaskResumeAll>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10a      	bne.n	800a826 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a810:	4b09      	ldr	r3, [pc, #36]	; (800a838 <prvProcessTimerOrBlockTask+0x98>)
 800a812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
}
 800a820:	e001      	b.n	800a826 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a822:	f7ff f90d 	bl	8009a40 <xTaskResumeAll>
}
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20000f44 	.word	0x20000f44
 800a834:	20000f48 	.word	0x20000f48
 800a838:	e000ed04 	.word	0xe000ed04

0800a83c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a844:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <prvGetNextExpireTime+0x44>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <prvGetNextExpireTime+0x16>
 800a84e:	2201      	movs	r2, #1
 800a850:	e000      	b.n	800a854 <prvGetNextExpireTime+0x18>
 800a852:	2200      	movs	r2, #0
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d105      	bne.n	800a86c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a860:	4b07      	ldr	r3, [pc, #28]	; (800a880 <prvGetNextExpireTime+0x44>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	e001      	b.n	800a870 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a870:	68fb      	ldr	r3, [r7, #12]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	20000f40 	.word	0x20000f40

0800a884 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a88c:	f7ff f976 	bl	8009b7c <xTaskGetTickCount>
 800a890:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a892:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <prvSampleTimeNow+0x3c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d205      	bcs.n	800a8a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a89c:	f000 f936 	bl	800ab0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	e002      	b.n	800a8ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8ae:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <prvSampleTimeNow+0x3c>)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000f50 	.word	0x20000f50

0800a8c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
 800a8d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d812      	bhi.n	800a910 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	1ad2      	subs	r2, r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d302      	bcc.n	800a8fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	e01b      	b.n	800a936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8fe:	4b10      	ldr	r3, [pc, #64]	; (800a940 <prvInsertTimerInActiveList+0x7c>)
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3304      	adds	r3, #4
 800a906:	4619      	mov	r1, r3
 800a908:	4610      	mov	r0, r2
 800a90a:	f7fd fdbe 	bl	800848a <vListInsert>
 800a90e:	e012      	b.n	800a936 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	429a      	cmp	r2, r3
 800a916:	d206      	bcs.n	800a926 <prvInsertTimerInActiveList+0x62>
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d302      	bcc.n	800a926 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a920:	2301      	movs	r3, #1
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	e007      	b.n	800a936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a926:	4b07      	ldr	r3, [pc, #28]	; (800a944 <prvInsertTimerInActiveList+0x80>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3304      	adds	r3, #4
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f7fd fdaa 	bl	800848a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a936:	697b      	ldr	r3, [r7, #20]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	20000f44 	.word	0x20000f44
 800a944:	20000f40 	.word	0x20000f40

0800a948 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08e      	sub	sp, #56	; 0x38
 800a94c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a94e:	e0ca      	b.n	800aae6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	da18      	bge.n	800a988 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a956:	1d3b      	adds	r3, r7, #4
 800a958:	3304      	adds	r3, #4
 800a95a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10a      	bne.n	800a978 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	61fb      	str	r3, [r7, #28]
}
 800a974:	bf00      	nop
 800a976:	e7fe      	b.n	800a976 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a97e:	6850      	ldr	r0, [r2, #4]
 800a980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a982:	6892      	ldr	r2, [r2, #8]
 800a984:	4611      	mov	r1, r2
 800a986:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f2c0 80ab 	blt.w	800aae6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	3304      	adds	r3, #4
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fd fdab 	bl	80084fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9a6:	463b      	mov	r3, r7
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7ff ff6b 	bl	800a884 <prvSampleTimeNow>
 800a9ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b09      	cmp	r3, #9
 800a9b4:	f200 8096 	bhi.w	800aae4 <prvProcessReceivedCommands+0x19c>
 800a9b8:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <prvProcessReceivedCommands+0x78>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800a9e9 	.word	0x0800a9e9
 800a9c4:	0800a9e9 	.word	0x0800a9e9
 800a9c8:	0800a9e9 	.word	0x0800a9e9
 800a9cc:	0800aa5d 	.word	0x0800aa5d
 800a9d0:	0800aa71 	.word	0x0800aa71
 800a9d4:	0800aabb 	.word	0x0800aabb
 800a9d8:	0800a9e9 	.word	0x0800a9e9
 800a9dc:	0800a9e9 	.word	0x0800a9e9
 800a9e0:	0800aa5d 	.word	0x0800aa5d
 800a9e4:	0800aa71 	.word	0x0800aa71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ee:	f043 0301 	orr.w	r3, r3, #1
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	18d1      	adds	r1, r2, r3
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa08:	f7ff ff5c 	bl	800a8c4 <prvInsertTimerInActiveList>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d069      	beq.n	800aae6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d05e      	beq.n	800aae6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	441a      	add	r2, r3
 800aa30:	2300      	movs	r3, #0
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	2300      	movs	r3, #0
 800aa36:	2100      	movs	r1, #0
 800aa38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3a:	f7ff fe05 	bl	800a648 <xTimerGenericCommand>
 800aa3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d14f      	bne.n	800aae6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	61bb      	str	r3, [r7, #24]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa62:	f023 0301 	bic.w	r3, r3, #1
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa6e:	e03a      	b.n	800aae6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa76:	f043 0301 	orr.w	r3, r3, #1
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa82:	68ba      	ldr	r2, [r7, #8]
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10a      	bne.n	800aaa6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	617b      	str	r3, [r7, #20]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	699a      	ldr	r2, [r3, #24]
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	18d1      	adds	r1, r2, r3
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab4:	f7ff ff06 	bl	800a8c4 <prvInsertTimerInActiveList>
					break;
 800aab8:	e015      	b.n	800aae6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaca:	f000 fbe1 	bl	800b290 <vPortFree>
 800aace:	e00a      	b.n	800aae6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad6:	f023 0301 	bic.w	r3, r3, #1
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aae2:	e000      	b.n	800aae6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800aae4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aae6:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <prvProcessReceivedCommands+0x1c0>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	1d39      	adds	r1, r7, #4
 800aaec:	2200      	movs	r2, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe f8fc 	bl	8008cec <xQueueReceive>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f47f af2a 	bne.w	800a950 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aafc:	bf00      	nop
 800aafe:	bf00      	nop
 800ab00:	3730      	adds	r7, #48	; 0x30
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20000f48 	.word	0x20000f48

0800ab0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab12:	e048      	b.n	800aba6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab14:	4b2d      	ldr	r3, [pc, #180]	; (800abcc <prvSwitchTimerLists+0xc0>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab1e:	4b2b      	ldr	r3, [pc, #172]	; (800abcc <prvSwitchTimerLists+0xc0>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fd fce5 	bl	80084fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d02e      	beq.n	800aba6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	4413      	add	r3, r2
 800ab50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d90e      	bls.n	800ab78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab66:	4b19      	ldr	r3, [pc, #100]	; (800abcc <prvSwitchTimerLists+0xc0>)
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	4619      	mov	r1, r3
 800ab70:	4610      	mov	r0, r2
 800ab72:	f7fd fc8a 	bl	800848a <vListInsert>
 800ab76:	e016      	b.n	800aba6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab78:	2300      	movs	r3, #0
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	2100      	movs	r1, #0
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fd60 	bl	800a648 <xTimerGenericCommand>
 800ab88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10a      	bne.n	800aba6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	603b      	str	r3, [r7, #0]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aba6:	4b09      	ldr	r3, [pc, #36]	; (800abcc <prvSwitchTimerLists+0xc0>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1b1      	bne.n	800ab14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abb0:	4b06      	ldr	r3, [pc, #24]	; (800abcc <prvSwitchTimerLists+0xc0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abb6:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <prvSwitchTimerLists+0xc4>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a04      	ldr	r2, [pc, #16]	; (800abcc <prvSwitchTimerLists+0xc0>)
 800abbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abbe:	4a04      	ldr	r2, [pc, #16]	; (800abd0 <prvSwitchTimerLists+0xc4>)
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	6013      	str	r3, [r2, #0]
}
 800abc4:	bf00      	nop
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000f40 	.word	0x20000f40
 800abd0:	20000f44 	.word	0x20000f44

0800abd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abda:	f000 f96b 	bl	800aeb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abde:	4b15      	ldr	r3, [pc, #84]	; (800ac34 <prvCheckForValidListAndQueue+0x60>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d120      	bne.n	800ac28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abe6:	4814      	ldr	r0, [pc, #80]	; (800ac38 <prvCheckForValidListAndQueue+0x64>)
 800abe8:	f7fd fbfe 	bl	80083e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abec:	4813      	ldr	r0, [pc, #76]	; (800ac3c <prvCheckForValidListAndQueue+0x68>)
 800abee:	f7fd fbfb 	bl	80083e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abf2:	4b13      	ldr	r3, [pc, #76]	; (800ac40 <prvCheckForValidListAndQueue+0x6c>)
 800abf4:	4a10      	ldr	r2, [pc, #64]	; (800ac38 <prvCheckForValidListAndQueue+0x64>)
 800abf6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abf8:	4b12      	ldr	r3, [pc, #72]	; (800ac44 <prvCheckForValidListAndQueue+0x70>)
 800abfa:	4a10      	ldr	r2, [pc, #64]	; (800ac3c <prvCheckForValidListAndQueue+0x68>)
 800abfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abfe:	2300      	movs	r3, #0
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	4b11      	ldr	r3, [pc, #68]	; (800ac48 <prvCheckForValidListAndQueue+0x74>)
 800ac04:	4a11      	ldr	r2, [pc, #68]	; (800ac4c <prvCheckForValidListAndQueue+0x78>)
 800ac06:	2110      	movs	r1, #16
 800ac08:	200a      	movs	r0, #10
 800ac0a:	f7fd fd09 	bl	8008620 <xQueueGenericCreateStatic>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	4a08      	ldr	r2, [pc, #32]	; (800ac34 <prvCheckForValidListAndQueue+0x60>)
 800ac12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac14:	4b07      	ldr	r3, [pc, #28]	; (800ac34 <prvCheckForValidListAndQueue+0x60>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <prvCheckForValidListAndQueue+0x60>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	490b      	ldr	r1, [pc, #44]	; (800ac50 <prvCheckForValidListAndQueue+0x7c>)
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe fc1a 	bl	800945c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac28:	f000 f974 	bl	800af14 <vPortExitCritical>
}
 800ac2c:	bf00      	nop
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20000f48 	.word	0x20000f48
 800ac38:	20000f18 	.word	0x20000f18
 800ac3c:	20000f2c 	.word	0x20000f2c
 800ac40:	20000f40 	.word	0x20000f40
 800ac44:	20000f44 	.word	0x20000f44
 800ac48:	20000ff4 	.word	0x20000ff4
 800ac4c:	20000f54 	.word	0x20000f54
 800ac50:	0800b76c 	.word	0x0800b76c

0800ac54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3b04      	subs	r3, #4
 800ac64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3b04      	subs	r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f023 0201 	bic.w	r2, r3, #1
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac84:	4a0c      	ldr	r2, [pc, #48]	; (800acb8 <pxPortInitialiseStack+0x64>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3b14      	subs	r3, #20
 800ac8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3b04      	subs	r3, #4
 800ac9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f06f 0202 	mvn.w	r2, #2
 800aca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3b20      	subs	r3, #32
 800aca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acaa:	68fb      	ldr	r3, [r7, #12]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	0800acbd 	.word	0x0800acbd

0800acbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acc6:	4b12      	ldr	r3, [pc, #72]	; (800ad10 <prvTaskExitError+0x54>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acce:	d00a      	beq.n	800ace6 <prvTaskExitError+0x2a>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60fb      	str	r3, [r7, #12]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <prvTaskExitError+0x28>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60bb      	str	r3, [r7, #8]
}
 800acf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acfa:	bf00      	nop
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0fc      	beq.n	800acfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad02:	bf00      	nop
 800ad04:	bf00      	nop
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	2000000c 	.word	0x2000000c
	...

0800ad20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad20:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <pxCurrentTCBConst2>)
 800ad22:	6819      	ldr	r1, [r3, #0]
 800ad24:	6808      	ldr	r0, [r1, #0]
 800ad26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2a:	f380 8809 	msr	PSP, r0
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8811 	msr	BASEPRI, r0
 800ad3a:	4770      	bx	lr
 800ad3c:	f3af 8000 	nop.w

0800ad40 <pxCurrentTCBConst2>:
 800ad40:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop

0800ad48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad48:	4808      	ldr	r0, [pc, #32]	; (800ad6c <prvPortStartFirstTask+0x24>)
 800ad4a:	6800      	ldr	r0, [r0, #0]
 800ad4c:	6800      	ldr	r0, [r0, #0]
 800ad4e:	f380 8808 	msr	MSP, r0
 800ad52:	f04f 0000 	mov.w	r0, #0
 800ad56:	f380 8814 	msr	CONTROL, r0
 800ad5a:	b662      	cpsie	i
 800ad5c:	b661      	cpsie	f
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	df00      	svc	0
 800ad68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad6a:	bf00      	nop
 800ad6c:	e000ed08 	.word	0xe000ed08

0800ad70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad76:	4b46      	ldr	r3, [pc, #280]	; (800ae90 <xPortStartScheduler+0x120>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a46      	ldr	r2, [pc, #280]	; (800ae94 <xPortStartScheduler+0x124>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d10a      	bne.n	800ad96 <xPortStartScheduler+0x26>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	613b      	str	r3, [r7, #16]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad96:	4b3e      	ldr	r3, [pc, #248]	; (800ae90 <xPortStartScheduler+0x120>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a3f      	ldr	r2, [pc, #252]	; (800ae98 <xPortStartScheduler+0x128>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d10a      	bne.n	800adb6 <xPortStartScheduler+0x46>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	60fb      	str	r3, [r7, #12]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adb6:	4b39      	ldr	r3, [pc, #228]	; (800ae9c <xPortStartScheduler+0x12c>)
 800adb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	22ff      	movs	r2, #255	; 0xff
 800adc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800add8:	b2da      	uxtb	r2, r3
 800adda:	4b31      	ldr	r3, [pc, #196]	; (800aea0 <xPortStartScheduler+0x130>)
 800addc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adde:	4b31      	ldr	r3, [pc, #196]	; (800aea4 <xPortStartScheduler+0x134>)
 800ade0:	2207      	movs	r2, #7
 800ade2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ade4:	e009      	b.n	800adfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ade6:	4b2f      	ldr	r3, [pc, #188]	; (800aea4 <xPortStartScheduler+0x134>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3b01      	subs	r3, #1
 800adec:	4a2d      	ldr	r2, [pc, #180]	; (800aea4 <xPortStartScheduler+0x134>)
 800adee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae02:	2b80      	cmp	r3, #128	; 0x80
 800ae04:	d0ef      	beq.n	800ade6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae06:	4b27      	ldr	r3, [pc, #156]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f1c3 0307 	rsb	r3, r3, #7
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d00a      	beq.n	800ae28 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	60bb      	str	r3, [r7, #8]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae28:	4b1e      	ldr	r3, [pc, #120]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	4a1d      	ldr	r2, [pc, #116]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae32:	4b1c      	ldr	r3, [pc, #112]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae3a:	4a1a      	ldr	r2, [pc, #104]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae46:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <xPortStartScheduler+0x138>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a17      	ldr	r2, [pc, #92]	; (800aea8 <xPortStartScheduler+0x138>)
 800ae4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae52:	4b15      	ldr	r3, [pc, #84]	; (800aea8 <xPortStartScheduler+0x138>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a14      	ldr	r2, [pc, #80]	; (800aea8 <xPortStartScheduler+0x138>)
 800ae58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae5e:	f000 f8dd 	bl	800b01c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae62:	4b12      	ldr	r3, [pc, #72]	; (800aeac <xPortStartScheduler+0x13c>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae68:	f000 f8fc 	bl	800b064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae6c:	4b10      	ldr	r3, [pc, #64]	; (800aeb0 <xPortStartScheduler+0x140>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a0f      	ldr	r2, [pc, #60]	; (800aeb0 <xPortStartScheduler+0x140>)
 800ae72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae78:	f7ff ff66 	bl	800ad48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae7c:	f7fe ff48 	bl	8009d10 <vTaskSwitchContext>
	prvTaskExitError();
 800ae80:	f7ff ff1c 	bl	800acbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	e000ed00 	.word	0xe000ed00
 800ae94:	410fc271 	.word	0x410fc271
 800ae98:	410fc270 	.word	0x410fc270
 800ae9c:	e000e400 	.word	0xe000e400
 800aea0:	20001044 	.word	0x20001044
 800aea4:	20001048 	.word	0x20001048
 800aea8:	e000ed20 	.word	0xe000ed20
 800aeac:	2000000c 	.word	0x2000000c
 800aeb0:	e000ef34 	.word	0xe000ef34

0800aeb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	607b      	str	r3, [r7, #4]
}
 800aecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aece:	4b0f      	ldr	r3, [pc, #60]	; (800af0c <vPortEnterCritical+0x58>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	4a0d      	ldr	r2, [pc, #52]	; (800af0c <vPortEnterCritical+0x58>)
 800aed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aed8:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <vPortEnterCritical+0x58>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d10f      	bne.n	800af00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aee0:	4b0b      	ldr	r3, [pc, #44]	; (800af10 <vPortEnterCritical+0x5c>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <vPortEnterCritical+0x4c>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	603b      	str	r3, [r7, #0]
}
 800aefc:	bf00      	nop
 800aefe:	e7fe      	b.n	800aefe <vPortEnterCritical+0x4a>
	}
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	2000000c 	.word	0x2000000c
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af1a:	4b12      	ldr	r3, [pc, #72]	; (800af64 <vPortExitCritical+0x50>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <vPortExitCritical+0x24>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	607b      	str	r3, [r7, #4]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af38:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <vPortExitCritical+0x50>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	4a09      	ldr	r2, [pc, #36]	; (800af64 <vPortExitCritical+0x50>)
 800af40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af42:	4b08      	ldr	r3, [pc, #32]	; (800af64 <vPortExitCritical+0x50>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d105      	bne.n	800af56 <vPortExitCritical+0x42>
 800af4a:	2300      	movs	r3, #0
 800af4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	f383 8811 	msr	BASEPRI, r3
}
 800af54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af56:	bf00      	nop
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	2000000c 	.word	0x2000000c
	...

0800af70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af70:	f3ef 8009 	mrs	r0, PSP
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	4b15      	ldr	r3, [pc, #84]	; (800afd0 <pxCurrentTCBConst>)
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	f01e 0f10 	tst.w	lr, #16
 800af80:	bf08      	it	eq
 800af82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8a:	6010      	str	r0, [r2, #0]
 800af8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af94:	f380 8811 	msr	BASEPRI, r0
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f7fe feb6 	bl	8009d10 <vTaskSwitchContext>
 800afa4:	f04f 0000 	mov.w	r0, #0
 800afa8:	f380 8811 	msr	BASEPRI, r0
 800afac:	bc09      	pop	{r0, r3}
 800afae:	6819      	ldr	r1, [r3, #0]
 800afb0:	6808      	ldr	r0, [r1, #0]
 800afb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb6:	f01e 0f10 	tst.w	lr, #16
 800afba:	bf08      	it	eq
 800afbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afc0:	f380 8809 	msr	PSP, r0
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	f3af 8000 	nop.w

0800afd0 <pxCurrentTCBConst>:
 800afd0:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop

0800afd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	607b      	str	r3, [r7, #4]
}
 800aff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aff2:	f7fe fdd3 	bl	8009b9c <xTaskIncrementTick>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800affc:	4b06      	ldr	r3, [pc, #24]	; (800b018 <xPortSysTickHandler+0x40>)
 800affe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	2300      	movs	r3, #0
 800b006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	f383 8811 	msr	BASEPRI, r3
}
 800b00e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	e000ed04 	.word	0xe000ed04

0800b01c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b01c:	b480      	push	{r7}
 800b01e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b020:	4b0b      	ldr	r3, [pc, #44]	; (800b050 <vPortSetupTimerInterrupt+0x34>)
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b026:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <vPortSetupTimerInterrupt+0x38>)
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b02c:	4b0a      	ldr	r3, [pc, #40]	; (800b058 <vPortSetupTimerInterrupt+0x3c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <vPortSetupTimerInterrupt+0x40>)
 800b032:	fba2 2303 	umull	r2, r3, r2, r3
 800b036:	099b      	lsrs	r3, r3, #6
 800b038:	4a09      	ldr	r2, [pc, #36]	; (800b060 <vPortSetupTimerInterrupt+0x44>)
 800b03a:	3b01      	subs	r3, #1
 800b03c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b03e:	4b04      	ldr	r3, [pc, #16]	; (800b050 <vPortSetupTimerInterrupt+0x34>)
 800b040:	2207      	movs	r2, #7
 800b042:	601a      	str	r2, [r3, #0]
}
 800b044:	bf00      	nop
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	e000e010 	.word	0xe000e010
 800b054:	e000e018 	.word	0xe000e018
 800b058:	20000000 	.word	0x20000000
 800b05c:	10624dd3 	.word	0x10624dd3
 800b060:	e000e014 	.word	0xe000e014

0800b064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b074 <vPortEnableVFP+0x10>
 800b068:	6801      	ldr	r1, [r0, #0]
 800b06a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b06e:	6001      	str	r1, [r0, #0]
 800b070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b072:	bf00      	nop
 800b074:	e000ed88 	.word	0xe000ed88

0800b078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b07e:	f3ef 8305 	mrs	r3, IPSR
 800b082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b0f      	cmp	r3, #15
 800b088:	d914      	bls.n	800b0b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b08a:	4a17      	ldr	r2, [pc, #92]	; (800b0e8 <vPortValidateInterruptPriority+0x70>)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4413      	add	r3, r2
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b094:	4b15      	ldr	r3, [pc, #84]	; (800b0ec <vPortValidateInterruptPriority+0x74>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	7afa      	ldrb	r2, [r7, #11]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d20a      	bcs.n	800b0b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	607b      	str	r3, [r7, #4]
}
 800b0b0:	bf00      	nop
 800b0b2:	e7fe      	b.n	800b0b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0b4:	4b0e      	ldr	r3, [pc, #56]	; (800b0f0 <vPortValidateInterruptPriority+0x78>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <vPortValidateInterruptPriority+0x7c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d90a      	bls.n	800b0da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	603b      	str	r3, [r7, #0]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <vPortValidateInterruptPriority+0x60>
	}
 800b0da:	bf00      	nop
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	e000e3f0 	.word	0xe000e3f0
 800b0ec:	20001044 	.word	0x20001044
 800b0f0:	e000ed0c 	.word	0xe000ed0c
 800b0f4:	20001048 	.word	0x20001048

0800b0f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08a      	sub	sp, #40	; 0x28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b100:	2300      	movs	r3, #0
 800b102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b104:	f7fe fc8e 	bl	8009a24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b108:	4b5b      	ldr	r3, [pc, #364]	; (800b278 <pvPortMalloc+0x180>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b110:	f000 f920 	bl	800b354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b114:	4b59      	ldr	r3, [pc, #356]	; (800b27c <pvPortMalloc+0x184>)
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4013      	ands	r3, r2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f040 8093 	bne.w	800b248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d01d      	beq.n	800b164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b128:	2208      	movs	r2, #8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4413      	add	r3, r2
 800b12e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f003 0307 	and.w	r3, r3, #7
 800b136:	2b00      	cmp	r3, #0
 800b138:	d014      	beq.n	800b164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f023 0307 	bic.w	r3, r3, #7
 800b140:	3308      	adds	r3, #8
 800b142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f003 0307 	and.w	r3, r3, #7
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <pvPortMalloc+0x6c>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	617b      	str	r3, [r7, #20]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d06e      	beq.n	800b248 <pvPortMalloc+0x150>
 800b16a:	4b45      	ldr	r3, [pc, #276]	; (800b280 <pvPortMalloc+0x188>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	429a      	cmp	r2, r3
 800b172:	d869      	bhi.n	800b248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b174:	4b43      	ldr	r3, [pc, #268]	; (800b284 <pvPortMalloc+0x18c>)
 800b176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b178:	4b42      	ldr	r3, [pc, #264]	; (800b284 <pvPortMalloc+0x18c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b17e:	e004      	b.n	800b18a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	429a      	cmp	r2, r3
 800b192:	d903      	bls.n	800b19c <pvPortMalloc+0xa4>
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1f1      	bne.n	800b180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b19c:	4b36      	ldr	r3, [pc, #216]	; (800b278 <pvPortMalloc+0x180>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d050      	beq.n	800b248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2208      	movs	r2, #8
 800b1ac:	4413      	add	r3, r2
 800b1ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1ad2      	subs	r2, r2, r3
 800b1c0:	2308      	movs	r3, #8
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d91f      	bls.n	800b208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	f003 0307 	and.w	r3, r3, #7
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	613b      	str	r3, [r7, #16]
}
 800b1ec:	bf00      	nop
 800b1ee:	e7fe      	b.n	800b1ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	1ad2      	subs	r2, r2, r3
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b202:	69b8      	ldr	r0, [r7, #24]
 800b204:	f000 f908 	bl	800b418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b208:	4b1d      	ldr	r3, [pc, #116]	; (800b280 <pvPortMalloc+0x188>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	4a1b      	ldr	r2, [pc, #108]	; (800b280 <pvPortMalloc+0x188>)
 800b214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b216:	4b1a      	ldr	r3, [pc, #104]	; (800b280 <pvPortMalloc+0x188>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	4b1b      	ldr	r3, [pc, #108]	; (800b288 <pvPortMalloc+0x190>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d203      	bcs.n	800b22a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b222:	4b17      	ldr	r3, [pc, #92]	; (800b280 <pvPortMalloc+0x188>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a18      	ldr	r2, [pc, #96]	; (800b288 <pvPortMalloc+0x190>)
 800b228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	4b13      	ldr	r3, [pc, #76]	; (800b27c <pvPortMalloc+0x184>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	431a      	orrs	r2, r3
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b23e:	4b13      	ldr	r3, [pc, #76]	; (800b28c <pvPortMalloc+0x194>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3301      	adds	r3, #1
 800b244:	4a11      	ldr	r2, [pc, #68]	; (800b28c <pvPortMalloc+0x194>)
 800b246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b248:	f7fe fbfa 	bl	8009a40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	f003 0307 	and.w	r3, r3, #7
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00a      	beq.n	800b26c <pvPortMalloc+0x174>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	60fb      	str	r3, [r7, #12]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <pvPortMalloc+0x172>
	return pvReturn;
 800b26c:	69fb      	ldr	r3, [r7, #28]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3728      	adds	r7, #40	; 0x28
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20002980 	.word	0x20002980
 800b27c:	20002994 	.word	0x20002994
 800b280:	20002984 	.word	0x20002984
 800b284:	20002978 	.word	0x20002978
 800b288:	20002988 	.word	0x20002988
 800b28c:	2000298c 	.word	0x2000298c

0800b290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d04d      	beq.n	800b33e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2a2:	2308      	movs	r3, #8
 800b2a4:	425b      	negs	r3, r3
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	4b24      	ldr	r3, [pc, #144]	; (800b348 <vPortFree+0xb8>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10a      	bne.n	800b2d4 <vPortFree+0x44>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	60fb      	str	r3, [r7, #12]
}
 800b2d0:	bf00      	nop
 800b2d2:	e7fe      	b.n	800b2d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <vPortFree+0x62>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	60bb      	str	r3, [r7, #8]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	4b14      	ldr	r3, [pc, #80]	; (800b348 <vPortFree+0xb8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d01e      	beq.n	800b33e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d11a      	bne.n	800b33e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	4b0e      	ldr	r3, [pc, #56]	; (800b348 <vPortFree+0xb8>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	43db      	mvns	r3, r3
 800b312:	401a      	ands	r2, r3
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b318:	f7fe fb84 	bl	8009a24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <vPortFree+0xbc>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4413      	add	r3, r2
 800b326:	4a09      	ldr	r2, [pc, #36]	; (800b34c <vPortFree+0xbc>)
 800b328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b32a:	6938      	ldr	r0, [r7, #16]
 800b32c:	f000 f874 	bl	800b418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b330:	4b07      	ldr	r3, [pc, #28]	; (800b350 <vPortFree+0xc0>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3301      	adds	r3, #1
 800b336:	4a06      	ldr	r2, [pc, #24]	; (800b350 <vPortFree+0xc0>)
 800b338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b33a:	f7fe fb81 	bl	8009a40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b33e:	bf00      	nop
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20002994 	.word	0x20002994
 800b34c:	20002984 	.word	0x20002984
 800b350:	20002990 	.word	0x20002990

0800b354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b35a:	f641 132c 	movw	r3, #6444	; 0x192c
 800b35e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b360:	4b27      	ldr	r3, [pc, #156]	; (800b400 <prvHeapInit+0xac>)
 800b362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00c      	beq.n	800b388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3307      	adds	r3, #7
 800b372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f023 0307 	bic.w	r3, r3, #7
 800b37a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	4a1f      	ldr	r2, [pc, #124]	; (800b400 <prvHeapInit+0xac>)
 800b384:	4413      	add	r3, r2
 800b386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b38c:	4a1d      	ldr	r2, [pc, #116]	; (800b404 <prvHeapInit+0xb0>)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b392:	4b1c      	ldr	r3, [pc, #112]	; (800b404 <prvHeapInit+0xb0>)
 800b394:	2200      	movs	r2, #0
 800b396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	4413      	add	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3a0:	2208      	movs	r2, #8
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f023 0307 	bic.w	r3, r3, #7
 800b3ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4a15      	ldr	r2, [pc, #84]	; (800b408 <prvHeapInit+0xb4>)
 800b3b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3b6:	4b14      	ldr	r3, [pc, #80]	; (800b408 <prvHeapInit+0xb4>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3be:	4b12      	ldr	r3, [pc, #72]	; (800b408 <prvHeapInit+0xb4>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	1ad2      	subs	r2, r2, r3
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3d4:	4b0c      	ldr	r3, [pc, #48]	; (800b408 <prvHeapInit+0xb4>)
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <prvHeapInit+0xb8>)
 800b3e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	4a09      	ldr	r2, [pc, #36]	; (800b410 <prvHeapInit+0xbc>)
 800b3ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3ec:	4b09      	ldr	r3, [pc, #36]	; (800b414 <prvHeapInit+0xc0>)
 800b3ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3f2:	601a      	str	r2, [r3, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	2000104c 	.word	0x2000104c
 800b404:	20002978 	.word	0x20002978
 800b408:	20002980 	.word	0x20002980
 800b40c:	20002988 	.word	0x20002988
 800b410:	20002984 	.word	0x20002984
 800b414:	20002994 	.word	0x20002994

0800b418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b420:	4b28      	ldr	r3, [pc, #160]	; (800b4c4 <prvInsertBlockIntoFreeList+0xac>)
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e002      	b.n	800b42c <prvInsertBlockIntoFreeList+0x14>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d8f7      	bhi.n	800b426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	4413      	add	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	429a      	cmp	r2, r3
 800b446:	d108      	bne.n	800b45a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	441a      	add	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	441a      	add	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d118      	bne.n	800b4a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	4b15      	ldr	r3, [pc, #84]	; (800b4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d00d      	beq.n	800b496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	441a      	add	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	e008      	b.n	800b4a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b496:	4b0c      	ldr	r3, [pc, #48]	; (800b4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	601a      	str	r2, [r3, #0]
 800b49e:	e003      	b.n	800b4a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d002      	beq.n	800b4b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	20002978 	.word	0x20002978
 800b4c8:	20002980 	.word	0x20002980

0800b4cc <memset>:
 800b4cc:	4402      	add	r2, r0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d100      	bne.n	800b4d6 <memset+0xa>
 800b4d4:	4770      	bx	lr
 800b4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4da:	e7f9      	b.n	800b4d0 <memset+0x4>

0800b4dc <_reclaim_reent>:
 800b4dc:	4b29      	ldr	r3, [pc, #164]	; (800b584 <_reclaim_reent+0xa8>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4283      	cmp	r3, r0
 800b4e2:	b570      	push	{r4, r5, r6, lr}
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	d04b      	beq.n	800b580 <_reclaim_reent+0xa4>
 800b4e8:	69c3      	ldr	r3, [r0, #28]
 800b4ea:	b143      	cbz	r3, 800b4fe <_reclaim_reent+0x22>
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d144      	bne.n	800b57c <_reclaim_reent+0xa0>
 800b4f2:	69e3      	ldr	r3, [r4, #28]
 800b4f4:	6819      	ldr	r1, [r3, #0]
 800b4f6:	b111      	cbz	r1, 800b4fe <_reclaim_reent+0x22>
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f000 f879 	bl	800b5f0 <_free_r>
 800b4fe:	6961      	ldr	r1, [r4, #20]
 800b500:	b111      	cbz	r1, 800b508 <_reclaim_reent+0x2c>
 800b502:	4620      	mov	r0, r4
 800b504:	f000 f874 	bl	800b5f0 <_free_r>
 800b508:	69e1      	ldr	r1, [r4, #28]
 800b50a:	b111      	cbz	r1, 800b512 <_reclaim_reent+0x36>
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 f86f 	bl	800b5f0 <_free_r>
 800b512:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b514:	b111      	cbz	r1, 800b51c <_reclaim_reent+0x40>
 800b516:	4620      	mov	r0, r4
 800b518:	f000 f86a 	bl	800b5f0 <_free_r>
 800b51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b51e:	b111      	cbz	r1, 800b526 <_reclaim_reent+0x4a>
 800b520:	4620      	mov	r0, r4
 800b522:	f000 f865 	bl	800b5f0 <_free_r>
 800b526:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b528:	b111      	cbz	r1, 800b530 <_reclaim_reent+0x54>
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 f860 	bl	800b5f0 <_free_r>
 800b530:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b532:	b111      	cbz	r1, 800b53a <_reclaim_reent+0x5e>
 800b534:	4620      	mov	r0, r4
 800b536:	f000 f85b 	bl	800b5f0 <_free_r>
 800b53a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b53c:	b111      	cbz	r1, 800b544 <_reclaim_reent+0x68>
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 f856 	bl	800b5f0 <_free_r>
 800b544:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b546:	b111      	cbz	r1, 800b54e <_reclaim_reent+0x72>
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 f851 	bl	800b5f0 <_free_r>
 800b54e:	6a23      	ldr	r3, [r4, #32]
 800b550:	b1b3      	cbz	r3, 800b580 <_reclaim_reent+0xa4>
 800b552:	4620      	mov	r0, r4
 800b554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b558:	4718      	bx	r3
 800b55a:	5949      	ldr	r1, [r1, r5]
 800b55c:	b941      	cbnz	r1, 800b570 <_reclaim_reent+0x94>
 800b55e:	3504      	adds	r5, #4
 800b560:	69e3      	ldr	r3, [r4, #28]
 800b562:	2d80      	cmp	r5, #128	; 0x80
 800b564:	68d9      	ldr	r1, [r3, #12]
 800b566:	d1f8      	bne.n	800b55a <_reclaim_reent+0x7e>
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 f841 	bl	800b5f0 <_free_r>
 800b56e:	e7c0      	b.n	800b4f2 <_reclaim_reent+0x16>
 800b570:	680e      	ldr	r6, [r1, #0]
 800b572:	4620      	mov	r0, r4
 800b574:	f000 f83c 	bl	800b5f0 <_free_r>
 800b578:	4631      	mov	r1, r6
 800b57a:	e7ef      	b.n	800b55c <_reclaim_reent+0x80>
 800b57c:	2500      	movs	r5, #0
 800b57e:	e7ef      	b.n	800b560 <_reclaim_reent+0x84>
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	bf00      	nop
 800b584:	2000005c 	.word	0x2000005c

0800b588 <__libc_init_array>:
 800b588:	b570      	push	{r4, r5, r6, lr}
 800b58a:	4d0d      	ldr	r5, [pc, #52]	; (800b5c0 <__libc_init_array+0x38>)
 800b58c:	4c0d      	ldr	r4, [pc, #52]	; (800b5c4 <__libc_init_array+0x3c>)
 800b58e:	1b64      	subs	r4, r4, r5
 800b590:	10a4      	asrs	r4, r4, #2
 800b592:	2600      	movs	r6, #0
 800b594:	42a6      	cmp	r6, r4
 800b596:	d109      	bne.n	800b5ac <__libc_init_array+0x24>
 800b598:	4d0b      	ldr	r5, [pc, #44]	; (800b5c8 <__libc_init_array+0x40>)
 800b59a:	4c0c      	ldr	r4, [pc, #48]	; (800b5cc <__libc_init_array+0x44>)
 800b59c:	f000 f880 	bl	800b6a0 <_init>
 800b5a0:	1b64      	subs	r4, r4, r5
 800b5a2:	10a4      	asrs	r4, r4, #2
 800b5a4:	2600      	movs	r6, #0
 800b5a6:	42a6      	cmp	r6, r4
 800b5a8:	d105      	bne.n	800b5b6 <__libc_init_array+0x2e>
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b0:	4798      	blx	r3
 800b5b2:	3601      	adds	r6, #1
 800b5b4:	e7ee      	b.n	800b594 <__libc_init_array+0xc>
 800b5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ba:	4798      	blx	r3
 800b5bc:	3601      	adds	r6, #1
 800b5be:	e7f2      	b.n	800b5a6 <__libc_init_array+0x1e>
 800b5c0:	0800b910 	.word	0x0800b910
 800b5c4:	0800b910 	.word	0x0800b910
 800b5c8:	0800b910 	.word	0x0800b910
 800b5cc:	0800b914 	.word	0x0800b914

0800b5d0 <__retarget_lock_acquire_recursive>:
 800b5d0:	4770      	bx	lr

0800b5d2 <__retarget_lock_release_recursive>:
 800b5d2:	4770      	bx	lr

0800b5d4 <memcpy>:
 800b5d4:	440a      	add	r2, r1
 800b5d6:	4291      	cmp	r1, r2
 800b5d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5dc:	d100      	bne.n	800b5e0 <memcpy+0xc>
 800b5de:	4770      	bx	lr
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ea:	4291      	cmp	r1, r2
 800b5ec:	d1f9      	bne.n	800b5e2 <memcpy+0xe>
 800b5ee:	bd10      	pop	{r4, pc}

0800b5f0 <_free_r>:
 800b5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5f2:	2900      	cmp	r1, #0
 800b5f4:	d044      	beq.n	800b680 <_free_r+0x90>
 800b5f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5fa:	9001      	str	r0, [sp, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f1a1 0404 	sub.w	r4, r1, #4
 800b602:	bfb8      	it	lt
 800b604:	18e4      	addlt	r4, r4, r3
 800b606:	f000 f83f 	bl	800b688 <__malloc_lock>
 800b60a:	4a1e      	ldr	r2, [pc, #120]	; (800b684 <_free_r+0x94>)
 800b60c:	9801      	ldr	r0, [sp, #4]
 800b60e:	6813      	ldr	r3, [r2, #0]
 800b610:	b933      	cbnz	r3, 800b620 <_free_r+0x30>
 800b612:	6063      	str	r3, [r4, #4]
 800b614:	6014      	str	r4, [r2, #0]
 800b616:	b003      	add	sp, #12
 800b618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b61c:	f000 b83a 	b.w	800b694 <__malloc_unlock>
 800b620:	42a3      	cmp	r3, r4
 800b622:	d908      	bls.n	800b636 <_free_r+0x46>
 800b624:	6825      	ldr	r5, [r4, #0]
 800b626:	1961      	adds	r1, r4, r5
 800b628:	428b      	cmp	r3, r1
 800b62a:	bf01      	itttt	eq
 800b62c:	6819      	ldreq	r1, [r3, #0]
 800b62e:	685b      	ldreq	r3, [r3, #4]
 800b630:	1949      	addeq	r1, r1, r5
 800b632:	6021      	streq	r1, [r4, #0]
 800b634:	e7ed      	b.n	800b612 <_free_r+0x22>
 800b636:	461a      	mov	r2, r3
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	b10b      	cbz	r3, 800b640 <_free_r+0x50>
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	d9fa      	bls.n	800b636 <_free_r+0x46>
 800b640:	6811      	ldr	r1, [r2, #0]
 800b642:	1855      	adds	r5, r2, r1
 800b644:	42a5      	cmp	r5, r4
 800b646:	d10b      	bne.n	800b660 <_free_r+0x70>
 800b648:	6824      	ldr	r4, [r4, #0]
 800b64a:	4421      	add	r1, r4
 800b64c:	1854      	adds	r4, r2, r1
 800b64e:	42a3      	cmp	r3, r4
 800b650:	6011      	str	r1, [r2, #0]
 800b652:	d1e0      	bne.n	800b616 <_free_r+0x26>
 800b654:	681c      	ldr	r4, [r3, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	6053      	str	r3, [r2, #4]
 800b65a:	440c      	add	r4, r1
 800b65c:	6014      	str	r4, [r2, #0]
 800b65e:	e7da      	b.n	800b616 <_free_r+0x26>
 800b660:	d902      	bls.n	800b668 <_free_r+0x78>
 800b662:	230c      	movs	r3, #12
 800b664:	6003      	str	r3, [r0, #0]
 800b666:	e7d6      	b.n	800b616 <_free_r+0x26>
 800b668:	6825      	ldr	r5, [r4, #0]
 800b66a:	1961      	adds	r1, r4, r5
 800b66c:	428b      	cmp	r3, r1
 800b66e:	bf04      	itt	eq
 800b670:	6819      	ldreq	r1, [r3, #0]
 800b672:	685b      	ldreq	r3, [r3, #4]
 800b674:	6063      	str	r3, [r4, #4]
 800b676:	bf04      	itt	eq
 800b678:	1949      	addeq	r1, r1, r5
 800b67a:	6021      	streq	r1, [r4, #0]
 800b67c:	6054      	str	r4, [r2, #4]
 800b67e:	e7ca      	b.n	800b616 <_free_r+0x26>
 800b680:	b003      	add	sp, #12
 800b682:	bd30      	pop	{r4, r5, pc}
 800b684:	20002ad4 	.word	0x20002ad4

0800b688 <__malloc_lock>:
 800b688:	4801      	ldr	r0, [pc, #4]	; (800b690 <__malloc_lock+0x8>)
 800b68a:	f7ff bfa1 	b.w	800b5d0 <__retarget_lock_acquire_recursive>
 800b68e:	bf00      	nop
 800b690:	20002ad0 	.word	0x20002ad0

0800b694 <__malloc_unlock>:
 800b694:	4801      	ldr	r0, [pc, #4]	; (800b69c <__malloc_unlock+0x8>)
 800b696:	f7ff bf9c 	b.w	800b5d2 <__retarget_lock_release_recursive>
 800b69a:	bf00      	nop
 800b69c:	20002ad0 	.word	0x20002ad0

0800b6a0 <_init>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	bf00      	nop
 800b6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6a6:	bc08      	pop	{r3}
 800b6a8:	469e      	mov	lr, r3
 800b6aa:	4770      	bx	lr

0800b6ac <_fini>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	bf00      	nop
 800b6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6b2:	bc08      	pop	{r3}
 800b6b4:	469e      	mov	lr, r3
 800b6b6:	4770      	bx	lr
