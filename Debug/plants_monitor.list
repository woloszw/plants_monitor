
plants_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc68  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800ce48  0800ce48  0001ce48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d148  0800d148  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800d148  0800d148  0001d148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d150  0800d150  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d150  0800d150  0001d150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d154  0800d154  0001d154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800d158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b40  20000060  0800d1b8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ba0  0800d1b8  00022ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a1c2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005291  00000000  00000000  0004a295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002110  00000000  00000000  0004f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019a7  00000000  00000000  00051638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ec4  00000000  00000000  00052fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002894d  00000000  00000000  00077ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f16fe  00000000  00000000  000a07f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000928c  00000000  00000000  00191ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0019b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ce30 	.word	0x0800ce30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800ce30 	.word	0x0800ce30

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00b fea3 	bl	800cc5c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f32:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f38:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4a:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f82:	f003 f939 	bl	80041f8 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f8c:	f000 ff58 	bl	8001e40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f9c:	f004 fd68 	bl	8005a70 <HAL_ADCEx_MultiModeConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fa6:	f000 ff4b 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_ADC1_Init+0xec>)
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb6:	237f      	movs	r3, #127	; 0x7f
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <MX_ADC1_Init+0xe8>)
 8000fc8:	f003 ff1c 	bl	8004e04 <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fd2:	f000 ff35 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3730      	adds	r7, #48	; 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000007c 	.word	0x2000007c
 8000fe4:	04300002 	.word	0x04300002

08000fe8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09e      	sub	sp, #120	; 0x78
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2250      	movs	r2, #80	; 0x50
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f00b fe27 	bl	800cc5c <memset>
  if(adcHandle->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001016:	d13c      	bne.n	8001092 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800101e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001022:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fcf5 	bl	8007a18 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001034:	f000 ff04 	bl	8001e40 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_ADC_MspInit+0xb4>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_ADC_MspInit+0xb4>)
 800103e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_ADC_MspInit+0xb4>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_ADC_MspInit+0xb4>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_ADC_MspInit+0xb4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_ADC_MspInit+0xb4>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ANALOG1_IN_Pin|ANALOG2_IN_Pin;
 8001068:	2303      	movs	r3, #3
 800106a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f004 febf 	bl	8005e00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2105      	movs	r1, #5
 8001086:	2012      	movs	r0, #18
 8001088:	f004 fe92 	bl	8005db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800108c:	2012      	movs	r0, #18
 800108e:	f004 fea9 	bl	8005de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3778      	adds	r7, #120	; 0x78
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <readADCData>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
uint32_t readADCData(ADC_HandleTypeDef _adcHandle)
{
 80010a0:	b084      	sub	sp, #16
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	f107 0c10 	add.w	ip, r7, #16
 80010ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t analogReadValue;

	HAL_ADC_Start(&_adcHandle);
 80010b0:	f107 0010 	add.w	r0, r7, #16
 80010b4:	f003 fa4e 	bl	8004554 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&_adcHandle, 1000)==HAL_OK)
 80010b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010bc:	f107 0010 	add.w	r0, r7, #16
 80010c0:	f003 fb46 	bl	8004750 <HAL_ADC_PollForConversion>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d104      	bne.n	80010d4 <readADCData+0x34>
		analogReadValue = (uint32_t) HAL_ADC_GetValue(&_adcHandle);
 80010ca:	f107 0010 	add.w	r0, r7, #16
 80010ce:	f003 fc33 	bl	8004938 <HAL_ADC_GetValue>
 80010d2:	6078      	str	r0, [r7, #4]


	HAL_ADC_Stop(&_adcHandle);
 80010d4:	f107 0010 	add.w	r0, r7, #16
 80010d8:	f003 fb06 	bl	80046e8 <HAL_ADC_Stop>

	return analogReadValue;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010e8:	b004      	add	sp, #16
 80010ea:	4770      	bx	lr

080010ec <SetChannel>:

void SetChannel(uint32_t Channel)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	2220      	movs	r2, #32
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00b fdad 	bl	800cc5c <memset>

	  /** Configure Regular Channel
	    */
	    sConfig.Channel = Channel;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60bb      	str	r3, [r7, #8]
	    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001106:	2306      	movs	r3, #6
 8001108:	60fb      	str	r3, [r7, #12]
	    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
	    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110e:	237f      	movs	r3, #127	; 0x7f
 8001110:	617b      	str	r3, [r7, #20]
	    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001112:	2304      	movs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
	    sConfig.Offset = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
	    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <SetChannel+0x4c>)
 8001122:	f003 fe6f 	bl	8004e04 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SetChannel+0x44>
	    {
	      Error_Handler();
 800112c:	f000 fe88 	bl	8001e40 <Error_Handler>
	    }
}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000007c 	.word	0x2000007c

0800113c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UART_Semaphore */
  UART_SemaphoreHandle = osSemaphoreNew(1, 0, &UART_Semaphore_attributes);
 8001140:	4a28      	ldr	r2, [pc, #160]	; (80011e4 <MX_FREERTOS_Init+0xa8>)
 8001142:	2100      	movs	r1, #0
 8001144:	2001      	movs	r0, #1
 8001146:	f008 fa98 	bl	800967a <osSemaphoreNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <MX_FREERTOS_Init+0xac>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Semaphore */
  ADC_SemaphoreHandle = osSemaphoreNew(1, 0, &ADC_Semaphore_attributes);
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <MX_FREERTOS_Init+0xb0>)
 8001152:	2100      	movs	r1, #0
 8001154:	2001      	movs	r0, #1
 8001156:	f008 fa90 	bl	800967a <osSemaphoreNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <MX_FREERTOS_Init+0xb4>)
 800115e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueToUART */
  queueToUARTHandle = osMessageQueueNew (16, sizeof(SensorData), &queueToUART_attributes);
 8001160:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <MX_FREERTOS_Init+0xb8>)
 8001162:	2108      	movs	r1, #8
 8001164:	2010      	movs	r0, #16
 8001166:	f008 fba7 	bl	80098b8 <osMessageQueueNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <MX_FREERTOS_Init+0xbc>)
 800116e:	6013      	str	r3, [r2, #0]

  /* creation of queueToInfo */
  queueToInfoHandle = osMessageQueueNew (16, sizeof(SensorData), &queueToInfo_attributes);
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <MX_FREERTOS_Init+0xc0>)
 8001172:	2108      	movs	r1, #8
 8001174:	2010      	movs	r0, #16
 8001176:	f008 fb9f 	bl	80098b8 <osMessageQueueNew>
 800117a:	4603      	mov	r3, r0
 800117c:	4a20      	ldr	r2, [pc, #128]	; (8001200 <MX_FREERTOS_Init+0xc4>)
 800117e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensAnalog01 */
  sensAnalog01Handle = osThreadNew(sensAnalog01Task, NULL, &sensAnalog01_attributes);
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <MX_FREERTOS_Init+0xc8>)
 8001182:	2100      	movs	r1, #0
 8001184:	4820      	ldr	r0, [pc, #128]	; (8001208 <MX_FREERTOS_Init+0xcc>)
 8001186:	f008 f9cb 	bl	8009520 <osThreadNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <MX_FREERTOS_Init+0xd0>)
 800118e:	6013      	str	r3, [r2, #0]

  /* creation of sensUART */
  sensUARTHandle = osThreadNew(sensUARTTask, NULL, &sensUART_attributes);
 8001190:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <MX_FREERTOS_Init+0xd4>)
 8001192:	2100      	movs	r1, #0
 8001194:	481f      	ldr	r0, [pc, #124]	; (8001214 <MX_FREERTOS_Init+0xd8>)
 8001196:	f008 f9c3 	bl	8009520 <osThreadNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <MX_FREERTOS_Init+0xdc>)
 800119e:	6013      	str	r3, [r2, #0]

  /* creation of sensI2C */
  sensI2CHandle = osThreadNew(sensI2CTask, NULL, &sensI2C_attributes);
 80011a0:	4a1e      	ldr	r2, [pc, #120]	; (800121c <MX_FREERTOS_Init+0xe0>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <MX_FREERTOS_Init+0xe4>)
 80011a6:	f008 f9bb 	bl	8009520 <osThreadNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <MX_FREERTOS_Init+0xe8>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* creation of sensAnalog02 */
  sensAnalog02Handle = osThreadNew(sensAnalog02Task, NULL, &sensAnalog02_attributes);
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <MX_FREERTOS_Init+0xec>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	481d      	ldr	r0, [pc, #116]	; (800122c <MX_FREERTOS_Init+0xf0>)
 80011b6:	f008 f9b3 	bl	8009520 <osThreadNew>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_FREERTOS_Init+0xf4>)
 80011be:	6013      	str	r3, [r2, #0]

  /* creation of infoTask */
  infoTaskHandle = osThreadNew(StartInfoTask, NULL, &infoTask_attributes);
 80011c0:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_FREERTOS_Init+0xf8>)
 80011c2:	2100      	movs	r1, #0
 80011c4:	481c      	ldr	r0, [pc, #112]	; (8001238 <MX_FREERTOS_Init+0xfc>)
 80011c6:	f008 f9ab 	bl	8009520 <osThreadNew>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <MX_FREERTOS_Init+0x100>)
 80011ce:	6013      	str	r3, [r2, #0]

  /* creation of sensGPIO */
  sensGPIOHandle = osThreadNew(sensGPIOTask, NULL, &sensGPIO_attributes);
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <MX_FREERTOS_Init+0x104>)
 80011d2:	2100      	movs	r1, #0
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <MX_FREERTOS_Init+0x108>)
 80011d6:	f008 f9a3 	bl	8009520 <osThreadNew>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <MX_FREERTOS_Init+0x10c>)
 80011de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800d098 	.word	0x0800d098
 80011e8:	20000108 	.word	0x20000108
 80011ec:	0800d0a8 	.word	0x0800d0a8
 80011f0:	2000010c 	.word	0x2000010c
 80011f4:	0800d068 	.word	0x0800d068
 80011f8:	20000100 	.word	0x20000100
 80011fc:	0800d080 	.word	0x0800d080
 8001200:	20000104 	.word	0x20000104
 8001204:	0800cf90 	.word	0x0800cf90
 8001208:	0800124d 	.word	0x0800124d
 800120c:	200000e8 	.word	0x200000e8
 8001210:	0800cfb4 	.word	0x0800cfb4
 8001214:	080012e1 	.word	0x080012e1
 8001218:	200000ec 	.word	0x200000ec
 800121c:	0800cfd8 	.word	0x0800cfd8
 8001220:	08001319 	.word	0x08001319
 8001224:	200000f0 	.word	0x200000f0
 8001228:	0800cffc 	.word	0x0800cffc
 800122c:	080013a1 	.word	0x080013a1
 8001230:	200000f4 	.word	0x200000f4
 8001234:	0800d020 	.word	0x0800d020
 8001238:	08001415 	.word	0x08001415
 800123c:	200000f8 	.word	0x200000f8
 8001240:	0800d044 	.word	0x0800d044
 8001244:	080014dd 	.word	0x080014dd
 8001248:	200000fc 	.word	0x200000fc

0800124c <sensAnalog01Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sensAnalog01Task */
void sensAnalog01Task(void *argument)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b09d      	sub	sp, #116	; 0x74
 8001250:	af18      	add	r7, sp, #96	; 0x60
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog01Task */
	// Dirt Moisture sensor
	SensorData analog1task =	{	.id = MOISTURE_SENSOR_TASK_ID, .data = 123};
 8001254:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <sensAnalog01Task+0x7c>)
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800125e:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <sensAnalog01Task+0x80>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2164      	movs	r1, #100	; 0x64
 8001268:	4618      	mov	r0, r3
 800126a:	f008 fa8f 	bl	800978c <osSemaphoreAcquire>
	  SetChannel(ADC_CHANNEL_1);
 800126e:	4818      	ldr	r0, [pc, #96]	; (80012d0 <sensAnalog01Task+0x84>)
 8001270:	f7ff ff3c 	bl	80010ec <SetChannel>
	  analog1task.data = readADCData(hadc1);
 8001274:	4c17      	ldr	r4, [pc, #92]	; (80012d4 <sensAnalog01Task+0x88>)
 8001276:	4668      	mov	r0, sp
 8001278:	f104 0310 	add.w	r3, r4, #16
 800127c:	225c      	movs	r2, #92	; 0x5c
 800127e:	4619      	mov	r1, r3
 8001280:	f00b fd70 	bl	800cd64 <memcpy>
 8001284:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001288:	f7ff ff0a 	bl	80010a0 <readADCData>
 800128c:	4603      	mov	r3, r0
 800128e:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <sensAnalog01Task+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f008 facb 	bl	8009830 <osSemaphoreRelease>

	  osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog1task, 0, osWaitForever);
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <sensAnalog01Task+0x8c>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	f107 0108 	add.w	r1, r7, #8
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	2200      	movs	r2, #0
 80012a8:	f008 fb7a 	bl	80099a0 <osMessageQueuePut>
	  osMessageQueuePut(queueToInfoHandle, (SensorData*)&analog1task, 0, osWaitForever);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <sensAnalog01Task+0x90>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	f107 0108 	add.w	r1, r7, #8
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	2200      	movs	r2, #0
 80012ba:	f008 fb71 	bl	80099a0 <osMessageQueuePut>
	  osDelay(10000);
 80012be:	f242 7010 	movw	r0, #10000	; 0x2710
 80012c2:	f008 f9bf 	bl	8009644 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 80012c6:	e7cc      	b.n	8001262 <sensAnalog01Task+0x16>
 80012c8:	0800cecc 	.word	0x0800cecc
 80012cc:	2000010c 	.word	0x2000010c
 80012d0:	04300002 	.word	0x04300002
 80012d4:	2000007c 	.word	0x2000007c
 80012d8:	20000100 	.word	0x20000100
 80012dc:	20000104 	.word	0x20000104

080012e0 <sensUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensUARTTask */
void sensUARTTask(void *argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensUARTTask */
	SensorData receivedData;
  /* Infinite loop */
  for(;;)
  {
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <sensUARTTask+0x30>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	f107 0108 	add.w	r1, r7, #8
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	2200      	movs	r2, #0
 80012f6:	f008 fbb3 	bl	8009a60 <osMessageQueueGet>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f3      	bne.n	80012e8 <sensUARTTask+0x8>
	{
		printf("%d:%d \n \r", receivedData.id, receivedData.data);
 8001300:	7a3b      	ldrb	r3, [r7, #8]
 8001302:	4619      	mov	r1, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	461a      	mov	r2, r3
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <sensUARTTask+0x34>)
 800130a:	f002 f9ef 	bl	80036ec <printf_>
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 800130e:	e7eb      	b.n	80012e8 <sensUARTTask+0x8>
 8001310:	20000100 	.word	0x20000100
 8001314:	0800ced4 	.word	0x0800ced4

08001318 <sensI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensI2CTask */
void sensI2CTask(void *argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensI2CTask */
	//Bmp280 - pressure and temperature sensor
	extern BMP280_t Bmp280;
	float Temp, Pressure;
	SensorData i2ctask = {.id = BMP280_TASK_ID, .data = 0};
 8001320:	2302      	movs	r3, #2
 8001322:	723b      	strb	r3, [r7, #8]
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	BMP280_ReadPressureAndTemperature(&Bmp280, &Pressure, &Temp);
 8001328:	f107 0214 	add.w	r2, r7, #20
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4818      	ldr	r0, [pc, #96]	; (8001394 <sensI2CTask+0x7c>)
 8001334:	f000 fa88 	bl	8001848 <BMP280_ReadPressureAndTemperature>
	i2ctask.data = Pressure;
 8001338:	edd7 7a04 	vldr	s15, [r7, #16]
 800133c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001340:	ee17 3a90 	vmov	r3, s15
 8001344:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(queueToUARTHandle, (SensorData*)&i2ctask, 0, osWaitForever);
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <sensI2CTask+0x80>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	2200      	movs	r2, #0
 8001354:	f008 fb24 	bl	80099a0 <osMessageQueuePut>
	i2ctask.data = Temp;
 8001358:	edd7 7a05 	vldr	s15, [r7, #20]
 800135c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001360:	ee17 3a90 	vmov	r3, s15
 8001364:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(queueToUARTHandle, (SensorData*)&i2ctask, 0, osWaitForever);
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <sensI2CTask+0x80>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f107 0108 	add.w	r1, r7, #8
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	2200      	movs	r2, #0
 8001374:	f008 fb14 	bl	80099a0 <osMessageQueuePut>
	osMessageQueuePut(queueToInfoHandle, (SensorData*)&i2ctask, 0, osWaitForever);
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <sensI2CTask+0x84>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	f107 0108 	add.w	r1, r7, #8
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	2200      	movs	r2, #0
 8001386:	f008 fb0b 	bl	80099a0 <osMessageQueuePut>

	osDelay(10000);
 800138a:	f242 7010 	movw	r0, #10000	; 0x2710
 800138e:	f008 f959 	bl	8009644 <osDelay>
	BMP280_ReadPressureAndTemperature(&Bmp280, &Pressure, &Temp);
 8001392:	e7c9      	b.n	8001328 <sensI2CTask+0x10>
 8001394:	20000164 	.word	0x20000164
 8001398:	20000100 	.word	0x20000100
 800139c:	20000104 	.word	0x20000104

080013a0 <sensAnalog02Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensAnalog02Task */
void sensAnalog02Task(void *argument)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b09d      	sub	sp, #116	; 0x74
 80013a4:	af18      	add	r7, sp, #96	; 0x60
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog02Task */
	// Insolation sensor
	SensorData analog2task =	{.id = INSOLATION_TASK_ID, .data = 0	};
 80013a8:	2303      	movs	r3, #3
 80013aa:	723b      	strb	r3, [r7, #8]
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <sensAnalog02Task+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2164      	movs	r1, #100	; 0x64
 80013b6:	4618      	mov	r0, r3
 80013b8:	f008 f9e8 	bl	800978c <osSemaphoreAcquire>
	  SetChannel(ADC_CHANNEL_2);
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <sensAnalog02Task+0x68>)
 80013be:	f7ff fe95 	bl	80010ec <SetChannel>
	  analog2task.data = readADCData(hadc1);
 80013c2:	4c12      	ldr	r4, [pc, #72]	; (800140c <sensAnalog02Task+0x6c>)
 80013c4:	4668      	mov	r0, sp
 80013c6:	f104 0310 	add.w	r3, r4, #16
 80013ca:	225c      	movs	r2, #92	; 0x5c
 80013cc:	4619      	mov	r1, r3
 80013ce:	f00b fcc9 	bl	800cd64 <memcpy>
 80013d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013d6:	f7ff fe63 	bl	80010a0 <readADCData>
 80013da:	4603      	mov	r3, r0
 80013dc:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <sensAnalog02Task+0x64>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 fa24 	bl	8009830 <osSemaphoreRelease>

	  osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog2task, 0, osWaitForever);
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <sensAnalog02Task+0x70>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f107 0108 	add.w	r1, r7, #8
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	2200      	movs	r2, #0
 80013f6:	f008 fad3 	bl	80099a0 <osMessageQueuePut>
	  osDelay(10000);
 80013fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80013fe:	f008 f921 	bl	8009644 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001402:	e7d5      	b.n	80013b0 <sensAnalog02Task+0x10>
 8001404:	2000010c 	.word	0x2000010c
 8001408:	08600004 	.word	0x08600004
 800140c:	2000007c 	.word	0x2000007c
 8001410:	20000100 	.word	0x20000100

08001414 <StartInfoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInfoTask */
void StartInfoTask(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInfoTask */
	SensorData infoData;
  /* Infinite loop */
  for(;;)
  {
	if(osOK == osMessageQueueGet(queueToInfoHandle, (SensorData*)&infoData, 0, osWaitForever))
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <StartInfoTask+0xa4>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	f107 0108 	add.w	r1, r7, #8
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	2200      	movs	r2, #0
 800142a:	f008 fb19 	bl	8009a60 <osMessageQueueGet>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d13c      	bne.n	80014ae <StartInfoTask+0x9a>
	  	{
	  		//printf("\n%d:%d \n \r", infoData.id, receivedData.data);
			switch(infoData.id)
 8001434:	7a3b      	ldrb	r3, [r7, #8]
 8001436:	2b04      	cmp	r3, #4
 8001438:	d02e      	beq.n	8001498 <StartInfoTask+0x84>
 800143a:	2b04      	cmp	r3, #4
 800143c:	dc32      	bgt.n	80014a4 <StartInfoTask+0x90>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d016      	beq.n	8001470 <StartInfoTask+0x5c>
 8001442:	2b02      	cmp	r3, #2
 8001444:	d12e      	bne.n	80014a4 <StartInfoTask+0x90>
			{
			case BMP280_TASK_ID:
							//Because SensorData type has only one data field, measures temperature and pressure are contantly
							//overwriting .data. This is the way to determine whether the current data is temperature (usually below 50 Celcius degrees) or atmosperic pressure.
							if (infoData.data >= 100){
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b63      	cmp	r3, #99	; 0x63
 800144a:	d82f      	bhi.n	80014ac <StartInfoTask+0x98>
								break;}


							if(infoData.data > TEMPERATURE_MAX)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b32      	cmp	r3, #50	; 0x32
 8001450:	d903      	bls.n	800145a <StartInfoTask+0x46>
								printf("Too hot\n \r");
 8001452:	481a      	ldr	r0, [pc, #104]	; (80014bc <StartInfoTask+0xa8>)
 8001454:	f002 f94a 	bl	80036ec <printf_>
								printf("Too cold\n \r");
							}
							else {
								printf("Optimal temperature\n \r");
							}
							break;
 8001458:	e029      	b.n	80014ae <StartInfoTask+0x9a>
							else if (infoData.data < TEMPERATURE_MIN) {
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b0e      	cmp	r3, #14
 800145e:	d803      	bhi.n	8001468 <StartInfoTask+0x54>
								printf("Too cold\n \r");
 8001460:	4817      	ldr	r0, [pc, #92]	; (80014c0 <StartInfoTask+0xac>)
 8001462:	f002 f943 	bl	80036ec <printf_>
							break;
 8001466:	e022      	b.n	80014ae <StartInfoTask+0x9a>
								printf("Optimal temperature\n \r");
 8001468:	4816      	ldr	r0, [pc, #88]	; (80014c4 <StartInfoTask+0xb0>)
 800146a:	f002 f93f 	bl	80036ec <printf_>
							break;
 800146e:	e01e      	b.n	80014ae <StartInfoTask+0x9a>


			case MOISTURE_SENSOR_TASK_ID:
				if(infoData.data > MOISTURE_MAX)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001476:	d903      	bls.n	8001480 <StartInfoTask+0x6c>
					printf("Dirt too wet\n \r");
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <StartInfoTask+0xb4>)
 800147a:	f002 f937 	bl	80036ec <printf_>
					printf("Dirt too dry\n \r");
				}
				else {
					printf("Dirt is moist enough\n \r");
				}
				break;
 800147e:	e016      	b.n	80014ae <StartInfoTask+0x9a>
				else if (infoData.data < MOISTURE_MIN) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001486:	d203      	bcs.n	8001490 <StartInfoTask+0x7c>
					printf("Dirt too dry\n \r");
 8001488:	4810      	ldr	r0, [pc, #64]	; (80014cc <StartInfoTask+0xb8>)
 800148a:	f002 f92f 	bl	80036ec <printf_>
				break;
 800148e:	e00e      	b.n	80014ae <StartInfoTask+0x9a>
					printf("Dirt is moist enough\n \r");
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <StartInfoTask+0xbc>)
 8001492:	f002 f92b 	bl	80036ec <printf_>
				break;
 8001496:	e00a      	b.n	80014ae <StartInfoTask+0x9a>

			case RAIN_DETECTION_TASK_ID:
				if(infoData.data == GPIO_PIN_SET)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <StartInfoTask+0x90>
					printf("It is raining\n \r");
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <StartInfoTask+0xc0>)
 80014a0:	f002 f924 	bl	80036ec <printf_>

			default:
				//I have noticed that with semaphore on uart at least 2 tasks must use printf.
				printf("");
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <StartInfoTask+0xc4>)
 80014a6:	f002 f921 	bl	80036ec <printf_>
				break;
 80014aa:	e000      	b.n	80014ae <StartInfoTask+0x9a>
								break;}
 80014ac:	bf00      	nop
			}


	  	}
    osDelay(2000);
 80014ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014b2:	f008 f8c7 	bl	8009644 <osDelay>
	if(osOK == osMessageQueueGet(queueToInfoHandle, (SensorData*)&infoData, 0, osWaitForever))
 80014b6:	e7b1      	b.n	800141c <StartInfoTask+0x8>
 80014b8:	20000104 	.word	0x20000104
 80014bc:	0800cee0 	.word	0x0800cee0
 80014c0:	0800ceec 	.word	0x0800ceec
 80014c4:	0800cef8 	.word	0x0800cef8
 80014c8:	0800cf10 	.word	0x0800cf10
 80014cc:	0800cf20 	.word	0x0800cf20
 80014d0:	0800cf30 	.word	0x0800cf30
 80014d4:	0800cf48 	.word	0x0800cf48
 80014d8:	0800cf5c 	.word	0x0800cf5c

080014dc <sensGPIOTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensGPIOTask */
void sensGPIOTask(void *argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensGPIOTask */
	SensorData gpiotask =
 80014e4:	2304      	movs	r3, #4
 80014e6:	723b      	strb	r3, [r7, #8]
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
				.data = 0
		};
  /* Infinite loop */
  for(;;)
  {
	 gpiotask.data = (uint32_t)HAL_GPIO_ReadPin(GPIO_IN_GPIO_Port, GPIO_IN_Pin);
 80014ec:	2108      	movs	r1, #8
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <sensGPIOTask+0x38>)
 80014f0:	f004 fe08 	bl	8006104 <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	60fb      	str	r3, [r7, #12]

	 osMessageQueuePut(queueToUARTHandle, (SensorData*)&gpiotask, 0, osWaitForever);
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <sensGPIOTask+0x3c>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	f107 0108 	add.w	r1, r7, #8
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	2200      	movs	r2, #0
 8001506:	f008 fa4b 	bl	80099a0 <osMessageQueuePut>
	 osDelay(5000);
 800150a:	f241 3088 	movw	r0, #5000	; 0x1388
 800150e:	f008 f899 	bl	8009644 <osDelay>
	 gpiotask.data = (uint32_t)HAL_GPIO_ReadPin(GPIO_IN_GPIO_Port, GPIO_IN_Pin);
 8001512:	e7eb      	b.n	80014ec <sensGPIOTask+0x10>
 8001514:	48000800 	.word	0x48000800
 8001518:	20000100 	.word	0x20000100

0800151c <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osSemaphoreAcquire(UART_SemaphoreHandle, 100);
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <_putchar+0x38>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2164      	movs	r1, #100	; 0x64
 800152c:	4618      	mov	r0, r3
 800152e:	f008 f92d 	bl	800978c <osSemaphoreAcquire>
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &character, 1, 1000); //for debug only
 8001532:	1df9      	adds	r1, r7, #7
 8001534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001538:	2201      	movs	r2, #1
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <_putchar+0x3c>)
 800153c:	f007 f8b6 	bl	80086ac <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart5, (uint8_t*) &character, 1, 1000);
	osSemaphoreRelease(UART_SemaphoreHandle);
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <_putchar+0x38>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f008 f973 	bl	8009830 <osSemaphoreRelease>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000108 	.word	0x20000108
 8001558:	20000220 	.word	0x20000220

0800155c <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af04      	add	r7, sp, #16
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	b29b      	uxth	r3, r3
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b299      	uxth	r1, r3
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	b29a      	uxth	r2, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f107 030f 	add.w	r3, r7, #15
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	f004 ffbc 	bl	8006508 <HAL_I2C_Mem_Read>

	return Value;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af04      	add	r7, sp, #16
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
 80015a6:	4613      	mov	r3, r2
 80015a8:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	791b      	ldrb	r3, [r3, #4]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b299      	uxth	r1, r3
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2301      	movs	r3, #1
 80015cc:	f004 fe88 	bl	80062e0 <HAL_I2C_Mem_Write>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af04      	add	r7, sp, #16
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	791b      	ldrb	r3, [r3, #4]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	b299      	uxth	r1, r3
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	9302      	str	r3, [sp, #8]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2301      	movs	r3, #1
 8001608:	f004 ff7e 	bl	8006508 <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	7b3b      	ldrb	r3, [r7, #12]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	b29b      	uxth	r3, r3
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af04      	add	r7, sp, #16
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	791b      	ldrb	r3, [r3, #4]
 8001638:	b29b      	uxth	r3, r3
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	b299      	uxth	r1, r3
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	b29a      	uxth	r2, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	2303      	movs	r3, #3
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	f004 ff58 	bl	8006508 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 8001658:	7b3b      	ldrb	r3, [r7, #12]
 800165a:	041a      	lsls	r2, r3, #16
 800165c:	7b7b      	ldrb	r3, [r7, #13]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	4313      	orrs	r3, r2
 8001662:	7bba      	ldrb	r2, [r7, #14]
 8001664:	4313      	orrs	r3, r2
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d901      	bls.n	8001684 <BMP280_SetMode+0x16>
 8001680:	2303      	movs	r3, #3
 8001682:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001684:	21f4      	movs	r1, #244	; 0xf4
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ff68 	bl	800155c <Read8>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 8001698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	b25a      	sxtb	r2, r3
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	461a      	mov	r2, r3
 80016b0:	21f4      	movs	r1, #244	; 0xf4
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff71 	bl	800159a <Write8>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d901      	bls.n	80016d6 <BMP280_SetPressureOversampling+0x16>
 80016d2:	2305      	movs	r3, #5
 80016d4:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80016d6:	21f4      	movs	r1, #244	; 0xf4
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff3f 	bl	800155c <Read8>
 80016de:	4603      	mov	r3, r0
 80016e0:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	f023 031c 	bic.w	r3, r3, #28
 80016e8:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	f003 031c 	and.w	r3, r3, #28
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	461a      	mov	r2, r3
 8001704:	21f4      	movs	r1, #244	; 0xf4
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff47 	bl	800159a <Write8>
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d901      	bls.n	800172a <BMP280_SetTemperatureOversampling+0x16>
 8001726:	2305      	movs	r3, #5
 8001728:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800172a:	21f4      	movs	r1, #244	; 0xf4
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff15 	bl	800155c <Read8>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	015b      	lsls	r3, r3, #5
 8001742:	b25a      	sxtb	r2, r3
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	4313      	orrs	r3, r2
 800174a:	b25b      	sxtb	r3, r3
 800174c:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	461a      	mov	r2, r3
 8001752:	21f4      	movs	r1, #244	; 0xf4
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff20 	bl	800159a <Write8>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 800176a:	21fa      	movs	r1, #250	; 0xfa
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff59 	bl	8001624 <Read24>
 8001772:	4603      	mov	r3, r0
 8001774:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	111b      	asrs	r3, r3, #4
 800177a:	60fb      	str	r3, [r7, #12]

	return Tmp;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 800178e:	21f7      	movs	r1, #247	; 0xf7
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff47 	bl	8001624 <Read24>
 8001796:	4603      	mov	r3, r0
 8001798:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	111b      	asrs	r3, r3, #4
 800179e:	60fb      	str	r3, [r7, #12]

	return Tmp;
 80017a0:	68fb      	ldr	r3, [r7, #12]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffd4 	bl	8001762 <BMP280_ReadTemperatureRaw>
 80017ba:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	10da      	asrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	8b5b      	ldrh	r3, [r3, #26]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	12db      	asrs	r3, r3, #11
 80017d4:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	111b      	asrs	r3, r3, #4
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	8b52      	ldrh	r2, [r2, #26]
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	1112      	asrs	r2, r2, #4
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	8b49      	ldrh	r1, [r1, #26]
 80017e8:	1a52      	subs	r2, r2, r1
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	139b      	asrs	r3, r3, #14
 80017fc:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	441a      	add	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3380      	adds	r3, #128	; 0x80
 8001814:	121b      	asrs	r3, r3, #8
 8001816:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 8001818:	68b8      	ldr	r0, [r7, #8]
 800181a:	f7fe fe53 	bl	80004c4 <__aeabi_i2d>
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <BMP280_ReadTemperature+0x98>)
 8001824:	f7fe ffe2 	bl	80007ec <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f994 	bl	8000b5c <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	ee07 3a90 	vmov	s15, r3
}
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40590000 	.word	0x40590000

08001848 <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff ffa9 	bl	80017ac <BMP280_ReadTemperature>
 800185a:	eef0 7a40 	vmov.f32	s15, s0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	105b      	asrs	r3, r3, #1
 800186a:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800186e:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	109b      	asrs	r3, r3, #2
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	1092      	asrs	r2, r2, #2
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	12db      	asrs	r3, r3, #11
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001890:	461a      	mov	r2, r3
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4413      	add	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	109a      	asrs	r2, r3, #2
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	4413      	add	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018b6:	4619      	mov	r1, r3
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	109b      	asrs	r3, r3, #2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	1092      	asrs	r2, r2, #2
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	135b      	asrs	r3, r3, #13
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	10da      	asrs	r2, r3, #3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018d2:	4619      	mov	r1, r3
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	105b      	asrs	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	149b      	asrs	r3, r3, #18
 80018e0:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	8b92      	ldrh	r2, [r2, #28]
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	13db      	asrs	r3, r3, #15
 80018f2:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 80018fa:	2301      	movs	r3, #1
 80018fc:	e054      	b.n	80019a8 <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff ff41 	bl	8001786 <BMP280_ReadPressureRaw>
 8001904:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f5c3 1280 	rsb	r2, r3, #1048576	; 0x100000
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	131b      	asrs	r3, r3, #12
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f640 4235 	movw	r2, #3125	; 0xc35
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db06      	blt.n	8001930 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005a      	lsls	r2, r3, #1
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e005      	b.n	800193c <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001942:	4619      	mov	r1, r3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	08d2      	lsrs	r2, r2, #3
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	0b5b      	lsrs	r3, r3, #13
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	131b      	asrs	r3, r3, #12
 8001958:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	135b      	asrs	r3, r3, #13
 800196c:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4413      	add	r3, r2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800197a:	4413      	add	r3, r2
 800197c:	111a      	asrs	r2, r3, #4
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001984:	69f8      	ldr	r0, [r7, #28]
 8001986:	f7fe fd8d 	bl	80004a4 <__aeabi_ui2d>
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <BMP280_ReadPressureAndTemperature+0x168>)
 8001990:	f7fe ff2c 	bl	80007ec <__aeabi_ddiv>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f8de 	bl	8000b5c <__aeabi_d2f>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	601a      	str	r2, [r3, #0]

	return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40590000 	.word	0x40590000

080019b4 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	4613      	mov	r3, r2
 80019c0:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 80019ce:	21d0      	movs	r1, #208	; 0xd0
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7ff fdc3 	bl	800155c <Read8>
 80019d6:	4603      	mov	r3, r0
 80019d8:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	2b58      	cmp	r3, #88	; 0x58
 80019de:	d001      	beq.n	80019e4 <BMP280_Init+0x30>
	{
		return 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e06c      	b.n	8001abe <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 80019e4:	2188      	movs	r1, #136	; 0x88
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff fdf6 	bl	80015d8 <Read16>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 80019f4:	218a      	movs	r1, #138	; 0x8a
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fdee 	bl	80015d8 <Read16>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001a04:	218c      	movs	r1, #140	; 0x8c
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff fde6 	bl	80015d8 <Read16>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001a14:	218e      	movs	r1, #142	; 0x8e
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff fdde 	bl	80015d8 <Read16>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001a24:	2190      	movs	r1, #144	; 0x90
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff fdd6 	bl	80015d8 <Read16>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001a34:	2192      	movs	r1, #146	; 0x92
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff fdce 	bl	80015d8 <Read16>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001a44:	2194      	movs	r1, #148	; 0x94
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fdc6 	bl	80015d8 <Read16>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001a54:	2196      	movs	r1, #150	; 0x96
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff fdbe 	bl	80015d8 <Read16>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001a64:	2198      	movs	r1, #152	; 0x98
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff fdb6 	bl	80015d8 <Read16>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b21a      	sxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001a74:	219a      	movs	r1, #154	; 0x9a
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff fdae 	bl	80015d8 <Read16>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001a84:	219c      	movs	r1, #156	; 0x9c
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fda6 	bl	80015d8 <Read16>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001a94:	219e      	movs	r1, #158	; 0x9e
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff fd9e 	bl	80015d8 <Read16>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001aa4:	2105      	movs	r1, #5
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff fe34 	bl	8001714 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001aac:	2105      	movs	r1, #5
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f7ff fe06 	bl	80016c0 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff fdd9 	bl	800166e <BMP280_SetMode>

	return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a3a      	ldr	r2, [pc, #232]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af6:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001afc:	f043 0320 	orr.w	r3, r3, #32
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a2e      	ldr	r2, [pc, #184]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2120      	movs	r1, #32
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f004 fae9 	bl	8006134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4815      	ldr	r0, [pc, #84]	; (8001bd0 <MX_GPIO_Init+0x108>)
 8001b7a:	f004 f941 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_IN_Pin;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_IN_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <MX_GPIO_Init+0x108>)
 8001b92:	f004 f935 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b96:	2320      	movs	r3, #32
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb0:	f004 f926 	bl	8005e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2105      	movs	r1, #5
 8001bb8:	2028      	movs	r0, #40	; 0x28
 8001bba:	f004 f8f9 	bl	8005db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bbe:	2028      	movs	r0, #40	; 0x28
 8001bc0:	f004 f910 	bl	8005de4 <HAL_NVIC_EnableIRQ>

}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48000800 	.word	0x48000800

08001bd4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <MX_I2C2_Init+0x78>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <MX_I2C2_Init+0x7c>)
 8001be2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001c10:	f004 facb 	bl	80061aa <HAL_I2C_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c1a:	f000 f911 	bl	8001e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001c22:	f005 f84d 	bl	8006cc0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c2c:	f000 f908 	bl	8001e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_I2C2_Init+0x74>)
 8001c34:	f005 f88f 	bl	8006d56 <HAL_I2CEx_ConfigDigitalFilter>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f000 f8ff 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000110 	.word	0x20000110
 8001c4c:	40005800 	.word	0x40005800
 8001c50:	30a0a7fb 	.word	0x30a0a7fb

08001c54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b09e      	sub	sp, #120	; 0x78
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2250      	movs	r2, #80	; 0x50
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00a fff1 	bl	800cc5c <memset>
  if(i2cHandle->Instance==I2C2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	; (8001d34 <HAL_I2C_MspInit+0xe0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d153      	bne.n	8001d2c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4618      	mov	r0, r3
 8001c92:	f005 fec1 	bl	8007a18 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c9c:	f000 f8d0 	bl	8001e40 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4814      	ldr	r0, [pc, #80]	; (8001d3c <HAL_I2C_MspInit+0xe8>)
 8001cec:	f004 f888 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf6:	2312      	movs	r3, #18
 8001cf8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d02:	2304      	movs	r3, #4
 8001d04:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d10:	f004 f876 	bl	8005e00 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001d1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_I2C_MspInit+0xe4>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3778      	adds	r7, #120	; 0x78
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40005800 	.word	0x40005800
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000800 	.word	0x48000800

08001d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d44:	f001 ff93 	bl	8003c6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d48:	f000 f81c 	bl	8001d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d4c:	f7ff febc 	bl	8001ac8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001d50:	f001 fe18 	bl	8003984 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001d54:	f7ff f8d0 	bl	8000ef8 <MX_ADC1_Init>
  MX_UART5_Init();
 8001d58:	f001 fe5e 	bl	8003a18 <MX_UART5_Init>
  MX_TIM6_Init();
 8001d5c:	f001 fdbc 	bl	80038d8 <MX_TIM6_Init>
  MX_I2C2_Init();
 8001d60:	f7ff ff38 	bl	8001bd4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&Bmp280, &hi2c2, BMP280_ADDRESS);
 8001d64:	2276      	movs	r2, #118	; 0x76
 8001d66:	4905      	ldr	r1, [pc, #20]	; (8001d7c <main+0x3c>)
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <main+0x40>)
 8001d6a:	f7ff fe23 	bl	80019b4 <BMP280_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d6e:	f007 fb8d 	bl	800948c <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d72:	f7ff f9e3 	bl	800113c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d76:	f007 fbad 	bl	80094d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <main+0x3a>
 8001d7c:	20000110 	.word	0x20000110
 8001d80:	20000164 	.word	0x20000164

08001d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b094      	sub	sp, #80	; 0x50
 8001d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	2238      	movs	r2, #56	; 0x38
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00a ff62 	bl	800cc5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f005 f822 	bl	8006df0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db6:	2340      	movs	r3, #64	; 0x40
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001dc6:	2355      	movs	r3, #85	; 0x55
 8001dc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f005 f8bc 	bl	8006f58 <HAL_RCC_OscConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001de6:	f000 f82b 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dea:	230f      	movs	r3, #15
 8001dec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dee:	2303      	movs	r3, #3
 8001df0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2104      	movs	r1, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fbba 	bl	800757c <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e0e:	f000 f817 	bl	8001e40 <Error_Handler>
  }
}
 8001e12:	bf00      	nop
 8001e14:	3750      	adds	r7, #80	; 0x50
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e2e:	f001 ff37 	bl	8003ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40012c00 	.word	0x40012c00

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>

08001e4a <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4603      	mov	r3, r0
 8001e58:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <_out_char+0x1e>
    _putchar(character);
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fb4c 	bl	800151c <_putchar>
  }
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e002      	b.n	8001ea2 <_strnlen_s+0x16>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <_strnlen_s+0x28>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	603a      	str	r2, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f3      	bne.n	8001e9c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	1ad3      	subs	r3, r2, r3
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ed4:	d904      	bls.n	8001ee0 <_is_digit+0x1a>
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b39      	cmp	r3, #57	; 0x39
 8001eda:	d801      	bhi.n	8001ee0 <_is_digit+0x1a>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <_is_digit+0x1c>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001f00:	e00e      	b.n	8001f20 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	1c59      	adds	r1, r3, #1
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6011      	str	r1, [r2, #0]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4403      	add	r3, r0
 8001f1c:	3b30      	subs	r3, #48	; 0x30
 8001f1e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ffcd 	bl	8001ec6 <_is_digit>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1e7      	bne.n	8001f02 <_atoi+0xe>
  }
  return i;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d125      	bne.n	8001fa4 <_out_rev+0x68>
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d120      	bne.n	8001fa4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e00a      	b.n	8001f7e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	1c53      	adds	r3, r2, #1
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	68fc      	ldr	r4, [r7, #12]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	2020      	movs	r0, #32
 8001f76:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3f0      	bcc.n	8001f68 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001f86:	e00d      	b.n	8001fa4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	4413      	add	r3, r2
 8001f94:	7818      	ldrb	r0, [r3, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	1c53      	adds	r3, r2, #1
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	68fc      	ldr	r4, [r7, #12]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	47a0      	blx	r4
  while (len) {
 8001fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ee      	bne.n	8001f88 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00e      	beq.n	8001fd2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001fb4:	e007      	b.n	8001fc6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	1c53      	adds	r3, r2, #1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	68fc      	ldr	r4, [r7, #12]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	2020      	movs	r0, #32
 8001fc4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d8f1      	bhi.n	8001fb6 <_out_rev+0x7a>
    }
  }

  return idx;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd90      	pop	{r4, r7, pc}

08001fdc <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d136      	bne.n	8002062 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d018      	beq.n	800202c <_ntoa_format+0x50>
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <_ntoa_format+0x50>
 8002004:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <_ntoa_format+0x3a>
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <_ntoa_format+0x50>
      width--;
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	3b01      	subs	r3, #1
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800201c:	e006      	b.n	800202c <_ntoa_format+0x50>
      buf[len++] = '0';
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	61fa      	str	r2, [r7, #28]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4413      	add	r3, r2
 8002028:	2230      	movs	r2, #48	; 0x30
 800202a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	429a      	cmp	r2, r3
 8002032:	d20a      	bcs.n	800204a <_ntoa_format+0x6e>
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b1f      	cmp	r3, #31
 8002038:	d9f1      	bls.n	800201e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800203a:	e006      	b.n	800204a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	61fa      	str	r2, [r7, #28]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4413      	add	r3, r2
 8002046:	2230      	movs	r2, #48	; 0x30
 8002048:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <_ntoa_format+0x86>
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	429a      	cmp	r2, r3
 800205a:	d202      	bcs.n	8002062 <_ntoa_format+0x86>
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b1f      	cmp	r3, #31
 8002060:	d9ec      	bls.n	800203c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d058      	beq.n	800211e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <_ntoa_format+0xc8>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <_ntoa_format+0xc8>
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	429a      	cmp	r2, r3
 8002082:	d003      	beq.n	800208c <_ntoa_format+0xb0>
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	429a      	cmp	r2, r3
 800208a:	d10b      	bne.n	80020a4 <_ntoa_format+0xc8>
      len--;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3b01      	subs	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <_ntoa_format+0xc8>
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	2b10      	cmp	r3, #16
 800209c:	d102      	bne.n	80020a4 <_ntoa_format+0xc8>
        len--;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d10f      	bne.n	80020ca <_ntoa_format+0xee>
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <_ntoa_format+0xee>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b1f      	cmp	r3, #31
 80020b8:	d807      	bhi.n	80020ca <_ntoa_format+0xee>
      buf[len++] = 'x';
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	61fa      	str	r2, [r7, #28]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	2278      	movs	r2, #120	; 0x78
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e01f      	b.n	800210a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d10f      	bne.n	80020f0 <_ntoa_format+0x114>
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <_ntoa_format+0x114>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	2b1f      	cmp	r3, #31
 80020de:	d807      	bhi.n	80020f0 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	61fa      	str	r2, [r7, #28]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4413      	add	r3, r2
 80020ea:	2258      	movs	r2, #88	; 0x58
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e00c      	b.n	800210a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d109      	bne.n	800210a <_ntoa_format+0x12e>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2b1f      	cmp	r3, #31
 80020fa:	d806      	bhi.n	800210a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	61fa      	str	r2, [r7, #28]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4413      	add	r3, r2
 8002106:	2262      	movs	r2, #98	; 0x62
 8002108:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	2b1f      	cmp	r3, #31
 800210e:	d806      	bhi.n	800211e <_ntoa_format+0x142>
      buf[len++] = '0';
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	61fa      	str	r2, [r7, #28]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4413      	add	r3, r2
 800211a:	2230      	movs	r2, #48	; 0x30
 800211c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	2b1f      	cmp	r3, #31
 8002122:	d824      	bhi.n	800216e <_ntoa_format+0x192>
    if (negative) {
 8002124:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <_ntoa_format+0x160>
      buf[len++] = '-';
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	61fa      	str	r2, [r7, #28]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4413      	add	r3, r2
 8002136:	222d      	movs	r2, #45	; 0x2d
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e018      	b.n	800216e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	61fa      	str	r2, [r7, #28]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4413      	add	r3, r2
 8002150:	222b      	movs	r2, #43	; 0x2b
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e00b      	b.n	800216e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	61fa      	str	r2, [r7, #28]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	2220      	movs	r2, #32
 800216c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	9303      	str	r3, [sp, #12]
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	9302      	str	r3, [sp, #8]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff fed9 	bl	8001f3c <_out_rev>
 800218a:	4603      	mov	r3, r0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b096      	sub	sp, #88	; 0x58
 8002198:	af08      	add	r7, sp, #32
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80021a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d103      	bne.n	80021b4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	f023 0310 	bic.w	r3, r3, #16
 80021b2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80021b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <_ntoa_long+0x30>
 80021be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d032      	beq.n	800222a <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80021c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80021cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021ce:	fb01 f202 	mul.w	r2, r1, r2
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80021d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021dc:	2b09      	cmp	r3, #9
 80021de:	d804      	bhi.n	80021ea <_ntoa_long+0x56>
 80021e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021e4:	3330      	adds	r3, #48	; 0x30
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	e00d      	b.n	8002206 <_ntoa_long+0x72>
 80021ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <_ntoa_long+0x64>
 80021f4:	2241      	movs	r2, #65	; 0x41
 80021f6:	e000      	b.n	80021fa <_ntoa_long+0x66>
 80021f8:	2261      	movs	r2, #97	; 0x61
 80021fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021fe:	4413      	add	r3, r2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3b0a      	subs	r3, #10
 8002204:	b2da      	uxtb	r2, r3
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	1c59      	adds	r1, r3, #1
 800220a:	6379      	str	r1, [r7, #52]	; 0x34
 800220c:	3338      	adds	r3, #56	; 0x38
 800220e:	443b      	add	r3, r7
 8002210:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800221e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <_ntoa_long+0x96>
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002226:	2b1f      	cmp	r3, #31
 8002228:	d9cc      	bls.n	80021c4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800222a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222c:	9306      	str	r3, [sp, #24]
 800222e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002230:	9305      	str	r3, [sp, #20]
 8002232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002234:	9304      	str	r3, [sp, #16]
 8002236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002238:	9303      	str	r3, [sp, #12]
 800223a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff fec3 	bl	8001fdc <_ntoa_format>
 8002256:	4603      	mov	r3, r0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3738      	adds	r7, #56	; 0x38
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b096      	sub	sp, #88	; 0x58
 8002264:	af08      	add	r7, sp, #32
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002276:	4313      	orrs	r3, r2
 8002278:	d103      	bne.n	8002282 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800227a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800227c:	f023 0310 	bic.w	r3, r3, #16
 8002280:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <_ntoa_long_long+0x34>
 800228c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002290:	4313      	orrs	r3, r2
 8002292:	d037      	beq.n	8002304 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002294:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002298:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800229c:	f7fe fcae 	bl	8000bfc <__aeabi_uldivmod>
 80022a0:	4613      	mov	r3, r2
 80022a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80022a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	d804      	bhi.n	80022b8 <_ntoa_long_long+0x58>
 80022ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022b2:	3330      	adds	r3, #48	; 0x30
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	e00d      	b.n	80022d4 <_ntoa_long_long+0x74>
 80022b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <_ntoa_long_long+0x66>
 80022c2:	2241      	movs	r2, #65	; 0x41
 80022c4:	e000      	b.n	80022c8 <_ntoa_long_long+0x68>
 80022c6:	2261      	movs	r2, #97	; 0x61
 80022c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022cc:	4413      	add	r3, r2
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3b0a      	subs	r3, #10
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	1c59      	adds	r1, r3, #1
 80022d8:	6379      	str	r1, [r7, #52]	; 0x34
 80022da:	3338      	adds	r3, #56	; 0x38
 80022dc:	443b      	add	r3, r7
 80022de:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80022e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80022ea:	f7fe fc87 	bl	8000bfc <__aeabi_uldivmod>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80022f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022fa:	4313      	orrs	r3, r2
 80022fc:	d002      	beq.n	8002304 <_ntoa_long_long+0xa4>
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	2b1f      	cmp	r3, #31
 8002302:	d9c7      	bls.n	8002294 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002308:	9206      	str	r2, [sp, #24]
 800230a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800230c:	9205      	str	r2, [sp, #20]
 800230e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002310:	9204      	str	r2, [sp, #16]
 8002312:	9303      	str	r3, [sp, #12]
 8002314:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002318:	9302      	str	r3, [sp, #8]
 800231a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7ff fe56 	bl	8001fdc <_ntoa_format>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3738      	adds	r7, #56	; 0x38
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	0000      	movs	r0, r0
 800233c:	0000      	movs	r0, r0
	...

08002340 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b09d      	sub	sp, #116	; 0x74
 8002344:	af04      	add	r7, sp, #16
 8002346:	6178      	str	r0, [r7, #20]
 8002348:	6139      	str	r1, [r7, #16]
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800236a:	f7fe fb7d 	bl	8000a68 <__aeabi_dcmpeq>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10f      	bne.n	8002394 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002376:	9303      	str	r3, [sp, #12]
 8002378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	2303      	movs	r3, #3
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	4ba7      	ldr	r3, [pc, #668]	; (8002620 <_ftoa+0x2e0>)
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	6939      	ldr	r1, [r7, #16]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff fdd6 	bl	8001f3c <_out_rev>
 8002390:	4603      	mov	r3, r0
 8002392:	e222      	b.n	80027da <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800239c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023a0:	f7fe fb6c 	bl	8000a7c <__aeabi_dcmplt>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00f      	beq.n	80023ca <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80023aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ac:	9303      	str	r3, [sp, #12]
 80023ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2304      	movs	r3, #4
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	4b9b      	ldr	r3, [pc, #620]	; (8002624 <_ftoa+0x2e4>)
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	6939      	ldr	r1, [r7, #16]
 80023c0:	6978      	ldr	r0, [r7, #20]
 80023c2:	f7ff fdbb 	bl	8001f3c <_out_rev>
 80023c6:	4603      	mov	r3, r0
 80023c8:	e207      	b.n	80027da <_ftoa+0x49a>
  if (value > DBL_MAX)
 80023ca:	f04f 32ff 	mov.w	r2, #4294967295
 80023ce:	4b96      	ldr	r3, [pc, #600]	; (8002628 <_ftoa+0x2e8>)
 80023d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023d4:	f7fe fb70 	bl	8000ab8 <__aeabi_dcmpgt>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01d      	beq.n	800241a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80023de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <_ftoa+0xac>
 80023e8:	4b90      	ldr	r3, [pc, #576]	; (800262c <_ftoa+0x2ec>)
 80023ea:	e000      	b.n	80023ee <_ftoa+0xae>
 80023ec:	4b90      	ldr	r3, [pc, #576]	; (8002630 <_ftoa+0x2f0>)
 80023ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023f0:	f002 0204 	and.w	r2, r2, #4
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	d001      	beq.n	80023fc <_ftoa+0xbc>
 80023f8:	2204      	movs	r2, #4
 80023fa:	e000      	b.n	80023fe <_ftoa+0xbe>
 80023fc:	2203      	movs	r2, #3
 80023fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002400:	9103      	str	r1, [sp, #12]
 8002402:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002404:	9102      	str	r1, [sp, #8]
 8002406:	9201      	str	r2, [sp, #4]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	6939      	ldr	r1, [r7, #16]
 8002410:	6978      	ldr	r0, [r7, #20]
 8002412:	f7ff fd93 	bl	8001f3c <_out_rev>
 8002416:	4603      	mov	r3, r0
 8002418:	e1df      	b.n	80027da <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800241a:	a37d      	add	r3, pc, #500	; (adr r3, 8002610 <_ftoa+0x2d0>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002424:	f7fe fb48 	bl	8000ab8 <__aeabi_dcmpgt>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <_ftoa+0x102>
 800242e:	a37a      	add	r3, pc, #488	; (adr r3, 8002618 <_ftoa+0x2d8>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002438:	f7fe fb20 	bl	8000a7c <__aeabi_dcmplt>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00f      	beq.n	8002462 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	ed97 0b00 	vldr	d0, [r7]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	6939      	ldr	r1, [r7, #16]
 8002458:	6978      	ldr	r0, [r7, #20]
 800245a:	f000 f9c9 	bl	80027f0 <_etoa>
 800245e:	4603      	mov	r3, r0
 8002460:	e1bb      	b.n	80027da <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002474:	f7fe fb02 	bl	8000a7c <__aeabi_dcmplt>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00e      	beq.n	800249c <_ftoa+0x15c>
    negative = true;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002488:	f04f 0000 	mov.w	r0, #0
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	f7fd feca 	bl	8000228 <__aeabi_dsub>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800249c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80024a6:	2306      	movs	r3, #6
 80024a8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80024aa:	e00a      	b.n	80024c2 <_ftoa+0x182>
    buf[len++] = '0';
 80024ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024b2:	3360      	adds	r3, #96	; 0x60
 80024b4:	443b      	add	r3, r7
 80024b6:	2230      	movs	r2, #48	; 0x30
 80024b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80024bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024be:	3b01      	subs	r3, #1
 80024c0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80024c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c4:	2b1f      	cmp	r3, #31
 80024c6:	d802      	bhi.n	80024ce <_ftoa+0x18e>
 80024c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ca:	2b09      	cmp	r3, #9
 80024cc:	d8ee      	bhi.n	80024ac <_ftoa+0x16c>
  }

  int whole = (int)value;
 80024ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024d2:	f7fe fafb 	bl	8000acc <__aeabi_d2iz>
 80024d6:	4603      	mov	r3, r0
 80024d8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80024da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024dc:	f7fd fff2 	bl	80004c4 <__aeabi_i2d>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024e8:	f7fd fe9e 	bl	8000228 <__aeabi_dsub>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <_ftoa+0x2f4>)
 80024f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fe f84a 	bl	8000598 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800250c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002510:	f7fe fb04 	bl	8000b1c <__aeabi_d2uiz>
 8002514:	4603      	mov	r3, r0
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002518:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800251a:	f7fd ffc3 	bl	80004a4 <__aeabi_ui2d>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002526:	f7fd fe7f 	bl	8000228 <__aeabi_dsub>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	4b40      	ldr	r3, [pc, #256]	; (8002638 <_ftoa+0x2f8>)
 8002538:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800253c:	f7fe fabc 	bl	8000ab8 <__aeabi_dcmpgt>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <_ftoa+0x234>
    ++frac;
 8002546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002548:	3301      	adds	r3, #1
 800254a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800254c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800254e:	f7fd ffa9 	bl	80004a4 <__aeabi_ui2d>
 8002552:	4a38      	ldr	r2, [pc, #224]	; (8002634 <_ftoa+0x2f4>)
 8002554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe faa1 	bl	8000aa4 <__aeabi_dcmpge>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01a      	beq.n	800259e <_ftoa+0x25e>
      frac = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800256c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256e:	3301      	adds	r3, #1
 8002570:	657b      	str	r3, [r7, #84]	; 0x54
 8002572:	e014      	b.n	800259e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <_ftoa+0x2f8>)
 800257a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800257e:	f7fe fa7d 	bl	8000a7c <__aeabi_dcmplt>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258a:	2b00      	cmp	r3, #0
 800258c:	d004      	beq.n	8002598 <_ftoa+0x258>
 800258e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259a:	3301      	adds	r3, #1
 800259c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800259e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d14b      	bne.n	800263c <_ftoa+0x2fc>
    diff = value - (double)whole;
 80025a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025a6:	f7fd ff8d 	bl	80004c4 <__aeabi_i2d>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025b2:	f7fd fe39 	bl	8000228 <__aeabi_dsub>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80025be:	2301      	movs	r3, #1
 80025c0:	461c      	mov	r4, r3
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <_ftoa+0x2f8>)
 80025c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80025cc:	f7fe fa56 	bl	8000a7c <__aeabi_dcmplt>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <_ftoa+0x29a>
 80025d6:	2300      	movs	r3, #0
 80025d8:	461c      	mov	r4, r3
 80025da:	b2e3      	uxtb	r3, r4
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <_ftoa+0x2ba>
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_ftoa+0x2f8>)
 80025ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80025f0:	f7fe fa62 	bl	8000ab8 <__aeabi_dcmpgt>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d064      	beq.n	80026c4 <_ftoa+0x384>
 80025fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8081 	beq.w	8002708 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	3301      	adds	r3, #1
 800260a:	657b      	str	r3, [r7, #84]	; 0x54
 800260c:	e07c      	b.n	8002708 <_ftoa+0x3c8>
 800260e:	bf00      	nop
 8002610:	00000000 	.word	0x00000000
 8002614:	41cdcd65 	.word	0x41cdcd65
 8002618:	00000000 	.word	0x00000000
 800261c:	c1cdcd65 	.word	0xc1cdcd65
 8002620:	0800cf60 	.word	0x0800cf60
 8002624:	0800cf64 	.word	0x0800cf64
 8002628:	7fefffff 	.word	0x7fefffff
 800262c:	0800cf6c 	.word	0x0800cf6c
 8002630:	0800cf74 	.word	0x0800cf74
 8002634:	0800d0b8 	.word	0x0800d0b8
 8002638:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800263c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002640:	e01f      	b.n	8002682 <_ftoa+0x342>
      --count;
 8002642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002644:	3b01      	subs	r3, #1
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002648:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800264a:	4b66      	ldr	r3, [pc, #408]	; (80027e4 <_ftoa+0x4a4>)
 800264c:	fba3 2301 	umull	r2, r3, r3, r1
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	1aca      	subs	r2, r1, r3
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002660:	1c59      	adds	r1, r3, #1
 8002662:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002664:	3230      	adds	r2, #48	; 0x30
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	3360      	adds	r3, #96	; 0x60
 800266a:	443b      	add	r3, r7
 800266c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002672:	4a5c      	ldr	r2, [pc, #368]	; (80027e4 <_ftoa+0x4a4>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002684:	2b1f      	cmp	r3, #31
 8002686:	d9dc      	bls.n	8002642 <_ftoa+0x302>
 8002688:	e009      	b.n	800269e <_ftoa+0x35e>
        break;
 800268a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800268c:	e007      	b.n	800269e <_ftoa+0x35e>
      buf[len++] = '0';
 800268e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002694:	3360      	adds	r3, #96	; 0x60
 8002696:	443b      	add	r3, r7
 8002698:	2230      	movs	r2, #48	; 0x30
 800269a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800269e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a0:	2b1f      	cmp	r3, #31
 80026a2:	d804      	bhi.n	80026ae <_ftoa+0x36e>
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a6:	1e5a      	subs	r2, r3, #1
 80026a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ef      	bne.n	800268e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80026ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b0:	2b1f      	cmp	r3, #31
 80026b2:	d829      	bhi.n	8002708 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80026b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026ba:	3360      	adds	r3, #96	; 0x60
 80026bc:	443b      	add	r3, r7
 80026be:	222e      	movs	r2, #46	; 0x2e
 80026c0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80026c4:	e020      	b.n	8002708 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80026c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026c8:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <_ftoa+0x4a8>)
 80026ca:	fb83 1302 	smull	r1, r3, r3, r2
 80026ce:	1099      	asrs	r1, r3, #2
 80026d0:	17d3      	asrs	r3, r2, #31
 80026d2:	1ac9      	subs	r1, r1, r3
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	1ad1      	subs	r1, r2, r3
 80026de:	b2ca      	uxtb	r2, r1
 80026e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80026e6:	3230      	adds	r2, #48	; 0x30
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	3360      	adds	r3, #96	; 0x60
 80026ec:	443b      	add	r3, r7
 80026ee:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <_ftoa+0x4a8>)
 80026f6:	fb82 1203 	smull	r1, r2, r2, r3
 80026fa:	1092      	asrs	r2, r2, #2
 80026fc:	17db      	asrs	r3, r3, #31
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	657b      	str	r3, [r7, #84]	; 0x54
 8002702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270a:	2b1f      	cmp	r3, #31
 800270c:	d9db      	bls.n	80026c6 <_ftoa+0x386>
 800270e:	e000      	b.n	8002712 <_ftoa+0x3d2>
      break;
 8002710:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d123      	bne.n	8002764 <_ftoa+0x424>
 800271c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01e      	beq.n	8002764 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002728:	2b00      	cmp	r3, #0
 800272a:	d014      	beq.n	8002756 <_ftoa+0x416>
 800272c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002730:	2b00      	cmp	r3, #0
 8002732:	d104      	bne.n	800273e <_ftoa+0x3fe>
 8002734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <_ftoa+0x416>
      width--;
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	3b01      	subs	r3, #1
 8002742:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002744:	e007      	b.n	8002756 <_ftoa+0x416>
      buf[len++] = '0';
 8002746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800274c:	3360      	adds	r3, #96	; 0x60
 800274e:	443b      	add	r3, r7
 8002750:	2230      	movs	r2, #48	; 0x30
 8002752:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002756:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275a:	429a      	cmp	r2, r3
 800275c:	d202      	bcs.n	8002764 <_ftoa+0x424>
 800275e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002760:	2b1f      	cmp	r3, #31
 8002762:	d9f0      	bls.n	8002746 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002766:	2b1f      	cmp	r3, #31
 8002768:	d827      	bhi.n	80027ba <_ftoa+0x47a>
    if (negative) {
 800276a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <_ftoa+0x444>
      buf[len++] = '-';
 8002772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002778:	3360      	adds	r3, #96	; 0x60
 800277a:	443b      	add	r3, r7
 800277c:	222d      	movs	r2, #45	; 0x2d
 800277e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002782:	e01a      	b.n	80027ba <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8002784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800278e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	443b      	add	r3, r7
 8002798:	222b      	movs	r2, #43	; 0x2b
 800279a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800279e:	e00c      	b.n	80027ba <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80027a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <_ftoa+0x47a>
      buf[len++] = ' ';
 80027aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027b0:	3360      	adds	r3, #96	; 0x60
 80027b2:	443b      	add	r3, r7
 80027b4:	2220      	movs	r2, #32
 80027b6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80027ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027bc:	9303      	str	r3, [sp, #12]
 80027be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c0:	9302      	str	r3, [sp, #8]
 80027c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	f107 0318 	add.w	r3, r7, #24
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	6939      	ldr	r1, [r7, #16]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff fbb2 	bl	8001f3c <_out_rev>
 80027d8:	4603      	mov	r3, r0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3764      	adds	r7, #100	; 0x64
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd90      	pop	{r4, r7, pc}
 80027e2:	bf00      	nop
 80027e4:	cccccccd 	.word	0xcccccccd
 80027e8:	66666667 	.word	0x66666667
 80027ec:	00000000 	.word	0x00000000

080027f0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80027f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f4:	b09f      	sub	sp, #124	; 0x7c
 80027f6:	af06      	add	r7, sp, #24
 80027f8:	6278      	str	r0, [r7, #36]	; 0x24
 80027fa:	6239      	str	r1, [r7, #32]
 80027fc:	61fa      	str	r2, [r7, #28]
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002804:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002808:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800280c:	f7fe f92c 	bl	8000a68 <__aeabi_dcmpeq>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d014      	beq.n	8002840 <_etoa+0x50>
 8002816:	f04f 32ff 	mov.w	r2, #4294967295
 800281a:	4bc1      	ldr	r3, [pc, #772]	; (8002b20 <_etoa+0x330>)
 800281c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002820:	f7fe f94a 	bl	8000ab8 <__aeabi_dcmpgt>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <_etoa+0x50>
 800282a:	f04f 32ff 	mov.w	r2, #4294967295
 800282e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002832:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002836:	f7fe f921 	bl	8000a7c <__aeabi_dcmplt>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	ed97 0b04 	vldr	d0, [r7, #16]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	6a39      	ldr	r1, [r7, #32]
 800285c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285e:	f7ff fd6f 	bl	8002340 <_ftoa>
 8002862:	4603      	mov	r3, r0
 8002864:	e23f      	b.n	8002ce6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8002866:	2301      	movs	r3, #1
 8002868:	461e      	mov	r6, r3
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002876:	f7fe f901 	bl	8000a7c <__aeabi_dcmplt>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <_etoa+0x94>
 8002880:	2300      	movs	r3, #0
 8002882:	461e      	mov	r6, r3
 8002884:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8002888:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <_etoa+0xb4>
    value = -value;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	ed97 7b00 	vldr	d7, [r7]
 80028a0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80028a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80028b0:	2306      	movs	r3, #6
 80028b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80028b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80028be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	0d0a      	lsrs	r2, r1, #20
 80028cc:	2300      	movs	r3, #0
 80028ce:	4613      	mov	r3, r2
 80028d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80028d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80028da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028de:	4690      	mov	r8, r2
 80028e0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80028e4:	4644      	mov	r4, r8
 80028e6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80028ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80028ee:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80028f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80028f4:	f7fd fde6 	bl	80004c4 <__aeabi_i2d>
 80028f8:	a37d      	add	r3, pc, #500	; (adr r3, 8002af0 <_etoa+0x300>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd fe4b 	bl	8000598 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	a37b      	add	r3, pc, #492	; (adr r3, 8002af8 <_etoa+0x308>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fc8c 	bl	800022c <__adddf3>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4614      	mov	r4, r2
 800291a:	461d      	mov	r5, r3
 800291c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	4b7f      	ldr	r3, [pc, #508]	; (8002b24 <_etoa+0x334>)
 8002926:	f7fd fc7f 	bl	8000228 <__aeabi_dsub>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	a373      	add	r3, pc, #460	; (adr r3, 8002b00 <_etoa+0x310>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd fe2e 	bl	8000598 <__aeabi_dmul>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fc72 	bl	800022c <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f8bc 	bl	8000acc <__aeabi_d2iz>
 8002954:	4603      	mov	r3, r0
 8002956:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002958:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800295a:	f7fd fdb3 	bl	80004c4 <__aeabi_i2d>
 800295e:	a36a      	add	r3, pc, #424	; (adr r3, 8002b08 <_etoa+0x318>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fe18 	bl	8000598 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <_etoa+0x338>)
 8002976:	f7fd fc59 	bl	800022c <__adddf3>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f7fe f8a3 	bl	8000acc <__aeabi_d2iz>
 8002986:	4603      	mov	r3, r0
 8002988:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800298a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800298c:	f7fd fd9a 	bl	80004c4 <__aeabi_i2d>
 8002990:	a35f      	add	r3, pc, #380	; (adr r3, 8002b10 <_etoa+0x320>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fdff 	bl	8000598 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4614      	mov	r4, r2
 80029a0:	461d      	mov	r5, r3
 80029a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80029a4:	f7fd fd8e 	bl	80004c4 <__aeabi_i2d>
 80029a8:	a35b      	add	r3, pc, #364	; (adr r3, 8002b18 <_etoa+0x328>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	f7fd fdf3 	bl	8000598 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4620      	mov	r0, r4
 80029b8:	4629      	mov	r1, r5
 80029ba:	f7fd fc35 	bl	8000228 <__aeabi_dsub>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 80029c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80029ce:	f7fd fde3 	bl	8000598 <__aeabi_dmul>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80029da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029dc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80029e0:	17da      	asrs	r2, r3, #31
 80029e2:	469a      	mov	sl, r3
 80029e4:	4693      	mov	fp, r2
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80029f2:	2200      	movs	r2, #0
 80029f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80029f8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80029fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	f7fd fc12 	bl	800022c <__adddf3>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4690      	mov	r8, r2
 8002a0e:	4699      	mov	r9, r3
 8002a10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a14:	f04f 0000 	mov.w	r0, #0
 8002a18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a1c:	f7fd fc04 	bl	8000228 <__aeabi_dsub>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4692      	mov	sl, r2
 8002a26:	469b      	mov	fp, r3
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <_etoa+0x33c>)
 8002a2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a32:	f7fd fedb 	bl	80007ec <__aeabi_ddiv>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <_etoa+0x340>)
 8002a44:	f7fd fbf2 	bl	800022c <__adddf3>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a50:	f7fd fecc 	bl	80007ec <__aeabi_ddiv>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <_etoa+0x344>)
 8002a62:	f7fd fbe3 	bl	800022c <__adddf3>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a6e:	f7fd febd 	bl	80007ec <__aeabi_ddiv>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4650      	mov	r0, sl
 8002a78:	4659      	mov	r1, fp
 8002a7a:	f7fd fbd7 	bl	800022c <__adddf3>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4640      	mov	r0, r8
 8002a84:	4649      	mov	r1, r9
 8002a86:	f7fd feb1 	bl	80007ec <__aeabi_ddiv>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <_etoa+0x348>)
 8002a98:	f7fd fbc8 	bl	800022c <__adddf3>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	f7fd fd78 	bl	8000598 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ab8:	f7fd ffe0 	bl	8000a7c <__aeabi_dcmplt>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <_etoa+0x2ee>
    expval--;
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002ac8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <_etoa+0x340>)
 8002ad2:	f7fd fe8b 	bl	80007ec <__aeabi_ddiv>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae0:	2b63      	cmp	r3, #99	; 0x63
 8002ae2:	dc2b      	bgt.n	8002b3c <_etoa+0x34c>
 8002ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002aea:	db27      	blt.n	8002b3c <_etoa+0x34c>
 8002aec:	2304      	movs	r3, #4
 8002aee:	e026      	b.n	8002b3e <_etoa+0x34e>
 8002af0:	509f79fb 	.word	0x509f79fb
 8002af4:	3fd34413 	.word	0x3fd34413
 8002af8:	8b60c8b3 	.word	0x8b60c8b3
 8002afc:	3fc68a28 	.word	0x3fc68a28
 8002b00:	636f4361 	.word	0x636f4361
 8002b04:	3fd287a7 	.word	0x3fd287a7
 8002b08:	0979a371 	.word	0x0979a371
 8002b0c:	400a934f 	.word	0x400a934f
 8002b10:	bbb55516 	.word	0xbbb55516
 8002b14:	40026bb1 	.word	0x40026bb1
 8002b18:	fefa39ef 	.word	0xfefa39ef
 8002b1c:	3fe62e42 	.word	0x3fe62e42
 8002b20:	7fefffff 	.word	0x7fefffff
 8002b24:	3ff80000 	.word	0x3ff80000
 8002b28:	3fe00000 	.word	0x3fe00000
 8002b2c:	402c0000 	.word	0x402c0000
 8002b30:	40240000 	.word	0x40240000
 8002b34:	40180000 	.word	0x40180000
 8002b38:	3ff00000 	.word	0x3ff00000
 8002b3c:	2305      	movs	r3, #5
 8002b3e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03d      	beq.n	8002bc8 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002b4c:	a368      	add	r3, pc, #416	; (adr r3, 8002cf0 <_etoa+0x500>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b56:	f7fd ffa5 	bl	8000aa4 <__aeabi_dcmpge>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d024      	beq.n	8002baa <_etoa+0x3ba>
 8002b60:	a365      	add	r3, pc, #404	; (adr r3, 8002cf8 <_etoa+0x508>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b6a:	f7fd ff87 	bl	8000a7c <__aeabi_dcmplt>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01a      	beq.n	8002baa <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	da07      	bge.n	8002b8e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002b7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b8c:	e002      	b.n	8002b94 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ba8:	e00e      	b.n	8002bc8 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <_etoa+0x3d8>
 8002bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <_etoa+0x3d8>
        --prec;
 8002bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002bce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d904      	bls.n	8002be2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	657b      	str	r3, [r7, #84]	; 0x54
 8002be0:	e001      	b.n	8002be6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <_etoa+0x40c>
 8002bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <_etoa+0x426>
    value /= conv.F;
 8002c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c0a:	f7fd fdef 	bl	80007ec <__aeabi_ddiv>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002c1a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <_etoa+0x440>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e003      	b.n	8002c38 <_etoa+0x448>
 8002c30:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c34:	ed87 7b02 	vstr	d7, [r7, #8]
 8002c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c40:	9302      	str	r3, [sp, #8]
 8002c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	6a39      	ldr	r1, [r7, #32]
 8002c56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c58:	f7ff fb72 	bl	8002340 <_ftoa>
 8002c5c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03f      	beq.n	8002ce4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <_etoa+0x484>
 8002c70:	2045      	movs	r0, #69	; 0x45
 8002c72:	e000      	b.n	8002c76 <_etoa+0x486>
 8002c74:	2065      	movs	r0, #101	; 0x65
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	1c53      	adds	r3, r2, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	6a39      	ldr	r1, [r7, #32]
 8002c82:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bfb8      	it	lt
 8002c8a:	425b      	neglt	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c90:	0fdb      	lsrs	r3, r3, #31
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c96:	3a01      	subs	r2, #1
 8002c98:	2105      	movs	r1, #5
 8002c9a:	9105      	str	r1, [sp, #20]
 8002c9c:	9204      	str	r2, [sp, #16]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	9203      	str	r2, [sp, #12]
 8002ca2:	220a      	movs	r2, #10
 8002ca4:	9202      	str	r2, [sp, #8]
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	9000      	str	r0, [sp, #0]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	6a39      	ldr	r1, [r7, #32]
 8002cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cb2:	f7ff fa6f 	bl	8002194 <_ntoa_long>
 8002cb6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00f      	beq.n	8002ce4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002cc4:	e007      	b.n	8002cd6 <_etoa+0x4e6>
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	1c53      	adds	r3, r2, #1
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	2020      	movs	r0, #32
 8002cd4:	47a0      	blx	r4
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8f0      	bhi.n	8002cc6 <_etoa+0x4d6>
    }
  }
  return idx;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3764      	adds	r7, #100	; 0x64
 8002cea:	46bd      	mov	sp, r7
 8002cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf0:	eb1c432d 	.word	0xeb1c432d
 8002cf4:	3f1a36e2 	.word	0x3f1a36e2
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	412e8480 	.word	0x412e8480

08002d00 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d04:	b0a3      	sub	sp, #140	; 0x8c
 8002d06:	af0a      	add	r7, sp, #40	; 0x28
 8002d08:	6178      	str	r0, [r7, #20]
 8002d0a:	6139      	str	r1, [r7, #16]
 8002d0c:	60fa      	str	r2, [r7, #12]
 8002d0e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 84cf 	bne.w	80036ba <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8002d1c:	4ba8      	ldr	r3, [pc, #672]	; (8002fc0 <_vsnprintf+0x2c0>)
 8002d1e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002d20:	f000 bccb 	b.w	80036ba <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b25      	cmp	r3, #37	; 0x25
 8002d2a:	d00d      	beq.n	8002d48 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	7818      	ldrb	r0, [r3, #0]
 8002d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d32:	1c53      	adds	r3, r2, #1
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d36:	697c      	ldr	r4, [r7, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6939      	ldr	r1, [r7, #16]
 8002d3c:	47a0      	blx	r4
      format++;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
      continue;
 8002d44:	f000 bcb9 	b.w	80036ba <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	3b20      	subs	r3, #32
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d857      	bhi.n	8002e0c <_vsnprintf+0x10c>
 8002d5c:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <_vsnprintf+0x64>)
 8002d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d62:	bf00      	nop
 8002d64:	08002de5 	.word	0x08002de5
 8002d68:	08002e0d 	.word	0x08002e0d
 8002d6c:	08002e0d 	.word	0x08002e0d
 8002d70:	08002df9 	.word	0x08002df9
 8002d74:	08002e0d 	.word	0x08002e0d
 8002d78:	08002e0d 	.word	0x08002e0d
 8002d7c:	08002e0d 	.word	0x08002e0d
 8002d80:	08002e0d 	.word	0x08002e0d
 8002d84:	08002e0d 	.word	0x08002e0d
 8002d88:	08002e0d 	.word	0x08002e0d
 8002d8c:	08002e0d 	.word	0x08002e0d
 8002d90:	08002dd1 	.word	0x08002dd1
 8002d94:	08002e0d 	.word	0x08002e0d
 8002d98:	08002dbd 	.word	0x08002dbd
 8002d9c:	08002e0d 	.word	0x08002e0d
 8002da0:	08002e0d 	.word	0x08002e0d
 8002da4:	08002da9 	.word	0x08002da9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	3301      	adds	r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	2301      	movs	r3, #1
 8002db8:	653b      	str	r3, [r7, #80]	; 0x50
 8002dba:	e02a      	b.n	8002e12 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	2301      	movs	r3, #1
 8002dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8002dce:	e020      	b.n	8002e12 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	2301      	movs	r3, #1
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
 8002de2:	e016      	b.n	8002e12 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	2301      	movs	r3, #1
 8002df4:	653b      	str	r3, [r7, #80]	; 0x50
 8002df6:	e00c      	b.n	8002e12 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3301      	adds	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	2301      	movs	r3, #1
 8002e08:	653b      	str	r3, [r7, #80]	; 0x50
 8002e0a:	e002      	b.n	8002e12 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e10:	bf00      	nop
      }
    } while (n);
 8002e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d19c      	bne.n	8002d52 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f850 	bl	8001ec6 <_is_digit>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002e2c:	f107 0308 	add.w	r3, r7, #8
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f85f 	bl	8001ef4 <_atoi>
 8002e36:	65b8      	str	r0, [r7, #88]	; 0x58
 8002e38:	e01a      	b.n	8002e70 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e40:	d116      	bne.n	8002e70 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8002e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e46:	1d1a      	adds	r2, r3, #4
 8002e48:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da07      	bge.n	8002e66 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8002e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	425b      	negs	r3, r3
 8002e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e64:	e001      	b.n	8002e6a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b2e      	cmp	r3, #46	; 0x2e
 8002e7a:	d127      	bne.n	8002ecc <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8002e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e82:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f819 	bl	8001ec6 <_is_digit>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff f828 	bl	8001ef4 <_atoi>
 8002ea4:	6578      	str	r0, [r7, #84]	; 0x54
 8002ea6:	e011      	b.n	8002ecc <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b2a      	cmp	r3, #42	; 0x2a
 8002eae:	d10d      	bne.n	8002ecc <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eb4:	1d1a      	adds	r2, r3, #4
 8002eb6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002ec4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	3b68      	subs	r3, #104	; 0x68
 8002ed2:	2b12      	cmp	r3, #18
 8002ed4:	d866      	bhi.n	8002fa4 <_vsnprintf+0x2a4>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <_vsnprintf+0x1dc>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f4f 	.word	0x08002f4f
 8002ee0:	08002fa5 	.word	0x08002fa5
 8002ee4:	08002f85 	.word	0x08002f85
 8002ee8:	08002fa5 	.word	0x08002fa5
 8002eec:	08002f29 	.word	0x08002f29
 8002ef0:	08002fa5 	.word	0x08002fa5
 8002ef4:	08002fa5 	.word	0x08002fa5
 8002ef8:	08002fa5 	.word	0x08002fa5
 8002efc:	08002fa5 	.word	0x08002fa5
 8002f00:	08002fa5 	.word	0x08002fa5
 8002f04:	08002fa5 	.word	0x08002fa5
 8002f08:	08002fa5 	.word	0x08002fa5
 8002f0c:	08002f75 	.word	0x08002f75
 8002f10:	08002fa5 	.word	0x08002fa5
 8002f14:	08002fa5 	.word	0x08002fa5
 8002f18:	08002fa5 	.word	0x08002fa5
 8002f1c:	08002fa5 	.word	0x08002fa5
 8002f20:	08002fa5 	.word	0x08002fa5
 8002f24:	08002f95 	.word	0x08002f95
      case 'l' :
        flags |= FLAGS_LONG;
 8002f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b6c      	cmp	r3, #108	; 0x6c
 8002f3c:	d134      	bne.n	8002fa8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f44:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002f4c:	e02c      	b.n	8002fa8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f54:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b68      	cmp	r3, #104	; 0x68
 8002f62:	d123      	bne.n	8002fac <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8002f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002f72:	e01b      	b.n	8002fac <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60bb      	str	r3, [r7, #8]
        break;
 8002f82:	e014      	b.n	8002fae <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]
        break;
 8002f92:	e00c      	b.n	8002fae <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	60bb      	str	r3, [r7, #8]
        break;
 8002fa2:	e004      	b.n	8002fae <_vsnprintf+0x2ae>
      default :
        break;
 8002fa4:	bf00      	nop
 8002fa6:	e002      	b.n	8002fae <_vsnprintf+0x2ae>
        break;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <_vsnprintf+0x2ae>
        break;
 8002fac:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b67      	cmp	r3, #103	; 0x67
 8002fb4:	f300 80b8 	bgt.w	8003128 <_vsnprintf+0x428>
 8002fb8:	2b25      	cmp	r3, #37	; 0x25
 8002fba:	da27      	bge.n	800300c <_vsnprintf+0x30c>
 8002fbc:	e370      	b.n	80036a0 <_vsnprintf+0x9a0>
 8002fbe:	bf00      	nop
 8002fc0:	08001e4b 	.word	0x08001e4b
 8002fc4:	3b69      	subs	r3, #105	; 0x69
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	f249 0241 	movw	r2, #36929	; 0x9041
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	bf14      	ite	ne
 8002fd6:	2201      	movne	r2, #1
 8002fd8:	2200      	moveq	r2, #0
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	2a00      	cmp	r2, #0
 8002fde:	f040 80aa 	bne.w	8003136 <_vsnprintf+0x436>
 8002fe2:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2201      	movne	r2, #1
 8002fec:	2200      	moveq	r2, #0
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	f040 82fb 	bne.w	80035ec <_vsnprintf+0x8ec>
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 828d 	bne.w	8003524 <_vsnprintf+0x824>
 800300a:	e349      	b.n	80036a0 <_vsnprintf+0x9a0>
 800300c:	3b25      	subs	r3, #37	; 0x25
 800300e:	2b42      	cmp	r3, #66	; 0x42
 8003010:	f200 8346 	bhi.w	80036a0 <_vsnprintf+0x9a0>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <_vsnprintf+0x31c>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003689 	.word	0x08003689
 8003020:	080036a1 	.word	0x080036a1
 8003024:	080036a1 	.word	0x080036a1
 8003028:	080036a1 	.word	0x080036a1
 800302c:	080036a1 	.word	0x080036a1
 8003030:	080036a1 	.word	0x080036a1
 8003034:	080036a1 	.word	0x080036a1
 8003038:	080036a1 	.word	0x080036a1
 800303c:	080036a1 	.word	0x080036a1
 8003040:	080036a1 	.word	0x080036a1
 8003044:	080036a1 	.word	0x080036a1
 8003048:	080036a1 	.word	0x080036a1
 800304c:	080036a1 	.word	0x080036a1
 8003050:	080036a1 	.word	0x080036a1
 8003054:	080036a1 	.word	0x080036a1
 8003058:	080036a1 	.word	0x080036a1
 800305c:	080036a1 	.word	0x080036a1
 8003060:	080036a1 	.word	0x080036a1
 8003064:	080036a1 	.word	0x080036a1
 8003068:	080036a1 	.word	0x080036a1
 800306c:	080036a1 	.word	0x080036a1
 8003070:	080036a1 	.word	0x080036a1
 8003074:	080036a1 	.word	0x080036a1
 8003078:	080036a1 	.word	0x080036a1
 800307c:	080036a1 	.word	0x080036a1
 8003080:	080036a1 	.word	0x080036a1
 8003084:	080036a1 	.word	0x080036a1
 8003088:	080036a1 	.word	0x080036a1
 800308c:	080036a1 	.word	0x080036a1
 8003090:	080036a1 	.word	0x080036a1
 8003094:	080036a1 	.word	0x080036a1
 8003098:	080036a1 	.word	0x080036a1
 800309c:	0800343d 	.word	0x0800343d
 80030a0:	080033ed 	.word	0x080033ed
 80030a4:	0800343d 	.word	0x0800343d
 80030a8:	080036a1 	.word	0x080036a1
 80030ac:	080036a1 	.word	0x080036a1
 80030b0:	080036a1 	.word	0x080036a1
 80030b4:	080036a1 	.word	0x080036a1
 80030b8:	080036a1 	.word	0x080036a1
 80030bc:	080036a1 	.word	0x080036a1
 80030c0:	080036a1 	.word	0x080036a1
 80030c4:	080036a1 	.word	0x080036a1
 80030c8:	080036a1 	.word	0x080036a1
 80030cc:	080036a1 	.word	0x080036a1
 80030d0:	080036a1 	.word	0x080036a1
 80030d4:	080036a1 	.word	0x080036a1
 80030d8:	080036a1 	.word	0x080036a1
 80030dc:	080036a1 	.word	0x080036a1
 80030e0:	080036a1 	.word	0x080036a1
 80030e4:	080036a1 	.word	0x080036a1
 80030e8:	08003137 	.word	0x08003137
 80030ec:	080036a1 	.word	0x080036a1
 80030f0:	080036a1 	.word	0x080036a1
 80030f4:	080036a1 	.word	0x080036a1
 80030f8:	080036a1 	.word	0x080036a1
 80030fc:	080036a1 	.word	0x080036a1
 8003100:	080036a1 	.word	0x080036a1
 8003104:	080036a1 	.word	0x080036a1
 8003108:	080036a1 	.word	0x080036a1
 800310c:	080036a1 	.word	0x080036a1
 8003110:	08003137 	.word	0x08003137
 8003114:	080034ad 	.word	0x080034ad
 8003118:	08003137 	.word	0x08003137
 800311c:	0800343d 	.word	0x0800343d
 8003120:	080033ed 	.word	0x080033ed
 8003124:	0800343d 	.word	0x0800343d
 8003128:	2b78      	cmp	r3, #120	; 0x78
 800312a:	f300 82b9 	bgt.w	80036a0 <_vsnprintf+0x9a0>
 800312e:	2b69      	cmp	r3, #105	; 0x69
 8003130:	f6bf af48 	bge.w	8002fc4 <_vsnprintf+0x2c4>
 8003134:	e2b4      	b.n	80036a0 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b78      	cmp	r3, #120	; 0x78
 800313c:	d003      	beq.n	8003146 <_vsnprintf+0x446>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b58      	cmp	r3, #88	; 0x58
 8003144:	d102      	bne.n	800314c <_vsnprintf+0x44c>
          base = 16U;
 8003146:	2310      	movs	r3, #16
 8003148:	64bb      	str	r3, [r7, #72]	; 0x48
 800314a:	e013      	b.n	8003174 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b6f      	cmp	r3, #111	; 0x6f
 8003152:	d102      	bne.n	800315a <_vsnprintf+0x45a>
          base =  8U;
 8003154:	2308      	movs	r3, #8
 8003156:	64bb      	str	r3, [r7, #72]	; 0x48
 8003158:	e00c      	b.n	8003174 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b62      	cmp	r3, #98	; 0x62
 8003160:	d102      	bne.n	8003168 <_vsnprintf+0x468>
          base =  2U;
 8003162:	2302      	movs	r3, #2
 8003164:	64bb      	str	r3, [r7, #72]	; 0x48
 8003166:	e005      	b.n	8003174 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8003168:	230a      	movs	r3, #10
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800316c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316e:	f023 0310 	bic.w	r3, r3, #16
 8003172:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b58      	cmp	r3, #88	; 0x58
 800317a:	d103      	bne.n	8003184 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 800317c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317e:	f043 0320 	orr.w	r3, r3, #32
 8003182:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b69      	cmp	r3, #105	; 0x69
 800318a:	d007      	beq.n	800319c <_vsnprintf+0x49c>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d003      	beq.n	800319c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003196:	f023 030c 	bic.w	r3, r3, #12
 800319a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800319c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80031a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b69      	cmp	r3, #105	; 0x69
 80031b4:	d004      	beq.n	80031c0 <_vsnprintf+0x4c0>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	f040 8098 	bne.w	80032f0 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80031c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d031      	beq.n	800322e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80031ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031ce:	3307      	adds	r3, #7
 80031d0:	f023 0307 	bic.w	r3, r3, #7
 80031d4:	f103 0208 	add.w	r2, r3, #8
 80031d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80031e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da06      	bge.n	80031fa <_vsnprintf+0x4fa>
 80031ec:	2100      	movs	r1, #0
 80031ee:	f1d2 0800 	rsbs	r8, r2, #0
 80031f2:	eb61 0903 	sbc.w	r9, r1, r3
 80031f6:	4642      	mov	r2, r8
 80031f8:	464b      	mov	r3, r9
 80031fa:	69f9      	ldr	r1, [r7, #28]
 80031fc:	0fc9      	lsrs	r1, r1, #31
 80031fe:	b2c9      	uxtb	r1, r1
 8003200:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003202:	2400      	movs	r4, #0
 8003204:	4682      	mov	sl, r0
 8003206:	46a3      	mov	fp, r4
 8003208:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800320a:	9008      	str	r0, [sp, #32]
 800320c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800320e:	9007      	str	r0, [sp, #28]
 8003210:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003212:	9006      	str	r0, [sp, #24]
 8003214:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003218:	9102      	str	r1, [sp, #8]
 800321a:	e9cd 2300 	strd	r2, r3, [sp]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003222:	6939      	ldr	r1, [r7, #16]
 8003224:	6978      	ldr	r0, [r7, #20]
 8003226:	f7ff f81b 	bl	8002260 <_ntoa_long_long>
 800322a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800322c:	e0da      	b.n	80033e4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800322e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8003238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800323c:	1d1a      	adds	r2, r3, #4
 800323e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	bfb8      	it	lt
 800324c:	425b      	neglt	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	0fdb      	lsrs	r3, r3, #31
 8003254:	b2db      	uxtb	r3, r3
 8003256:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003258:	9205      	str	r2, [sp, #20]
 800325a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800325c:	9204      	str	r2, [sp, #16]
 800325e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003260:	9203      	str	r2, [sp, #12]
 8003262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003264:	9202      	str	r2, [sp, #8]
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	9100      	str	r1, [sp, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800326e:	6939      	ldr	r1, [r7, #16]
 8003270:	6978      	ldr	r0, [r7, #20]
 8003272:	f7fe ff8f 	bl	8002194 <_ntoa_long>
 8003276:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003278:	e0b4      	b.n	80033e4 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800327a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <_vsnprintf+0x594>
 8003284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003288:	1d1a      	adds	r2, r3, #4
 800328a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e012      	b.n	80032ba <_vsnprintf+0x5ba>
 8003294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <_vsnprintf+0x5ae>
 800329e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	e005      	b.n	80032ba <_vsnprintf+0x5ba>
 80032ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bfb8      	it	lt
 80032c2:	425b      	neglt	r3, r3
 80032c4:	4619      	mov	r1, r3
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	0fdb      	lsrs	r3, r3, #31
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032ce:	9205      	str	r2, [sp, #20]
 80032d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d2:	9204      	str	r2, [sp, #16]
 80032d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032d6:	9203      	str	r2, [sp, #12]
 80032d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032da:	9202      	str	r2, [sp, #8]
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	9100      	str	r1, [sp, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032e4:	6939      	ldr	r1, [r7, #16]
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7fe ff54 	bl	8002194 <_ntoa_long>
 80032ec:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80032ee:	e079      	b.n	80033e4 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80032f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d022      	beq.n	8003340 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80032fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032fe:	3307      	adds	r3, #7
 8003300:	f023 0307 	bic.w	r3, r3, #7
 8003304:	f103 0208 	add.w	r2, r3, #8
 8003308:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003312:	2000      	movs	r0, #0
 8003314:	460d      	mov	r5, r1
 8003316:	4606      	mov	r6, r0
 8003318:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800331a:	9108      	str	r1, [sp, #32]
 800331c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800331e:	9107      	str	r1, [sp, #28]
 8003320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003322:	9106      	str	r1, [sp, #24]
 8003324:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003328:	2100      	movs	r1, #0
 800332a:	9102      	str	r1, [sp, #8]
 800332c:	e9cd 2300 	strd	r2, r3, [sp]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003334:	6939      	ldr	r1, [r7, #16]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7fe ff92 	bl	8002260 <_ntoa_long_long>
 800333c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800333e:	e051      	b.n	80033e4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800334a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003358:	9205      	str	r2, [sp, #20]
 800335a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800335c:	9204      	str	r2, [sp, #16]
 800335e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003360:	9203      	str	r2, [sp, #12]
 8003362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003364:	9202      	str	r2, [sp, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	9201      	str	r2, [sp, #4]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003370:	6939      	ldr	r1, [r7, #16]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7fe ff0e 	bl	8002194 <_ntoa_long>
 8003378:	64f8      	str	r0, [r7, #76]	; 0x4c
 800337a:	e033      	b.n	80033e4 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800337c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <_vsnprintf+0x696>
 8003386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e012      	b.n	80033bc <_vsnprintf+0x6bc>
 8003396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <_vsnprintf+0x6b0>
 80033a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a4:	1d1a      	adds	r2, r3, #4
 80033a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	e005      	b.n	80033bc <_vsnprintf+0x6bc>
 80033b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b4:	1d1a      	adds	r2, r3, #4
 80033b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	9305      	str	r3, [sp, #20]
 80033c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c4:	9304      	str	r3, [sp, #16]
 80033c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c8:	9303      	str	r3, [sp, #12]
 80033ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033cc:	9302      	str	r3, [sp, #8]
 80033ce:	2300      	movs	r3, #0
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033da:	6939      	ldr	r1, [r7, #16]
 80033dc:	6978      	ldr	r0, [r7, #20]
 80033de:	f7fe fed9 	bl	8002194 <_ntoa_long>
 80033e2:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3301      	adds	r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
        break;
 80033ea:	e166      	b.n	80036ba <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b46      	cmp	r3, #70	; 0x46
 80033f2:	d103      	bne.n	80033fc <_vsnprintf+0x6fc>
 80033f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f6:	f043 0320 	orr.w	r3, r3, #32
 80033fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80033fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003400:	3307      	adds	r3, #7
 8003402:	f023 0307 	bic.w	r3, r3, #7
 8003406:	f103 0208 	add.w	r2, r3, #8
 800340a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800340e:	ed93 7b00 	vldr	d7, [r3]
 8003412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003414:	9302      	str	r3, [sp, #8]
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	eeb0 0a47 	vmov.f32	s0, s14
 8003422:	eef0 0a67 	vmov.f32	s1, s15
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800342a:	6939      	ldr	r1, [r7, #16]
 800342c:	6978      	ldr	r0, [r7, #20]
 800342e:	f7fe ff87 	bl	8002340 <_ftoa>
 8003432:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3301      	adds	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
        break;
 800343a:	e13e      	b.n	80036ba <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b67      	cmp	r3, #103	; 0x67
 8003442:	d003      	beq.n	800344c <_vsnprintf+0x74c>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b47      	cmp	r3, #71	; 0x47
 800344a:	d103      	bne.n	8003454 <_vsnprintf+0x754>
 800344c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003452:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b45      	cmp	r3, #69	; 0x45
 800345a:	d003      	beq.n	8003464 <_vsnprintf+0x764>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b47      	cmp	r3, #71	; 0x47
 8003462:	d103      	bne.n	800346c <_vsnprintf+0x76c>
 8003464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003466:	f043 0320 	orr.w	r3, r3, #32
 800346a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800346c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003470:	3307      	adds	r3, #7
 8003472:	f023 0307 	bic.w	r3, r3, #7
 8003476:	f103 0208 	add.w	r2, r3, #8
 800347a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800347e:	ed93 7b00 	vldr	d7, [r3]
 8003482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	eeb0 0a47 	vmov.f32	s0, s14
 8003492:	eef0 0a67 	vmov.f32	s1, s15
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800349a:	6939      	ldr	r1, [r7, #16]
 800349c:	6978      	ldr	r0, [r7, #20]
 800349e:	f7ff f9a7 	bl	80027f0 <_etoa>
 80034a2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
        break;
 80034aa:	e106      	b.n	80036ba <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80034ac:	2301      	movs	r3, #1
 80034ae:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80034b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10e      	bne.n	80034d8 <_vsnprintf+0x7d8>
          while (l++ < width) {
 80034ba:	e007      	b.n	80034cc <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 80034bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034be:	1c53      	adds	r3, r2, #1
 80034c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c2:	697c      	ldr	r4, [r7, #20]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6939      	ldr	r1, [r7, #16]
 80034c8:	2020      	movs	r0, #32
 80034ca:	47a0      	blx	r4
          while (l++ < width) {
 80034cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	647a      	str	r2, [r7, #68]	; 0x44
 80034d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d8f1      	bhi.n	80034bc <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80034d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034dc:	1d1a      	adds	r2, r3, #4
 80034de:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b2d8      	uxtb	r0, r3
 80034e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034e8:	1c53      	adds	r3, r2, #1
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	697c      	ldr	r4, [r7, #20]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6939      	ldr	r1, [r7, #16]
 80034f2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80034f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00e      	beq.n	800351c <_vsnprintf+0x81c>
          while (l++ < width) {
 80034fe:	e007      	b.n	8003510 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003502:	1c53      	adds	r3, r2, #1
 8003504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003506:	697c      	ldr	r4, [r7, #20]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6939      	ldr	r1, [r7, #16]
 800350c:	2020      	movs	r0, #32
 800350e:	47a0      	blx	r4
          while (l++ < width) {
 8003510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	647a      	str	r2, [r7, #68]	; 0x44
 8003516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003518:	429a      	cmp	r2, r3
 800351a:	d8f1      	bhi.n	8003500 <_vsnprintf+0x800>
          }
        }
        format++;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	3301      	adds	r3, #1
 8003520:	60bb      	str	r3, [r7, #8]
        break;
 8003522:	e0ca      	b.n	80036ba <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003528:	1d1a      	adds	r2, r3, #4
 800352a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_vsnprintf+0x83c>
 8003538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353a:	e001      	b.n	8003540 <_vsnprintf+0x840>
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	4619      	mov	r1, r3
 8003542:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003544:	f7fe fca2 	bl	8001e8c <_strnlen_s>
 8003548:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800354a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8003554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003558:	4293      	cmp	r3, r2
 800355a:	bf28      	it	cs
 800355c:	4613      	movcs	r3, r2
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11a      	bne.n	80035a0 <_vsnprintf+0x8a0>
          while (l++ < width) {
 800356a:	e007      	b.n	800357c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 800356c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800356e:	1c53      	adds	r3, r2, #1
 8003570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003572:	697c      	ldr	r4, [r7, #20]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6939      	ldr	r1, [r7, #16]
 8003578:	2020      	movs	r0, #32
 800357a:	47a0      	blx	r4
          while (l++ < width) {
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003584:	429a      	cmp	r2, r3
 8003586:	d8f1      	bhi.n	800356c <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003588:	e00a      	b.n	80035a0 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 800358a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	643a      	str	r2, [r7, #64]	; 0x40
 8003590:	7818      	ldrb	r0, [r3, #0]
 8003592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003594:	1c53      	adds	r3, r2, #1
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003598:	697c      	ldr	r4, [r7, #20]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6939      	ldr	r1, [r7, #16]
 800359e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80035a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <_vsnprintf+0x8bc>
 80035a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0eb      	beq.n	800358a <_vsnprintf+0x88a>
 80035b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	657a      	str	r2, [r7, #84]	; 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e6      	bne.n	800358a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80035bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <_vsnprintf+0x8e4>
          while (l++ < width) {
 80035c6:	e007      	b.n	80035d8 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 80035c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ca:	1c53      	adds	r3, r2, #1
 80035cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ce:	697c      	ldr	r4, [r7, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6939      	ldr	r1, [r7, #16]
 80035d4:	2020      	movs	r0, #32
 80035d6:	47a0      	blx	r4
          while (l++ < width) {
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d8f1      	bhi.n	80035c8 <_vsnprintf+0x8c8>
          }
        }
        format++;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	3301      	adds	r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
        break;
 80035ea:	e066      	b.n	80036ba <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80035ec:	2308      	movs	r3, #8
 80035ee:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80035f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f2:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80035f6:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80035f8:	2300      	movs	r3, #0
 80035fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80035fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003602:	2b00      	cmp	r3, #0
 8003604:	d023      	beq.n	800364e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	2300      	movs	r3, #0
 8003616:	603a      	str	r2, [r7, #0]
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800361c:	9308      	str	r3, [sp, #32]
 800361e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003620:	9307      	str	r3, [sp, #28]
 8003622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003624:	9306      	str	r3, [sp, #24]
 8003626:	f04f 0210 	mov.w	r2, #16
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003632:	2300      	movs	r3, #0
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	e9d7 3400 	ldrd	r3, r4, [r7]
 800363a:	e9cd 3400 	strd	r3, r4, [sp]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	6978      	ldr	r0, [r7, #20]
 8003646:	f7fe fe0b 	bl	8002260 <_ntoa_long_long>
 800364a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800364c:	e018      	b.n	8003680 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800364e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003652:	1d1a      	adds	r2, r3, #4
 8003654:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365e:	9305      	str	r3, [sp, #20]
 8003660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003662:	9304      	str	r3, [sp, #16]
 8003664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003666:	9303      	str	r3, [sp, #12]
 8003668:	2310      	movs	r3, #16
 800366a:	9302      	str	r3, [sp, #8]
 800366c:	2300      	movs	r3, #0
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	9200      	str	r2, [sp, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003676:	6939      	ldr	r1, [r7, #16]
 8003678:	6978      	ldr	r0, [r7, #20]
 800367a:	f7fe fd8b 	bl	8002194 <_ntoa_long>
 800367e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3301      	adds	r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
        break;
 8003686:	e018      	b.n	80036ba <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800368a:	1c53      	adds	r3, r2, #1
 800368c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368e:	697c      	ldr	r4, [r7, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6939      	ldr	r1, [r7, #16]
 8003694:	2025      	movs	r0, #37	; 0x25
 8003696:	47a0      	blx	r4
        format++;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	3301      	adds	r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
        break;
 800369e:	e00c      	b.n	80036ba <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	7818      	ldrb	r0, [r3, #0]
 80036a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036a6:	1c53      	adds	r3, r2, #1
 80036a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036aa:	697c      	ldr	r4, [r7, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6939      	ldr	r1, [r7, #16]
 80036b0:	47a0      	blx	r4
        format++;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	3301      	adds	r3, #1
 80036b6:	60bb      	str	r3, [r7, #8]
        break;
 80036b8:	bf00      	nop
  while (*format)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f47f ab30 	bne.w	8002d24 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80036c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <_vsnprintf+0x9d2>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	e000      	b.n	80036d4 <_vsnprintf+0x9d4>
 80036d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d4:	697c      	ldr	r4, [r7, #20]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6939      	ldr	r1, [r7, #16]
 80036da:	2000      	movs	r0, #0
 80036dc:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80036de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3764      	adds	r7, #100	; 0x64
 80036e4:	46bd      	mov	sp, r7
 80036e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ea:	bf00      	nop

080036ec <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80036ec:	b40f      	push	{r0, r1, r2, r3}
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80036f4:	f107 031c 	add.w	r3, r7, #28
 80036f8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80036fa:	1d39      	adds	r1, r7, #4
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f04f 32ff 	mov.w	r2, #4294967295
 8003706:	4806      	ldr	r0, [pc, #24]	; (8003720 <printf_+0x34>)
 8003708:	f7ff fafa 	bl	8002d00 <_vsnprintf>
 800370c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800370e:	68fb      	ldr	r3, [r7, #12]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800371a:	b004      	add	sp, #16
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	08001e67 	.word	0x08001e67

08003724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_MspInit+0x50>)
 800372c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372e:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_MspInit+0x50>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6613      	str	r3, [r2, #96]	; 0x60
 8003736:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_MspInit+0x50>)
 8003738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_MspInit+0x50>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <HAL_MspInit+0x50>)
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374c:	6593      	str	r3, [r2, #88]	; 0x58
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_MspInit+0x50>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800375a:	2200      	movs	r2, #0
 800375c:	210f      	movs	r1, #15
 800375e:	f06f 0001 	mvn.w	r0, #1
 8003762:	f002 fb25 	bl	8005db0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003766:	f003 fbe7 	bl	8006f38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000

08003778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_InitTick+0xc4>)
 800378a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378c:	4a2b      	ldr	r2, [pc, #172]	; (800383c <HAL_InitTick+0xc4>)
 800378e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003792:	6613      	str	r3, [r2, #96]	; 0x60
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_InitTick+0xc4>)
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037a0:	f107 020c 	add.w	r2, r7, #12
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f004 f8bc 	bl	8007928 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80037b0:	f004 f8a4 	bl	80078fc <HAL_RCC_GetPCLK2Freq>
 80037b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_InitTick+0xc8>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0c9b      	lsrs	r3, r3, #18
 80037c0:	3b01      	subs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <HAL_InitTick+0xcc>)
 80037c6:	4a20      	ldr	r2, [pc, #128]	; (8003848 <HAL_InitTick+0xd0>)
 80037c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_InitTick+0xcc>)
 80037cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_InitTick+0xcc>)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_InitTick+0xcc>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_InitTick+0xcc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80037e4:	4817      	ldr	r0, [pc, #92]	; (8003844 <HAL_InitTick+0xcc>)
 80037e6:	f004 fb53 	bl	8007e90 <HAL_TIM_Base_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80037f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d11b      	bne.n	8003830 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80037f8:	4812      	ldr	r0, [pc, #72]	; (8003844 <HAL_InitTick+0xcc>)
 80037fa:	f004 fba1 	bl	8007f40 <HAL_TIM_Base_Start_IT>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003808:	2b00      	cmp	r3, #0
 800380a:	d111      	bne.n	8003830 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800380c:	2019      	movs	r0, #25
 800380e:	f002 fae9 	bl	8005de4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d808      	bhi.n	800382a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003818:	2200      	movs	r2, #0
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	2019      	movs	r0, #25
 800381e:	f002 fac7 	bl	8005db0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <HAL_InitTick+0xd4>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e002      	b.n	8003830 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003834:	4618      	mov	r0, r3
 8003836:	3730      	adds	r7, #48	; 0x30
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	431bde83 	.word	0x431bde83
 8003844:	20000188 	.word	0x20000188
 8003848:	40012c00 	.word	0x40012c00
 800384c:	20000004 	.word	0x20000004

08003850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003854:	e7fe      	b.n	8003854 <NMI_Handler+0x4>

08003856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800385a:	e7fe      	b.n	800385a <HardFault_Handler+0x4>

0800385c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003860:	e7fe      	b.n	8003860 <MemManage_Handler+0x4>

08003862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003866:	e7fe      	b.n	8003866 <BusFault_Handler+0x4>

08003868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800386c:	e7fe      	b.n	800386c <UsageFault_Handler+0x4>

0800386e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <ADC1_2_IRQHandler+0x10>)
 8003882:	f001 f867 	bl	8004954 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	2000007c 	.word	0x2000007c

08003890 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003896:	f004 fbc3 	bl	8008020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000188 	.word	0x20000188

080038a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80038a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038ac:	f002 fc5a 	bl	8006164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <SystemInit+0x20>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <SystemInit+0x20>)
 80038c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <MX_TIM6_Init+0x64>)
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <MX_TIM6_Init+0x68>)
 80038ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <MX_TIM6_Init+0x64>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <MX_TIM6_Init+0x64>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 169;
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <MX_TIM6_Init+0x64>)
 80038fc:	22a9      	movs	r2, #169	; 0xa9
 80038fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <MX_TIM6_Init+0x64>)
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003906:	480d      	ldr	r0, [pc, #52]	; (800393c <MX_TIM6_Init+0x64>)
 8003908:	f004 fac2 	bl	8007e90 <HAL_TIM_Base_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003912:	f7fe fa95 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4806      	ldr	r0, [pc, #24]	; (800393c <MX_TIM6_Init+0x64>)
 8003924:	f004 fd9e 	bl	8008464 <HAL_TIMEx_MasterConfigSynchronization>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800392e:	f7fe fa87 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200001d4 	.word	0x200001d4
 8003940:	40001000 	.word	0x40001000

08003944 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <HAL_TIM_Base_MspInit+0x38>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10b      	bne.n	800396e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_TIM_Base_MspInit+0x3c>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_TIM_Base_MspInit+0x3c>)
 800395c:	f043 0310 	orr.w	r3, r3, #16
 8003960:	6593      	str	r3, [r2, #88]	; 0x58
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_TIM_Base_MspInit+0x3c>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40001000 	.word	0x40001000
 8003980:	40021000 	.word	0x40021000

08003984 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart5;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 800398a:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <MX_LPUART1_UART_Init+0x90>)
 800398c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 8003990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003994:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800399c:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039aa:	220c      	movs	r2, #12
 80039ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039bc:	2200      	movs	r2, #0
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80039c6:	4812      	ldr	r0, [pc, #72]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039c8:	f004 fe20 	bl	800860c <HAL_UART_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80039d2:	f7fe fa35 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039d6:	2100      	movs	r1, #0
 80039d8:	480d      	ldr	r0, [pc, #52]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039da:	f005 fc49 	bl	8009270 <HAL_UARTEx_SetTxFifoThreshold>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80039e4:	f7fe fa2c 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039e8:	2100      	movs	r1, #0
 80039ea:	4809      	ldr	r0, [pc, #36]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039ec:	f005 fc7e 	bl	80092ec <HAL_UARTEx_SetRxFifoThreshold>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80039f6:	f7fe fa23 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80039fa:	4805      	ldr	r0, [pc, #20]	; (8003a10 <MX_LPUART1_UART_Init+0x8c>)
 80039fc:	f005 fbff 	bl	80091fe <HAL_UARTEx_DisableFifoMode>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003a06:	f7fe fa1b 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000220 	.word	0x20000220
 8003a14:	40008000 	.word	0x40008000

08003a18 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003a1c:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a1e:	4a23      	ldr	r2, [pc, #140]	; (8003aac <MX_UART5_Init+0x94>)
 8003a20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a3e:	220c      	movs	r2, #12
 8003a40:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a4e:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003a60:	4811      	ldr	r0, [pc, #68]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a62:	f004 fdd3 	bl	800860c <HAL_UART_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003a6c:	f7fe f9e8 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a70:	2100      	movs	r1, #0
 8003a72:	480d      	ldr	r0, [pc, #52]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a74:	f005 fbfc 	bl	8009270 <HAL_UARTEx_SetTxFifoThreshold>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003a7e:	f7fe f9df 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a82:	2100      	movs	r1, #0
 8003a84:	4808      	ldr	r0, [pc, #32]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a86:	f005 fc31 	bl	80092ec <HAL_UARTEx_SetRxFifoThreshold>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003a90:	f7fe f9d6 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003a94:	4804      	ldr	r0, [pc, #16]	; (8003aa8 <MX_UART5_Init+0x90>)
 8003a96:	f005 fbb2 	bl	80091fe <HAL_UARTEx_DisableFifoMode>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003aa0:	f7fe f9ce 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	200002b4 	.word	0x200002b4
 8003aac:	40005000 	.word	0x40005000

08003ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b0a0      	sub	sp, #128	; 0x80
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	2250      	movs	r2, #80	; 0x50
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f009 f8c3 	bl	800cc5c <memset>
  if(uartHandle->Instance==LPUART1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a4b      	ldr	r2, [pc, #300]	; (8003c08 <HAL_UART_MspInit+0x158>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d137      	bne.n	8003b50 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003ae0:	2320      	movs	r3, #32
 8003ae2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ae8:	f107 031c 	add.w	r3, r7, #28
 8003aec:	4618      	mov	r0, r3
 8003aee:	f003 ff93 	bl	8007a18 <HAL_RCCEx_PeriphCLKConfig>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003af8:	f7fe f9a2 	bl	8001e40 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003afc:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	4a42      	ldr	r2, [pc, #264]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b14:	4b3d      	ldr	r3, [pc, #244]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	4a3c      	ldr	r2, [pc, #240]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b44:	4619      	mov	r1, r3
 8003b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4a:	f002 f959 	bl	8005e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003b4e:	e057      	b.n	8003c00 <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==UART5)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2e      	ldr	r2, [pc, #184]	; (8003c10 <HAL_UART_MspInit+0x160>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d152      	bne.n	8003c00 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b62:	f107 031c 	add.w	r3, r7, #28
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 ff56 	bl	8007a18 <HAL_RCCEx_PeriphCLKConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003b72:	f7fe f965 	bl	8001e40 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003b76:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b80:	6593      	str	r3, [r2, #88]	; 0x58
 8003b82:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	4a1e      	ldr	r2, [pc, #120]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b94:	f043 0304 	orr.w	r3, r3, #4
 8003b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ba6:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003bac:	f043 0308 	orr.w	r3, r3, #8
 8003bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <HAL_UART_MspInit+0x15c>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003bd0:	2305      	movs	r3, #5
 8003bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bd8:	4619      	mov	r1, r3
 8003bda:	480e      	ldr	r0, [pc, #56]	; (8003c14 <HAL_UART_MspInit+0x164>)
 8003bdc:	f002 f910 	bl	8005e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003be0:	2304      	movs	r3, #4
 8003be2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003bf0:	2305      	movs	r3, #5
 8003bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bf4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4807      	ldr	r0, [pc, #28]	; (8003c18 <HAL_UART_MspInit+0x168>)
 8003bfc:	f002 f900 	bl	8005e00 <HAL_GPIO_Init>
}
 8003c00:	bf00      	nop
 8003c02:	3780      	adds	r7, #128	; 0x80
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40008000 	.word	0x40008000
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40005000 	.word	0x40005000
 8003c14:	48000800 	.word	0x48000800
 8003c18:	48000c00 	.word	0x48000c00

08003c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c1c:	480d      	ldr	r0, [pc, #52]	; (8003c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c20:	f7ff fe48 	bl	80038b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c24:	480c      	ldr	r0, [pc, #48]	; (8003c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c26:	490d      	ldr	r1, [pc, #52]	; (8003c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c28:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <LoopForever+0xe>)
  movs r3, #0
 8003c2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003c2c:	e002      	b.n	8003c34 <LoopCopyDataInit>

08003c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c32:	3304      	adds	r3, #4

08003c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c38:	d3f9      	bcc.n	8003c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c3c:	4c0a      	ldr	r4, [pc, #40]	; (8003c68 <LoopForever+0x16>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c40:	e001      	b.n	8003c46 <LoopFillZerobss>

08003c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c44:	3204      	adds	r2, #4

08003c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c48:	d3fb      	bcc.n	8003c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c4a:	f009 f865 	bl	800cd18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c4e:	f7fe f877 	bl	8001d40 <main>

08003c52 <LoopForever>:

LoopForever:
    b LoopForever
 8003c52:	e7fe      	b.n	8003c52 <LoopForever>
  ldr   r0, =_estack
 8003c54:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003c60:	0800d158 	.word	0x0800d158
  ldr r2, =_sbss
 8003c64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003c68:	20002ba0 	.word	0x20002ba0

08003c6c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <ADC3_IRQHandler>

08003c6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c78:	2003      	movs	r0, #3
 8003c7a:	f002 f88e 	bl	8005d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c7e:	200f      	movs	r0, #15
 8003c80:	f7ff fd7a 	bl	8003778 <HAL_InitTick>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	71fb      	strb	r3, [r7, #7]
 8003c8e:	e001      	b.n	8003c94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c90:	f7ff fd48 	bl	8003724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c94:	79fb      	ldrb	r3, [r7, #7]

}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_IncTick+0x1c>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_IncTick+0x20>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <HAL_IncTick+0x1c>)
 8003cb0:	6013      	str	r3, [r2, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	20000348 	.word	0x20000348
 8003cc0:	20000008 	.word	0x20000008

08003cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_GetTick+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20000348 	.word	0x20000348

08003cdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3360      	adds	r3, #96	; 0x60
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <LL_ADC_SetOffset+0x44>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003d7c:	bf00      	nop
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	03fff000 	.word	0x03fff000

08003d8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3360      	adds	r3, #96	; 0x60
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3360      	adds	r3, #96	; 0x60
 8003dc8:	461a      	mov	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b087      	sub	sp, #28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3360      	adds	r3, #96	; 0x60
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3360      	adds	r3, #96	; 0x60
 8003e34:	461a      	mov	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	615a      	str	r2, [r3, #20]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b087      	sub	sp, #28
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3330      	adds	r3, #48	; 0x30
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	4413      	add	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	211f      	movs	r1, #31
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	401a      	ands	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	f003 011f 	and.w	r1, r3, #31
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	431a      	orrs	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3314      	adds	r3, #20
 8003f34:	461a      	mov	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0e5b      	lsrs	r3, r3, #25
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	4413      	add	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	0d1b      	lsrs	r3, r3, #20
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2107      	movs	r1, #7
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	401a      	ands	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	0d1b      	lsrs	r3, r3, #20
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f94:	43db      	mvns	r3, r3
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f003 0318 	and.w	r3, r3, #24
 8003f9e:	4908      	ldr	r1, [pc, #32]	; (8003fc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fa0:	40d9      	lsrs	r1, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	0007ffff 	.word	0x0007ffff

08003fc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800400c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6093      	str	r3, [r2, #8]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004034:	d101      	bne.n	800403a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800405c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004084:	d101      	bne.n	800408a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040d4:	f043 0202 	orr.w	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <LL_ADC_IsEnabled+0x18>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <LL_ADC_IsEnabled+0x1a>
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d101      	bne.n	8004126 <LL_ADC_IsDisableOngoing+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_ADC_IsDisableOngoing+0x1a>
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004148:	f043 0204 	orr.w	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800416c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004170:	f043 0210 	orr.w	r2, r3, #16
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b04      	cmp	r3, #4
 8004196:	d101      	bne.n	800419c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d101      	bne.n	80041ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e19b      	b.n	800454a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7fc fee1 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fef1 	bl	8004020 <LL_ADC_IsDeepPowerDownEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fed7 	bl	8003ffc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ff0c 	bl	8004070 <LL_ADC_IsInternalRegulatorEnabled>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d115      	bne.n	800428a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fef0 	bl	8004048 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004268:	4b97      	ldr	r3, [pc, #604]	; (80044c8 <HAL_ADC_Init+0x2d0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	099b      	lsrs	r3, r3, #6
 800426e:	4a97      	ldr	r2, [pc, #604]	; (80044cc <HAL_ADC_Init+0x2d4>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	099b      	lsrs	r3, r3, #6
 8004276:	3301      	adds	r3, #1
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800427c:	e002      	b.n	8004284 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b01      	subs	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f9      	bne.n	800427e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff feee 	bl	8004070 <LL_ADC_IsInternalRegulatorEnabled>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10d      	bne.n	80042b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	f043 0210 	orr.w	r2, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042aa:	f043 0201 	orr.w	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff ff62 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 80042c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 8134 	bne.w	8004538 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f040 8130 	bne.w	8004538 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042e0:	f043 0202 	orr.w	r2, r3, #2
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fefb 	bl	80040e8 <LL_ADC_IsEnabled>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d137      	bne.n	8004368 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004300:	d004      	beq.n	800430c <HAL_ADC_Init+0x114>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a72      	ldr	r2, [pc, #456]	; (80044d0 <HAL_ADC_Init+0x2d8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10f      	bne.n	800432c <HAL_ADC_Init+0x134>
 800430c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004310:	f7ff feea 	bl	80040e8 <LL_ADC_IsEnabled>
 8004314:	4604      	mov	r4, r0
 8004316:	486e      	ldr	r0, [pc, #440]	; (80044d0 <HAL_ADC_Init+0x2d8>)
 8004318:	f7ff fee6 	bl	80040e8 <LL_ADC_IsEnabled>
 800431c:	4603      	mov	r3, r0
 800431e:	4323      	orrs	r3, r4
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	e008      	b.n	800433e <HAL_ADC_Init+0x146>
 800432c:	4869      	ldr	r0, [pc, #420]	; (80044d4 <HAL_ADC_Init+0x2dc>)
 800432e:	f7ff fedb 	bl	80040e8 <LL_ADC_IsEnabled>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d012      	beq.n	8004368 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800434a:	d004      	beq.n	8004356 <HAL_ADC_Init+0x15e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5f      	ldr	r2, [pc, #380]	; (80044d0 <HAL_ADC_Init+0x2d8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_ADC_Init+0x162>
 8004356:	4a60      	ldr	r2, [pc, #384]	; (80044d8 <HAL_ADC_Init+0x2e0>)
 8004358:	e000      	b.n	800435c <HAL_ADC_Init+0x164>
 800435a:	4a60      	ldr	r2, [pc, #384]	; (80044dc <HAL_ADC_Init+0x2e4>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f7ff fcba 	bl	8003cdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	7f5b      	ldrb	r3, [r3, #29]
 800436c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004372:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004378:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800437e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004386:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004388:	4313      	orrs	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004392:	2b01      	cmp	r3, #1
 8004394:	d106      	bne.n	80043a4 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	045b      	lsls	r3, r3, #17
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	4b46      	ldr	r3, [pc, #280]	; (80044e0 <HAL_ADC_Init+0x2e8>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	69b9      	ldr	r1, [r7, #24]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff feef 	bl	80041d2 <LL_ADC_INJ_IsConversionOngoing>
 80043f4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d17b      	bne.n	80044f4 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d178      	bne.n	80044f4 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004406:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800440e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800441e:	f023 0302 	bic.w	r3, r3, #2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	69b9      	ldr	r1, [r7, #24]
 8004428:	430b      	orrs	r3, r1
 800442a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d017      	beq.n	8004464 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004442:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800444c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6911      	ldr	r1, [r2, #16]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	430b      	orrs	r3, r1
 800445e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004462:	e013      	b.n	800448c <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004472:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004488:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004492:	2b01      	cmp	r3, #1
 8004494:	d126      	bne.n	80044e4 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044ac:	4311      	orrs	r1, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044b8:	430a      	orrs	r2, r1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	611a      	str	r2, [r3, #16]
 80044c6:	e015      	b.n	80044f4 <HAL_ADC_Init+0x2fc>
 80044c8:	20000000 	.word	0x20000000
 80044cc:	053e2d63 	.word	0x053e2d63
 80044d0:	50000100 	.word	0x50000100
 80044d4:	50000400 	.word	0x50000400
 80044d8:	50000300 	.word	0x50000300
 80044dc:	50000700 	.word	0x50000700
 80044e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10c      	bne.n	8004516 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f023 010f 	bic.w	r1, r3, #15
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
 8004514:	e007      	b.n	8004526 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 020f 	bic.w	r2, r2, #15
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	f043 0201 	orr.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65da      	str	r2, [r3, #92]	; 0x5c
 8004536:	e007      	b.n	8004548 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	f043 0210 	orr.w	r2, r3, #16
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004548:	7ffb      	ldrb	r3, [r7, #31]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	; 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd90      	pop	{r4, r7, pc}
 8004552:	bf00      	nop

08004554 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004564:	d004      	beq.n	8004570 <HAL_ADC_Start+0x1c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5c      	ldr	r2, [pc, #368]	; (80046dc <HAL_ADC_Start+0x188>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_ADC_Start+0x20>
 8004570:	4b5b      	ldr	r3, [pc, #364]	; (80046e0 <HAL_ADC_Start+0x18c>)
 8004572:	e000      	b.n	8004576 <HAL_ADC_Start+0x22>
 8004574:	4b5b      	ldr	r3, [pc, #364]	; (80046e4 <HAL_ADC_Start+0x190>)
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fd24 	bl	8003fc4 <LL_ADC_GetMultimode>
 800457c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fdfe 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 809f 	bne.w	80046ce <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_ADC_Start+0x4a>
 800459a:	2302      	movs	r3, #2
 800459c:	e09a      	b.n	80046d4 <HAL_ADC_Start+0x180>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 f914 	bl	80057d4 <ADC_Enable>
 80045ac:	4603      	mov	r3, r0
 80045ae:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 8086 	bne.w	80046c4 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a42      	ldr	r2, [pc, #264]	; (80046dc <HAL_ADC_Start+0x188>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d002      	beq.n	80045dc <HAL_ADC_Start+0x88>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	e001      	b.n	80045e0 <HAL_ADC_Start+0x8c>
 80045dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d002      	beq.n	80045ee <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004606:	d106      	bne.n	8004616 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460c:	f023 0206 	bic.w	r2, r3, #6
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	661a      	str	r2, [r3, #96]	; 0x60
 8004614:	e002      	b.n	800461c <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	221c      	movs	r2, #28
 8004622:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <HAL_ADC_Start+0x188>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d002      	beq.n	800463c <HAL_ADC_Start+0xe8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	e001      	b.n	8004640 <HAL_ADC_Start+0xec>
 800463c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	4293      	cmp	r3, r2
 8004646:	d008      	beq.n	800465a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b05      	cmp	r3, #5
 8004652:	d002      	beq.n	800465a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b09      	cmp	r3, #9
 8004658:	d114      	bne.n	8004684 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004670:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fd59 	bl	8004134 <LL_ADC_REG_StartConversion>
 8004682:	e026      	b.n	80046d2 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a11      	ldr	r2, [pc, #68]	; (80046dc <HAL_ADC_Start+0x188>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d002      	beq.n	80046a0 <HAL_ADC_Start+0x14c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	e001      	b.n	80046a4 <HAL_ADC_Start+0x150>
 80046a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00f      	beq.n	80046d2 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80046c2:	e006      	b.n	80046d2 <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80046cc:	e001      	b.n	80046d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
 80046d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	50000100 	.word	0x50000100
 80046e0:	50000300 	.word	0x50000300
 80046e4:	50000700 	.word	0x50000700

080046e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_ADC_Stop+0x16>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e023      	b.n	8004746 <HAL_ADC_Stop+0x5e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004706:	2103      	movs	r1, #3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 ffa7 	bl	800565c <ADC_ConversionStop>
 800470e:	4603      	mov	r3, r0
 8004710:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d111      	bne.n	800473c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f001 f8f1 	bl	8005900 <ADC_Disable>
 800471e:	4603      	mov	r3, r0
 8004720:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004762:	d004      	beq.n	800476e <HAL_ADC_PollForConversion+0x1e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a70      	ldr	r2, [pc, #448]	; (800492c <HAL_ADC_PollForConversion+0x1dc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_ADC_PollForConversion+0x22>
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_ADC_PollForConversion+0x1e0>)
 8004770:	e000      	b.n	8004774 <HAL_ADC_PollForConversion+0x24>
 8004772:	4b70      	ldr	r3, [pc, #448]	; (8004934 <HAL_ADC_PollForConversion+0x1e4>)
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fc25 	bl	8003fc4 <LL_ADC_GetMultimode>
 800477a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d102      	bne.n	800478a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004784:	2308      	movs	r3, #8
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	e037      	b.n	80047fa <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b05      	cmp	r3, #5
 8004794:	d002      	beq.n	800479c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b09      	cmp	r3, #9
 800479a:	d111      	bne.n	80047c0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0b3      	b.n	8004922 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80047ba:	2304      	movs	r3, #4
 80047bc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80047be:	e01c      	b.n	80047fa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047c8:	d004      	beq.n	80047d4 <HAL_ADC_PollForConversion+0x84>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a57      	ldr	r2, [pc, #348]	; (800492c <HAL_ADC_PollForConversion+0x1dc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d101      	bne.n	80047d8 <HAL_ADC_PollForConversion+0x88>
 80047d4:	4b56      	ldr	r3, [pc, #344]	; (8004930 <HAL_ADC_PollForConversion+0x1e0>)
 80047d6:	e000      	b.n	80047da <HAL_ADC_PollForConversion+0x8a>
 80047d8:	4b56      	ldr	r3, [pc, #344]	; (8004934 <HAL_ADC_PollForConversion+0x1e4>)
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fc00 	bl	8003fe0 <LL_ADC_GetMultiDMATransfer>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e095      	b.n	8004922 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80047f6:	2304      	movs	r3, #4
 80047f8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80047fa:	f7ff fa63 	bl	8003cc4 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004800:	e021      	b.n	8004846 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d01d      	beq.n	8004846 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800480a:	f7ff fa5b 	bl	8003cc4 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <HAL_ADC_PollForConversion+0xd0>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d112      	bne.n	8004846 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e06d      	b.n	8004922 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0d6      	beq.n	8004802 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fb0b 	bl	8003e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01c      	beq.n	80048aa <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	7f5b      	ldrb	r3, [r3, #29]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d118      	bne.n	80048aa <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b08      	cmp	r3, #8
 8004884:	d111      	bne.n	80048aa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_ADC_PollForConversion+0x1dc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d002      	beq.n	80048ba <HAL_ADC_PollForConversion+0x16a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	e001      	b.n	80048be <HAL_ADC_PollForConversion+0x16e>
 80048ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d008      	beq.n	80048d8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d002      	beq.n	80048d8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d104      	bne.n	80048e2 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e00d      	b.n	80048fe <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a11      	ldr	r2, [pc, #68]	; (800492c <HAL_ADC_PollForConversion+0x1dc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d002      	beq.n	80048f2 <HAL_ADC_PollForConversion+0x1a2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	e001      	b.n	80048f6 <HAL_ADC_PollForConversion+0x1a6>
 80048f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048f6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d104      	bne.n	800490e <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2208      	movs	r2, #8
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e008      	b.n	8004920 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	220c      	movs	r2, #12
 800491e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	50000100 	.word	0x50000100
 8004930:	50000300 	.word	0x50000300
 8004934:	50000700 	.word	0x50000700

08004938 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004978:	d004      	beq.n	8004984 <HAL_ADC_IRQHandler+0x30>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a87      	ldr	r2, [pc, #540]	; (8004b9c <HAL_ADC_IRQHandler+0x248>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d101      	bne.n	8004988 <HAL_ADC_IRQHandler+0x34>
 8004984:	4b86      	ldr	r3, [pc, #536]	; (8004ba0 <HAL_ADC_IRQHandler+0x24c>)
 8004986:	e000      	b.n	800498a <HAL_ADC_IRQHandler+0x36>
 8004988:	4b86      	ldr	r3, [pc, #536]	; (8004ba4 <HAL_ADC_IRQHandler+0x250>)
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fb1a 	bl	8003fc4 <LL_ADC_GetMultimode>
 8004990:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d017      	beq.n	80049cc <HAL_ADC_IRQHandler+0x78>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d012      	beq.n	80049cc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 f84b 	bl	8005a5a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2202      	movs	r2, #2
 80049ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <HAL_ADC_IRQHandler+0x8c>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8085 	beq.w	8004af6 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d07f      	beq.n	8004af6 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fa34 	bl	8003e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d064      	beq.n	8004ae8 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a5e      	ldr	r2, [pc, #376]	; (8004b9c <HAL_ADC_IRQHandler+0x248>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d002      	beq.n	8004a2e <HAL_ADC_IRQHandler+0xda>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	e001      	b.n	8004a32 <HAL_ADC_IRQHandler+0xde>
 8004a2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d008      	beq.n	8004a4c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d002      	beq.n	8004a4c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b09      	cmp	r3, #9
 8004a4a:	d104      	bne.n	8004a56 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	e00d      	b.n	8004a72 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a50      	ldr	r2, [pc, #320]	; (8004b9c <HAL_ADC_IRQHandler+0x248>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d002      	beq.n	8004a66 <HAL_ADC_IRQHandler+0x112>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	e001      	b.n	8004a6a <HAL_ADC_IRQHandler+0x116>
 8004a66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a6a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d135      	bne.n	8004ae8 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d12e      	bne.n	8004ae8 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fb78 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d11a      	bne.n	8004ad0 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 020c 	bic.w	r2, r2, #12
 8004aa8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d112      	bne.n	8004ae8 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	f043 0201 	orr.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ace:	e00b      	b.n	8004ae8 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad4:	f043 0210 	orr.w	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae0:	f043 0201 	orr.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f96d 	bl	8004dc8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	220c      	movs	r2, #12
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <HAL_ADC_IRQHandler+0x1b6>
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80a1 	beq.w	8004c58 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 809b 	beq.w	8004c58 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff f9dd 	bl	8003efe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004b44:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff f998 	bl	8003e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b50:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <HAL_ADC_IRQHandler+0x248>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d002      	beq.n	8004b62 <HAL_ADC_IRQHandler+0x20e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	e001      	b.n	8004b66 <HAL_ADC_IRQHandler+0x212>
 8004b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d008      	beq.n	8004b80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d002      	beq.n	8004b80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d104      	bne.n	8004b8a <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	e014      	b.n	8004bb4 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <HAL_ADC_IRQHandler+0x248>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_ADC_IRQHandler+0x254>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	e008      	b.n	8004bac <HAL_ADC_IRQHandler+0x258>
 8004b9a:	bf00      	nop
 8004b9c:	50000100 	.word	0x50000100
 8004ba0:	50000300 	.word	0x50000300
 8004ba4:	50000700 	.word	0x50000700
 8004ba8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bac:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d047      	beq.n	8004c4a <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_ADC_IRQHandler+0x280>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d03f      	beq.n	8004c4a <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d13a      	bne.n	8004c4a <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d133      	bne.n	8004c4a <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d12e      	bne.n	8004c4a <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff faee 	bl	80041d2 <LL_ADC_INJ_IsConversionOngoing>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d11a      	bne.n	8004c32 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c0a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d112      	bne.n	8004c4a <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c30:	e00b      	b.n	8004c4a <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	f043 0210 	orr.w	r2, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c42:	f043 0201 	orr.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fedd 	bl	8005a0a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2260      	movs	r2, #96	; 0x60
 8004c56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d011      	beq.n	8004c86 <HAL_ADC_IRQHandler+0x332>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f8af 	bl	8004ddc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2280      	movs	r2, #128	; 0x80
 8004c84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d012      	beq.n	8004cb6 <HAL_ADC_IRQHandler+0x362>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00d      	beq.n	8004cb6 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fec3 	bl	8005a32 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0x392>
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 feb5 	bl	8005a46 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d043      	beq.n	8004d78 <HAL_ADC_IRQHandler+0x424>
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03e      	beq.n	8004d78 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8004d02:	2301      	movs	r3, #1
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
 8004d06:	e021      	b.n	8004d4c <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d015      	beq.n	8004d3a <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d16:	d004      	beq.n	8004d22 <HAL_ADC_IRQHandler+0x3ce>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <HAL_ADC_IRQHandler+0x468>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_IRQHandler+0x3d2>
 8004d22:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <HAL_ADC_IRQHandler+0x46c>)
 8004d24:	e000      	b.n	8004d28 <HAL_ADC_IRQHandler+0x3d4>
 8004d26:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <HAL_ADC_IRQHandler+0x470>)
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff f959 	bl	8003fe0 <LL_ADC_GetMultiDMATransfer>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8004d34:	2301      	movs	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	e008      	b.n	8004d4c <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10e      	bne.n	8004d70 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d56:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	f043 0202 	orr.w	r2, r3, #2
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f840 	bl	8004df0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2210      	movs	r2, #16
 8004d76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d018      	beq.n	8004db4 <HAL_ADC_IRQHandler+0x460>
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d90:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9c:	f043 0208 	orr.w	r2, r3, #8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fe35 	bl	8005a1e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004db4:	bf00      	nop
 8004db6:	3728      	adds	r7, #40	; 0x28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	50000100 	.word	0x50000100
 8004dc0:	50000300 	.word	0x50000300
 8004dc4:	50000700 	.word	0x50000700

08004dc8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b0b6      	sub	sp, #216	; 0xd8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d102      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x24>
 8004e22:	2302      	movs	r3, #2
 8004e24:	f000 bc04 	b.w	8005630 <HAL_ADC_ConfigChannel+0x82c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff f9a5 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 83e8 	bne.w	8005612 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7ff f829 	bl	8003ea6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff f993 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8004e5e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff f9b3 	bl	80041d2 <LL_ADC_INJ_IsConversionOngoing>
 8004e6c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f040 81d9 	bne.w	800522c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f040 81d4 	bne.w	800522c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e8c:	d10f      	bne.n	8004eae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f7ff f843 	bl	8003f24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe ffd7 	bl	8003e5a <LL_ADC_SetSamplingTimeCommonConfig>
 8004eac:	e00e      	b.n	8004ecc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6819      	ldr	r1, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f7ff f832 	bl	8003f24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe ffc7 	bl	8003e5a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	08db      	lsrs	r3, r3, #3
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d022      	beq.n	8004f34 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6919      	ldr	r1, [r3, #16]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004efe:	f7fe ff21 	bl	8003d44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6919      	ldr	r1, [r3, #16]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7fe ff6d 	bl	8003dee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d102      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x126>
 8004f24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f28:	e000      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x128>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f7fe ff79 	bl	8003e24 <LL_ADC_SetOffsetSaturation>
 8004f32:	e17b      	b.n	800522c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe ff26 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x15c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe ff1b 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 8004f56:	4603      	mov	r3, r0
 8004f58:	0e9b      	lsrs	r3, r3, #26
 8004f5a:	f003 021f 	and.w	r2, r3, #31
 8004f5e:	e01e      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x19a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe ff10 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004f8e:	2320      	movs	r3, #32
 8004f90:	e004      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004f92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f96:	fab3 f383 	clz	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x1b2>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	0e9b      	lsrs	r3, r3, #26
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	e018      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x1e4>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fc2:	fa93 f3a3 	rbit	r3, r3
 8004fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004fda:	2320      	movs	r3, #32
 8004fdc:	e004      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fe2:	fab3 f383 	clz	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d106      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fedf 	bl	8003db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2101      	movs	r1, #1
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe fec3 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 8005006:	4603      	mov	r3, r0
 8005008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x222>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2101      	movs	r1, #1
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe feb8 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 800501c:	4603      	mov	r3, r0
 800501e:	0e9b      	lsrs	r3, r3, #26
 8005020:	f003 021f 	and.w	r2, r3, #31
 8005024:	e01e      	b.n	8005064 <HAL_ADC_ConfigChannel+0x260>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2101      	movs	r1, #1
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fead 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 8005032:	4603      	mov	r3, r0
 8005034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005038:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800503c:	fa93 f3a3 	rbit	r3, r3
 8005040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800504c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005054:	2320      	movs	r3, #32
 8005056:	e004      	b.n	8005062 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800505c:	fab3 f383 	clz	r3, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506c:	2b00      	cmp	r3, #0
 800506e:	d105      	bne.n	800507c <HAL_ADC_ConfigChannel+0x278>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	0e9b      	lsrs	r3, r3, #26
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	e018      	b.n	80050ae <HAL_ADC_ConfigChannel+0x2aa>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005088:	fa93 f3a3 	rbit	r3, r3
 800508c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005090:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80050a0:	2320      	movs	r3, #32
 80050a2:	e004      	b.n	80050ae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80050a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d106      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2101      	movs	r1, #1
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe fe7c 	bl	8003db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2102      	movs	r1, #2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fe60 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x2e8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2102      	movs	r1, #2
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe fe55 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 80050e2:	4603      	mov	r3, r0
 80050e4:	0e9b      	lsrs	r3, r3, #26
 80050e6:	f003 021f 	and.w	r2, r3, #31
 80050ea:	e01e      	b.n	800512a <HAL_ADC_ConfigChannel+0x326>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2102      	movs	r1, #2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe fe4a 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005102:	fa93 f3a3 	rbit	r3, r3
 8005106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800510a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800510e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005112:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800511a:	2320      	movs	r3, #32
 800511c:	e004      	b.n	8005128 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800511e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005122:	fab3 f383 	clz	r3, r3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x33e>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	0e9b      	lsrs	r3, r3, #26
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	e016      	b.n	8005170 <HAL_ADC_ConfigChannel+0x36c>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800514e:	fa93 f3a3 	rbit	r3, r3
 8005152:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800515a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005162:	2320      	movs	r3, #32
 8005164:	e004      	b.n	8005170 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800516a:	fab3 f383 	clz	r3, r3
 800516e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005170:	429a      	cmp	r2, r3
 8005172:	d106      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2200      	movs	r2, #0
 800517a:	2102      	movs	r1, #2
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe fe1b 	bl	8003db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2103      	movs	r1, #3
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe fdff 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 800518e:	4603      	mov	r3, r0
 8005190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <HAL_ADC_ConfigChannel+0x3aa>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2103      	movs	r1, #3
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe fdf4 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 80051a4:	4603      	mov	r3, r0
 80051a6:	0e9b      	lsrs	r3, r3, #26
 80051a8:	f003 021f 	and.w	r2, r3, #31
 80051ac:	e017      	b.n	80051de <HAL_ADC_ConfigChannel+0x3da>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2103      	movs	r1, #3
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe fde9 	bl	8003d8c <LL_ADC_GetOffsetChannel>
 80051ba:	4603      	mov	r3, r0
 80051bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c0:	fa93 f3a3 	rbit	r3, r3
 80051c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80051c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80051ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80051d0:	2320      	movs	r3, #32
 80051d2:	e003      	b.n	80051dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80051d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x3f2>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	0e9b      	lsrs	r3, r3, #26
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	e011      	b.n	800521a <HAL_ADC_ConfigChannel+0x416>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005206:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800520e:	2320      	movs	r3, #32
 8005210:	e003      	b.n	800521a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005214:	fab3 f383 	clz	r3, r3
 8005218:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800521a:	429a      	cmp	r2, r3
 800521c:	d106      	bne.n	800522c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	2103      	movs	r1, #3
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fdc6 	bl	8003db8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe ff59 	bl	80040e8 <LL_ADC_IsEnabled>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f040 813d 	bne.w	80054b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	461a      	mov	r2, r3
 800524c:	f7fe fe96 	bl	8003f7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4aa2      	ldr	r2, [pc, #648]	; (80054e0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	f040 812e 	bne.w	80054b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <HAL_ADC_ConfigChannel+0x480>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	0e9b      	lsrs	r3, r3, #26
 8005272:	3301      	adds	r3, #1
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	2b09      	cmp	r3, #9
 800527a:	bf94      	ite	ls
 800527c:	2301      	movls	r3, #1
 800527e:	2300      	movhi	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	e019      	b.n	80052b8 <HAL_ADC_ConfigChannel+0x4b4>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528c:	fa93 f3a3 	rbit	r3, r3
 8005290:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005294:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800529c:	2320      	movs	r3, #32
 800529e:	e003      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80052a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a2:	fab3 f383 	clz	r3, r3
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	3301      	adds	r3, #1
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2b09      	cmp	r3, #9
 80052b0:	bf94      	ite	ls
 80052b2:	2301      	movls	r3, #1
 80052b4:	2300      	movhi	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d079      	beq.n	80053b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d107      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x4d4>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	0e9b      	lsrs	r3, r3, #26
 80052ce:	3301      	adds	r3, #1
 80052d0:	069b      	lsls	r3, r3, #26
 80052d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052d6:	e015      	b.n	8005304 <HAL_ADC_ConfigChannel+0x500>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e0:	fa93 f3a3 	rbit	r3, r3
 80052e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80052e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80052ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80052f0:	2320      	movs	r3, #32
 80052f2:	e003      	b.n	80052fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80052f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f6:	fab3 f383 	clz	r3, r3
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	3301      	adds	r3, #1
 80052fe:	069b      	lsls	r3, r3, #26
 8005300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_ADC_ConfigChannel+0x520>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	0e9b      	lsrs	r3, r3, #26
 8005316:	3301      	adds	r3, #1
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f303 	lsl.w	r3, r1, r3
 8005322:	e017      	b.n	8005354 <HAL_ADC_ConfigChannel+0x550>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532c:	fa93 f3a3 	rbit	r3, r3
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005334:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800533c:	2320      	movs	r3, #32
 800533e:	e003      	b.n	8005348 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	3301      	adds	r3, #1
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	2101      	movs	r1, #1
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	ea42 0103 	orr.w	r1, r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <HAL_ADC_ConfigChannel+0x576>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	0e9b      	lsrs	r3, r3, #26
 800536a:	3301      	adds	r3, #1
 800536c:	f003 021f 	and.w	r2, r3, #31
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	051b      	lsls	r3, r3, #20
 8005378:	e018      	b.n	80053ac <HAL_ADC_ConfigChannel+0x5a8>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005392:	2320      	movs	r3, #32
 8005394:	e003      	b.n	800539e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005398:	fab3 f383 	clz	r3, r3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	3301      	adds	r3, #1
 80053a0:	f003 021f 	and.w	r2, r3, #31
 80053a4:	4613      	mov	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053ac:	430b      	orrs	r3, r1
 80053ae:	e07e      	b.n	80054ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <HAL_ADC_ConfigChannel+0x5c8>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	0e9b      	lsrs	r3, r3, #26
 80053c2:	3301      	adds	r3, #1
 80053c4:	069b      	lsls	r3, r3, #26
 80053c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053ca:	e015      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x5f4>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	fa93 f3a3 	rbit	r3, r3
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80053e4:	2320      	movs	r3, #32
 80053e6:	e003      	b.n	80053f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	fab3 f383 	clz	r3, r3
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	3301      	adds	r3, #1
 80053f2:	069b      	lsls	r3, r3, #26
 80053f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x614>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	0e9b      	lsrs	r3, r3, #26
 800540a:	3301      	adds	r3, #1
 800540c:	f003 031f 	and.w	r3, r3, #31
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	e017      	b.n	8005448 <HAL_ADC_ConfigChannel+0x644>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	fa93 f3a3 	rbit	r3, r3
 8005424:	61fb      	str	r3, [r7, #28]
  return result;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005430:	2320      	movs	r3, #32
 8005432:	e003      	b.n	800543c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	fab3 f383 	clz	r3, r3
 800543a:	b2db      	uxtb	r3, r3
 800543c:	3301      	adds	r3, #1
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2101      	movs	r1, #1
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	ea42 0103 	orr.w	r1, r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10d      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x670>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	0e9b      	lsrs	r3, r3, #26
 800545e:	3301      	adds	r3, #1
 8005460:	f003 021f 	and.w	r2, r3, #31
 8005464:	4613      	mov	r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4413      	add	r3, r2
 800546a:	3b1e      	subs	r3, #30
 800546c:	051b      	lsls	r3, r3, #20
 800546e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005472:	e01b      	b.n	80054ac <HAL_ADC_ConfigChannel+0x6a8>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	fa93 f3a3 	rbit	r3, r3
 8005480:	613b      	str	r3, [r7, #16]
  return result;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800548c:	2320      	movs	r3, #32
 800548e:	e003      	b.n	8005498 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	fab3 f383 	clz	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	3301      	adds	r3, #1
 800549a:	f003 021f 	and.w	r2, r3, #31
 800549e:	4613      	mov	r3, r2
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	4413      	add	r3, r2
 80054a4:	3b1e      	subs	r3, #30
 80054a6:	051b      	lsls	r3, r3, #20
 80054a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054b2:	4619      	mov	r1, r3
 80054b4:	f7fe fd36 	bl	8003f24 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <HAL_ADC_ConfigChannel+0x6e0>)
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80af 	beq.w	8005624 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054ce:	d004      	beq.n	80054da <HAL_ADC_ConfigChannel+0x6d6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <HAL_ADC_ConfigChannel+0x6e4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10a      	bne.n	80054f0 <HAL_ADC_ConfigChannel+0x6ec>
 80054da:	4b04      	ldr	r3, [pc, #16]	; (80054ec <HAL_ADC_ConfigChannel+0x6e8>)
 80054dc:	e009      	b.n	80054f2 <HAL_ADC_ConfigChannel+0x6ee>
 80054de:	bf00      	nop
 80054e0:	407f0000 	.word	0x407f0000
 80054e4:	80080000 	.word	0x80080000
 80054e8:	50000100 	.word	0x50000100
 80054ec:	50000300 	.word	0x50000300
 80054f0:	4b51      	ldr	r3, [pc, #324]	; (8005638 <HAL_ADC_ConfigChannel+0x834>)
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe fc18 	bl	8003d28 <LL_ADC_GetCommonPathInternalCh>
 80054f8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a4e      	ldr	r2, [pc, #312]	; (800563c <HAL_ADC_ConfigChannel+0x838>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <HAL_ADC_ConfigChannel+0x70c>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a4d      	ldr	r2, [pc, #308]	; (8005640 <HAL_ADC_ConfigChannel+0x83c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d134      	bne.n	800557a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d12e      	bne.n	800557a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005524:	d17e      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800552e:	d004      	beq.n	800553a <HAL_ADC_ConfigChannel+0x736>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a43      	ldr	r2, [pc, #268]	; (8005644 <HAL_ADC_ConfigChannel+0x840>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <HAL_ADC_ConfigChannel+0x73a>
 800553a:	4a43      	ldr	r2, [pc, #268]	; (8005648 <HAL_ADC_ConfigChannel+0x844>)
 800553c:	e000      	b.n	8005540 <HAL_ADC_ConfigChannel+0x73c>
 800553e:	4a3e      	ldr	r2, [pc, #248]	; (8005638 <HAL_ADC_ConfigChannel+0x834>)
 8005540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7fe fbd9 	bl	8003d02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005550:	4b3e      	ldr	r3, [pc, #248]	; (800564c <HAL_ADC_ConfigChannel+0x848>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	099b      	lsrs	r3, r3, #6
 8005556:	4a3e      	ldr	r2, [pc, #248]	; (8005650 <HAL_ADC_ConfigChannel+0x84c>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	4613      	mov	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800556a:	e002      	b.n	8005572 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f9      	bne.n	800556c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005578:	e054      	b.n	8005624 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a35      	ldr	r2, [pc, #212]	; (8005654 <HAL_ADC_ConfigChannel+0x850>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d120      	bne.n	80055c6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11a      	bne.n	80055c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005598:	d144      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055a2:	d004      	beq.n	80055ae <HAL_ADC_ConfigChannel+0x7aa>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a26      	ldr	r2, [pc, #152]	; (8005644 <HAL_ADC_ConfigChannel+0x840>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x7ae>
 80055ae:	4a26      	ldr	r2, [pc, #152]	; (8005648 <HAL_ADC_ConfigChannel+0x844>)
 80055b0:	e000      	b.n	80055b4 <HAL_ADC_ConfigChannel+0x7b0>
 80055b2:	4a21      	ldr	r2, [pc, #132]	; (8005638 <HAL_ADC_ConfigChannel+0x834>)
 80055b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f7fe fb9f 	bl	8003d02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055c4:	e02e      	b.n	8005624 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a23      	ldr	r2, [pc, #140]	; (8005658 <HAL_ADC_ConfigChannel+0x854>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d129      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d123      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a18      	ldr	r2, [pc, #96]	; (8005644 <HAL_ADC_ConfigChannel+0x840>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01e      	beq.n	8005624 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ee:	d004      	beq.n	80055fa <HAL_ADC_ConfigChannel+0x7f6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a13      	ldr	r2, [pc, #76]	; (8005644 <HAL_ADC_ConfigChannel+0x840>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x7fa>
 80055fa:	4a13      	ldr	r2, [pc, #76]	; (8005648 <HAL_ADC_ConfigChannel+0x844>)
 80055fc:	e000      	b.n	8005600 <HAL_ADC_ConfigChannel+0x7fc>
 80055fe:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <HAL_ADC_ConfigChannel+0x834>)
 8005600:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005608:	4619      	mov	r1, r3
 800560a:	4610      	mov	r0, r2
 800560c:	f7fe fb79 	bl	8003d02 <LL_ADC_SetCommonPathInternalCh>
 8005610:	e008      	b.n	8005624 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800562c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005630:	4618      	mov	r0, r3
 8005632:	37d8      	adds	r7, #216	; 0xd8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	50000700 	.word	0x50000700
 800563c:	c3210000 	.word	0xc3210000
 8005640:	90c00010 	.word	0x90c00010
 8005644:	50000100 	.word	0x50000100
 8005648:	50000300 	.word	0x50000300
 800564c:	20000000 	.word	0x20000000
 8005650:	053e2d63 	.word	0x053e2d63
 8005654:	c7520000 	.word	0xc7520000
 8005658:	cb840000 	.word	0xcb840000

0800565c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe fd86 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8005678:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fda7 	bl	80041d2 <LL_ADC_INJ_IsConversionOngoing>
 8005684:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8098 	beq.w	80057c4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02a      	beq.n	80056f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7f5b      	ldrb	r3, [r3, #29]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d126      	bne.n	80056f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7f1b      	ldrb	r3, [r3, #28]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d122      	bne.n	80056f8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80056b6:	e014      	b.n	80056e2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4a45      	ldr	r2, [pc, #276]	; (80057d0 <ADC_ConversionStop+0x174>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d90d      	bls.n	80056dc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	f043 0210 	orr.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d0:	f043 0201 	orr.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e074      	b.n	80057c6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3301      	adds	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d1e3      	bne.n	80056b8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2240      	movs	r2, #64	; 0x40
 80056f6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d014      	beq.n	8005728 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fd3e 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fcfb 	bl	800410e <LL_ADC_IsDisableOngoing>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fd1a 	bl	800415c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d014      	beq.n	8005758 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fd4d 	bl	80041d2 <LL_ADC_INJ_IsConversionOngoing>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00c      	beq.n	8005758 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fce3 	bl	800410e <LL_ADC_IsDisableOngoing>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fd29 	bl	80041aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d005      	beq.n	800576a <ADC_ConversionStop+0x10e>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d105      	bne.n	8005770 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005764:	230c      	movs	r3, #12
 8005766:	617b      	str	r3, [r7, #20]
        break;
 8005768:	e005      	b.n	8005776 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800576a:	2308      	movs	r3, #8
 800576c:	617b      	str	r3, [r7, #20]
        break;
 800576e:	e002      	b.n	8005776 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005770:	2304      	movs	r3, #4
 8005772:	617b      	str	r3, [r7, #20]
        break;
 8005774:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005776:	f7fe faa5 	bl	8003cc4 <HAL_GetTick>
 800577a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800577c:	e01b      	b.n	80057b6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800577e:	f7fe faa1 	bl	8003cc4 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b05      	cmp	r3, #5
 800578a:	d914      	bls.n	80057b6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4013      	ands	r3, r2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579e:	f043 0210 	orr.w	r2, r3, #16
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057aa:	f043 0201 	orr.w	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e007      	b.n	80057c6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1dc      	bne.n	800577e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	a33fffff 	.word	0xa33fffff

080057d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80057dc:	2300      	movs	r3, #0
 80057de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fc7f 	bl	80040e8 <LL_ADC_IsEnabled>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d176      	bne.n	80058de <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	4b3c      	ldr	r3, [pc, #240]	; (80058e8 <ADC_Enable+0x114>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00d      	beq.n	800581a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005802:	f043 0210 	orr.w	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e062      	b.n	80058e0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe fc3a 	bl	8004098 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800582c:	d004      	beq.n	8005838 <ADC_Enable+0x64>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2e      	ldr	r2, [pc, #184]	; (80058ec <ADC_Enable+0x118>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d101      	bne.n	800583c <ADC_Enable+0x68>
 8005838:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <ADC_Enable+0x11c>)
 800583a:	e000      	b.n	800583e <ADC_Enable+0x6a>
 800583c:	4b2d      	ldr	r3, [pc, #180]	; (80058f4 <ADC_Enable+0x120>)
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe fa72 	bl	8003d28 <LL_ADC_GetCommonPathInternalCh>
 8005844:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800584e:	4b2a      	ldr	r3, [pc, #168]	; (80058f8 <ADC_Enable+0x124>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	099b      	lsrs	r3, r3, #6
 8005854:	4a29      	ldr	r2, [pc, #164]	; (80058fc <ADC_Enable+0x128>)
 8005856:	fba2 2303 	umull	r2, r3, r2, r3
 800585a:	099b      	lsrs	r3, r3, #6
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005868:	e002      	b.n	8005870 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	3b01      	subs	r3, #1
 800586e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f9      	bne.n	800586a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005876:	f7fe fa25 	bl	8003cc4 <HAL_GetTick>
 800587a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800587c:	e028      	b.n	80058d0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fc30 	bl	80040e8 <LL_ADC_IsEnabled>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe fc00 	bl	8004098 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005898:	f7fe fa14 	bl	8003cc4 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d914      	bls.n	80058d0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d00d      	beq.n	80058d0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b8:	f043 0210 	orr.w	r2, r3, #16
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c4:	f043 0201 	orr.w	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e007      	b.n	80058e0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d1cf      	bne.n	800587e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	8000003f 	.word	0x8000003f
 80058ec:	50000100 	.word	0x50000100
 80058f0:	50000300 	.word	0x50000300
 80058f4:	50000700 	.word	0x50000700
 80058f8:	20000000 	.word	0x20000000
 80058fc:	053e2d63 	.word	0x053e2d63

08005900 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe fbfe 	bl	800410e <LL_ADC_IsDisableOngoing>
 8005912:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fbe5 	bl	80040e8 <LL_ADC_IsEnabled>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d047      	beq.n	80059b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d144      	bne.n	80059b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 030d 	and.w	r3, r3, #13
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10c      	bne.n	8005952 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fbbf 	bl	80040c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2203      	movs	r2, #3
 8005948:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800594a:	f7fe f9bb 	bl	8003cc4 <HAL_GetTick>
 800594e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005950:	e029      	b.n	80059a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005956:	f043 0210 	orr.w	r2, r3, #16
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005962:	f043 0201 	orr.w	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e023      	b.n	80059b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800596e:	f7fe f9a9 	bl	8003cc4 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d914      	bls.n	80059a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00d      	beq.n	80059a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	f043 0210 	orr.w	r2, r3, #16
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599a:	f043 0201 	orr.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e007      	b.n	80059b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1dc      	bne.n	800596e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <LL_ADC_IsEnabled>:
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <LL_ADC_IsEnabled+0x18>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <LL_ADC_IsEnabled+0x1a>
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <LL_ADC_REG_IsConversionOngoing>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d101      	bne.n	80059fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005a70:	b590      	push	{r4, r7, lr}
 8005a72:	b0a1      	sub	sp, #132	; 0x84
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e0cb      	b.n	8005c26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005a96:	2300      	movs	r3, #0
 8005a98:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aa6:	d102      	bne.n	8005aae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005aa8:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005aaa:	60bb      	str	r3, [r7, #8]
 8005aac:	e001      	b.n	8005ab2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0aa      	b.n	8005c26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff ff86 	bl	80059e4 <LL_ADC_REG_IsConversionOngoing>
 8005ad8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff ff80 	bl	80059e4 <LL_ADC_REG_IsConversionOngoing>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f040 808c 	bne.w	8005c04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f040 8088 	bne.w	8005c04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005afc:	d004      	beq.n	8005b08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a4b      	ldr	r2, [pc, #300]	; (8005c30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005b08:	4b4a      	ldr	r3, [pc, #296]	; (8005c34 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8005b0a:	e000      	b.n	8005b0e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005b0c:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005b0e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d041      	beq.n	8005b9c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	6859      	ldr	r1, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b2a:	035b      	lsls	r3, r3, #13
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b3c:	d004      	beq.n	8005b48 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a3b      	ldr	r2, [pc, #236]	; (8005c30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10f      	bne.n	8005b68 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005b48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005b4c:	f7ff ff37 	bl	80059be <LL_ADC_IsEnabled>
 8005b50:	4604      	mov	r4, r0
 8005b52:	4837      	ldr	r0, [pc, #220]	; (8005c30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005b54:	f7ff ff33 	bl	80059be <LL_ADC_IsEnabled>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4323      	orrs	r3, r4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e008      	b.n	8005b7a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005b68:	4834      	ldr	r0, [pc, #208]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005b6a:	f7ff ff28 	bl	80059be <LL_ADC_IsEnabled>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d04c      	beq.n	8005c18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b86:	f023 030f 	bic.w	r3, r3, #15
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	6811      	ldr	r1, [r2, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	6892      	ldr	r2, [r2, #8]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	431a      	orrs	r2, r3
 8005b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b98:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b9a:	e03d      	b.n	8005c18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bb0:	d004      	beq.n	8005bbc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d10f      	bne.n	8005bdc <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8005bbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005bc0:	f7ff fefd 	bl	80059be <LL_ADC_IsEnabled>
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	481a      	ldr	r0, [pc, #104]	; (8005c30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005bc8:	f7ff fef9 	bl	80059be <LL_ADC_IsEnabled>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	4323      	orrs	r3, r4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e008      	b.n	8005bee <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005bdc:	4817      	ldr	r0, [pc, #92]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005bde:	f7ff feee 	bl	80059be <LL_ADC_IsEnabled>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d012      	beq.n	8005c18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005bfa:	f023 030f 	bic.w	r3, r3, #15
 8005bfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005c00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c02:	e009      	b.n	8005c18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c16:	e000      	b.n	8005c1a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3784      	adds	r7, #132	; 0x84
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	50000100 	.word	0x50000100
 8005c34:	50000300 	.word	0x50000300
 8005c38:	50000700 	.word	0x50000700
 8005c3c:	50000400 	.word	0x50000400

08005c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <__NVIC_SetPriorityGrouping+0x44>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c72:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <__NVIC_SetPriorityGrouping+0x44>)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	60d3      	str	r3, [r2, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	e000ed00 	.word	0xe000ed00

08005c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	f003 0307 	and.w	r3, r3, #7
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	e000ed00 	.word	0xe000ed00

08005ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	db0b      	blt.n	8005cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	f003 021f 	and.w	r2, r3, #31
 8005cbc:	4907      	ldr	r1, [pc, #28]	; (8005cdc <__NVIC_EnableIRQ+0x38>)
 8005cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	e000e100 	.word	0xe000e100

08005ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	6039      	str	r1, [r7, #0]
 8005cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	db0a      	blt.n	8005d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <__NVIC_SetPriority+0x4c>)
 8005cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfe:	0112      	lsls	r2, r2, #4
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	440b      	add	r3, r1
 8005d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d08:	e00a      	b.n	8005d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4908      	ldr	r1, [pc, #32]	; (8005d30 <__NVIC_SetPriority+0x50>)
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	3b04      	subs	r3, #4
 8005d18:	0112      	lsls	r2, r2, #4
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	761a      	strb	r2, [r3, #24]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	e000e100 	.word	0xe000e100
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f1c3 0307 	rsb	r3, r3, #7
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf28      	it	cs
 8005d52:	2304      	movcs	r3, #4
 8005d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d902      	bls.n	8005d64 <NVIC_EncodePriority+0x30>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3b03      	subs	r3, #3
 8005d62:	e000      	b.n	8005d66 <NVIC_EncodePriority+0x32>
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43da      	mvns	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	401a      	ands	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	43d9      	mvns	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d8c:	4313      	orrs	r3, r2
         );
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff ff4c 	bl	8005c40 <__NVIC_SetPriorityGrouping>
}
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005dbe:	f7ff ff63 	bl	8005c88 <__NVIC_GetPriorityGrouping>
 8005dc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7ff ffb3 	bl	8005d34 <NVIC_EncodePriority>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff ff82 	bl	8005ce0 <__NVIC_SetPriority>
}
 8005ddc:	bf00      	nop
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff ff56 	bl	8005ca4 <__NVIC_EnableIRQ>
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e0e:	e15a      	b.n	80060c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 814c 	beq.w	80060c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d005      	beq.n	8005e40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d130      	bne.n	8005ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e76:	2201      	movs	r2, #1
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 0201 	and.w	r2, r3, #1
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d017      	beq.n	8005ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d123      	bne.n	8005f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	08da      	lsrs	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3208      	adds	r2, #8
 8005ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	220f      	movs	r2, #15
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43db      	mvns	r3, r3
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	08da      	lsrs	r2, r3, #3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3208      	adds	r2, #8
 8005f2c:	6939      	ldr	r1, [r7, #16]
 8005f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4013      	ands	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 0203 	and.w	r2, r3, #3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80a6 	beq.w	80060c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f74:	4b5b      	ldr	r3, [pc, #364]	; (80060e4 <HAL_GPIO_Init+0x2e4>)
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	4a5a      	ldr	r2, [pc, #360]	; (80060e4 <HAL_GPIO_Init+0x2e4>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8005f80:	4b58      	ldr	r3, [pc, #352]	; (80060e4 <HAL_GPIO_Init+0x2e4>)
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f8c:	4a56      	ldr	r2, [pc, #344]	; (80060e8 <HAL_GPIO_Init+0x2e8>)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	3302      	adds	r3, #2
 8005f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	220f      	movs	r2, #15
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4013      	ands	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fb6:	d01f      	beq.n	8005ff8 <HAL_GPIO_Init+0x1f8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a4c      	ldr	r2, [pc, #304]	; (80060ec <HAL_GPIO_Init+0x2ec>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d019      	beq.n	8005ff4 <HAL_GPIO_Init+0x1f4>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a4b      	ldr	r2, [pc, #300]	; (80060f0 <HAL_GPIO_Init+0x2f0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <HAL_GPIO_Init+0x1f0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a4a      	ldr	r2, [pc, #296]	; (80060f4 <HAL_GPIO_Init+0x2f4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00d      	beq.n	8005fec <HAL_GPIO_Init+0x1ec>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a49      	ldr	r2, [pc, #292]	; (80060f8 <HAL_GPIO_Init+0x2f8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <HAL_GPIO_Init+0x1e8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a48      	ldr	r2, [pc, #288]	; (80060fc <HAL_GPIO_Init+0x2fc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d101      	bne.n	8005fe4 <HAL_GPIO_Init+0x1e4>
 8005fe0:	2305      	movs	r3, #5
 8005fe2:	e00a      	b.n	8005ffa <HAL_GPIO_Init+0x1fa>
 8005fe4:	2306      	movs	r3, #6
 8005fe6:	e008      	b.n	8005ffa <HAL_GPIO_Init+0x1fa>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	e006      	b.n	8005ffa <HAL_GPIO_Init+0x1fa>
 8005fec:	2303      	movs	r3, #3
 8005fee:	e004      	b.n	8005ffa <HAL_GPIO_Init+0x1fa>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e002      	b.n	8005ffa <HAL_GPIO_Init+0x1fa>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <HAL_GPIO_Init+0x1fa>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	f002 0203 	and.w	r2, r2, #3
 8006000:	0092      	lsls	r2, r2, #2
 8006002:	4093      	lsls	r3, r2
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800600a:	4937      	ldr	r1, [pc, #220]	; (80060e8 <HAL_GPIO_Init+0x2e8>)
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	089b      	lsrs	r3, r3, #2
 8006010:	3302      	adds	r3, #2
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006018:	4b39      	ldr	r3, [pc, #228]	; (8006100 <HAL_GPIO_Init+0x300>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	43db      	mvns	r3, r3
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4013      	ands	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800603c:	4a30      	ldr	r2, [pc, #192]	; (8006100 <HAL_GPIO_Init+0x300>)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006042:	4b2f      	ldr	r3, [pc, #188]	; (8006100 <HAL_GPIO_Init+0x300>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	43db      	mvns	r3, r3
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4013      	ands	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006066:	4a26      	ldr	r2, [pc, #152]	; (8006100 <HAL_GPIO_Init+0x300>)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800606c:	4b24      	ldr	r3, [pc, #144]	; (8006100 <HAL_GPIO_Init+0x300>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	43db      	mvns	r3, r3
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4013      	ands	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006090:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <HAL_GPIO_Init+0x300>)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <HAL_GPIO_Init+0x300>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	43db      	mvns	r3, r3
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4013      	ands	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060ba:	4a11      	ldr	r2, [pc, #68]	; (8006100 <HAL_GPIO_Init+0x300>)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	3301      	adds	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f47f ae9d 	bne.w	8005e10 <HAL_GPIO_Init+0x10>
  }
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40010000 	.word	0x40010000
 80060ec:	48000400 	.word	0x48000400
 80060f0:	48000800 	.word	0x48000800
 80060f4:	48000c00 	.word	0x48000c00
 80060f8:	48001000 	.word	0x48001000
 80060fc:	48001400 	.word	0x48001400
 8006100:	40010400 	.word	0x40010400

08006104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	887b      	ldrh	r3, [r7, #2]
 8006116:	4013      	ands	r3, r2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800611c:	2301      	movs	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	e001      	b.n	8006126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	807b      	strh	r3, [r7, #2]
 8006140:	4613      	mov	r3, r2
 8006142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006144:	787b      	ldrb	r3, [r7, #1]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006150:	e002      	b.n	8006158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006152:	887a      	ldrh	r2, [r7, #2]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800616e:	4b08      	ldr	r3, [pc, #32]	; (8006190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d006      	beq.n	8006188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800617a:	4a05      	ldr	r2, [pc, #20]	; (8006190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f806 	bl	8006194 <HAL_GPIO_EXTI_Callback>
  }
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40010400 	.word	0x40010400

08006194 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e08d      	b.n	80062d8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fb fd3f 	bl	8001c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2224      	movs	r2, #36	; 0x24
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800620a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d107      	bne.n	8006224 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006220:	609a      	str	r2, [r3, #8]
 8006222:	e006      	b.n	8006232 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006230:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d108      	bne.n	800624c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	e007      	b.n	800625c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800625a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800627e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69d9      	ldr	r1, [r3, #28]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1a      	ldr	r2, [r3, #32]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0201 	orr.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	817b      	strh	r3, [r7, #10]
 80062f2:	460b      	mov	r3, r1
 80062f4:	813b      	strh	r3, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b20      	cmp	r3, #32
 8006304:	f040 80f9 	bne.w	80064fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_I2C_Mem_Write+0x34>
 800630e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0ed      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_I2C_Mem_Write+0x4e>
 800632a:	2302      	movs	r3, #2
 800632c:	e0e6      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006336:	f7fd fcc5 	bl	8003cc4 <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	2319      	movs	r3, #25
 8006342:	2201      	movs	r2, #1
 8006344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fac3 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0d1      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2221      	movs	r2, #33	; 0x21
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2240      	movs	r2, #64	; 0x40
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006378:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006380:	88f8      	ldrh	r0, [r7, #6]
 8006382:	893a      	ldrh	r2, [r7, #8]
 8006384:	8979      	ldrh	r1, [r7, #10]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4603      	mov	r3, r0
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f9d3 	bl	800673c <I2C_RequestMemoryWrite>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0a9      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2bff      	cmp	r3, #255	; 0xff
 80063b0:	d90e      	bls.n	80063d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	8979      	ldrh	r1, [r7, #10]
 80063c0:	2300      	movs	r3, #0
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fc47 	bl	8006c5c <I2C_TransferConfig>
 80063ce:	e00f      	b.n	80063f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	8979      	ldrh	r1, [r7, #10]
 80063e2:	2300      	movs	r3, #0
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fc36 	bl	8006c5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fac6 	bl	8006986 <I2C_WaitOnTXISFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e07b      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d034      	beq.n	80064a8 <HAL_I2C_Mem_Write+0x1c8>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d130      	bne.n	80064a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	2200      	movs	r2, #0
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fa3f 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e04d      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006464:	b29b      	uxth	r3, r3
 8006466:	2bff      	cmp	r3, #255	; 0xff
 8006468:	d90e      	bls.n	8006488 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	22ff      	movs	r2, #255	; 0xff
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006474:	b2da      	uxtb	r2, r3
 8006476:	8979      	ldrh	r1, [r7, #10]
 8006478:	2300      	movs	r3, #0
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fbeb 	bl	8006c5c <I2C_TransferConfig>
 8006486:	e00f      	b.n	80064a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006496:	b2da      	uxtb	r2, r3
 8006498:	8979      	ldrh	r1, [r7, #10]
 800649a:	2300      	movs	r3, #0
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fbda 	bl	8006c5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d19e      	bne.n	80063f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 faac 	bl	8006a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e01a      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2220      	movs	r2, #32
 80064cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6859      	ldr	r1, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_I2C_Mem_Write+0x224>)
 80064da:	400b      	ands	r3, r1
 80064dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	fe00e800 	.word	0xfe00e800

08006508 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	4608      	mov	r0, r1
 8006512:	4611      	mov	r1, r2
 8006514:	461a      	mov	r2, r3
 8006516:	4603      	mov	r3, r0
 8006518:	817b      	strh	r3, [r7, #10]
 800651a:	460b      	mov	r3, r1
 800651c:	813b      	strh	r3, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b20      	cmp	r3, #32
 800652c:	f040 80fd 	bne.w	800672a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_I2C_Mem_Read+0x34>
 8006536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006538:	2b00      	cmp	r3, #0
 800653a:	d105      	bne.n	8006548 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006542:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0f1      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_I2C_Mem_Read+0x4e>
 8006552:	2302      	movs	r3, #2
 8006554:	e0ea      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800655e:	f7fd fbb1 	bl	8003cc4 <HAL_GetTick>
 8006562:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2319      	movs	r3, #25
 800656a:	2201      	movs	r2, #1
 800656c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f9af 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0d5      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2222      	movs	r2, #34	; 0x22
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065a8:	88f8      	ldrh	r0, [r7, #6]
 80065aa:	893a      	ldrh	r2, [r7, #8]
 80065ac:	8979      	ldrh	r1, [r7, #10]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4603      	mov	r3, r0
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f913 	bl	80067e4 <I2C_RequestMemoryRead>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0ad      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2bff      	cmp	r3, #255	; 0xff
 80065d8:	d90e      	bls.n	80065f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	22ff      	movs	r2, #255	; 0xff
 80065de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	8979      	ldrh	r1, [r7, #10]
 80065e8:	4b52      	ldr	r3, [pc, #328]	; (8006734 <HAL_I2C_Mem_Read+0x22c>)
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fb33 	bl	8006c5c <I2C_TransferConfig>
 80065f6:	e00f      	b.n	8006618 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	b2da      	uxtb	r2, r3
 8006608:	8979      	ldrh	r1, [r7, #10]
 800660a:	4b4a      	ldr	r3, [pc, #296]	; (8006734 <HAL_I2C_Mem_Read+0x22c>)
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fb22 	bl	8006c5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2200      	movs	r2, #0
 8006620:	2104      	movs	r1, #4
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 f956 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e07c      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d034      	beq.n	80066d8 <HAL_I2C_Mem_Read+0x1d0>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d130      	bne.n	80066d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	2200      	movs	r2, #0
 800667e:	2180      	movs	r1, #128	; 0x80
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f927 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e04d      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006694:	b29b      	uxth	r3, r3
 8006696:	2bff      	cmp	r3, #255	; 0xff
 8006698:	d90e      	bls.n	80066b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	22ff      	movs	r2, #255	; 0xff
 800669e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	8979      	ldrh	r1, [r7, #10]
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fad3 	bl	8006c5c <I2C_TransferConfig>
 80066b6:	e00f      	b.n	80066d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	8979      	ldrh	r1, [r7, #10]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fac2 	bl	8006c5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d19a      	bne.n	8006618 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f994 	bl	8006a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e01a      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2220      	movs	r2, #32
 80066fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6859      	ldr	r1, [r3, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_I2C_Mem_Read+0x230>)
 800670a:	400b      	ands	r3, r1
 800670c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	e000      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800672a:	2302      	movs	r3, #2
  }
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	80002400 	.word	0x80002400
 8006738:	fe00e800 	.word	0xfe00e800

0800673c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	817b      	strh	r3, [r7, #10]
 800674e:	460b      	mov	r3, r1
 8006750:	813b      	strh	r3, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	8979      	ldrh	r1, [r7, #10]
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <I2C_RequestMemoryWrite+0xa4>)
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fa79 	bl	8006c5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f909 	bl	8006986 <I2C_WaitOnTXISFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e02c      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d105      	bne.n	8006790 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006784:	893b      	ldrh	r3, [r7, #8]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	629a      	str	r2, [r3, #40]	; 0x28
 800678e:	e015      	b.n	80067bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006790:	893b      	ldrh	r3, [r7, #8]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	b29b      	uxth	r3, r3
 8006796:	b2da      	uxtb	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f8ef 	bl	8006986 <I2C_WaitOnTXISFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e012      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b2:	893b      	ldrh	r3, [r7, #8]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f884 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	80002000 	.word	0x80002000

080067e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	461a      	mov	r2, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	817b      	strh	r3, [r7, #10]
 80067f6:	460b      	mov	r3, r1
 80067f8:	813b      	strh	r3, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80067fe:	88fb      	ldrh	r3, [r7, #6]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	8979      	ldrh	r1, [r7, #10]
 8006804:	4b20      	ldr	r3, [pc, #128]	; (8006888 <I2C_RequestMemoryRead+0xa4>)
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fa26 	bl	8006c5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	69b9      	ldr	r1, [r7, #24]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f8b6 	bl	8006986 <I2C_WaitOnTXISFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e02c      	b.n	800687e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d105      	bne.n	8006836 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800682a:	893b      	ldrh	r3, [r7, #8]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28
 8006834:	e015      	b.n	8006862 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006836:	893b      	ldrh	r3, [r7, #8]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	b29b      	uxth	r3, r3
 800683c:	b2da      	uxtb	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	69b9      	ldr	r1, [r7, #24]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f89c 	bl	8006986 <I2C_WaitOnTXISFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e012      	b.n	800687e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2200      	movs	r2, #0
 800686a:	2140      	movs	r1, #64	; 0x40
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f831 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	80002000 	.word	0x80002000

0800688c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d103      	bne.n	80068aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2200      	movs	r2, #0
 80068a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d007      	beq.n	80068c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	619a      	str	r2, [r3, #24]
  }
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	4613      	mov	r3, r2
 80068e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e4:	e03b      	b.n	800695e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f8d6 	bl	8006a9c <I2C_IsErrorOccurred>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e041      	b.n	800697e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d02d      	beq.n	800695e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006902:	f7fd f9df 	bl	8003cc4 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d302      	bcc.n	8006918 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d122      	bne.n	800695e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4013      	ands	r3, r2
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	bf0c      	ite	eq
 8006928:	2301      	moveq	r3, #1
 800692a:	2300      	movne	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	429a      	cmp	r2, r3
 8006934:	d113      	bne.n	800695e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693a:	f043 0220 	orr.w	r2, r3, #32
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e00f      	b.n	800697e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	429a      	cmp	r2, r3
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	429a      	cmp	r2, r3
 800697a:	d0b4      	beq.n	80068e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006992:	e033      	b.n	80069fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f87f 	bl	8006a9c <I2C_IsErrorOccurred>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e031      	b.n	8006a0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d025      	beq.n	80069fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b0:	f7fd f988 	bl	8003cc4 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d302      	bcc.n	80069c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d11a      	bne.n	80069fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d013      	beq.n	80069fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d8:	f043 0220 	orr.w	r2, r3, #32
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e007      	b.n	8006a0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d1c4      	bne.n	8006994 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a20:	e02f      	b.n	8006a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f838 	bl	8006a9c <I2C_IsErrorOccurred>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e02d      	b.n	8006a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a36:	f7fd f945 	bl	8003cc4 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d302      	bcc.n	8006a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d11a      	bne.n	8006a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d013      	beq.n	8006a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	f043 0220 	orr.w	r2, r3, #32
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e007      	b.n	8006a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d1c8      	bne.n	8006a22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	; 0x28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d068      	beq.n	8006b9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2210      	movs	r2, #16
 8006ace:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ad0:	e049      	b.n	8006b66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d045      	beq.n	8006b66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fd f8f3 	bl	8003cc4 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <I2C_IsErrorOccurred+0x54>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d13a      	bne.n	8006b66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006afa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b12:	d121      	bne.n	8006b58 <I2C_IsErrorOccurred+0xbc>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b1a:	d01d      	beq.n	8006b58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b1c:	7cfb      	ldrb	r3, [r7, #19]
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d01a      	beq.n	8006b58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b32:	f7fd f8c7 	bl	8003cc4 <HAL_GetTick>
 8006b36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b38:	e00e      	b.n	8006b58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b3a:	f7fd f8c3 	bl	8003cc4 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b19      	cmp	r3, #25
 8006b46:	d907      	bls.n	8006b58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	f043 0320 	orr.w	r3, r3, #32
 8006b4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006b56:	e006      	b.n	8006b66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d1e9      	bne.n	8006b3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d003      	beq.n	8006b7c <I2C_IsErrorOccurred+0xe0>
 8006b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0aa      	beq.n	8006ad2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	f043 0308 	orr.w	r3, r3, #8
 8006bd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	f043 0302 	orr.w	r3, r3, #2
 8006bf6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01c      	beq.n	8006c4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff fe3b 	bl	800688c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6859      	ldr	r1, [r3, #4]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <I2C_IsErrorOccurred+0x1bc>)
 8006c22:	400b      	ands	r3, r1
 8006c24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3728      	adds	r7, #40	; 0x28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	fe00e800 	.word	0xfe00e800

08006c5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	817b      	strh	r3, [r7, #10]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c6e:	897b      	ldrh	r3, [r7, #10]
 8006c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c74:	7a7b      	ldrb	r3, [r7, #9]
 8006c76:	041b      	lsls	r3, r3, #16
 8006c78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	0d5b      	lsrs	r3, r3, #21
 8006c96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c9a:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <I2C_TransferConfig+0x60>)
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	ea02 0103 	and.w	r1, r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	03ff63ff 	.word	0x03ff63ff

08006cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d138      	bne.n	8006d48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e032      	b.n	8006d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2224      	movs	r2, #36	; 0x24
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6819      	ldr	r1, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	e000      	b.n	8006d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d48:	2302      	movs	r3, #2
  }
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d139      	bne.n	8006de0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e033      	b.n	8006de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2224      	movs	r2, #36	; 0x24
 8006d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0201 	bic.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006da8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e000      	b.n	8006de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006de0:	2302      	movs	r3, #2
  }
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
	...

08006df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d141      	bne.n	8006e82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dfe:	4b4b      	ldr	r3, [pc, #300]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0a:	d131      	bne.n	8006e70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e0c:	4b47      	ldr	r3, [pc, #284]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e12:	4a46      	ldr	r2, [pc, #280]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e1c:	4b43      	ldr	r3, [pc, #268]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e24:	4a41      	ldr	r2, [pc, #260]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e2c:	4b40      	ldr	r3, [pc, #256]	; (8006f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2232      	movs	r2, #50	; 0x32
 8006e32:	fb02 f303 	mul.w	r3, r2, r3
 8006e36:	4a3f      	ldr	r2, [pc, #252]	; (8006f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e38:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3c:	0c9b      	lsrs	r3, r3, #18
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e42:	e002      	b.n	8006e4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e4a:	4b38      	ldr	r3, [pc, #224]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e56:	d102      	bne.n	8006e5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f2      	bne.n	8006e44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e5e:	4b33      	ldr	r3, [pc, #204]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d158      	bne.n	8006f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e057      	b.n	8006f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e70:	4b2e      	ldr	r3, [pc, #184]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e76:	4a2d      	ldr	r2, [pc, #180]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006e80:	e04d      	b.n	8006f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e88:	d141      	bne.n	8006f0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e8a:	4b28      	ldr	r3, [pc, #160]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e96:	d131      	bne.n	8006efc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e98:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9e:	4a23      	ldr	r2, [pc, #140]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ea8:	4b20      	ldr	r3, [pc, #128]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006eb0:	4a1e      	ldr	r2, [pc, #120]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006eb8:	4b1d      	ldr	r3, [pc, #116]	; (8006f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2232      	movs	r2, #50	; 0x32
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec8:	0c9b      	lsrs	r3, r3, #18
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ece:	e002      	b.n	8006ed6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ed6:	4b15      	ldr	r3, [pc, #84]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee2:	d102      	bne.n	8006eea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f2      	bne.n	8006ed0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eea:	4b10      	ldr	r3, [pc, #64]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef6:	d112      	bne.n	8006f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e011      	b.n	8006f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f02:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f0c:	e007      	b.n	8006f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f16:	4a05      	ldr	r2, [pc, #20]	; (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	40007000 	.word	0x40007000
 8006f30:	20000000 	.word	0x20000000
 8006f34:	431bde83 	.word	0x431bde83

08006f38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	4a04      	ldr	r2, [pc, #16]	; (8006f54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f46:	6093      	str	r3, [r2, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40007000 	.word	0x40007000

08006f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e2fe      	b.n	8007568 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d075      	beq.n	8007062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f76:	4b97      	ldr	r3, [pc, #604]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f80:	4b94      	ldr	r3, [pc, #592]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f003 0303 	and.w	r3, r3, #3
 8006f88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b0c      	cmp	r3, #12
 8006f8e:	d102      	bne.n	8006f96 <HAL_RCC_OscConfig+0x3e>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d002      	beq.n	8006f9c <HAL_RCC_OscConfig+0x44>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d10b      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f9c:	4b8d      	ldr	r3, [pc, #564]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d05b      	beq.n	8007060 <HAL_RCC_OscConfig+0x108>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d157      	bne.n	8007060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e2d9      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbc:	d106      	bne.n	8006fcc <HAL_RCC_OscConfig+0x74>
 8006fbe:	4b85      	ldr	r3, [pc, #532]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a84      	ldr	r2, [pc, #528]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e01d      	b.n	8007008 <HAL_RCC_OscConfig+0xb0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x98>
 8006fd6:	4b7f      	ldr	r3, [pc, #508]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a7e      	ldr	r2, [pc, #504]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4b7c      	ldr	r3, [pc, #496]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a7b      	ldr	r2, [pc, #492]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e00b      	b.n	8007008 <HAL_RCC_OscConfig+0xb0>
 8006ff0:	4b78      	ldr	r3, [pc, #480]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a77      	ldr	r2, [pc, #476]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4b75      	ldr	r3, [pc, #468]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a74      	ldr	r2, [pc, #464]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d013      	beq.n	8007038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fc fe58 	bl	8003cc4 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007018:	f7fc fe54 	bl	8003cc4 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	; 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e29e      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800702a:	4b6a      	ldr	r3, [pc, #424]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f0      	beq.n	8007018 <HAL_RCC_OscConfig+0xc0>
 8007036:	e014      	b.n	8007062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fc fe44 	bl	8003cc4 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007040:	f7fc fe40 	bl	8003cc4 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b64      	cmp	r3, #100	; 0x64
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e28a      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007052:	4b60      	ldr	r3, [pc, #384]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0xe8>
 800705e:	e000      	b.n	8007062 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d075      	beq.n	800715a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800706e:	4b59      	ldr	r3, [pc, #356]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 030c 	and.w	r3, r3, #12
 8007076:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007078:	4b56      	ldr	r3, [pc, #344]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b0c      	cmp	r3, #12
 8007086:	d102      	bne.n	800708e <HAL_RCC_OscConfig+0x136>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d002      	beq.n	8007094 <HAL_RCC_OscConfig+0x13c>
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d11f      	bne.n	80070d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007094:	4b4f      	ldr	r3, [pc, #316]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <HAL_RCC_OscConfig+0x154>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e25d      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ac:	4b49      	ldr	r3, [pc, #292]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	061b      	lsls	r3, r3, #24
 80070ba:	4946      	ldr	r1, [pc, #280]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070c0:	4b45      	ldr	r3, [pc, #276]	; (80071d8 <HAL_RCC_OscConfig+0x280>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fc fb57 	bl	8003778 <HAL_InitTick>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d043      	beq.n	8007158 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e249      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d023      	beq.n	8007124 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070dc:	4b3d      	ldr	r3, [pc, #244]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a3c      	ldr	r2, [pc, #240]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 80070e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fc fdec 	bl	8003cc4 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f0:	f7fc fde8 	bl	8003cc4 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e232      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007102:	4b34      	ldr	r3, [pc, #208]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0f0      	beq.n	80070f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800710e:	4b31      	ldr	r3, [pc, #196]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	492d      	ldr	r1, [pc, #180]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 800711e:	4313      	orrs	r3, r2
 8007120:	604b      	str	r3, [r1, #4]
 8007122:	e01a      	b.n	800715a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007124:	4b2b      	ldr	r3, [pc, #172]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 800712a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800712e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fc fdc8 	bl	8003cc4 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007138:	f7fc fdc4 	bl	8003cc4 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e20e      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800714a:	4b22      	ldr	r3, [pc, #136]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x1e0>
 8007156:	e000      	b.n	800715a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007158:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d041      	beq.n	80071ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01c      	beq.n	80071a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800716e:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007174:	4a17      	ldr	r2, [pc, #92]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 8007176:	f043 0301 	orr.w	r3, r3, #1
 800717a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800717e:	f7fc fda1 	bl	8003cc4 <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007184:	e008      	b.n	8007198 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007186:	f7fc fd9d 	bl	8003cc4 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d901      	bls.n	8007198 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e1e7      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007198:	4b0e      	ldr	r3, [pc, #56]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 800719a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0ef      	beq.n	8007186 <HAL_RCC_OscConfig+0x22e>
 80071a6:	e020      	b.n	80071ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 80071aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 80071b0:	f023 0301 	bic.w	r3, r3, #1
 80071b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b8:	f7fc fd84 	bl	8003cc4 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071be:	e00d      	b.n	80071dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c0:	f7fc fd80 	bl	8003cc4 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d906      	bls.n	80071dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e1ca      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
 80071d2:	bf00      	nop
 80071d4:	40021000 	.word	0x40021000
 80071d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071dc:	4b8c      	ldr	r3, [pc, #560]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80071de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1ea      	bne.n	80071c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 80a6 	beq.w	8007344 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071f8:	2300      	movs	r3, #0
 80071fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071fc:	4b84      	ldr	r3, [pc, #528]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80071fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <HAL_RCC_OscConfig+0x2b4>
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <HAL_RCC_OscConfig+0x2b6>
 800720c:	2300      	movs	r3, #0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00d      	beq.n	800722e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007212:	4b7f      	ldr	r3, [pc, #508]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	4a7e      	ldr	r2, [pc, #504]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800721c:	6593      	str	r3, [r2, #88]	; 0x58
 800721e:	4b7c      	ldr	r3, [pc, #496]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800722a:	2301      	movs	r3, #1
 800722c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800722e:	4b79      	ldr	r3, [pc, #484]	; (8007414 <HAL_RCC_OscConfig+0x4bc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007236:	2b00      	cmp	r3, #0
 8007238:	d118      	bne.n	800726c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800723a:	4b76      	ldr	r3, [pc, #472]	; (8007414 <HAL_RCC_OscConfig+0x4bc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a75      	ldr	r2, [pc, #468]	; (8007414 <HAL_RCC_OscConfig+0x4bc>)
 8007240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007246:	f7fc fd3d 	bl	8003cc4 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800724e:	f7fc fd39 	bl	8003cc4 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e183      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007260:	4b6c      	ldr	r3, [pc, #432]	; (8007414 <HAL_RCC_OscConfig+0x4bc>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0f0      	beq.n	800724e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d108      	bne.n	8007286 <HAL_RCC_OscConfig+0x32e>
 8007274:	4b66      	ldr	r3, [pc, #408]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	4a65      	ldr	r2, [pc, #404]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007284:	e024      	b.n	80072d0 <HAL_RCC_OscConfig+0x378>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b05      	cmp	r3, #5
 800728c:	d110      	bne.n	80072b0 <HAL_RCC_OscConfig+0x358>
 800728e:	4b60      	ldr	r3, [pc, #384]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	4a5e      	ldr	r2, [pc, #376]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007296:	f043 0304 	orr.w	r3, r3, #4
 800729a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800729e:	4b5c      	ldr	r3, [pc, #368]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80072a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a4:	4a5a      	ldr	r2, [pc, #360]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80072a6:	f043 0301 	orr.w	r3, r3, #1
 80072aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072ae:	e00f      	b.n	80072d0 <HAL_RCC_OscConfig+0x378>
 80072b0:	4b57      	ldr	r3, [pc, #348]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b6:	4a56      	ldr	r2, [pc, #344]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072c0:	4b53      	ldr	r3, [pc, #332]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c6:	4a52      	ldr	r2, [pc, #328]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80072c8:	f023 0304 	bic.w	r3, r3, #4
 80072cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d016      	beq.n	8007306 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d8:	f7fc fcf4 	bl	8003cc4 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072de:	e00a      	b.n	80072f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e0:	f7fc fcf0 	bl	8003cc4 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e138      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f6:	4b46      	ldr	r3, [pc, #280]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0ed      	beq.n	80072e0 <HAL_RCC_OscConfig+0x388>
 8007304:	e015      	b.n	8007332 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007306:	f7fc fcdd 	bl	8003cc4 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800730c:	e00a      	b.n	8007324 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730e:	f7fc fcd9 	bl	8003cc4 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	f241 3288 	movw	r2, #5000	; 0x1388
 800731c:	4293      	cmp	r3, r2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e121      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007324:	4b3a      	ldr	r3, [pc, #232]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1ed      	bne.n	800730e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007332:	7ffb      	ldrb	r3, [r7, #31]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d105      	bne.n	8007344 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007338:	4b35      	ldr	r3, [pc, #212]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 800733a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733c:	4a34      	ldr	r2, [pc, #208]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 800733e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007342:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d03c      	beq.n	80073ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01c      	beq.n	8007392 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007358:	4b2d      	ldr	r3, [pc, #180]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 800735a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800735e:	4a2c      	ldr	r2, [pc, #176]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007368:	f7fc fcac 	bl	8003cc4 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007370:	f7fc fca8 	bl	8003cc4 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e0f2      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007382:	4b23      	ldr	r3, [pc, #140]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0ef      	beq.n	8007370 <HAL_RCC_OscConfig+0x418>
 8007390:	e01b      	b.n	80073ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007392:	4b1f      	ldr	r3, [pc, #124]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 8007394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007398:	4a1d      	ldr	r2, [pc, #116]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 800739a:	f023 0301 	bic.w	r3, r3, #1
 800739e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a2:	f7fc fc8f 	bl	8003cc4 <HAL_GetTick>
 80073a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073aa:	f7fc fc8b 	bl	8003cc4 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e0d5      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073bc:	4b14      	ldr	r3, [pc, #80]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80073be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1ef      	bne.n	80073aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80c9 	beq.w	8007566 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073d4:	4b0e      	ldr	r3, [pc, #56]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 030c 	and.w	r3, r3, #12
 80073dc:	2b0c      	cmp	r3, #12
 80073de:	f000 8083 	beq.w	80074e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d15e      	bne.n	80074a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a08      	ldr	r2, [pc, #32]	; (8007410 <HAL_RCC_OscConfig+0x4b8>)
 80073f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f6:	f7fc fc65 	bl	8003cc4 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073fc:	e00c      	b.n	8007418 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073fe:	f7fc fc61 	bl	8003cc4 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d905      	bls.n	8007418 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e0ab      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
 8007410:	40021000 	.word	0x40021000
 8007414:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007418:	4b55      	ldr	r3, [pc, #340]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1ec      	bne.n	80073fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007424:	4b52      	ldr	r3, [pc, #328]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	4b52      	ldr	r3, [pc, #328]	; (8007574 <HAL_RCC_OscConfig+0x61c>)
 800742a:	4013      	ands	r3, r2
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6a11      	ldr	r1, [r2, #32]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007434:	3a01      	subs	r2, #1
 8007436:	0112      	lsls	r2, r2, #4
 8007438:	4311      	orrs	r1, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800743e:	0212      	lsls	r2, r2, #8
 8007440:	4311      	orrs	r1, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007446:	0852      	lsrs	r2, r2, #1
 8007448:	3a01      	subs	r2, #1
 800744a:	0552      	lsls	r2, r2, #21
 800744c:	4311      	orrs	r1, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007452:	0852      	lsrs	r2, r2, #1
 8007454:	3a01      	subs	r2, #1
 8007456:	0652      	lsls	r2, r2, #25
 8007458:	4311      	orrs	r1, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800745e:	06d2      	lsls	r2, r2, #27
 8007460:	430a      	orrs	r2, r1
 8007462:	4943      	ldr	r1, [pc, #268]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 8007464:	4313      	orrs	r3, r2
 8007466:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007468:	4b41      	ldr	r3, [pc, #260]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a40      	ldr	r2, [pc, #256]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 800746e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007472:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007474:	4b3e      	ldr	r3, [pc, #248]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	4a3d      	ldr	r2, [pc, #244]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 800747a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800747e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fc fc20 	bl	8003cc4 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007488:	f7fc fc1c 	bl	8003cc4 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e066      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800749a:	4b35      	ldr	r3, [pc, #212]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0f0      	beq.n	8007488 <HAL_RCC_OscConfig+0x530>
 80074a6:	e05e      	b.n	8007566 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a8:	4b31      	ldr	r3, [pc, #196]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a30      	ldr	r2, [pc, #192]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 80074ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b4:	f7fc fc06 	bl	8003cc4 <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074bc:	f7fc fc02 	bl	8003cc4 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e04c      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074ce:	4b28      	ldr	r3, [pc, #160]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f0      	bne.n	80074bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074da:	4b25      	ldr	r3, [pc, #148]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	4924      	ldr	r1, [pc, #144]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 80074e0:	4b25      	ldr	r3, [pc, #148]	; (8007578 <HAL_RCC_OscConfig+0x620>)
 80074e2:	4013      	ands	r3, r2
 80074e4:	60cb      	str	r3, [r1, #12]
 80074e6:	e03e      	b.n	8007566 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e039      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80074f4:	4b1e      	ldr	r3, [pc, #120]	; (8007570 <HAL_RCC_OscConfig+0x618>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f003 0203 	and.w	r2, r3, #3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	429a      	cmp	r2, r3
 8007506:	d12c      	bne.n	8007562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	3b01      	subs	r3, #1
 8007514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007516:	429a      	cmp	r2, r3
 8007518:	d123      	bne.n	8007562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007526:	429a      	cmp	r2, r3
 8007528:	d11b      	bne.n	8007562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007536:	429a      	cmp	r2, r3
 8007538:	d113      	bne.n	8007562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	3b01      	subs	r3, #1
 8007548:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800754a:	429a      	cmp	r2, r3
 800754c:	d109      	bne.n	8007562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007558:	085b      	lsrs	r3, r3, #1
 800755a:	3b01      	subs	r3, #1
 800755c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800755e:	429a      	cmp	r2, r3
 8007560:	d001      	beq.n	8007566 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3720      	adds	r7, #32
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40021000 	.word	0x40021000
 8007574:	019f800c 	.word	0x019f800c
 8007578:	feeefffc 	.word	0xfeeefffc

0800757c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e11e      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007594:	4b91      	ldr	r3, [pc, #580]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d910      	bls.n	80075c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a2:	4b8e      	ldr	r3, [pc, #568]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 020f 	bic.w	r2, r3, #15
 80075aa:	498c      	ldr	r1, [pc, #560]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b2:	4b8a      	ldr	r3, [pc, #552]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d001      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e106      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d073      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d129      	bne.n	800762c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075d8:	4b81      	ldr	r3, [pc, #516]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0f4      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80075e8:	f000 f9d0 	bl	800798c <RCC_GetSysClockFreqFromPLLSource>
 80075ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4a7c      	ldr	r2, [pc, #496]	; (80077e4 <HAL_RCC_ClockConfig+0x268>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d93f      	bls.n	8007676 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075f6:	4b7a      	ldr	r3, [pc, #488]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800760a:	2b00      	cmp	r3, #0
 800760c:	d033      	beq.n	8007676 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007612:	2b00      	cmp	r3, #0
 8007614:	d12f      	bne.n	8007676 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007616:	4b72      	ldr	r3, [pc, #456]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800761e:	4a70      	ldr	r2, [pc, #448]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007626:	2380      	movs	r3, #128	; 0x80
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	e024      	b.n	8007676 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d107      	bne.n	8007644 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007634:	4b6a      	ldr	r3, [pc, #424]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e0c6      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007644:	4b66      	ldr	r3, [pc, #408]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0be      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007654:	f000 f8ce 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8007658:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4a61      	ldr	r2, [pc, #388]	; (80077e4 <HAL_RCC_ClockConfig+0x268>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d909      	bls.n	8007676 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007662:	4b5f      	ldr	r3, [pc, #380]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800766a:	4a5d      	ldr	r2, [pc, #372]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 800766c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007670:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007672:	2380      	movs	r3, #128	; 0x80
 8007674:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007676:	4b5a      	ldr	r3, [pc, #360]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f023 0203 	bic.w	r2, r3, #3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4957      	ldr	r1, [pc, #348]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007684:	4313      	orrs	r3, r2
 8007686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007688:	f7fc fb1c 	bl	8003cc4 <HAL_GetTick>
 800768c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768e:	e00a      	b.n	80076a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007690:	f7fc fb18 	bl	8003cc4 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	f241 3288 	movw	r2, #5000	; 0x1388
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e095      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a6:	4b4e      	ldr	r3, [pc, #312]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 020c 	and.w	r2, r3, #12
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d1eb      	bne.n	8007690 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d023      	beq.n	800770c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076d0:	4b43      	ldr	r3, [pc, #268]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4a42      	ldr	r2, [pc, #264]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80076da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80076e8:	4b3d      	ldr	r3, [pc, #244]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076f0:	4a3b      	ldr	r2, [pc, #236]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80076f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076f8:	4b39      	ldr	r3, [pc, #228]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4936      	ldr	r1, [pc, #216]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007706:	4313      	orrs	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
 800770a:	e008      	b.n	800771e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d105      	bne.n	800771e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007712:	4b33      	ldr	r3, [pc, #204]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4a32      	ldr	r2, [pc, #200]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800771c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800771e:	4b2f      	ldr	r3, [pc, #188]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d21d      	bcs.n	8007768 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800772c:	4b2b      	ldr	r3, [pc, #172]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f023 020f 	bic.w	r2, r3, #15
 8007734:	4929      	ldr	r1, [pc, #164]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	4313      	orrs	r3, r2
 800773a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800773c:	f7fc fac2 	bl	8003cc4 <HAL_GetTick>
 8007740:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007742:	e00a      	b.n	800775a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007744:	f7fc fabe 	bl	8003cc4 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e03b      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800775a:	4b20      	ldr	r3, [pc, #128]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d1ed      	bne.n	8007744 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4917      	ldr	r1, [pc, #92]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007792:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	490f      	ldr	r1, [pc, #60]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077a6:	f000 f825 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 80077aa:	4602      	mov	r2, r0
 80077ac:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	490c      	ldr	r1, [pc, #48]	; (80077e8 <HAL_RCC_ClockConfig+0x26c>)
 80077b8:	5ccb      	ldrb	r3, [r1, r3]
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <HAL_RCC_ClockConfig+0x270>)
 80077c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077c6:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <HAL_RCC_ClockConfig+0x274>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fb ffd4 	bl	8003778 <HAL_InitTick>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	40022000 	.word	0x40022000
 80077e0:	40021000 	.word	0x40021000
 80077e4:	04c4b400 	.word	0x04c4b400
 80077e8:	0800d108 	.word	0x0800d108
 80077ec:	20000000 	.word	0x20000000
 80077f0:	20000004 	.word	0x20000004

080077f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80077fa:	4b2c      	ldr	r3, [pc, #176]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	2b04      	cmp	r3, #4
 8007804:	d102      	bne.n	800780c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007806:	4b2a      	ldr	r3, [pc, #168]	; (80078b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	e047      	b.n	800789c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800780c:	4b27      	ldr	r3, [pc, #156]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 030c 	and.w	r3, r3, #12
 8007814:	2b08      	cmp	r3, #8
 8007816:	d102      	bne.n	800781e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007818:	4b26      	ldr	r3, [pc, #152]	; (80078b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	e03e      	b.n	800789c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800781e:	4b23      	ldr	r3, [pc, #140]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 030c 	and.w	r3, r3, #12
 8007826:	2b0c      	cmp	r3, #12
 8007828:	d136      	bne.n	8007898 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800782a:	4b20      	ldr	r3, [pc, #128]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007834:	4b1d      	ldr	r3, [pc, #116]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	3301      	adds	r3, #1
 8007840:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d10c      	bne.n	8007862 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007848:	4a1a      	ldr	r2, [pc, #104]	; (80078b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007850:	4a16      	ldr	r2, [pc, #88]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007852:	68d2      	ldr	r2, [r2, #12]
 8007854:	0a12      	lsrs	r2, r2, #8
 8007856:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	617b      	str	r3, [r7, #20]
      break;
 8007860:	e00c      	b.n	800787c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007862:	4a13      	ldr	r2, [pc, #76]	; (80078b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	4a10      	ldr	r2, [pc, #64]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800786c:	68d2      	ldr	r2, [r2, #12]
 800786e:	0a12      	lsrs	r2, r2, #8
 8007870:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007874:	fb02 f303 	mul.w	r3, r2, r3
 8007878:	617b      	str	r3, [r7, #20]
      break;
 800787a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800787c:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	0e5b      	lsrs	r3, r3, #25
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	3301      	adds	r3, #1
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	fbb2 f3f3 	udiv	r3, r2, r3
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	e001      	b.n	800789c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800789c:	693b      	ldr	r3, [r7, #16]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40021000 	.word	0x40021000
 80078b0:	00f42400 	.word	0x00f42400
 80078b4:	016e3600 	.word	0x016e3600

080078b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078bc:	4b03      	ldr	r3, [pc, #12]	; (80078cc <HAL_RCC_GetHCLKFreq+0x14>)
 80078be:	681b      	ldr	r3, [r3, #0]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20000000 	.word	0x20000000

080078d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078d4:	f7ff fff0 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 80078d8:	4602      	mov	r2, r0
 80078da:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 0307 	and.w	r3, r3, #7
 80078e4:	4904      	ldr	r1, [pc, #16]	; (80078f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078e6:	5ccb      	ldrb	r3, [r1, r3]
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	40021000 	.word	0x40021000
 80078f8:	0800d118 	.word	0x0800d118

080078fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007900:	f7ff ffda 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8007904:	4602      	mov	r2, r0
 8007906:	4b06      	ldr	r3, [pc, #24]	; (8007920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	0adb      	lsrs	r3, r3, #11
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	4904      	ldr	r1, [pc, #16]	; (8007924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007912:	5ccb      	ldrb	r3, [r1, r3]
 8007914:	f003 031f 	and.w	r3, r3, #31
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40021000 	.word	0x40021000
 8007924:	0800d118 	.word	0x0800d118

08007928 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	220f      	movs	r2, #15
 8007936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <HAL_RCC_GetClockConfig+0x5c>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 0203 	and.w	r2, r3, #3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <HAL_RCC_GetClockConfig+0x5c>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <HAL_RCC_GetClockConfig+0x5c>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <HAL_RCC_GetClockConfig+0x5c>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	08db      	lsrs	r3, r3, #3
 8007962:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800796a:	4b07      	ldr	r3, [pc, #28]	; (8007988 <HAL_RCC_GetClockConfig+0x60>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 020f 	and.w	r2, r3, #15
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	601a      	str	r2, [r3, #0]
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40021000 	.word	0x40021000
 8007988:	40022000 	.word	0x40022000

0800798c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007992:	4b1e      	ldr	r3, [pc, #120]	; (8007a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800799c:	4b1b      	ldr	r3, [pc, #108]	; (8007a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	091b      	lsrs	r3, r3, #4
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	3301      	adds	r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d10c      	bne.n	80079ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079b0:	4a17      	ldr	r2, [pc, #92]	; (8007a10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b8:	4a14      	ldr	r2, [pc, #80]	; (8007a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ba:	68d2      	ldr	r2, [r2, #12]
 80079bc:	0a12      	lsrs	r2, r2, #8
 80079be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079c2:	fb02 f303 	mul.w	r3, r2, r3
 80079c6:	617b      	str	r3, [r7, #20]
    break;
 80079c8:	e00c      	b.n	80079e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079ca:	4a12      	ldr	r2, [pc, #72]	; (8007a14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d2:	4a0e      	ldr	r2, [pc, #56]	; (8007a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079d4:	68d2      	ldr	r2, [r2, #12]
 80079d6:	0a12      	lsrs	r2, r2, #8
 80079d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079dc:	fb02 f303 	mul.w	r3, r2, r3
 80079e0:	617b      	str	r3, [r7, #20]
    break;
 80079e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079e4:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	0e5b      	lsrs	r3, r3, #25
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	3301      	adds	r3, #1
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80079fe:	687b      	ldr	r3, [r7, #4]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	016e3600 	.word	0x016e3600
 8007a14:	00f42400 	.word	0x00f42400

08007a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a20:	2300      	movs	r3, #0
 8007a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a24:	2300      	movs	r3, #0
 8007a26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 8098 	beq.w	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a36:	2300      	movs	r3, #0
 8007a38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a3a:	4b43      	ldr	r3, [pc, #268]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10d      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a46:	4b40      	ldr	r3, [pc, #256]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4a:	4a3f      	ldr	r2, [pc, #252]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a50:	6593      	str	r3, [r2, #88]	; 0x58
 8007a52:	4b3d      	ldr	r3, [pc, #244]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5a:	60bb      	str	r3, [r7, #8]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a62:	4b3a      	ldr	r3, [pc, #232]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a39      	ldr	r2, [pc, #228]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a6e:	f7fc f929 	bl	8003cc4 <HAL_GetTick>
 8007a72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a74:	e009      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a76:	f7fc f925 	bl	8003cc4 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d902      	bls.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	74fb      	strb	r3, [r7, #19]
        break;
 8007a88:	e005      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a8a:	4b30      	ldr	r3, [pc, #192]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0ef      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a96:	7cfb      	ldrb	r3, [r7, #19]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d159      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a9c:	4b2a      	ldr	r3, [pc, #168]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d01e      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d019      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ab8:	4b23      	ldr	r3, [pc, #140]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ac4:	4b20      	ldr	r3, [pc, #128]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aca:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ad4:	4b1c      	ldr	r3, [pc, #112]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ada:	4a1b      	ldr	r2, [pc, #108]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ae4:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d016      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af6:	f7fc f8e5 	bl	8003cc4 <HAL_GetTick>
 8007afa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007afc:	e00b      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007afe:	f7fc f8e1 	bl	8003cc4 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d902      	bls.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	74fb      	strb	r3, [r7, #19]
            break;
 8007b14:	e006      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b16:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0ec      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b2a:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b38:	4903      	ldr	r1, [pc, #12]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b40:	e008      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b42:	7cfb      	ldrb	r3, [r7, #19]
 8007b44:	74bb      	strb	r3, [r7, #18]
 8007b46:	e005      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b48:	40021000 	.word	0x40021000
 8007b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b50:	7cfb      	ldrb	r3, [r7, #19]
 8007b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b54:	7c7b      	ldrb	r3, [r7, #17]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b5a:	4ba7      	ldr	r3, [pc, #668]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5e:	4aa6      	ldr	r2, [pc, #664]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b72:	4ba1      	ldr	r3, [pc, #644]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b78:	f023 0203 	bic.w	r2, r3, #3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	499d      	ldr	r1, [pc, #628]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b94:	4b98      	ldr	r3, [pc, #608]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9a:	f023 020c 	bic.w	r2, r3, #12
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	4995      	ldr	r1, [pc, #596]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bb6:	4b90      	ldr	r3, [pc, #576]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	498c      	ldr	r1, [pc, #560]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bd8:	4b87      	ldr	r3, [pc, #540]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	4984      	ldr	r1, [pc, #528]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bfa:	4b7f      	ldr	r3, [pc, #508]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	497b      	ldr	r1, [pc, #492]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c1c:	4b76      	ldr	r3, [pc, #472]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	4973      	ldr	r1, [pc, #460]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c3e:	4b6e      	ldr	r3, [pc, #440]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	496a      	ldr	r1, [pc, #424]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c60:	4b65      	ldr	r3, [pc, #404]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	4962      	ldr	r1, [pc, #392]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c82:	4b5d      	ldr	r3, [pc, #372]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	4959      	ldr	r1, [pc, #356]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ca4:	4b54      	ldr	r3, [pc, #336]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	4951      	ldr	r1, [pc, #324]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d015      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cc6:	4b4c      	ldr	r3, [pc, #304]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	4948      	ldr	r1, [pc, #288]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ce4:	d105      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ce6:	4b44      	ldr	r3, [pc, #272]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	4a43      	ldr	r2, [pc, #268]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cf0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d015      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cfe:	4b3e      	ldr	r3, [pc, #248]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	493a      	ldr	r1, [pc, #232]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d1c:	d105      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d1e:	4b36      	ldr	r3, [pc, #216]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	4a35      	ldr	r2, [pc, #212]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d28:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d015      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d36:	4b30      	ldr	r3, [pc, #192]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	492c      	ldr	r1, [pc, #176]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d54:	d105      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d56:	4b28      	ldr	r3, [pc, #160]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	4a27      	ldr	r2, [pc, #156]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d60:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d015      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d6e:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	491e      	ldr	r1, [pc, #120]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d8c:	d105      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d98:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d015      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db4:	4910      	ldr	r1, [pc, #64]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dc4:	d105      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	4a0b      	ldr	r2, [pc, #44]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dd0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d018      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	4902      	ldr	r1, [pc, #8]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	e001      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e02:	d105      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e04:	4b21      	ldr	r3, [pc, #132]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	4a20      	ldr	r2, [pc, #128]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d015      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e1c:	4b1b      	ldr	r3, [pc, #108]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2a:	4918      	ldr	r1, [pc, #96]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3a:	d105      	bne.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e3c:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	4a12      	ldr	r2, [pc, #72]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d015      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e54:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e62:	490a      	ldr	r1, [pc, #40]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e72:	d105      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	4a04      	ldr	r2, [pc, #16]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e80:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	40021000 	.word	0x40021000

08007e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e049      	b.n	8007f36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fb fd44 	bl	8003944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f000 fa1e 	bl	8008310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d001      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e04f      	b.n	8007ff8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0201 	orr.w	r2, r2, #1
 8007f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a23      	ldr	r2, [pc, #140]	; (8008004 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d01d      	beq.n	8007fb6 <HAL_TIM_Base_Start_IT+0x76>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f82:	d018      	beq.n	8007fb6 <HAL_TIM_Base_Start_IT+0x76>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a1f      	ldr	r2, [pc, #124]	; (8008008 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d013      	beq.n	8007fb6 <HAL_TIM_Base_Start_IT+0x76>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a1e      	ldr	r2, [pc, #120]	; (800800c <HAL_TIM_Base_Start_IT+0xcc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00e      	beq.n	8007fb6 <HAL_TIM_Base_Start_IT+0x76>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a1c      	ldr	r2, [pc, #112]	; (8008010 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d009      	beq.n	8007fb6 <HAL_TIM_Base_Start_IT+0x76>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a1b      	ldr	r2, [pc, #108]	; (8008014 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d004      	beq.n	8007fb6 <HAL_TIM_Base_Start_IT+0x76>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a19      	ldr	r2, [pc, #100]	; (8008018 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d115      	bne.n	8007fe2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	4b17      	ldr	r3, [pc, #92]	; (800801c <HAL_TIM_Base_Start_IT+0xdc>)
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b06      	cmp	r3, #6
 8007fc6:	d015      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0xb4>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fce:	d011      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0201 	orr.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe0:	e008      	b.n	8007ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	e000      	b.n	8007ff6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40000400 	.word	0x40000400
 800800c:	40000800 	.word	0x40000800
 8008010:	40013400 	.word	0x40013400
 8008014:	40014000 	.word	0x40014000
 8008018:	40015000 	.word	0x40015000
 800801c:	00010007 	.word	0x00010007

08008020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d020      	beq.n	8008084 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01b      	beq.n	8008084 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0202 	mvn.w	r2, #2
 8008054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f931 	bl	80082d2 <HAL_TIM_IC_CaptureCallback>
 8008070:	e005      	b.n	800807e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f923 	bl	80082be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f934 	bl	80082e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d020      	beq.n	80080d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01b      	beq.n	80080d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f06f 0204 	mvn.w	r2, #4
 80080a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2202      	movs	r2, #2
 80080a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f90b 	bl	80082d2 <HAL_TIM_IC_CaptureCallback>
 80080bc:	e005      	b.n	80080ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8fd 	bl	80082be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f90e 	bl	80082e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f003 0308 	and.w	r3, r3, #8
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d020      	beq.n	800811c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01b      	beq.n	800811c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0208 	mvn.w	r2, #8
 80080ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2204      	movs	r2, #4
 80080f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f8e5 	bl	80082d2 <HAL_TIM_IC_CaptureCallback>
 8008108:	e005      	b.n	8008116 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f8d7 	bl	80082be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f8e8 	bl	80082e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f003 0310 	and.w	r3, r3, #16
 8008122:	2b00      	cmp	r3, #0
 8008124:	d020      	beq.n	8008168 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01b      	beq.n	8008168 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0210 	mvn.w	r2, #16
 8008138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2208      	movs	r2, #8
 800813e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f8bf 	bl	80082d2 <HAL_TIM_IC_CaptureCallback>
 8008154:	e005      	b.n	8008162 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f8b1 	bl	80082be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8c2 	bl	80082e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00c      	beq.n	800818c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f06f 0201 	mvn.w	r2, #1
 8008184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7f9 fe48 	bl	8001e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00c      	beq.n	80081ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80081b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f9ed 	bl	8008594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00c      	beq.n	80081de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d007      	beq.n	80081de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f9e5 	bl	80085a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00c      	beq.n	8008202 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f87c 	bl	80082fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00c      	beq.n	8008226 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f06f 0220 	mvn.w	r2, #32
 800821e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f9ad 	bl	8008580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00c      	beq.n	800824a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f9b9 	bl	80085bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00c      	beq.n	800826e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f9b1 	bl	80085d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00c      	beq.n	8008292 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800828a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f9a9 	bl	80085e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00c      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d007      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80082ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f9a1 	bl	80085f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
	...

08008310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a48      	ldr	r2, [pc, #288]	; (8008444 <TIM_Base_SetConfig+0x134>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d013      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832e:	d00f      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a45      	ldr	r2, [pc, #276]	; (8008448 <TIM_Base_SetConfig+0x138>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00b      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a44      	ldr	r2, [pc, #272]	; (800844c <TIM_Base_SetConfig+0x13c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d007      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a43      	ldr	r2, [pc, #268]	; (8008450 <TIM_Base_SetConfig+0x140>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a42      	ldr	r2, [pc, #264]	; (8008454 <TIM_Base_SetConfig+0x144>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d108      	bne.n	8008362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a37      	ldr	r2, [pc, #220]	; (8008444 <TIM_Base_SetConfig+0x134>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d01f      	beq.n	80083aa <TIM_Base_SetConfig+0x9a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008370:	d01b      	beq.n	80083aa <TIM_Base_SetConfig+0x9a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a34      	ldr	r2, [pc, #208]	; (8008448 <TIM_Base_SetConfig+0x138>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d017      	beq.n	80083aa <TIM_Base_SetConfig+0x9a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a33      	ldr	r2, [pc, #204]	; (800844c <TIM_Base_SetConfig+0x13c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d013      	beq.n	80083aa <TIM_Base_SetConfig+0x9a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a32      	ldr	r2, [pc, #200]	; (8008450 <TIM_Base_SetConfig+0x140>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00f      	beq.n	80083aa <TIM_Base_SetConfig+0x9a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a32      	ldr	r2, [pc, #200]	; (8008458 <TIM_Base_SetConfig+0x148>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00b      	beq.n	80083aa <TIM_Base_SetConfig+0x9a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a31      	ldr	r2, [pc, #196]	; (800845c <TIM_Base_SetConfig+0x14c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d007      	beq.n	80083aa <TIM_Base_SetConfig+0x9a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a30      	ldr	r2, [pc, #192]	; (8008460 <TIM_Base_SetConfig+0x150>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d003      	beq.n	80083aa <TIM_Base_SetConfig+0x9a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a2b      	ldr	r2, [pc, #172]	; (8008454 <TIM_Base_SetConfig+0x144>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d108      	bne.n	80083bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a18      	ldr	r2, [pc, #96]	; (8008444 <TIM_Base_SetConfig+0x134>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <TIM_Base_SetConfig+0x100>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a19      	ldr	r2, [pc, #100]	; (8008450 <TIM_Base_SetConfig+0x140>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00f      	beq.n	8008410 <TIM_Base_SetConfig+0x100>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a19      	ldr	r2, [pc, #100]	; (8008458 <TIM_Base_SetConfig+0x148>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00b      	beq.n	8008410 <TIM_Base_SetConfig+0x100>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a18      	ldr	r2, [pc, #96]	; (800845c <TIM_Base_SetConfig+0x14c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d007      	beq.n	8008410 <TIM_Base_SetConfig+0x100>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a17      	ldr	r2, [pc, #92]	; (8008460 <TIM_Base_SetConfig+0x150>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_Base_SetConfig+0x100>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a12      	ldr	r2, [pc, #72]	; (8008454 <TIM_Base_SetConfig+0x144>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d103      	bne.n	8008418 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b01      	cmp	r3, #1
 8008428:	d105      	bne.n	8008436 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f023 0201 	bic.w	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	611a      	str	r2, [r3, #16]
  }
}
 8008436:	bf00      	nop
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	40012c00 	.word	0x40012c00
 8008448:	40000400 	.word	0x40000400
 800844c:	40000800 	.word	0x40000800
 8008450:	40013400 	.word	0x40013400
 8008454:	40015000 	.word	0x40015000
 8008458:	40014000 	.word	0x40014000
 800845c:	40014400 	.word	0x40014400
 8008460:	40014800 	.word	0x40014800

08008464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008478:	2302      	movs	r3, #2
 800847a:	e06f      	b.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a31      	ldr	r2, [pc, #196]	; (8008568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d009      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a30      	ldr	r2, [pc, #192]	; (800856c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d004      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a2e      	ldr	r2, [pc, #184]	; (8008570 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d108      	bne.n	80084cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80084d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d01d      	beq.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fc:	d018      	beq.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1c      	ldr	r2, [pc, #112]	; (8008574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d013      	beq.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1a      	ldr	r2, [pc, #104]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d00e      	beq.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a15      	ldr	r2, [pc, #84]	; (800856c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d009      	beq.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a16      	ldr	r2, [pc, #88]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d004      	beq.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a11      	ldr	r2, [pc, #68]	; (8008570 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d10c      	bne.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008536:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	4313      	orrs	r3, r2
 8008540:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	40012c00 	.word	0x40012c00
 800856c:	40013400 	.word	0x40013400
 8008570:	40015000 	.word	0x40015000
 8008574:	40000400 	.word	0x40000400
 8008578:	40000800 	.word	0x40000800
 800857c:	40014000 	.word	0x40014000

08008580 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e042      	b.n	80086a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008624:	2b00      	cmp	r3, #0
 8008626:	d106      	bne.n	8008636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7fb fa3d 	bl	8003ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2224      	movs	r2, #36	; 0x24
 800863a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0201 	bic.w	r2, r2, #1
 800864c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fbb2 	bl	8008dc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f8b3 	bl	80087c8 <UART_SetConfig>
 8008662:	4603      	mov	r3, r0
 8008664:	2b01      	cmp	r3, #1
 8008666:	d101      	bne.n	800866c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e01b      	b.n	80086a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800867a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800868a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0201 	orr.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fc31 	bl	8008f04 <UART_CheckIdleState>
 80086a2:	4603      	mov	r3, r0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08a      	sub	sp, #40	; 0x28
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	4613      	mov	r3, r2
 80086ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d17b      	bne.n	80087be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <HAL_UART_Transmit+0x26>
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e074      	b.n	80087c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2221      	movs	r2, #33	; 0x21
 80086e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086e6:	f7fb faed 	bl	8003cc4 <HAL_GetTick>
 80086ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	88fa      	ldrh	r2, [r7, #6]
 80086f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008704:	d108      	bne.n	8008718 <HAL_UART_Transmit+0x6c>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	e003      	b.n	8008720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800871c:	2300      	movs	r3, #0
 800871e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008720:	e030      	b.n	8008784 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2200      	movs	r2, #0
 800872a:	2180      	movs	r1, #128	; 0x80
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fc93 	bl	8009058 <UART_WaitOnFlagUntilTimeout>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2220      	movs	r2, #32
 800873c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e03d      	b.n	80087c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008758:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	3302      	adds	r3, #2
 800875e:	61bb      	str	r3, [r7, #24]
 8008760:	e007      	b.n	8008772 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	781a      	ldrb	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	3301      	adds	r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	b29a      	uxth	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1c8      	bne.n	8008722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2200      	movs	r2, #0
 8008798:	2140      	movs	r1, #64	; 0x40
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 fc5c 	bl	8009058 <UART_WaitOnFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e006      	b.n	80087c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e000      	b.n	80087c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80087be:	2302      	movs	r3, #2
  }
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087cc:	b08c      	sub	sp, #48	; 0x30
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	431a      	orrs	r2, r3
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4baa      	ldr	r3, [pc, #680]	; (8008aa0 <UART_SetConfig+0x2d8>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	6812      	ldr	r2, [r2, #0]
 80087fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008800:	430b      	orrs	r3, r1
 8008802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a9f      	ldr	r2, [pc, #636]	; (8008aa4 <UART_SetConfig+0x2dc>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d004      	beq.n	8008834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008830:	4313      	orrs	r3, r2
 8008832:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800883e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008848:	430b      	orrs	r3, r1
 800884a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	f023 010f 	bic.w	r1, r3, #15
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a90      	ldr	r2, [pc, #576]	; (8008aa8 <UART_SetConfig+0x2e0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d125      	bne.n	80088b8 <UART_SetConfig+0xf0>
 800886c:	4b8f      	ldr	r3, [pc, #572]	; (8008aac <UART_SetConfig+0x2e4>)
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	2b03      	cmp	r3, #3
 8008878:	d81a      	bhi.n	80088b0 <UART_SetConfig+0xe8>
 800887a:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <UART_SetConfig+0xb8>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	08008891 	.word	0x08008891
 8008884:	080088a1 	.word	0x080088a1
 8008888:	08008899 	.word	0x08008899
 800888c:	080088a9 	.word	0x080088a9
 8008890:	2301      	movs	r3, #1
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008896:	e116      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008898:	2302      	movs	r3, #2
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889e:	e112      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80088a0:	2304      	movs	r3, #4
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a6:	e10e      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ae:	e10a      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80088b0:	2310      	movs	r3, #16
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b6:	e106      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a7c      	ldr	r2, [pc, #496]	; (8008ab0 <UART_SetConfig+0x2e8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d138      	bne.n	8008934 <UART_SetConfig+0x16c>
 80088c2:	4b7a      	ldr	r3, [pc, #488]	; (8008aac <UART_SetConfig+0x2e4>)
 80088c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c8:	f003 030c 	and.w	r3, r3, #12
 80088cc:	2b0c      	cmp	r3, #12
 80088ce:	d82d      	bhi.n	800892c <UART_SetConfig+0x164>
 80088d0:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <UART_SetConfig+0x110>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	0800890d 	.word	0x0800890d
 80088dc:	0800892d 	.word	0x0800892d
 80088e0:	0800892d 	.word	0x0800892d
 80088e4:	0800892d 	.word	0x0800892d
 80088e8:	0800891d 	.word	0x0800891d
 80088ec:	0800892d 	.word	0x0800892d
 80088f0:	0800892d 	.word	0x0800892d
 80088f4:	0800892d 	.word	0x0800892d
 80088f8:	08008915 	.word	0x08008915
 80088fc:	0800892d 	.word	0x0800892d
 8008900:	0800892d 	.word	0x0800892d
 8008904:	0800892d 	.word	0x0800892d
 8008908:	08008925 	.word	0x08008925
 800890c:	2300      	movs	r3, #0
 800890e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008912:	e0d8      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008914:	2302      	movs	r3, #2
 8008916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891a:	e0d4      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 800891c:	2304      	movs	r3, #4
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008922:	e0d0      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008924:	2308      	movs	r3, #8
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892a:	e0cc      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 800892c:	2310      	movs	r3, #16
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008932:	e0c8      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a5e      	ldr	r2, [pc, #376]	; (8008ab4 <UART_SetConfig+0x2ec>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d125      	bne.n	800898a <UART_SetConfig+0x1c2>
 800893e:	4b5b      	ldr	r3, [pc, #364]	; (8008aac <UART_SetConfig+0x2e4>)
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008948:	2b30      	cmp	r3, #48	; 0x30
 800894a:	d016      	beq.n	800897a <UART_SetConfig+0x1b2>
 800894c:	2b30      	cmp	r3, #48	; 0x30
 800894e:	d818      	bhi.n	8008982 <UART_SetConfig+0x1ba>
 8008950:	2b20      	cmp	r3, #32
 8008952:	d00a      	beq.n	800896a <UART_SetConfig+0x1a2>
 8008954:	2b20      	cmp	r3, #32
 8008956:	d814      	bhi.n	8008982 <UART_SetConfig+0x1ba>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <UART_SetConfig+0x19a>
 800895c:	2b10      	cmp	r3, #16
 800895e:	d008      	beq.n	8008972 <UART_SetConfig+0x1aa>
 8008960:	e00f      	b.n	8008982 <UART_SetConfig+0x1ba>
 8008962:	2300      	movs	r3, #0
 8008964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008968:	e0ad      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 800896a:	2302      	movs	r3, #2
 800896c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008970:	e0a9      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008972:	2304      	movs	r3, #4
 8008974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008978:	e0a5      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 800897a:	2308      	movs	r3, #8
 800897c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008980:	e0a1      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008982:	2310      	movs	r3, #16
 8008984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008988:	e09d      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a4a      	ldr	r2, [pc, #296]	; (8008ab8 <UART_SetConfig+0x2f0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d125      	bne.n	80089e0 <UART_SetConfig+0x218>
 8008994:	4b45      	ldr	r3, [pc, #276]	; (8008aac <UART_SetConfig+0x2e4>)
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800899e:	2bc0      	cmp	r3, #192	; 0xc0
 80089a0:	d016      	beq.n	80089d0 <UART_SetConfig+0x208>
 80089a2:	2bc0      	cmp	r3, #192	; 0xc0
 80089a4:	d818      	bhi.n	80089d8 <UART_SetConfig+0x210>
 80089a6:	2b80      	cmp	r3, #128	; 0x80
 80089a8:	d00a      	beq.n	80089c0 <UART_SetConfig+0x1f8>
 80089aa:	2b80      	cmp	r3, #128	; 0x80
 80089ac:	d814      	bhi.n	80089d8 <UART_SetConfig+0x210>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <UART_SetConfig+0x1f0>
 80089b2:	2b40      	cmp	r3, #64	; 0x40
 80089b4:	d008      	beq.n	80089c8 <UART_SetConfig+0x200>
 80089b6:	e00f      	b.n	80089d8 <UART_SetConfig+0x210>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089be:	e082      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80089c0:	2302      	movs	r3, #2
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c6:	e07e      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80089c8:	2304      	movs	r3, #4
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ce:	e07a      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d6:	e076      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089de:	e072      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a35      	ldr	r2, [pc, #212]	; (8008abc <UART_SetConfig+0x2f4>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d12a      	bne.n	8008a40 <UART_SetConfig+0x278>
 80089ea:	4b30      	ldr	r3, [pc, #192]	; (8008aac <UART_SetConfig+0x2e4>)
 80089ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089f8:	d01a      	beq.n	8008a30 <UART_SetConfig+0x268>
 80089fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089fe:	d81b      	bhi.n	8008a38 <UART_SetConfig+0x270>
 8008a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a04:	d00c      	beq.n	8008a20 <UART_SetConfig+0x258>
 8008a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0a:	d815      	bhi.n	8008a38 <UART_SetConfig+0x270>
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <UART_SetConfig+0x250>
 8008a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a14:	d008      	beq.n	8008a28 <UART_SetConfig+0x260>
 8008a16:	e00f      	b.n	8008a38 <UART_SetConfig+0x270>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a1e:	e052      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a20:	2302      	movs	r3, #2
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a26:	e04e      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a2e:	e04a      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a30:	2308      	movs	r3, #8
 8008a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a36:	e046      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a3e:	e042      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <UART_SetConfig+0x2dc>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d13a      	bne.n	8008ac0 <UART_SetConfig+0x2f8>
 8008a4a:	4b18      	ldr	r3, [pc, #96]	; (8008aac <UART_SetConfig+0x2e4>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a58:	d01a      	beq.n	8008a90 <UART_SetConfig+0x2c8>
 8008a5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a5e:	d81b      	bhi.n	8008a98 <UART_SetConfig+0x2d0>
 8008a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a64:	d00c      	beq.n	8008a80 <UART_SetConfig+0x2b8>
 8008a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a6a:	d815      	bhi.n	8008a98 <UART_SetConfig+0x2d0>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <UART_SetConfig+0x2b0>
 8008a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a74:	d008      	beq.n	8008a88 <UART_SetConfig+0x2c0>
 8008a76:	e00f      	b.n	8008a98 <UART_SetConfig+0x2d0>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a7e:	e022      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a80:	2302      	movs	r3, #2
 8008a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a86:	e01e      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a88:	2304      	movs	r3, #4
 8008a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a8e:	e01a      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a90:	2308      	movs	r3, #8
 8008a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a96:	e016      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008a98:	2310      	movs	r3, #16
 8008a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a9e:	e012      	b.n	8008ac6 <UART_SetConfig+0x2fe>
 8008aa0:	cfff69f3 	.word	0xcfff69f3
 8008aa4:	40008000 	.word	0x40008000
 8008aa8:	40013800 	.word	0x40013800
 8008aac:	40021000 	.word	0x40021000
 8008ab0:	40004400 	.word	0x40004400
 8008ab4:	40004800 	.word	0x40004800
 8008ab8:	40004c00 	.word	0x40004c00
 8008abc:	40005000 	.word	0x40005000
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4aae      	ldr	r2, [pc, #696]	; (8008d84 <UART_SetConfig+0x5bc>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	f040 8097 	bne.w	8008c00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ad6:	2b08      	cmp	r3, #8
 8008ad8:	d823      	bhi.n	8008b22 <UART_SetConfig+0x35a>
 8008ada:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <UART_SetConfig+0x318>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b23 	.word	0x08008b23
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b23 	.word	0x08008b23
 8008af0:	08008b13 	.word	0x08008b13
 8008af4:	08008b23 	.word	0x08008b23
 8008af8:	08008b23 	.word	0x08008b23
 8008afc:	08008b23 	.word	0x08008b23
 8008b00:	08008b1b 	.word	0x08008b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b04:	f7fe fee4 	bl	80078d0 <HAL_RCC_GetPCLK1Freq>
 8008b08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b0a:	e010      	b.n	8008b2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b0c:	4b9e      	ldr	r3, [pc, #632]	; (8008d88 <UART_SetConfig+0x5c0>)
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b10:	e00d      	b.n	8008b2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b12:	f7fe fe6f 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b18:	e009      	b.n	8008b2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b20:	e005      	b.n	8008b2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 8130 	beq.w	8008d96 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	4a94      	ldr	r2, [pc, #592]	; (8008d8c <UART_SetConfig+0x5c4>)
 8008b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	4413      	add	r3, r2
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d305      	bcc.n	8008b66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d903      	bls.n	8008b6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b6c:	e113      	b.n	8008d96 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	2200      	movs	r2, #0
 8008b72:	60bb      	str	r3, [r7, #8]
 8008b74:	60fa      	str	r2, [r7, #12]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	4a84      	ldr	r2, [pc, #528]	; (8008d8c <UART_SetConfig+0x5c4>)
 8008b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2200      	movs	r2, #0
 8008b84:	603b      	str	r3, [r7, #0]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b90:	f7f8 f834 	bl	8000bfc <__aeabi_uldivmod>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f04f 0200 	mov.w	r2, #0
 8008ba0:	f04f 0300 	mov.w	r3, #0
 8008ba4:	020b      	lsls	r3, r1, #8
 8008ba6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008baa:	0202      	lsls	r2, r0, #8
 8008bac:	6979      	ldr	r1, [r7, #20]
 8008bae:	6849      	ldr	r1, [r1, #4]
 8008bb0:	0849      	lsrs	r1, r1, #1
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	eb12 0804 	adds.w	r8, r2, r4
 8008bbc:	eb43 0905 	adc.w	r9, r3, r5
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	469a      	mov	sl, r3
 8008bc8:	4693      	mov	fp, r2
 8008bca:	4652      	mov	r2, sl
 8008bcc:	465b      	mov	r3, fp
 8008bce:	4640      	mov	r0, r8
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	f7f8 f813 	bl	8000bfc <__aeabi_uldivmod>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4613      	mov	r3, r2
 8008bdc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008be4:	d308      	bcc.n	8008bf8 <UART_SetConfig+0x430>
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bec:	d204      	bcs.n	8008bf8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6a3a      	ldr	r2, [r7, #32]
 8008bf4:	60da      	str	r2, [r3, #12]
 8008bf6:	e0ce      	b.n	8008d96 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008bfe:	e0ca      	b.n	8008d96 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c08:	d166      	bne.n	8008cd8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008c0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	d827      	bhi.n	8008c62 <UART_SetConfig+0x49a>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <UART_SetConfig+0x450>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c3d 	.word	0x08008c3d
 8008c1c:	08008c45 	.word	0x08008c45
 8008c20:	08008c4d 	.word	0x08008c4d
 8008c24:	08008c63 	.word	0x08008c63
 8008c28:	08008c53 	.word	0x08008c53
 8008c2c:	08008c63 	.word	0x08008c63
 8008c30:	08008c63 	.word	0x08008c63
 8008c34:	08008c63 	.word	0x08008c63
 8008c38:	08008c5b 	.word	0x08008c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c3c:	f7fe fe48 	bl	80078d0 <HAL_RCC_GetPCLK1Freq>
 8008c40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c42:	e014      	b.n	8008c6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c44:	f7fe fe5a 	bl	80078fc <HAL_RCC_GetPCLK2Freq>
 8008c48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c4a:	e010      	b.n	8008c6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c4c:	4b4e      	ldr	r3, [pc, #312]	; (8008d88 <UART_SetConfig+0x5c0>)
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c50:	e00d      	b.n	8008c6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c52:	f7fe fdcf 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8008c56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c58:	e009      	b.n	8008c6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c60:	e005      	b.n	8008c6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 8090 	beq.w	8008d96 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	4a44      	ldr	r2, [pc, #272]	; (8008d8c <UART_SetConfig+0x5c4>)
 8008c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c80:	461a      	mov	r2, r3
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c88:	005a      	lsls	r2, r3, #1
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	441a      	add	r2, r3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	2b0f      	cmp	r3, #15
 8008ca0:	d916      	bls.n	8008cd0 <UART_SetConfig+0x508>
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca8:	d212      	bcs.n	8008cd0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	f023 030f 	bic.w	r3, r3, #15
 8008cb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	8bfb      	ldrh	r3, [r7, #30]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	8bfa      	ldrh	r2, [r7, #30]
 8008ccc:	60da      	str	r2, [r3, #12]
 8008cce:	e062      	b.n	8008d96 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008cd6:	e05e      	b.n	8008d96 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cdc:	2b08      	cmp	r3, #8
 8008cde:	d828      	bhi.n	8008d32 <UART_SetConfig+0x56a>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <UART_SetConfig+0x520>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d15 	.word	0x08008d15
 8008cf0:	08008d1d 	.word	0x08008d1d
 8008cf4:	08008d33 	.word	0x08008d33
 8008cf8:	08008d23 	.word	0x08008d23
 8008cfc:	08008d33 	.word	0x08008d33
 8008d00:	08008d33 	.word	0x08008d33
 8008d04:	08008d33 	.word	0x08008d33
 8008d08:	08008d2b 	.word	0x08008d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d0c:	f7fe fde0 	bl	80078d0 <HAL_RCC_GetPCLK1Freq>
 8008d10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d12:	e014      	b.n	8008d3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d14:	f7fe fdf2 	bl	80078fc <HAL_RCC_GetPCLK2Freq>
 8008d18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d1a:	e010      	b.n	8008d3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d1c:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <UART_SetConfig+0x5c0>)
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d20:	e00d      	b.n	8008d3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d22:	f7fe fd67 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8008d26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d28:	e009      	b.n	8008d3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d30:	e005      	b.n	8008d3e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d028      	beq.n	8008d96 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	4a10      	ldr	r2, [pc, #64]	; (8008d8c <UART_SetConfig+0x5c4>)
 8008d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	085b      	lsrs	r3, r3, #1
 8008d5c:	441a      	add	r2, r3
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	2b0f      	cmp	r3, #15
 8008d6c:	d910      	bls.n	8008d90 <UART_SetConfig+0x5c8>
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d74:	d20c      	bcs.n	8008d90 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60da      	str	r2, [r3, #12]
 8008d80:	e009      	b.n	8008d96 <UART_SetConfig+0x5ce>
 8008d82:	bf00      	nop
 8008d84:	40008000 	.word	0x40008000
 8008d88:	00f42400 	.word	0x00f42400
 8008d8c:	0800d120 	.word	0x0800d120
      }
      else
      {
        ret = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2200      	movs	r2, #0
 8008daa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2200      	movs	r2, #0
 8008db0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008db2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3730      	adds	r7, #48	; 0x30
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01a      	beq.n	8008ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ebe:	d10a      	bne.n	8008ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	605a      	str	r2, [r3, #4]
  }
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b098      	sub	sp, #96	; 0x60
 8008f08:	af02      	add	r7, sp, #8
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f14:	f7fa fed6 	bl	8003cc4 <HAL_GetTick>
 8008f18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0308 	and.w	r3, r3, #8
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d12f      	bne.n	8008f88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f30:	2200      	movs	r2, #0
 8008f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f88e 	bl	8009058 <UART_WaitOnFlagUntilTimeout>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d022      	beq.n	8008f88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f56:	653b      	str	r3, [r7, #80]	; 0x50
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f60:	647b      	str	r3, [r7, #68]	; 0x44
 8008f62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e6      	bne.n	8008f42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e063      	b.n	8009050 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d149      	bne.n	800902a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f857 	bl	8009058 <UART_WaitOnFlagUntilTimeout>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d03c      	beq.n	800902a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fce:	633b      	str	r3, [r7, #48]	; 0x30
 8008fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e6      	bne.n	8008fb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f023 0301 	bic.w	r3, r3, #1
 8008ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3308      	adds	r3, #8
 8009000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009002:	61fa      	str	r2, [r7, #28]
 8009004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	69b9      	ldr	r1, [r7, #24]
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	617b      	str	r3, [r7, #20]
   return(result);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e5      	bne.n	8008fe2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e012      	b.n	8009050 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2220      	movs	r2, #32
 800902e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3758      	adds	r7, #88	; 0x58
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	4613      	mov	r3, r2
 8009066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009068:	e04f      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009070:	d04b      	beq.n	800910a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009072:	f7fa fe27 	bl	8003cc4 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	429a      	cmp	r2, r3
 8009080:	d302      	bcc.n	8009088 <UART_WaitOnFlagUntilTimeout+0x30>
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e04e      	b.n	800912a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0304 	and.w	r3, r3, #4
 8009096:	2b00      	cmp	r3, #0
 8009098:	d037      	beq.n	800910a <UART_WaitOnFlagUntilTimeout+0xb2>
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b80      	cmp	r3, #128	; 0x80
 800909e:	d034      	beq.n	800910a <UART_WaitOnFlagUntilTimeout+0xb2>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b40      	cmp	r3, #64	; 0x40
 80090a4:	d031      	beq.n	800910a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	f003 0308 	and.w	r3, r3, #8
 80090b0:	2b08      	cmp	r3, #8
 80090b2:	d110      	bne.n	80090d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2208      	movs	r2, #8
 80090ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f838 	bl	8009132 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2208      	movs	r2, #8
 80090c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e029      	b.n	800912a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e4:	d111      	bne.n	800910a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f81e 	bl	8009132 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e00f      	b.n	800912a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69da      	ldr	r2, [r3, #28]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4013      	ands	r3, r2
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	429a      	cmp	r2, r3
 8009118:	bf0c      	ite	eq
 800911a:	2301      	moveq	r3, #1
 800911c:	2300      	movne	r3, #0
 800911e:	b2db      	uxtb	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	429a      	cmp	r2, r3
 8009126:	d0a0      	beq.n	800906a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009132:	b480      	push	{r7}
 8009134:	b095      	sub	sp, #84	; 0x54
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800914e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009158:	643b      	str	r3, [r7, #64]	; 0x40
 800915a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800915e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009160:	e841 2300 	strex	r3, r2, [r1]
 8009164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e6      	bne.n	800913a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3308      	adds	r3, #8
 8009172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	e853 3f00 	ldrex	r3, [r3]
 800917a:	61fb      	str	r3, [r7, #28]
   return(result);
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009182:	f023 0301 	bic.w	r3, r3, #1
 8009186:	64bb      	str	r3, [r7, #72]	; 0x48
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e3      	bne.n	800916c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d118      	bne.n	80091de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f023 0310 	bic.w	r3, r3, #16
 80091c0:	647b      	str	r3, [r7, #68]	; 0x44
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ca:	61bb      	str	r3, [r7, #24]
 80091cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	6979      	ldr	r1, [r7, #20]
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	613b      	str	r3, [r7, #16]
   return(result);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e6      	bne.n	80091ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80091f2:	bf00      	nop
 80091f4:	3754      	adds	r7, #84	; 0x54
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091fe:	b480      	push	{r7}
 8009200:	b085      	sub	sp, #20
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_UARTEx_DisableFifoMode+0x16>
 8009210:	2302      	movs	r3, #2
 8009212:	e027      	b.n	8009264 <HAL_UARTEx_DisableFifoMode+0x66>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2224      	movs	r2, #36	; 0x24
 8009220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0201 	bic.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009242:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009284:	2302      	movs	r3, #2
 8009286:	e02d      	b.n	80092e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2224      	movs	r2, #36	; 0x24
 8009294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0201 	bic.w	r2, r2, #1
 80092ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f84f 	bl	8009368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009300:	2302      	movs	r3, #2
 8009302:	e02d      	b.n	8009360 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2224      	movs	r2, #36	; 0x24
 8009310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0201 	bic.w	r2, r2, #1
 800932a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f811 	bl	8009368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009374:	2b00      	cmp	r3, #0
 8009376:	d108      	bne.n	800938a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009388:	e031      	b.n	80093ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800938a:	2308      	movs	r3, #8
 800938c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800938e:	2308      	movs	r3, #8
 8009390:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	0e5b      	lsrs	r3, r3, #25
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 0307 	and.w	r3, r3, #7
 80093a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	0f5b      	lsrs	r3, r3, #29
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093b2:	7bbb      	ldrb	r3, [r7, #14]
 80093b4:	7b3a      	ldrb	r2, [r7, #12]
 80093b6:	4911      	ldr	r1, [pc, #68]	; (80093fc <UARTEx_SetNbDataToProcess+0x94>)
 80093b8:	5c8a      	ldrb	r2, [r1, r2]
 80093ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093be:	7b3a      	ldrb	r2, [r7, #12]
 80093c0:	490f      	ldr	r1, [pc, #60]	; (8009400 <UARTEx_SetNbDataToProcess+0x98>)
 80093c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	7b7a      	ldrb	r2, [r7, #13]
 80093d4:	4909      	ldr	r1, [pc, #36]	; (80093fc <UARTEx_SetNbDataToProcess+0x94>)
 80093d6:	5c8a      	ldrb	r2, [r1, r2]
 80093d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093dc:	7b7a      	ldrb	r2, [r7, #13]
 80093de:	4908      	ldr	r1, [pc, #32]	; (8009400 <UARTEx_SetNbDataToProcess+0x98>)
 80093e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093ee:	bf00      	nop
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	0800d138 	.word	0x0800d138
 8009400:	0800d140 	.word	0x0800d140

08009404 <__NVIC_SetPriority>:
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	6039      	str	r1, [r7, #0]
 800940e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009414:	2b00      	cmp	r3, #0
 8009416:	db0a      	blt.n	800942e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	b2da      	uxtb	r2, r3
 800941c:	490c      	ldr	r1, [pc, #48]	; (8009450 <__NVIC_SetPriority+0x4c>)
 800941e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009422:	0112      	lsls	r2, r2, #4
 8009424:	b2d2      	uxtb	r2, r2
 8009426:	440b      	add	r3, r1
 8009428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800942c:	e00a      	b.n	8009444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	b2da      	uxtb	r2, r3
 8009432:	4908      	ldr	r1, [pc, #32]	; (8009454 <__NVIC_SetPriority+0x50>)
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	3b04      	subs	r3, #4
 800943c:	0112      	lsls	r2, r2, #4
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	440b      	add	r3, r1
 8009442:	761a      	strb	r2, [r3, #24]
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	e000e100 	.word	0xe000e100
 8009454:	e000ed00 	.word	0xe000ed00

08009458 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <SysTick_Handler+0x1c>)
 800945e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009460:	f002 fa9a 	bl	800b998 <xTaskGetSchedulerState>
 8009464:	4603      	mov	r3, r0
 8009466:	2b01      	cmp	r3, #1
 8009468:	d001      	beq.n	800946e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800946a:	f003 f97d 	bl	800c768 <xPortSysTickHandler>
  }
}
 800946e:	bf00      	nop
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	e000e010 	.word	0xe000e010

08009478 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800947c:	2100      	movs	r1, #0
 800947e:	f06f 0004 	mvn.w	r0, #4
 8009482:	f7ff ffbf 	bl	8009404 <__NVIC_SetPriority>
#endif
}
 8009486:	bf00      	nop
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009492:	f3ef 8305 	mrs	r3, IPSR
 8009496:	603b      	str	r3, [r7, #0]
  return(result);
 8009498:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800949e:	f06f 0305 	mvn.w	r3, #5
 80094a2:	607b      	str	r3, [r7, #4]
 80094a4:	e00c      	b.n	80094c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80094a6:	4b0a      	ldr	r3, [pc, #40]	; (80094d0 <osKernelInitialize+0x44>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d105      	bne.n	80094ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80094ae:	4b08      	ldr	r3, [pc, #32]	; (80094d0 <osKernelInitialize+0x44>)
 80094b0:	2201      	movs	r2, #1
 80094b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	607b      	str	r3, [r7, #4]
 80094b8:	e002      	b.n	80094c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80094ba:	f04f 33ff 	mov.w	r3, #4294967295
 80094be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80094c0:	687b      	ldr	r3, [r7, #4]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	2000034c 	.word	0x2000034c

080094d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094da:	f3ef 8305 	mrs	r3, IPSR
 80094de:	603b      	str	r3, [r7, #0]
  return(result);
 80094e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80094e6:	f06f 0305 	mvn.w	r3, #5
 80094ea:	607b      	str	r3, [r7, #4]
 80094ec:	e010      	b.n	8009510 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80094ee:	4b0b      	ldr	r3, [pc, #44]	; (800951c <osKernelStart+0x48>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d109      	bne.n	800950a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80094f6:	f7ff ffbf 	bl	8009478 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80094fa:	4b08      	ldr	r3, [pc, #32]	; (800951c <osKernelStart+0x48>)
 80094fc:	2202      	movs	r2, #2
 80094fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009500:	f001 fdee 	bl	800b0e0 <vTaskStartScheduler>
      stat = osOK;
 8009504:	2300      	movs	r3, #0
 8009506:	607b      	str	r3, [r7, #4]
 8009508:	e002      	b.n	8009510 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800950a:	f04f 33ff 	mov.w	r3, #4294967295
 800950e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009510:	687b      	ldr	r3, [r7, #4]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	2000034c 	.word	0x2000034c

08009520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009520:	b580      	push	{r7, lr}
 8009522:	b08e      	sub	sp, #56	; 0x38
 8009524:	af04      	add	r7, sp, #16
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800952c:	2300      	movs	r3, #0
 800952e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009530:	f3ef 8305 	mrs	r3, IPSR
 8009534:	617b      	str	r3, [r7, #20]
  return(result);
 8009536:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009538:	2b00      	cmp	r3, #0
 800953a:	d17e      	bne.n	800963a <osThreadNew+0x11a>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d07b      	beq.n	800963a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009542:	2380      	movs	r3, #128	; 0x80
 8009544:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009546:	2318      	movs	r3, #24
 8009548:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800954e:	f04f 33ff 	mov.w	r3, #4294967295
 8009552:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d045      	beq.n	80095e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <osThreadNew+0x48>
        name = attr->name;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d008      	beq.n	800958e <osThreadNew+0x6e>
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	2b38      	cmp	r3, #56	; 0x38
 8009580:	d805      	bhi.n	800958e <osThreadNew+0x6e>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <osThreadNew+0x72>
        return (NULL);
 800958e:	2300      	movs	r3, #0
 8009590:	e054      	b.n	800963c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	089b      	lsrs	r3, r3, #2
 80095a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00e      	beq.n	80095c8 <osThreadNew+0xa8>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	2ba7      	cmp	r3, #167	; 0xa7
 80095b0:	d90a      	bls.n	80095c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d006      	beq.n	80095c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <osThreadNew+0xa8>
        mem = 1;
 80095c2:	2301      	movs	r3, #1
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	e010      	b.n	80095ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10c      	bne.n	80095ea <osThreadNew+0xca>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d108      	bne.n	80095ea <osThreadNew+0xca>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d104      	bne.n	80095ea <osThreadNew+0xca>
          mem = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	61bb      	str	r3, [r7, #24]
 80095e4:	e001      	b.n	80095ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d110      	bne.n	8009612 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80095f8:	9202      	str	r2, [sp, #8]
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	6a3a      	ldr	r2, [r7, #32]
 8009604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f001 fb7e 	bl	800ad08 <xTaskCreateStatic>
 800960c:	4603      	mov	r3, r0
 800960e:	613b      	str	r3, [r7, #16]
 8009610:	e013      	b.n	800963a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d110      	bne.n	800963a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	b29a      	uxth	r2, r3
 800961c:	f107 0310 	add.w	r3, r7, #16
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f001 fbc9 	bl	800adc2 <xTaskCreate>
 8009630:	4603      	mov	r3, r0
 8009632:	2b01      	cmp	r3, #1
 8009634:	d001      	beq.n	800963a <osThreadNew+0x11a>
            hTask = NULL;
 8009636:	2300      	movs	r3, #0
 8009638:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800963a:	693b      	ldr	r3, [r7, #16]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3728      	adds	r7, #40	; 0x28
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800964c:	f3ef 8305 	mrs	r3, IPSR
 8009650:	60bb      	str	r3, [r7, #8]
  return(result);
 8009652:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <osDelay+0x1c>
    stat = osErrorISR;
 8009658:	f06f 0305 	mvn.w	r3, #5
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	e007      	b.n	8009670 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <osDelay+0x2c>
      vTaskDelay(ticks);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 fd04 	bl	800b078 <vTaskDelay>
    }
  }

  return (stat);
 8009670:	68fb      	ldr	r3, [r7, #12]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800967a:	b580      	push	{r7, lr}
 800967c:	b08a      	sub	sp, #40	; 0x28
 800967e:	af02      	add	r7, sp, #8
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800968a:	f3ef 8305 	mrs	r3, IPSR
 800968e:	613b      	str	r3, [r7, #16]
  return(result);
 8009690:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009692:	2b00      	cmp	r3, #0
 8009694:	d175      	bne.n	8009782 <osSemaphoreNew+0x108>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d072      	beq.n	8009782 <osSemaphoreNew+0x108>
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d86e      	bhi.n	8009782 <osSemaphoreNew+0x108>
    mem = -1;
 80096a4:	f04f 33ff 	mov.w	r3, #4294967295
 80096a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d015      	beq.n	80096dc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d006      	beq.n	80096c6 <osSemaphoreNew+0x4c>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	2b4f      	cmp	r3, #79	; 0x4f
 80096be:	d902      	bls.n	80096c6 <osSemaphoreNew+0x4c>
        mem = 1;
 80096c0:	2301      	movs	r3, #1
 80096c2:	61bb      	str	r3, [r7, #24]
 80096c4:	e00c      	b.n	80096e0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d108      	bne.n	80096e0 <osSemaphoreNew+0x66>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d104      	bne.n	80096e0 <osSemaphoreNew+0x66>
          mem = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	e001      	b.n	80096e0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e6:	d04c      	beq.n	8009782 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d128      	bne.n	8009740 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d10a      	bne.n	800970a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2203      	movs	r2, #3
 80096fa:	9200      	str	r2, [sp, #0]
 80096fc:	2200      	movs	r2, #0
 80096fe:	2100      	movs	r1, #0
 8009700:	2001      	movs	r0, #1
 8009702:	f000 fb5b 	bl	8009dbc <xQueueGenericCreateStatic>
 8009706:	61f8      	str	r0, [r7, #28]
 8009708:	e005      	b.n	8009716 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800970a:	2203      	movs	r2, #3
 800970c:	2100      	movs	r1, #0
 800970e:	2001      	movs	r0, #1
 8009710:	f000 fbcc 	bl	8009eac <xQueueGenericCreate>
 8009714:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d022      	beq.n	8009762 <osSemaphoreNew+0xe8>
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01f      	beq.n	8009762 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009722:	2300      	movs	r3, #0
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	69f8      	ldr	r0, [r7, #28]
 800972a:	f000 fc87 	bl	800a03c <xQueueGenericSend>
 800972e:	4603      	mov	r3, r0
 8009730:	2b01      	cmp	r3, #1
 8009732:	d016      	beq.n	8009762 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009734:	69f8      	ldr	r0, [r7, #28]
 8009736:	f001 f913 	bl	800a960 <vQueueDelete>
            hSemaphore = NULL;
 800973a:	2300      	movs	r3, #0
 800973c:	61fb      	str	r3, [r7, #28]
 800973e:	e010      	b.n	8009762 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d108      	bne.n	8009758 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	461a      	mov	r2, r3
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fc09 	bl	8009f66 <xQueueCreateCountingSemaphoreStatic>
 8009754:	61f8      	str	r0, [r7, #28]
 8009756:	e004      	b.n	8009762 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009758:	68b9      	ldr	r1, [r7, #8]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fc3a 	bl	8009fd4 <xQueueCreateCountingSemaphore>
 8009760:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00c      	beq.n	8009782 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <osSemaphoreNew+0xfc>
          name = attr->name;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	617b      	str	r3, [r7, #20]
 8009774:	e001      	b.n	800977a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009776:	2300      	movs	r3, #0
 8009778:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800977a:	6979      	ldr	r1, [r7, #20]
 800977c:	69f8      	ldr	r0, [r7, #28]
 800977e:	f001 fa3b 	bl	800abf8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009782:	69fb      	ldr	r3, [r7, #28]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3720      	adds	r7, #32
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800979a:	2300      	movs	r3, #0
 800979c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d103      	bne.n	80097ac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80097a4:	f06f 0303 	mvn.w	r3, #3
 80097a8:	617b      	str	r3, [r7, #20]
 80097aa:	e039      	b.n	8009820 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ac:	f3ef 8305 	mrs	r3, IPSR
 80097b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80097b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d022      	beq.n	80097fe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80097be:	f06f 0303 	mvn.w	r3, #3
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	e02c      	b.n	8009820 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	461a      	mov	r2, r3
 80097d0:	2100      	movs	r1, #0
 80097d2:	6938      	ldr	r0, [r7, #16]
 80097d4:	f001 f844 	bl	800a860 <xQueueReceiveFromISR>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d003      	beq.n	80097e6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80097de:	f06f 0302 	mvn.w	r3, #2
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	e01c      	b.n	8009820 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d019      	beq.n	8009820 <osSemaphoreAcquire+0x94>
 80097ec:	4b0f      	ldr	r3, [pc, #60]	; (800982c <osSemaphoreAcquire+0xa0>)
 80097ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	e010      	b.n	8009820 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6938      	ldr	r0, [r7, #16]
 8009802:	f000 ff21 	bl	800a648 <xQueueSemaphoreTake>
 8009806:	4603      	mov	r3, r0
 8009808:	2b01      	cmp	r3, #1
 800980a:	d009      	beq.n	8009820 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009812:	f06f 0301 	mvn.w	r3, #1
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	e002      	b.n	8009820 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800981a:	f06f 0302 	mvn.w	r3, #2
 800981e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009820:	697b      	ldr	r3, [r7, #20]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	e000ed04 	.word	0xe000ed04

08009830 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800983c:	2300      	movs	r3, #0
 800983e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d103      	bne.n	800984e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009846:	f06f 0303 	mvn.w	r3, #3
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	e02c      	b.n	80098a8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800984e:	f3ef 8305 	mrs	r3, IPSR
 8009852:	60fb      	str	r3, [r7, #12]
  return(result);
 8009854:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01a      	beq.n	8009890 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800985a:	2300      	movs	r3, #0
 800985c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800985e:	f107 0308 	add.w	r3, r7, #8
 8009862:	4619      	mov	r1, r3
 8009864:	6938      	ldr	r0, [r7, #16]
 8009866:	f000 fd82 	bl	800a36e <xQueueGiveFromISR>
 800986a:	4603      	mov	r3, r0
 800986c:	2b01      	cmp	r3, #1
 800986e:	d003      	beq.n	8009878 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009870:	f06f 0302 	mvn.w	r3, #2
 8009874:	617b      	str	r3, [r7, #20]
 8009876:	e017      	b.n	80098a8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d014      	beq.n	80098a8 <osSemaphoreRelease+0x78>
 800987e:	4b0d      	ldr	r3, [pc, #52]	; (80098b4 <osSemaphoreRelease+0x84>)
 8009880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	e00b      	b.n	80098a8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009890:	2300      	movs	r3, #0
 8009892:	2200      	movs	r2, #0
 8009894:	2100      	movs	r1, #0
 8009896:	6938      	ldr	r0, [r7, #16]
 8009898:	f000 fbd0 	bl	800a03c <xQueueGenericSend>
 800989c:	4603      	mov	r3, r0
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d002      	beq.n	80098a8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80098a2:	f06f 0302 	mvn.w	r3, #2
 80098a6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80098a8:	697b      	ldr	r3, [r7, #20]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	e000ed04 	.word	0xe000ed04

080098b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af02      	add	r7, sp, #8
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098c8:	f3ef 8305 	mrs	r3, IPSR
 80098cc:	613b      	str	r3, [r7, #16]
  return(result);
 80098ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d15f      	bne.n	8009994 <osMessageQueueNew+0xdc>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d05c      	beq.n	8009994 <osMessageQueueNew+0xdc>
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d059      	beq.n	8009994 <osMessageQueueNew+0xdc>
    mem = -1;
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d029      	beq.n	8009940 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d012      	beq.n	800991a <osMessageQueueNew+0x62>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	2b4f      	cmp	r3, #79	; 0x4f
 80098fa:	d90e      	bls.n	800991a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	695a      	ldr	r2, [r3, #20]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68b9      	ldr	r1, [r7, #8]
 800990c:	fb01 f303 	mul.w	r3, r1, r3
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <osMessageQueueNew+0x62>
        mem = 1;
 8009914:	2301      	movs	r3, #1
 8009916:	61bb      	str	r3, [r7, #24]
 8009918:	e014      	b.n	8009944 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d110      	bne.n	8009944 <osMessageQueueNew+0x8c>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10c      	bne.n	8009944 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800992e:	2b00      	cmp	r3, #0
 8009930:	d108      	bne.n	8009944 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d104      	bne.n	8009944 <osMessageQueueNew+0x8c>
          mem = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	e001      	b.n	8009944 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d10b      	bne.n	8009962 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691a      	ldr	r2, [r3, #16]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	2100      	movs	r1, #0
 8009954:	9100      	str	r1, [sp, #0]
 8009956:	68b9      	ldr	r1, [r7, #8]
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fa2f 	bl	8009dbc <xQueueGenericCreateStatic>
 800995e:	61f8      	str	r0, [r7, #28]
 8009960:	e008      	b.n	8009974 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d105      	bne.n	8009974 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009968:	2200      	movs	r2, #0
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fa9d 	bl	8009eac <xQueueGenericCreate>
 8009972:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00c      	beq.n	8009994 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	e001      	b.n	800998c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800998c:	6979      	ldr	r1, [r7, #20]
 800998e:	69f8      	ldr	r0, [r7, #28]
 8009990:	f001 f932 	bl	800abf8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009994:	69fb      	ldr	r3, [r7, #28]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3720      	adds	r7, #32
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b8:	f3ef 8305 	mrs	r3, IPSR
 80099bc:	617b      	str	r3, [r7, #20]
  return(result);
 80099be:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d028      	beq.n	8009a16 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <osMessageQueuePut+0x36>
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <osMessageQueuePut+0x36>
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80099d6:	f06f 0303 	mvn.w	r3, #3
 80099da:	61fb      	str	r3, [r7, #28]
 80099dc:	e038      	b.n	8009a50 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80099de:	2300      	movs	r3, #0
 80099e0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80099e2:	f107 0210 	add.w	r2, r7, #16
 80099e6:	2300      	movs	r3, #0
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	69b8      	ldr	r0, [r7, #24]
 80099ec:	f000 fc24 	bl	800a238 <xQueueGenericSendFromISR>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d003      	beq.n	80099fe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80099f6:	f06f 0302 	mvn.w	r3, #2
 80099fa:	61fb      	str	r3, [r7, #28]
 80099fc:	e028      	b.n	8009a50 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d025      	beq.n	8009a50 <osMessageQueuePut+0xb0>
 8009a04:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <osMessageQueuePut+0xbc>)
 8009a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	e01c      	b.n	8009a50 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <osMessageQueuePut+0x82>
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d103      	bne.n	8009a2a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009a22:	f06f 0303 	mvn.w	r3, #3
 8009a26:	61fb      	str	r3, [r7, #28]
 8009a28:	e012      	b.n	8009a50 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	69b8      	ldr	r0, [r7, #24]
 8009a32:	f000 fb03 	bl	800a03c <xQueueGenericSend>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d009      	beq.n	8009a50 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009a42:	f06f 0301 	mvn.w	r3, #1
 8009a46:	61fb      	str	r3, [r7, #28]
 8009a48:	e002      	b.n	8009a50 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009a4a:	f06f 0302 	mvn.w	r3, #2
 8009a4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a50:	69fb      	ldr	r3, [r7, #28]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3720      	adds	r7, #32
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a76:	f3ef 8305 	mrs	r3, IPSR
 8009a7a:	617b      	str	r3, [r7, #20]
  return(result);
 8009a7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d028      	beq.n	8009ad4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d005      	beq.n	8009a94 <osMessageQueueGet+0x34>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <osMessageQueueGet+0x34>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d003      	beq.n	8009a9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009a94:	f06f 0303 	mvn.w	r3, #3
 8009a98:	61fb      	str	r3, [r7, #28]
 8009a9a:	e037      	b.n	8009b0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009aa0:	f107 0310 	add.w	r3, r7, #16
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	69b8      	ldr	r0, [r7, #24]
 8009aaa:	f000 fed9 	bl	800a860 <xQueueReceiveFromISR>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d003      	beq.n	8009abc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009ab4:	f06f 0302 	mvn.w	r3, #2
 8009ab8:	61fb      	str	r3, [r7, #28]
 8009aba:	e027      	b.n	8009b0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d024      	beq.n	8009b0c <osMessageQueueGet+0xac>
 8009ac2:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <osMessageQueueGet+0xb8>)
 8009ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	e01b      	b.n	8009b0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d002      	beq.n	8009ae0 <osMessageQueueGet+0x80>
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d103      	bne.n	8009ae8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009ae0:	f06f 0303 	mvn.w	r3, #3
 8009ae4:	61fb      	str	r3, [r7, #28]
 8009ae6:	e011      	b.n	8009b0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	69b8      	ldr	r0, [r7, #24]
 8009aee:	f000 fccb 	bl	800a488 <xQueueReceive>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d009      	beq.n	8009b0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009afe:	f06f 0301 	mvn.w	r3, #1
 8009b02:	61fb      	str	r3, [r7, #28]
 8009b04:	e002      	b.n	8009b0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009b06:	f06f 0302 	mvn.w	r3, #2
 8009b0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009b0c:	69fb      	ldr	r3, [r7, #28]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3720      	adds	r7, #32
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4a07      	ldr	r2, [pc, #28]	; (8009b48 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	4a06      	ldr	r2, [pc, #24]	; (8009b4c <vApplicationGetIdleTaskMemory+0x30>)
 8009b32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2280      	movs	r2, #128	; 0x80
 8009b38:	601a      	str	r2, [r3, #0]
}
 8009b3a:	bf00      	nop
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20000350 	.word	0x20000350
 8009b4c:	200003f8 	.word	0x200003f8

08009b50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4a07      	ldr	r2, [pc, #28]	; (8009b7c <vApplicationGetTimerTaskMemory+0x2c>)
 8009b60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4a06      	ldr	r2, [pc, #24]	; (8009b80 <vApplicationGetTimerTaskMemory+0x30>)
 8009b66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b6e:	601a      	str	r2, [r3, #0]
}
 8009b70:	bf00      	nop
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	200005f8 	.word	0x200005f8
 8009b80:	200006a0 	.word	0x200006a0

08009b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f103 0208 	add.w	r2, r3, #8
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f103 0208 	add.w	r2, r3, #8
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f103 0208 	add.w	r2, r3, #8
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bde:	b480      	push	{r7}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	689a      	ldr	r2, [r3, #8]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	601a      	str	r2, [r3, #0]
}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c26:	b480      	push	{r7}
 8009c28:	b085      	sub	sp, #20
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d103      	bne.n	8009c46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e00c      	b.n	8009c60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3308      	adds	r3, #8
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e002      	b.n	8009c54 <vListInsert+0x2e>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d2f6      	bcs.n	8009c4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	601a      	str	r2, [r3, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	6892      	ldr	r2, [r2, #8]
 8009cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6852      	ldr	r2, [r2, #4]
 8009cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d103      	bne.n	8009ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	1e5a      	subs	r2, r3, #1
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10a      	bne.n	8009d16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d16:	f002 fc95 	bl	800c644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d22:	68f9      	ldr	r1, [r7, #12]
 8009d24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d26:	fb01 f303 	mul.w	r3, r1, r3
 8009d2a:	441a      	add	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d46:	3b01      	subs	r3, #1
 8009d48:	68f9      	ldr	r1, [r7, #12]
 8009d4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	441a      	add	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	22ff      	movs	r2, #255	; 0xff
 8009d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	22ff      	movs	r2, #255	; 0xff
 8009d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d114      	bne.n	8009d96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d01a      	beq.n	8009daa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3310      	adds	r3, #16
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f001 fc4b 	bl	800b614 <xTaskRemoveFromEventList>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d012      	beq.n	8009daa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d84:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <xQueueGenericReset+0xcc>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	e009      	b.n	8009daa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3310      	adds	r3, #16
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff fef2 	bl	8009b84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	3324      	adds	r3, #36	; 0x24
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7ff feed 	bl	8009b84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009daa:	f002 fc7b 	bl	800c6a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dae:	2301      	movs	r3, #1
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08e      	sub	sp, #56	; 0x38
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10a      	bne.n	8009e02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dfe:	bf00      	nop
 8009e00:	e7fe      	b.n	8009e00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <xQueueGenericCreateStatic+0x52>
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <xQueueGenericCreateStatic+0x56>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e000      	b.n	8009e14 <xQueueGenericCreateStatic+0x58>
 8009e12:	2300      	movs	r3, #0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10a      	bne.n	8009e2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	623b      	str	r3, [r7, #32]
}
 8009e2a:	bf00      	nop
 8009e2c:	e7fe      	b.n	8009e2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <xQueueGenericCreateStatic+0x7e>
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <xQueueGenericCreateStatic+0x82>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e000      	b.n	8009e40 <xQueueGenericCreateStatic+0x84>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	61fb      	str	r3, [r7, #28]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e5a:	2350      	movs	r3, #80	; 0x50
 8009e5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b50      	cmp	r3, #80	; 0x50
 8009e62:	d00a      	beq.n	8009e7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	61bb      	str	r3, [r7, #24]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00d      	beq.n	8009ea2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	4613      	mov	r3, r2
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 f83f 	bl	8009f20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3730      	adds	r7, #48	; 0x30
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	; 0x28
 8009eb0:	af02      	add	r7, sp, #8
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10a      	bne.n	8009ed6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	613b      	str	r3, [r7, #16]
}
 8009ed2:	bf00      	nop
 8009ed4:	e7fe      	b.n	8009ed4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	fb02 f303 	mul.w	r3, r2, r3
 8009ede:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	3350      	adds	r3, #80	; 0x50
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f002 fccf 	bl	800c888 <pvPortMalloc>
 8009eea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d011      	beq.n	8009f16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	3350      	adds	r3, #80	; 0x50
 8009efa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f04:	79fa      	ldrb	r2, [r7, #7]
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	68b9      	ldr	r1, [r7, #8]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f805 	bl	8009f20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f16:	69bb      	ldr	r3, [r7, #24]
	}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d103      	bne.n	8009f3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	e002      	b.n	8009f42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f4e:	2101      	movs	r1, #1
 8009f50:	69b8      	ldr	r0, [r7, #24]
 8009f52:	f7ff fecb 	bl	8009cec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	78fa      	ldrb	r2, [r7, #3]
 8009f5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b08a      	sub	sp, #40	; 0x28
 8009f6a:	af02      	add	r7, sp, #8
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	61bb      	str	r3, [r7, #24]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d90a      	bls.n	8009fac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	617b      	str	r3, [r7, #20]
}
 8009fa8:	bf00      	nop
 8009faa:	e7fe      	b.n	8009faa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009fac:	2302      	movs	r3, #2
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff ff00 	bl	8009dbc <xQueueGenericCreateStatic>
 8009fbc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009fca:	69fb      	ldr	r3, [r7, #28]
	}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	613b      	str	r3, [r7, #16]
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d90a      	bls.n	800a018 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60fb      	str	r3, [r7, #12]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a018:	2202      	movs	r2, #2
 800a01a:	2100      	movs	r1, #0
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff ff45 	bl	8009eac <xQueueGenericCreate>
 800a022:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a030:	697b      	ldr	r3, [r7, #20]
	}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
	...

0800a03c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08e      	sub	sp, #56	; 0x38
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a04a:	2300      	movs	r3, #0
 800a04c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xQueueGenericSend+0x32>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d103      	bne.n	800a07c <xQueueGenericSend+0x40>
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <xQueueGenericSend+0x44>
 800a07c:	2301      	movs	r3, #1
 800a07e:	e000      	b.n	800a082 <xQueueGenericSend+0x46>
 800a080:	2300      	movs	r3, #0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10a      	bne.n	800a09c <xQueueGenericSend+0x60>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d103      	bne.n	800a0aa <xQueueGenericSend+0x6e>
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <xQueueGenericSend+0x72>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <xQueueGenericSend+0x74>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <xQueueGenericSend+0x8e>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	623b      	str	r3, [r7, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0ca:	f001 fc65 	bl	800b998 <xTaskGetSchedulerState>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <xQueueGenericSend+0x9e>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <xQueueGenericSend+0xa2>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <xQueueGenericSend+0xa4>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <xQueueGenericSend+0xbe>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	61fb      	str	r3, [r7, #28]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0fa:	f002 faa3 	bl	800c644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a106:	429a      	cmp	r2, r3
 800a108:	d302      	bcc.n	800a110 <xQueueGenericSend+0xd4>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d129      	bne.n	800a164 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a116:	f000 fc5e 	bl	800a9d6 <prvCopyDataToQueue>
 800a11a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	d010      	beq.n	800a146 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	3324      	adds	r3, #36	; 0x24
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 fa73 	bl	800b614 <xTaskRemoveFromEventList>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d013      	beq.n	800a15c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a134:	4b3f      	ldr	r3, [pc, #252]	; (800a234 <xQueueGenericSend+0x1f8>)
 800a136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	e00a      	b.n	800a15c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d007      	beq.n	800a15c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a14c:	4b39      	ldr	r3, [pc, #228]	; (800a234 <xQueueGenericSend+0x1f8>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a15c:	f002 faa2 	bl	800c6a4 <vPortExitCritical>
				return pdPASS;
 800a160:	2301      	movs	r3, #1
 800a162:	e063      	b.n	800a22c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d103      	bne.n	800a172 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a16a:	f002 fa9b 	bl	800c6a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	e05c      	b.n	800a22c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a174:	2b00      	cmp	r3, #0
 800a176:	d106      	bne.n	800a186 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a178:	f107 0314 	add.w	r3, r7, #20
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 faad 	bl	800b6dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a182:	2301      	movs	r3, #1
 800a184:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a186:	f002 fa8d 	bl	800c6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a18a:	f001 f819 	bl	800b1c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a18e:	f002 fa59 	bl	800c644 <vPortEnterCritical>
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a198:	b25b      	sxtb	r3, r3
 800a19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19e:	d103      	bne.n	800a1a8 <xQueueGenericSend+0x16c>
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ae:	b25b      	sxtb	r3, r3
 800a1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b4:	d103      	bne.n	800a1be <xQueueGenericSend+0x182>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1be:	f002 fa71 	bl	800c6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1c2:	1d3a      	adds	r2, r7, #4
 800a1c4:	f107 0314 	add.w	r3, r7, #20
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f001 fa9c 	bl	800b708 <xTaskCheckForTimeOut>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d124      	bne.n	800a220 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d8:	f000 fcf5 	bl	800abc6 <prvIsQueueFull>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d018      	beq.n	800a214 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	3310      	adds	r3, #16
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f001 f9c2 	bl	800b574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1f2:	f000 fc80 	bl	800aaf6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1f6:	f000 fff1 	bl	800b1dc <xTaskResumeAll>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f47f af7c 	bne.w	800a0fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a202:	4b0c      	ldr	r3, [pc, #48]	; (800a234 <xQueueGenericSend+0x1f8>)
 800a204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a208:	601a      	str	r2, [r3, #0]
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	e772      	b.n	800a0fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a216:	f000 fc6e 	bl	800aaf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a21a:	f000 ffdf 	bl	800b1dc <xTaskResumeAll>
 800a21e:	e76c      	b.n	800a0fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a222:	f000 fc68 	bl	800aaf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a226:	f000 ffd9 	bl	800b1dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a22a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3738      	adds	r7, #56	; 0x38
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	e000ed04 	.word	0xe000ed04

0800a238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b090      	sub	sp, #64	; 0x40
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10a      	bne.n	800a266 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a262:	bf00      	nop
 800a264:	e7fe      	b.n	800a264 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d103      	bne.n	800a274 <xQueueGenericSendFromISR+0x3c>
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <xQueueGenericSendFromISR+0x40>
 800a274:	2301      	movs	r3, #1
 800a276:	e000      	b.n	800a27a <xQueueGenericSendFromISR+0x42>
 800a278:	2300      	movs	r3, #0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10a      	bne.n	800a294 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a290:	bf00      	nop
 800a292:	e7fe      	b.n	800a292 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2b02      	cmp	r3, #2
 800a298:	d103      	bne.n	800a2a2 <xQueueGenericSendFromISR+0x6a>
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <xQueueGenericSendFromISR+0x6e>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e000      	b.n	800a2a8 <xQueueGenericSendFromISR+0x70>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	623b      	str	r3, [r7, #32]
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2c2:	f002 faa1 	bl	800c808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2c6:	f3ef 8211 	mrs	r2, BASEPRI
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	61fa      	str	r2, [r7, #28]
 800a2dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d302      	bcc.n	800a2f4 <xQueueGenericSendFromISR+0xbc>
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d12f      	bne.n	800a354 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a30a:	f000 fb64 	bl	800a9d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a30e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a316:	d112      	bne.n	800a33e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d016      	beq.n	800a34e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	3324      	adds	r3, #36	; 0x24
 800a324:	4618      	mov	r0, r3
 800a326:	f001 f975 	bl	800b614 <xTaskRemoveFromEventList>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00e      	beq.n	800a34e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00b      	beq.n	800a34e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	e007      	b.n	800a34e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a33e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a342:	3301      	adds	r3, #1
 800a344:	b2db      	uxtb	r3, r3
 800a346:	b25a      	sxtb	r2, r3
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a34e:	2301      	movs	r3, #1
 800a350:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a352:	e001      	b.n	800a358 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a354:	2300      	movs	r3, #0
 800a356:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a362:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a366:	4618      	mov	r0, r3
 800a368:	3740      	adds	r7, #64	; 0x40
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b08e      	sub	sp, #56	; 0x38
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10a      	bne.n	800a398 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	623b      	str	r3, [r7, #32]
}
 800a394:	bf00      	nop
 800a396:	e7fe      	b.n	800a396 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00a      	beq.n	800a3b6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	61fb      	str	r3, [r7, #28]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d103      	bne.n	800a3c6 <xQueueGiveFromISR+0x58>
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <xQueueGiveFromISR+0x5c>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e000      	b.n	800a3cc <xQueueGiveFromISR+0x5e>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10a      	bne.n	800a3e6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	61bb      	str	r3, [r7, #24]
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3e6:	f002 fa0f 	bl	800c808 <vPortValidateInterruptPriority>
	__asm volatile
 800a3ea:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	617a      	str	r2, [r7, #20]
 800a400:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a402:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a404:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a412:	429a      	cmp	r2, r3
 800a414:	d22b      	bcs.n	800a46e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a428:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a430:	d112      	bne.n	800a458 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b00      	cmp	r3, #0
 800a438:	d016      	beq.n	800a468 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	3324      	adds	r3, #36	; 0x24
 800a43e:	4618      	mov	r0, r3
 800a440:	f001 f8e8 	bl	800b614 <xTaskRemoveFromEventList>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00e      	beq.n	800a468 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00b      	beq.n	800a468 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2201      	movs	r2, #1
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	e007      	b.n	800a468 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a45c:	3301      	adds	r3, #1
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	b25a      	sxtb	r2, r3
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a468:	2301      	movs	r3, #1
 800a46a:	637b      	str	r3, [r7, #52]	; 0x34
 800a46c:	e001      	b.n	800a472 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a46e:	2300      	movs	r3, #0
 800a470:	637b      	str	r3, [r7, #52]	; 0x34
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f383 8811 	msr	BASEPRI, r3
}
 800a47c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a480:	4618      	mov	r0, r3
 800a482:	3738      	adds	r7, #56	; 0x38
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08c      	sub	sp, #48	; 0x30
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a494:	2300      	movs	r3, #0
 800a496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <xQueueReceive+0x30>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	623b      	str	r3, [r7, #32]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d103      	bne.n	800a4c6 <xQueueReceive+0x3e>
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <xQueueReceive+0x42>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e000      	b.n	800a4cc <xQueueReceive+0x44>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10a      	bne.n	800a4e6 <xQueueReceive+0x5e>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	61fb      	str	r3, [r7, #28]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4e6:	f001 fa57 	bl	800b998 <xTaskGetSchedulerState>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d102      	bne.n	800a4f6 <xQueueReceive+0x6e>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <xQueueReceive+0x72>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e000      	b.n	800a4fc <xQueueReceive+0x74>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10a      	bne.n	800a516 <xQueueReceive+0x8e>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	61bb      	str	r3, [r7, #24]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a516:	f002 f895 	bl	800c644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01f      	beq.n	800a566 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a526:	68b9      	ldr	r1, [r7, #8]
 800a528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52a:	f000 fabe 	bl	800aaaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	1e5a      	subs	r2, r3, #1
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00f      	beq.n	800a55e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	3310      	adds	r3, #16
 800a542:	4618      	mov	r0, r3
 800a544:	f001 f866 	bl	800b614 <xTaskRemoveFromEventList>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d007      	beq.n	800a55e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a54e:	4b3d      	ldr	r3, [pc, #244]	; (800a644 <xQueueReceive+0x1bc>)
 800a550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a55e:	f002 f8a1 	bl	800c6a4 <vPortExitCritical>
				return pdPASS;
 800a562:	2301      	movs	r3, #1
 800a564:	e069      	b.n	800a63a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a56c:	f002 f89a 	bl	800c6a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a570:	2300      	movs	r3, #0
 800a572:	e062      	b.n	800a63a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	2b00      	cmp	r3, #0
 800a578:	d106      	bne.n	800a588 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a57a:	f107 0310 	add.w	r3, r7, #16
 800a57e:	4618      	mov	r0, r3
 800a580:	f001 f8ac 	bl	800b6dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a584:	2301      	movs	r3, #1
 800a586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a588:	f002 f88c 	bl	800c6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a58c:	f000 fe18 	bl	800b1c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a590:	f002 f858 	bl	800c644 <vPortEnterCritical>
 800a594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a59a:	b25b      	sxtb	r3, r3
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a0:	d103      	bne.n	800a5aa <xQueueReceive+0x122>
 800a5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5b0:	b25b      	sxtb	r3, r3
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b6:	d103      	bne.n	800a5c0 <xQueueReceive+0x138>
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5c0:	f002 f870 	bl	800c6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5c4:	1d3a      	adds	r2, r7, #4
 800a5c6:	f107 0310 	add.w	r3, r7, #16
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 f89b 	bl	800b708 <xTaskCheckForTimeOut>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d123      	bne.n	800a620 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5da:	f000 fade 	bl	800ab9a <prvIsQueueEmpty>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d017      	beq.n	800a614 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	3324      	adds	r3, #36	; 0x24
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 ffc1 	bl	800b574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f4:	f000 fa7f 	bl	800aaf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5f8:	f000 fdf0 	bl	800b1dc <xTaskResumeAll>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d189      	bne.n	800a516 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a602:	4b10      	ldr	r3, [pc, #64]	; (800a644 <xQueueReceive+0x1bc>)
 800a604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	e780      	b.n	800a516 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a616:	f000 fa6e 	bl	800aaf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a61a:	f000 fddf 	bl	800b1dc <xTaskResumeAll>
 800a61e:	e77a      	b.n	800a516 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a622:	f000 fa68 	bl	800aaf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a626:	f000 fdd9 	bl	800b1dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a62a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a62c:	f000 fab5 	bl	800ab9a <prvIsQueueEmpty>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	f43f af6f 	beq.w	800a516 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3730      	adds	r7, #48	; 0x30
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	e000ed04 	.word	0xe000ed04

0800a648 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08e      	sub	sp, #56	; 0x38
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a652:	2300      	movs	r3, #0
 800a654:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	623b      	str	r3, [r7, #32]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	61fb      	str	r3, [r7, #28]
}
 800a694:	bf00      	nop
 800a696:	e7fe      	b.n	800a696 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a698:	f001 f97e 	bl	800b998 <xTaskGetSchedulerState>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <xQueueSemaphoreTake+0x60>
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <xQueueSemaphoreTake+0x64>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e000      	b.n	800a6ae <xQueueSemaphoreTake+0x66>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10a      	bne.n	800a6c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	61bb      	str	r3, [r7, #24]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6c8:	f001 ffbc 	bl	800c644 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d024      	beq.n	800a722 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	1e5a      	subs	r2, r3, #1
 800a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d104      	bne.n	800a6f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a6e8:	f001 facc 	bl	800bc84 <pvTaskIncrementMutexHeldCount>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00f      	beq.n	800a71a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fc:	3310      	adds	r3, #16
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 ff88 	bl	800b614 <xTaskRemoveFromEventList>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d007      	beq.n	800a71a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a70a:	4b54      	ldr	r3, [pc, #336]	; (800a85c <xQueueSemaphoreTake+0x214>)
 800a70c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a71a:	f001 ffc3 	bl	800c6a4 <vPortExitCritical>
				return pdPASS;
 800a71e:	2301      	movs	r3, #1
 800a720:	e097      	b.n	800a852 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d111      	bne.n	800a74c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	617b      	str	r3, [r7, #20]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a744:	f001 ffae 	bl	800c6a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a748:	2300      	movs	r3, #0
 800a74a:	e082      	b.n	800a852 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	4618      	mov	r0, r3
 800a758:	f000 ffc0 	bl	800b6dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a75c:	2301      	movs	r3, #1
 800a75e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a760:	f001 ffa0 	bl	800c6a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a764:	f000 fd2c 	bl	800b1c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a768:	f001 ff6c 	bl	800c644 <vPortEnterCritical>
 800a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a772:	b25b      	sxtb	r3, r3
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a778:	d103      	bne.n	800a782 <xQueueSemaphoreTake+0x13a>
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a788:	b25b      	sxtb	r3, r3
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78e:	d103      	bne.n	800a798 <xQueueSemaphoreTake+0x150>
 800a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a798:	f001 ff84 	bl	800c6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a79c:	463a      	mov	r2, r7
 800a79e:	f107 030c 	add.w	r3, r7, #12
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 ffaf 	bl	800b708 <xTaskCheckForTimeOut>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d132      	bne.n	800a816 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7b2:	f000 f9f2 	bl	800ab9a <prvIsQueueEmpty>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d026      	beq.n	800a80a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d109      	bne.n	800a7d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a7c4:	f001 ff3e 	bl	800c644 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f001 f901 	bl	800b9d4 <xTaskPriorityInherit>
 800a7d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a7d4:	f001 ff66 	bl	800c6a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	3324      	adds	r3, #36	; 0x24
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	4611      	mov	r1, r2
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fec7 	bl	800b574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7e8:	f000 f985 	bl	800aaf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7ec:	f000 fcf6 	bl	800b1dc <xTaskResumeAll>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f47f af68 	bne.w	800a6c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a7f8:	4b18      	ldr	r3, [pc, #96]	; (800a85c <xQueueSemaphoreTake+0x214>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	e75e      	b.n	800a6c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a80a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a80c:	f000 f973 	bl	800aaf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a810:	f000 fce4 	bl	800b1dc <xTaskResumeAll>
 800a814:	e758      	b.n	800a6c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a818:	f000 f96d 	bl	800aaf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a81c:	f000 fcde 	bl	800b1dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a822:	f000 f9ba 	bl	800ab9a <prvIsQueueEmpty>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f43f af4d 	beq.w	800a6c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00d      	beq.n	800a850 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a834:	f001 ff06 	bl	800c644 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a83a:	f000 f8b4 	bl	800a9a6 <prvGetDisinheritPriorityAfterTimeout>
 800a83e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a846:	4618      	mov	r0, r3
 800a848:	f001 f99a 	bl	800bb80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a84c:	f001 ff2a 	bl	800c6a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a852:	4618      	mov	r0, r3
 800a854:	3738      	adds	r7, #56	; 0x38
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	e000ed04 	.word	0xe000ed04

0800a860 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08e      	sub	sp, #56	; 0x38
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10a      	bne.n	800a88c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	623b      	str	r3, [r7, #32]
}
 800a888:	bf00      	nop
 800a88a:	e7fe      	b.n	800a88a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <xQueueReceiveFromISR+0x3a>
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <xQueueReceiveFromISR+0x3e>
 800a89a:	2301      	movs	r3, #1
 800a89c:	e000      	b.n	800a8a0 <xQueueReceiveFromISR+0x40>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	61fb      	str	r3, [r7, #28]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8ba:	f001 ffa5 	bl	800c808 <vPortValidateInterruptPriority>
	__asm volatile
 800a8be:	f3ef 8211 	mrs	r2, BASEPRI
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	61ba      	str	r2, [r7, #24]
 800a8d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a8d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d02f      	beq.n	800a946 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8f4:	f000 f8d9 	bl	800aaaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	1e5a      	subs	r2, r3, #1
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a908:	d112      	bne.n	800a930 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d016      	beq.n	800a940 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	3310      	adds	r3, #16
 800a916:	4618      	mov	r0, r3
 800a918:	f000 fe7c 	bl	800b614 <xTaskRemoveFromEventList>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00e      	beq.n	800a940 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00b      	beq.n	800a940 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	e007      	b.n	800a940 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a934:	3301      	adds	r3, #1
 800a936:	b2db      	uxtb	r3, r3
 800a938:	b25a      	sxtb	r2, r3
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a940:	2301      	movs	r3, #1
 800a942:	637b      	str	r3, [r7, #52]	; 0x34
 800a944:	e001      	b.n	800a94a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a946:	2300      	movs	r3, #0
 800a948:	637b      	str	r3, [r7, #52]	; 0x34
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f383 8811 	msr	BASEPRI, r3
}
 800a954:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3738      	adds	r7, #56	; 0x38
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <vQueueDelete+0x28>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	60bb      	str	r3, [r7, #8]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f95f 	bl	800ac4c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a994:	2b00      	cmp	r3, #0
 800a996:	d102      	bne.n	800a99e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f002 f841 	bl	800ca20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a99e:	bf00      	nop
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d006      	beq.n	800a9c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a9c0:	60fb      	str	r3, [r7, #12]
 800a9c2:	e001      	b.n	800a9c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
	}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b086      	sub	sp, #24
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	60b9      	str	r1, [r7, #8]
 800a9e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10d      	bne.n	800aa10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d14d      	bne.n	800aa98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 f84f 	bl	800baa4 <xTaskPriorityDisinherit>
 800aa06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	609a      	str	r2, [r3, #8]
 800aa0e:	e043      	b.n	800aa98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d119      	bne.n	800aa4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6858      	ldr	r0, [r3, #4]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1e:	461a      	mov	r2, r3
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	f002 f99f 	bl	800cd64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	685a      	ldr	r2, [r3, #4]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2e:	441a      	add	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d32b      	bcc.n	800aa98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	605a      	str	r2, [r3, #4]
 800aa48:	e026      	b.n	800aa98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	68d8      	ldr	r0, [r3, #12]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa52:	461a      	mov	r2, r3
 800aa54:	68b9      	ldr	r1, [r7, #8]
 800aa56:	f002 f985 	bl	800cd64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa62:	425b      	negs	r3, r3
 800aa64:	441a      	add	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d207      	bcs.n	800aa86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	425b      	negs	r3, r3
 800aa80:	441a      	add	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d105      	bne.n	800aa98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aaa0:	697b      	ldr	r3, [r7, #20]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d018      	beq.n	800aaee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68da      	ldr	r2, [r3, #12]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac4:	441a      	add	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68da      	ldr	r2, [r3, #12]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d303      	bcc.n	800aade <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68d9      	ldr	r1, [r3, #12]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	461a      	mov	r2, r3
 800aae8:	6838      	ldr	r0, [r7, #0]
 800aaea:	f002 f93b 	bl	800cd64 <memcpy>
	}
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b084      	sub	sp, #16
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aafe:	f001 fda1 	bl	800c644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab0a:	e011      	b.n	800ab30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d012      	beq.n	800ab3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3324      	adds	r3, #36	; 0x24
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 fd7b 	bl	800b614 <xTaskRemoveFromEventList>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab24:	f000 fe52 	bl	800b7cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	dce9      	bgt.n	800ab0c <prvUnlockQueue+0x16>
 800ab38:	e000      	b.n	800ab3c <prvUnlockQueue+0x46>
					break;
 800ab3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	22ff      	movs	r2, #255	; 0xff
 800ab40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab44:	f001 fdae 	bl	800c6a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab48:	f001 fd7c 	bl	800c644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab54:	e011      	b.n	800ab7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d012      	beq.n	800ab84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3310      	adds	r3, #16
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 fd56 	bl	800b614 <xTaskRemoveFromEventList>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab6e:	f000 fe2d 	bl	800b7cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab72:	7bbb      	ldrb	r3, [r7, #14]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	dce9      	bgt.n	800ab56 <prvUnlockQueue+0x60>
 800ab82:	e000      	b.n	800ab86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	22ff      	movs	r2, #255	; 0xff
 800ab8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab8e:	f001 fd89 	bl	800c6a4 <vPortExitCritical>
}
 800ab92:	bf00      	nop
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b084      	sub	sp, #16
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aba2:	f001 fd4f 	bl	800c644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d102      	bne.n	800abb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abae:	2301      	movs	r3, #1
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	e001      	b.n	800abb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abb4:	2300      	movs	r3, #0
 800abb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abb8:	f001 fd74 	bl	800c6a4 <vPortExitCritical>

	return xReturn;
 800abbc:	68fb      	ldr	r3, [r7, #12]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abce:	f001 fd39 	bl	800c644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abda:	429a      	cmp	r2, r3
 800abdc:	d102      	bne.n	800abe4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abde:	2301      	movs	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	e001      	b.n	800abe8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abe8:	f001 fd5c 	bl	800c6a4 <vPortExitCritical>

	return xReturn;
 800abec:	68fb      	ldr	r3, [r7, #12]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
	...

0800abf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac02:	2300      	movs	r3, #0
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	e014      	b.n	800ac32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac08:	4a0f      	ldr	r2, [pc, #60]	; (800ac48 <vQueueAddToRegistry+0x50>)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10b      	bne.n	800ac2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac14:	490c      	ldr	r1, [pc, #48]	; (800ac48 <vQueueAddToRegistry+0x50>)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac1e:	4a0a      	ldr	r2, [pc, #40]	; (800ac48 <vQueueAddToRegistry+0x50>)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	4413      	add	r3, r2
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac2a:	e006      	b.n	800ac3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	60fb      	str	r3, [r7, #12]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b07      	cmp	r3, #7
 800ac36:	d9e7      	bls.n	800ac08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac38:	bf00      	nop
 800ac3a:	bf00      	nop
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000aa0 	.word	0x20000aa0

0800ac4c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac54:	2300      	movs	r3, #0
 800ac56:	60fb      	str	r3, [r7, #12]
 800ac58:	e016      	b.n	800ac88 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ac5a:	4a10      	ldr	r2, [pc, #64]	; (800ac9c <vQueueUnregisterQueue+0x50>)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	4413      	add	r3, r2
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d10b      	bne.n	800ac82 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ac6a:	4a0c      	ldr	r2, [pc, #48]	; (800ac9c <vQueueUnregisterQueue+0x50>)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2100      	movs	r1, #0
 800ac70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ac74:	4a09      	ldr	r2, [pc, #36]	; (800ac9c <vQueueUnregisterQueue+0x50>)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	00db      	lsls	r3, r3, #3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	605a      	str	r2, [r3, #4]
				break;
 800ac80:	e006      	b.n	800ac90 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3301      	adds	r3, #1
 800ac86:	60fb      	str	r3, [r7, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b07      	cmp	r3, #7
 800ac8c:	d9e5      	bls.n	800ac5a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	20000aa0 	.word	0x20000aa0

0800aca0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800acb0:	f001 fcc8 	bl	800c644 <vPortEnterCritical>
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acba:	b25b      	sxtb	r3, r3
 800acbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc0:	d103      	bne.n	800acca <vQueueWaitForMessageRestricted+0x2a>
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acd0:	b25b      	sxtb	r3, r3
 800acd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd6:	d103      	bne.n	800ace0 <vQueueWaitForMessageRestricted+0x40>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ace0:	f001 fce0 	bl	800c6a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d106      	bne.n	800acfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	3324      	adds	r3, #36	; 0x24
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 fc61 	bl	800b5bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800acfa:	6978      	ldr	r0, [r7, #20]
 800acfc:	f7ff fefb 	bl	800aaf6 <prvUnlockQueue>
	}
 800ad00:	bf00      	nop
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08e      	sub	sp, #56	; 0x38
 800ad0c:	af04      	add	r7, sp, #16
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10a      	bne.n	800ad32 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	623b      	str	r3, [r7, #32]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <xTaskCreateStatic+0x46>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	61fb      	str	r3, [r7, #28]
}
 800ad4a:	bf00      	nop
 800ad4c:	e7fe      	b.n	800ad4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad4e:	23a8      	movs	r3, #168	; 0xa8
 800ad50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2ba8      	cmp	r3, #168	; 0xa8
 800ad56:	d00a      	beq.n	800ad6e <xTaskCreateStatic+0x66>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	61bb      	str	r3, [r7, #24]
}
 800ad6a:	bf00      	nop
 800ad6c:	e7fe      	b.n	800ad6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d01e      	beq.n	800adb4 <xTaskCreateStatic+0xac>
 800ad76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d01b      	beq.n	800adb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	2202      	movs	r2, #2
 800ad8a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad8e:	2300      	movs	r3, #0
 800ad90:	9303      	str	r3, [sp, #12]
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	9302      	str	r3, [sp, #8]
 800ad96:	f107 0314 	add.w	r3, r7, #20
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	68b9      	ldr	r1, [r7, #8]
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f850 	bl	800ae4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adae:	f000 f8f3 	bl	800af98 <prvAddNewTaskToReadyList>
 800adb2:	e001      	b.n	800adb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800adb4:	2300      	movs	r3, #0
 800adb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800adb8:	697b      	ldr	r3, [r7, #20]
	}
 800adba:	4618      	mov	r0, r3
 800adbc:	3728      	adds	r7, #40	; 0x28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b08c      	sub	sp, #48	; 0x30
 800adc6:	af04      	add	r7, sp, #16
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	603b      	str	r3, [r7, #0]
 800adce:	4613      	mov	r3, r2
 800add0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4618      	mov	r0, r3
 800add8:	f001 fd56 	bl	800c888 <pvPortMalloc>
 800addc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00e      	beq.n	800ae02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ade4:	20a8      	movs	r0, #168	; 0xa8
 800ade6:	f001 fd4f 	bl	800c888 <pvPortMalloc>
 800adea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	631a      	str	r2, [r3, #48]	; 0x30
 800adf8:	e005      	b.n	800ae06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800adfa:	6978      	ldr	r0, [r7, #20]
 800adfc:	f001 fe10 	bl	800ca20 <vPortFree>
 800ae00:	e001      	b.n	800ae06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d017      	beq.n	800ae3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae14:	88fa      	ldrh	r2, [r7, #6]
 800ae16:	2300      	movs	r3, #0
 800ae18:	9303      	str	r3, [sp, #12]
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	9302      	str	r3, [sp, #8]
 800ae1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae20:	9301      	str	r3, [sp, #4]
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68b9      	ldr	r1, [r7, #8]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 f80e 	bl	800ae4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae30:	69f8      	ldr	r0, [r7, #28]
 800ae32:	f000 f8b1 	bl	800af98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae36:	2301      	movs	r3, #1
 800ae38:	61bb      	str	r3, [r7, #24]
 800ae3a:	e002      	b.n	800ae42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae42:	69bb      	ldr	r3, [r7, #24]
	}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3720      	adds	r7, #32
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	461a      	mov	r2, r3
 800ae64:	21a5      	movs	r1, #165	; 0xa5
 800ae66:	f001 fef9 	bl	800cc5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae74:	3b01      	subs	r3, #1
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	f023 0307 	bic.w	r3, r3, #7
 800ae82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	617b      	str	r3, [r7, #20]
}
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d01f      	beq.n	800aeea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61fb      	str	r3, [r7, #28]
 800aeae:	e012      	b.n	800aed6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	7819      	ldrb	r1, [r3, #0]
 800aeb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	4413      	add	r3, r2
 800aebe:	3334      	adds	r3, #52	; 0x34
 800aec0:	460a      	mov	r2, r1
 800aec2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	3301      	adds	r3, #1
 800aed4:	61fb      	str	r3, [r7, #28]
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	2b0f      	cmp	r3, #15
 800aeda:	d9e9      	bls.n	800aeb0 <prvInitialiseNewTask+0x64>
 800aedc:	e000      	b.n	800aee0 <prvInitialiseNewTask+0x94>
			{
				break;
 800aede:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aee8:	e003      	b.n	800aef2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	2b37      	cmp	r3, #55	; 0x37
 800aef6:	d901      	bls.n	800aefc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aef8:	2337      	movs	r3, #55	; 0x37
 800aefa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	2200      	movs	r2, #0
 800af0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	3304      	adds	r3, #4
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe fe56 	bl	8009bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	3318      	adds	r3, #24
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fe fe51 	bl	8009bc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	2200      	movs	r2, #0
 800af44:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	3354      	adds	r3, #84	; 0x54
 800af4c:	224c      	movs	r2, #76	; 0x4c
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f001 fe83 	bl	800cc5c <memset>
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	4a0c      	ldr	r2, [pc, #48]	; (800af8c <prvInitialiseNewTask+0x140>)
 800af5a:	659a      	str	r2, [r3, #88]	; 0x58
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	4a0c      	ldr	r2, [pc, #48]	; (800af90 <prvInitialiseNewTask+0x144>)
 800af60:	65da      	str	r2, [r3, #92]	; 0x5c
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	4a0b      	ldr	r2, [pc, #44]	; (800af94 <prvInitialiseNewTask+0x148>)
 800af66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	69b8      	ldr	r0, [r7, #24]
 800af6e:	f001 fa3f 	bl	800c3f0 <pxPortInitialiseStack>
 800af72:	4602      	mov	r2, r0
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af84:	bf00      	nop
 800af86:	3720      	adds	r7, #32
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	20002a60 	.word	0x20002a60
 800af90:	20002ac8 	.word	0x20002ac8
 800af94:	20002b30 	.word	0x20002b30

0800af98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afa0:	f001 fb50 	bl	800c644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afa4:	4b2d      	ldr	r3, [pc, #180]	; (800b05c <prvAddNewTaskToReadyList+0xc4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3301      	adds	r3, #1
 800afaa:	4a2c      	ldr	r2, [pc, #176]	; (800b05c <prvAddNewTaskToReadyList+0xc4>)
 800afac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afae:	4b2c      	ldr	r3, [pc, #176]	; (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d109      	bne.n	800afca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afb6:	4a2a      	ldr	r2, [pc, #168]	; (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afbc:	4b27      	ldr	r3, [pc, #156]	; (800b05c <prvAddNewTaskToReadyList+0xc4>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d110      	bne.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afc4:	f000 fc26 	bl	800b814 <prvInitialiseTaskLists>
 800afc8:	e00d      	b.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afca:	4b26      	ldr	r3, [pc, #152]	; (800b064 <prvAddNewTaskToReadyList+0xcc>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afd2:	4b23      	ldr	r3, [pc, #140]	; (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	429a      	cmp	r2, r3
 800afde:	d802      	bhi.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afe0:	4a1f      	ldr	r2, [pc, #124]	; (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afe6:	4b20      	ldr	r3, [pc, #128]	; (800b068 <prvAddNewTaskToReadyList+0xd0>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	4a1e      	ldr	r2, [pc, #120]	; (800b068 <prvAddNewTaskToReadyList+0xd0>)
 800afee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aff0:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <prvAddNewTaskToReadyList+0xd0>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affc:	4b1b      	ldr	r3, [pc, #108]	; (800b06c <prvAddNewTaskToReadyList+0xd4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d903      	bls.n	800b00c <prvAddNewTaskToReadyList+0x74>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b008:	4a18      	ldr	r2, [pc, #96]	; (800b06c <prvAddNewTaskToReadyList+0xd4>)
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4a15      	ldr	r2, [pc, #84]	; (800b070 <prvAddNewTaskToReadyList+0xd8>)
 800b01a:	441a      	add	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3304      	adds	r3, #4
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f7fe fddb 	bl	8009bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b028:	f001 fb3c 	bl	800c6a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b02c:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <prvAddNewTaskToReadyList+0xcc>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00e      	beq.n	800b052 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b034:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03e:	429a      	cmp	r2, r3
 800b040:	d207      	bcs.n	800b052 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b042:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <prvAddNewTaskToReadyList+0xdc>)
 800b044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000fb4 	.word	0x20000fb4
 800b060:	20000ae0 	.word	0x20000ae0
 800b064:	20000fc0 	.word	0x20000fc0
 800b068:	20000fd0 	.word	0x20000fd0
 800b06c:	20000fbc 	.word	0x20000fbc
 800b070:	20000ae4 	.word	0x20000ae4
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d017      	beq.n	800b0ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b08a:	4b13      	ldr	r3, [pc, #76]	; (800b0d8 <vTaskDelay+0x60>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <vTaskDelay+0x30>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60bb      	str	r3, [r7, #8]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b0a8:	f000 f88a 	bl	800b1c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fdfc 	bl	800bcac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0b4:	f000 f892 	bl	800b1dc <xTaskResumeAll>
 800b0b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d107      	bne.n	800b0d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b0c0:	4b06      	ldr	r3, [pc, #24]	; (800b0dc <vTaskDelay+0x64>)
 800b0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c6:	601a      	str	r2, [r3, #0]
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0d0:	bf00      	nop
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	20000fdc 	.word	0x20000fdc
 800b0dc:	e000ed04 	.word	0xe000ed04

0800b0e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08a      	sub	sp, #40	; 0x28
 800b0e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0ee:	463a      	mov	r2, r7
 800b0f0:	1d39      	adds	r1, r7, #4
 800b0f2:	f107 0308 	add.w	r3, r7, #8
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fe fd10 	bl	8009b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	9202      	str	r2, [sp, #8]
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	2300      	movs	r3, #0
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	2300      	movs	r3, #0
 800b10c:	460a      	mov	r2, r1
 800b10e:	4924      	ldr	r1, [pc, #144]	; (800b1a0 <vTaskStartScheduler+0xc0>)
 800b110:	4824      	ldr	r0, [pc, #144]	; (800b1a4 <vTaskStartScheduler+0xc4>)
 800b112:	f7ff fdf9 	bl	800ad08 <xTaskCreateStatic>
 800b116:	4603      	mov	r3, r0
 800b118:	4a23      	ldr	r2, [pc, #140]	; (800b1a8 <vTaskStartScheduler+0xc8>)
 800b11a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b11c:	4b22      	ldr	r3, [pc, #136]	; (800b1a8 <vTaskStartScheduler+0xc8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b124:	2301      	movs	r3, #1
 800b126:	617b      	str	r3, [r7, #20]
 800b128:	e001      	b.n	800b12e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d102      	bne.n	800b13a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b134:	f000 fe0e 	bl	800bd54 <xTimerCreateTimerTask>
 800b138:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d11b      	bne.n	800b178 <vTaskStartScheduler+0x98>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	613b      	str	r3, [r7, #16]
}
 800b152:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b154:	4b15      	ldr	r3, [pc, #84]	; (800b1ac <vTaskStartScheduler+0xcc>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3354      	adds	r3, #84	; 0x54
 800b15a:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <vTaskStartScheduler+0xd0>)
 800b15c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <vTaskStartScheduler+0xd4>)
 800b160:	f04f 32ff 	mov.w	r2, #4294967295
 800b164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b166:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <vTaskStartScheduler+0xd8>)
 800b168:	2201      	movs	r2, #1
 800b16a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b16c:	4b13      	ldr	r3, [pc, #76]	; (800b1bc <vTaskStartScheduler+0xdc>)
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b172:	f001 f9c5 	bl	800c500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b176:	e00e      	b.n	800b196 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17e:	d10a      	bne.n	800b196 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	60fb      	str	r3, [r7, #12]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <vTaskStartScheduler+0xb4>
}
 800b196:	bf00      	nop
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	0800cf78 	.word	0x0800cf78
 800b1a4:	0800b7e5 	.word	0x0800b7e5
 800b1a8:	20000fd8 	.word	0x20000fd8
 800b1ac:	20000ae0 	.word	0x20000ae0
 800b1b0:	2000005c 	.word	0x2000005c
 800b1b4:	20000fd4 	.word	0x20000fd4
 800b1b8:	20000fc0 	.word	0x20000fc0
 800b1bc:	20000fb8 	.word	0x20000fb8

0800b1c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1c4:	4b04      	ldr	r3, [pc, #16]	; (800b1d8 <vTaskSuspendAll+0x18>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	4a03      	ldr	r2, [pc, #12]	; (800b1d8 <vTaskSuspendAll+0x18>)
 800b1cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1ce:	bf00      	nop
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	20000fdc 	.word	0x20000fdc

0800b1dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1ea:	4b42      	ldr	r3, [pc, #264]	; (800b2f4 <xTaskResumeAll+0x118>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10a      	bne.n	800b208 <xTaskResumeAll+0x2c>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	603b      	str	r3, [r7, #0]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b208:	f001 fa1c 	bl	800c644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b20c:	4b39      	ldr	r3, [pc, #228]	; (800b2f4 <xTaskResumeAll+0x118>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3b01      	subs	r3, #1
 800b212:	4a38      	ldr	r2, [pc, #224]	; (800b2f4 <xTaskResumeAll+0x118>)
 800b214:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b216:	4b37      	ldr	r3, [pc, #220]	; (800b2f4 <xTaskResumeAll+0x118>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d162      	bne.n	800b2e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b21e:	4b36      	ldr	r3, [pc, #216]	; (800b2f8 <xTaskResumeAll+0x11c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d05e      	beq.n	800b2e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b226:	e02f      	b.n	800b288 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b228:	4b34      	ldr	r3, [pc, #208]	; (800b2fc <xTaskResumeAll+0x120>)
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3318      	adds	r3, #24
 800b234:	4618      	mov	r0, r3
 800b236:	f7fe fd2f 	bl	8009c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fd2a 	bl	8009c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4b2d      	ldr	r3, [pc, #180]	; (800b300 <xTaskResumeAll+0x124>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d903      	bls.n	800b258 <xTaskResumeAll+0x7c>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	4a2a      	ldr	r2, [pc, #168]	; (800b300 <xTaskResumeAll+0x124>)
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4a27      	ldr	r2, [pc, #156]	; (800b304 <xTaskResumeAll+0x128>)
 800b266:	441a      	add	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	f7fe fcb5 	bl	8009bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b278:	4b23      	ldr	r3, [pc, #140]	; (800b308 <xTaskResumeAll+0x12c>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27e:	429a      	cmp	r2, r3
 800b280:	d302      	bcc.n	800b288 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b282:	4b22      	ldr	r3, [pc, #136]	; (800b30c <xTaskResumeAll+0x130>)
 800b284:	2201      	movs	r2, #1
 800b286:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b288:	4b1c      	ldr	r3, [pc, #112]	; (800b2fc <xTaskResumeAll+0x120>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1cb      	bne.n	800b228 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b296:	f000 fb5f 	bl	800b958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b29a:	4b1d      	ldr	r3, [pc, #116]	; (800b310 <xTaskResumeAll+0x134>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d010      	beq.n	800b2c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2a6:	f000 f847 	bl	800b338 <xTaskIncrementTick>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2b0:	4b16      	ldr	r3, [pc, #88]	; (800b30c <xTaskResumeAll+0x130>)
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f1      	bne.n	800b2a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b2c2:	4b13      	ldr	r3, [pc, #76]	; (800b310 <xTaskResumeAll+0x134>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2c8:	4b10      	ldr	r3, [pc, #64]	; (800b30c <xTaskResumeAll+0x130>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d009      	beq.n	800b2e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <xTaskResumeAll+0x138>)
 800b2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2e4:	f001 f9de 	bl	800c6a4 <vPortExitCritical>

	return xAlreadyYielded;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20000fdc 	.word	0x20000fdc
 800b2f8:	20000fb4 	.word	0x20000fb4
 800b2fc:	20000f74 	.word	0x20000f74
 800b300:	20000fbc 	.word	0x20000fbc
 800b304:	20000ae4 	.word	0x20000ae4
 800b308:	20000ae0 	.word	0x20000ae0
 800b30c:	20000fc8 	.word	0x20000fc8
 800b310:	20000fc4 	.word	0x20000fc4
 800b314:	e000ed04 	.word	0xe000ed04

0800b318 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b31e:	4b05      	ldr	r3, [pc, #20]	; (800b334 <xTaskGetTickCount+0x1c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b324:	687b      	ldr	r3, [r7, #4]
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	20000fb8 	.word	0x20000fb8

0800b338 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b33e:	2300      	movs	r3, #0
 800b340:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b342:	4b4f      	ldr	r3, [pc, #316]	; (800b480 <xTaskIncrementTick+0x148>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	f040 808f 	bne.w	800b46a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b34c:	4b4d      	ldr	r3, [pc, #308]	; (800b484 <xTaskIncrementTick+0x14c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3301      	adds	r3, #1
 800b352:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b354:	4a4b      	ldr	r2, [pc, #300]	; (800b484 <xTaskIncrementTick+0x14c>)
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d120      	bne.n	800b3a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b360:	4b49      	ldr	r3, [pc, #292]	; (800b488 <xTaskIncrementTick+0x150>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00a      	beq.n	800b380 <xTaskIncrementTick+0x48>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	603b      	str	r3, [r7, #0]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <xTaskIncrementTick+0x46>
 800b380:	4b41      	ldr	r3, [pc, #260]	; (800b488 <xTaskIncrementTick+0x150>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60fb      	str	r3, [r7, #12]
 800b386:	4b41      	ldr	r3, [pc, #260]	; (800b48c <xTaskIncrementTick+0x154>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a3f      	ldr	r2, [pc, #252]	; (800b488 <xTaskIncrementTick+0x150>)
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	4a3f      	ldr	r2, [pc, #252]	; (800b48c <xTaskIncrementTick+0x154>)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	4b3e      	ldr	r3, [pc, #248]	; (800b490 <xTaskIncrementTick+0x158>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	4a3d      	ldr	r2, [pc, #244]	; (800b490 <xTaskIncrementTick+0x158>)
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	f000 fadb 	bl	800b958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3a2:	4b3c      	ldr	r3, [pc, #240]	; (800b494 <xTaskIncrementTick+0x15c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d349      	bcc.n	800b440 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ac:	4b36      	ldr	r3, [pc, #216]	; (800b488 <xTaskIncrementTick+0x150>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d104      	bne.n	800b3c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b6:	4b37      	ldr	r3, [pc, #220]	; (800b494 <xTaskIncrementTick+0x15c>)
 800b3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3bc:	601a      	str	r2, [r3, #0]
					break;
 800b3be:	e03f      	b.n	800b440 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3c0:	4b31      	ldr	r3, [pc, #196]	; (800b488 <xTaskIncrementTick+0x150>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d203      	bcs.n	800b3e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3d8:	4a2e      	ldr	r2, [pc, #184]	; (800b494 <xTaskIncrementTick+0x15c>)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3de:	e02f      	b.n	800b440 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe fc57 	bl	8009c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d004      	beq.n	800b3fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	3318      	adds	r3, #24
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fc4e 	bl	8009c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b400:	4b25      	ldr	r3, [pc, #148]	; (800b498 <xTaskIncrementTick+0x160>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	429a      	cmp	r2, r3
 800b406:	d903      	bls.n	800b410 <xTaskIncrementTick+0xd8>
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	4a22      	ldr	r2, [pc, #136]	; (800b498 <xTaskIncrementTick+0x160>)
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b414:	4613      	mov	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4a1f      	ldr	r2, [pc, #124]	; (800b49c <xTaskIncrementTick+0x164>)
 800b41e:	441a      	add	r2, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	3304      	adds	r3, #4
 800b424:	4619      	mov	r1, r3
 800b426:	4610      	mov	r0, r2
 800b428:	f7fe fbd9 	bl	8009bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b430:	4b1b      	ldr	r3, [pc, #108]	; (800b4a0 <xTaskIncrementTick+0x168>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b436:	429a      	cmp	r2, r3
 800b438:	d3b8      	bcc.n	800b3ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b43a:	2301      	movs	r3, #1
 800b43c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b43e:	e7b5      	b.n	800b3ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b440:	4b17      	ldr	r3, [pc, #92]	; (800b4a0 <xTaskIncrementTick+0x168>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b446:	4915      	ldr	r1, [pc, #84]	; (800b49c <xTaskIncrementTick+0x164>)
 800b448:	4613      	mov	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	440b      	add	r3, r1
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d901      	bls.n	800b45c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b458:	2301      	movs	r3, #1
 800b45a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b45c:	4b11      	ldr	r3, [pc, #68]	; (800b4a4 <xTaskIncrementTick+0x16c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b464:	2301      	movs	r3, #1
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e004      	b.n	800b474 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b46a:	4b0f      	ldr	r3, [pc, #60]	; (800b4a8 <xTaskIncrementTick+0x170>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3301      	adds	r3, #1
 800b470:	4a0d      	ldr	r2, [pc, #52]	; (800b4a8 <xTaskIncrementTick+0x170>)
 800b472:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b474:	697b      	ldr	r3, [r7, #20]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000fdc 	.word	0x20000fdc
 800b484:	20000fb8 	.word	0x20000fb8
 800b488:	20000f6c 	.word	0x20000f6c
 800b48c:	20000f70 	.word	0x20000f70
 800b490:	20000fcc 	.word	0x20000fcc
 800b494:	20000fd4 	.word	0x20000fd4
 800b498:	20000fbc 	.word	0x20000fbc
 800b49c:	20000ae4 	.word	0x20000ae4
 800b4a0:	20000ae0 	.word	0x20000ae0
 800b4a4:	20000fc8 	.word	0x20000fc8
 800b4a8:	20000fc4 	.word	0x20000fc4

0800b4ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4b2:	4b2a      	ldr	r3, [pc, #168]	; (800b55c <vTaskSwitchContext+0xb0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4ba:	4b29      	ldr	r3, [pc, #164]	; (800b560 <vTaskSwitchContext+0xb4>)
 800b4bc:	2201      	movs	r2, #1
 800b4be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4c0:	e046      	b.n	800b550 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b4c2:	4b27      	ldr	r3, [pc, #156]	; (800b560 <vTaskSwitchContext+0xb4>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c8:	4b26      	ldr	r3, [pc, #152]	; (800b564 <vTaskSwitchContext+0xb8>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	60fb      	str	r3, [r7, #12]
 800b4ce:	e010      	b.n	800b4f2 <vTaskSwitchContext+0x46>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10a      	bne.n	800b4ec <vTaskSwitchContext+0x40>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	607b      	str	r3, [r7, #4]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <vTaskSwitchContext+0x3e>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	60fb      	str	r3, [r7, #12]
 800b4f2:	491d      	ldr	r1, [pc, #116]	; (800b568 <vTaskSwitchContext+0xbc>)
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	440b      	add	r3, r1
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0e4      	beq.n	800b4d0 <vTaskSwitchContext+0x24>
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4613      	mov	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4a15      	ldr	r2, [pc, #84]	; (800b568 <vTaskSwitchContext+0xbc>)
 800b512:	4413      	add	r3, r2
 800b514:	60bb      	str	r3, [r7, #8]
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	605a      	str	r2, [r3, #4]
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	3308      	adds	r3, #8
 800b528:	429a      	cmp	r2, r3
 800b52a:	d104      	bne.n	800b536 <vTaskSwitchContext+0x8a>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	685a      	ldr	r2, [r3, #4]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	605a      	str	r2, [r3, #4]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	4a0b      	ldr	r2, [pc, #44]	; (800b56c <vTaskSwitchContext+0xc0>)
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	4a08      	ldr	r2, [pc, #32]	; (800b564 <vTaskSwitchContext+0xb8>)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b546:	4b09      	ldr	r3, [pc, #36]	; (800b56c <vTaskSwitchContext+0xc0>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3354      	adds	r3, #84	; 0x54
 800b54c:	4a08      	ldr	r2, [pc, #32]	; (800b570 <vTaskSwitchContext+0xc4>)
 800b54e:	6013      	str	r3, [r2, #0]
}
 800b550:	bf00      	nop
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	20000fdc 	.word	0x20000fdc
 800b560:	20000fc8 	.word	0x20000fc8
 800b564:	20000fbc 	.word	0x20000fbc
 800b568:	20000ae4 	.word	0x20000ae4
 800b56c:	20000ae0 	.word	0x20000ae0
 800b570:	2000005c 	.word	0x2000005c

0800b574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10a      	bne.n	800b59a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	60fb      	str	r3, [r7, #12]
}
 800b596:	bf00      	nop
 800b598:	e7fe      	b.n	800b598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b59a:	4b07      	ldr	r3, [pc, #28]	; (800b5b8 <vTaskPlaceOnEventList+0x44>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3318      	adds	r3, #24
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7fe fb3f 	bl	8009c26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	6838      	ldr	r0, [r7, #0]
 800b5ac:	f000 fb7e 	bl	800bcac <prvAddCurrentTaskToDelayedList>
}
 800b5b0:	bf00      	nop
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20000ae0 	.word	0x20000ae0

0800b5bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10a      	bne.n	800b5e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	617b      	str	r3, [r7, #20]
}
 800b5e0:	bf00      	nop
 800b5e2:	e7fe      	b.n	800b5e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5e4:	4b0a      	ldr	r3, [pc, #40]	; (800b610 <vTaskPlaceOnEventListRestricted+0x54>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3318      	adds	r3, #24
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7fe faf6 	bl	8009bde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5fe:	6879      	ldr	r1, [r7, #4]
 800b600:	68b8      	ldr	r0, [r7, #8]
 800b602:	f000 fb53 	bl	800bcac <prvAddCurrentTaskToDelayedList>
	}
 800b606:	bf00      	nop
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20000ae0 	.word	0x20000ae0

0800b614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	60fb      	str	r3, [r7, #12]
}
 800b63c:	bf00      	nop
 800b63e:	e7fe      	b.n	800b63e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	3318      	adds	r3, #24
 800b644:	4618      	mov	r0, r3
 800b646:	f7fe fb27 	bl	8009c98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b64a:	4b1e      	ldr	r3, [pc, #120]	; (800b6c4 <xTaskRemoveFromEventList+0xb0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d11d      	bne.n	800b68e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	3304      	adds	r3, #4
 800b656:	4618      	mov	r0, r3
 800b658:	f7fe fb1e 	bl	8009c98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b660:	4b19      	ldr	r3, [pc, #100]	; (800b6c8 <xTaskRemoveFromEventList+0xb4>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d903      	bls.n	800b670 <xTaskRemoveFromEventList+0x5c>
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	4a16      	ldr	r2, [pc, #88]	; (800b6c8 <xTaskRemoveFromEventList+0xb4>)
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b674:	4613      	mov	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4a13      	ldr	r2, [pc, #76]	; (800b6cc <xTaskRemoveFromEventList+0xb8>)
 800b67e:	441a      	add	r2, r3
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	3304      	adds	r3, #4
 800b684:	4619      	mov	r1, r3
 800b686:	4610      	mov	r0, r2
 800b688:	f7fe faa9 	bl	8009bde <vListInsertEnd>
 800b68c:	e005      	b.n	800b69a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	3318      	adds	r3, #24
 800b692:	4619      	mov	r1, r3
 800b694:	480e      	ldr	r0, [pc, #56]	; (800b6d0 <xTaskRemoveFromEventList+0xbc>)
 800b696:	f7fe faa2 	bl	8009bde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69e:	4b0d      	ldr	r3, [pc, #52]	; (800b6d4 <xTaskRemoveFromEventList+0xc0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d905      	bls.n	800b6b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6ac:	4b0a      	ldr	r3, [pc, #40]	; (800b6d8 <xTaskRemoveFromEventList+0xc4>)
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	e001      	b.n	800b6b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6b8:	697b      	ldr	r3, [r7, #20]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20000fdc 	.word	0x20000fdc
 800b6c8:	20000fbc 	.word	0x20000fbc
 800b6cc:	20000ae4 	.word	0x20000ae4
 800b6d0:	20000f74 	.word	0x20000f74
 800b6d4:	20000ae0 	.word	0x20000ae0
 800b6d8:	20000fc8 	.word	0x20000fc8

0800b6dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6e4:	4b06      	ldr	r3, [pc, #24]	; (800b700 <vTaskInternalSetTimeOutState+0x24>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6ec:	4b05      	ldr	r3, [pc, #20]	; (800b704 <vTaskInternalSetTimeOutState+0x28>)
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	605a      	str	r2, [r3, #4]
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	20000fcc 	.word	0x20000fcc
 800b704:	20000fb8 	.word	0x20000fb8

0800b708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	613b      	str	r3, [r7, #16]
}
 800b72a:	bf00      	nop
 800b72c:	e7fe      	b.n	800b72c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10a      	bne.n	800b74a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	60fb      	str	r3, [r7, #12]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b74a:	f000 ff7b 	bl	800c644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b74e:	4b1d      	ldr	r3, [pc, #116]	; (800b7c4 <xTaskCheckForTimeOut+0xbc>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b766:	d102      	bne.n	800b76e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b768:	2300      	movs	r3, #0
 800b76a:	61fb      	str	r3, [r7, #28]
 800b76c:	e023      	b.n	800b7b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <xTaskCheckForTimeOut+0xc0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d007      	beq.n	800b78a <xTaskCheckForTimeOut+0x82>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	69ba      	ldr	r2, [r7, #24]
 800b780:	429a      	cmp	r2, r3
 800b782:	d302      	bcc.n	800b78a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b784:	2301      	movs	r3, #1
 800b786:	61fb      	str	r3, [r7, #28]
 800b788:	e015      	b.n	800b7b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	429a      	cmp	r2, r3
 800b792:	d20b      	bcs.n	800b7ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	1ad2      	subs	r2, r2, r3
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff ff9b 	bl	800b6dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	61fb      	str	r3, [r7, #28]
 800b7aa:	e004      	b.n	800b7b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7b6:	f000 ff75 	bl	800c6a4 <vPortExitCritical>

	return xReturn;
 800b7ba:	69fb      	ldr	r3, [r7, #28]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3720      	adds	r7, #32
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20000fb8 	.word	0x20000fb8
 800b7c8:	20000fcc 	.word	0x20000fcc

0800b7cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7d0:	4b03      	ldr	r3, [pc, #12]	; (800b7e0 <vTaskMissedYield+0x14>)
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]
}
 800b7d6:	bf00      	nop
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	20000fc8 	.word	0x20000fc8

0800b7e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7ec:	f000 f852 	bl	800b894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7f0:	4b06      	ldr	r3, [pc, #24]	; (800b80c <prvIdleTask+0x28>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d9f9      	bls.n	800b7ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7f8:	4b05      	ldr	r3, [pc, #20]	; (800b810 <prvIdleTask+0x2c>)
 800b7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b808:	e7f0      	b.n	800b7ec <prvIdleTask+0x8>
 800b80a:	bf00      	nop
 800b80c:	20000ae4 	.word	0x20000ae4
 800b810:	e000ed04 	.word	0xe000ed04

0800b814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b81a:	2300      	movs	r3, #0
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	e00c      	b.n	800b83a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4a12      	ldr	r2, [pc, #72]	; (800b874 <prvInitialiseTaskLists+0x60>)
 800b82c:	4413      	add	r3, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe f9a8 	bl	8009b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3301      	adds	r3, #1
 800b838:	607b      	str	r3, [r7, #4]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b37      	cmp	r3, #55	; 0x37
 800b83e:	d9ef      	bls.n	800b820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b840:	480d      	ldr	r0, [pc, #52]	; (800b878 <prvInitialiseTaskLists+0x64>)
 800b842:	f7fe f99f 	bl	8009b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b846:	480d      	ldr	r0, [pc, #52]	; (800b87c <prvInitialiseTaskLists+0x68>)
 800b848:	f7fe f99c 	bl	8009b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b84c:	480c      	ldr	r0, [pc, #48]	; (800b880 <prvInitialiseTaskLists+0x6c>)
 800b84e:	f7fe f999 	bl	8009b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b852:	480c      	ldr	r0, [pc, #48]	; (800b884 <prvInitialiseTaskLists+0x70>)
 800b854:	f7fe f996 	bl	8009b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b858:	480b      	ldr	r0, [pc, #44]	; (800b888 <prvInitialiseTaskLists+0x74>)
 800b85a:	f7fe f993 	bl	8009b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b85e:	4b0b      	ldr	r3, [pc, #44]	; (800b88c <prvInitialiseTaskLists+0x78>)
 800b860:	4a05      	ldr	r2, [pc, #20]	; (800b878 <prvInitialiseTaskLists+0x64>)
 800b862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b864:	4b0a      	ldr	r3, [pc, #40]	; (800b890 <prvInitialiseTaskLists+0x7c>)
 800b866:	4a05      	ldr	r2, [pc, #20]	; (800b87c <prvInitialiseTaskLists+0x68>)
 800b868:	601a      	str	r2, [r3, #0]
}
 800b86a:	bf00      	nop
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20000ae4 	.word	0x20000ae4
 800b878:	20000f44 	.word	0x20000f44
 800b87c:	20000f58 	.word	0x20000f58
 800b880:	20000f74 	.word	0x20000f74
 800b884:	20000f88 	.word	0x20000f88
 800b888:	20000fa0 	.word	0x20000fa0
 800b88c:	20000f6c 	.word	0x20000f6c
 800b890:	20000f70 	.word	0x20000f70

0800b894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b89a:	e019      	b.n	800b8d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b89c:	f000 fed2 	bl	800c644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8a0:	4b10      	ldr	r3, [pc, #64]	; (800b8e4 <prvCheckTasksWaitingTermination+0x50>)
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fe f9f3 	bl	8009c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8b2:	4b0d      	ldr	r3, [pc, #52]	; (800b8e8 <prvCheckTasksWaitingTermination+0x54>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	4a0b      	ldr	r2, [pc, #44]	; (800b8e8 <prvCheckTasksWaitingTermination+0x54>)
 800b8ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8bc:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <prvCheckTasksWaitingTermination+0x58>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <prvCheckTasksWaitingTermination+0x58>)
 800b8c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8c6:	f000 feed 	bl	800c6a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f810 	bl	800b8f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8d0:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <prvCheckTasksWaitingTermination+0x58>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1e1      	bne.n	800b89c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8d8:	bf00      	nop
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20000f88 	.word	0x20000f88
 800b8e8:	20000fb4 	.word	0x20000fb4
 800b8ec:	20000f9c 	.word	0x20000f9c

0800b8f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3354      	adds	r3, #84	; 0x54
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f001 f9b5 	bl	800cc6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d108      	bne.n	800b91e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b910:	4618      	mov	r0, r3
 800b912:	f001 f885 	bl	800ca20 <vPortFree>
				vPortFree( pxTCB );
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f001 f882 	bl	800ca20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b91c:	e018      	b.n	800b950 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b924:	2b01      	cmp	r3, #1
 800b926:	d103      	bne.n	800b930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f001 f879 	bl	800ca20 <vPortFree>
	}
 800b92e:	e00f      	b.n	800b950 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b936:	2b02      	cmp	r3, #2
 800b938:	d00a      	beq.n	800b950 <prvDeleteTCB+0x60>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	60fb      	str	r3, [r7, #12]
}
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <prvDeleteTCB+0x5e>
	}
 800b950:	bf00      	nop
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b95e:	4b0c      	ldr	r3, [pc, #48]	; (800b990 <prvResetNextTaskUnblockTime+0x38>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d104      	bne.n	800b972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <prvResetNextTaskUnblockTime+0x3c>)
 800b96a:	f04f 32ff 	mov.w	r2, #4294967295
 800b96e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b970:	e008      	b.n	800b984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b972:	4b07      	ldr	r3, [pc, #28]	; (800b990 <prvResetNextTaskUnblockTime+0x38>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	4a04      	ldr	r2, [pc, #16]	; (800b994 <prvResetNextTaskUnblockTime+0x3c>)
 800b982:	6013      	str	r3, [r2, #0]
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20000f6c 	.word	0x20000f6c
 800b994:	20000fd4 	.word	0x20000fd4

0800b998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b99e:	4b0b      	ldr	r3, [pc, #44]	; (800b9cc <xTaskGetSchedulerState+0x34>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d102      	bne.n	800b9ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	607b      	str	r3, [r7, #4]
 800b9aa:	e008      	b.n	800b9be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ac:	4b08      	ldr	r3, [pc, #32]	; (800b9d0 <xTaskGetSchedulerState+0x38>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d102      	bne.n	800b9ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	607b      	str	r3, [r7, #4]
 800b9b8:	e001      	b.n	800b9be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9be:	687b      	ldr	r3, [r7, #4]
	}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	20000fc0 	.word	0x20000fc0
 800b9d0:	20000fdc 	.word	0x20000fdc

0800b9d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d051      	beq.n	800ba8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ee:	4b2a      	ldr	r3, [pc, #168]	; (800ba98 <xTaskPriorityInherit+0xc4>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d241      	bcs.n	800ba7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	db06      	blt.n	800ba0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba00:	4b25      	ldr	r3, [pc, #148]	; (800ba98 <xTaskPriorityInherit+0xc4>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6959      	ldr	r1, [r3, #20]
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba16:	4613      	mov	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4a1f      	ldr	r2, [pc, #124]	; (800ba9c <xTaskPriorityInherit+0xc8>)
 800ba20:	4413      	add	r3, r2
 800ba22:	4299      	cmp	r1, r3
 800ba24:	d122      	bne.n	800ba6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe f934 	bl	8009c98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba30:	4b19      	ldr	r3, [pc, #100]	; (800ba98 <xTaskPriorityInherit+0xc4>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3e:	4b18      	ldr	r3, [pc, #96]	; (800baa0 <xTaskPriorityInherit+0xcc>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d903      	bls.n	800ba4e <xTaskPriorityInherit+0x7a>
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4a:	4a15      	ldr	r2, [pc, #84]	; (800baa0 <xTaskPriorityInherit+0xcc>)
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba52:	4613      	mov	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4a10      	ldr	r2, [pc, #64]	; (800ba9c <xTaskPriorityInherit+0xc8>)
 800ba5c:	441a      	add	r2, r3
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	3304      	adds	r3, #4
 800ba62:	4619      	mov	r1, r3
 800ba64:	4610      	mov	r0, r2
 800ba66:	f7fe f8ba 	bl	8009bde <vListInsertEnd>
 800ba6a:	e004      	b.n	800ba76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba6c:	4b0a      	ldr	r3, [pc, #40]	; (800ba98 <xTaskPriorityInherit+0xc4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ba76:	2301      	movs	r3, #1
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	e008      	b.n	800ba8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba80:	4b05      	ldr	r3, [pc, #20]	; (800ba98 <xTaskPriorityInherit+0xc4>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d201      	bcs.n	800ba8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
	}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20000ae0 	.word	0x20000ae0
 800ba9c:	20000ae4 	.word	0x20000ae4
 800baa0:	20000fbc 	.word	0x20000fbc

0800baa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bab0:	2300      	movs	r3, #0
 800bab2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d056      	beq.n	800bb68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800baba:	4b2e      	ldr	r3, [pc, #184]	; (800bb74 <xTaskPriorityDisinherit+0xd0>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	693a      	ldr	r2, [r7, #16]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d00a      	beq.n	800bada <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	60fb      	str	r3, [r7, #12]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10a      	bne.n	800baf8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	60bb      	str	r3, [r7, #8]
}
 800baf4:	bf00      	nop
 800baf6:	e7fe      	b.n	800baf6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafc:	1e5a      	subs	r2, r3, #1
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d02c      	beq.n	800bb68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d128      	bne.n	800bb68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	3304      	adds	r3, #4
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fe f8bc 	bl	8009c98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb38:	4b0f      	ldr	r3, [pc, #60]	; (800bb78 <xTaskPriorityDisinherit+0xd4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d903      	bls.n	800bb48 <xTaskPriorityDisinherit+0xa4>
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb44:	4a0c      	ldr	r2, [pc, #48]	; (800bb78 <xTaskPriorityDisinherit+0xd4>)
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <xTaskPriorityDisinherit+0xd8>)
 800bb56:	441a      	add	r2, r3
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f7fe f83d 	bl	8009bde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb64:	2301      	movs	r3, #1
 800bb66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb68:	697b      	ldr	r3, [r7, #20]
	}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3718      	adds	r7, #24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	20000ae0 	.word	0x20000ae0
 800bb78:	20000fbc 	.word	0x20000fbc
 800bb7c:	20000ae4 	.word	0x20000ae4

0800bb80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d06a      	beq.n	800bc6e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10a      	bne.n	800bbb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	60fb      	str	r3, [r7, #12]
}
 800bbb2:	bf00      	nop
 800bbb4:	e7fe      	b.n	800bbb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d902      	bls.n	800bbc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	61fb      	str	r3, [r7, #28]
 800bbc4:	e002      	b.n	800bbcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d04b      	beq.n	800bc6e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d146      	bne.n	800bc6e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bbe0:	4b25      	ldr	r3, [pc, #148]	; (800bc78 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	69ba      	ldr	r2, [r7, #24]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d10a      	bne.n	800bc00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	60bb      	str	r3, [r7, #8]
}
 800bbfc:	bf00      	nop
 800bbfe:	e7fe      	b.n	800bbfe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	69fa      	ldr	r2, [r7, #28]
 800bc0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	db04      	blt.n	800bc1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	6959      	ldr	r1, [r3, #20]
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	4613      	mov	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4a13      	ldr	r2, [pc, #76]	; (800bc7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc2e:	4413      	add	r3, r2
 800bc30:	4299      	cmp	r1, r3
 800bc32:	d11c      	bne.n	800bc6e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	3304      	adds	r3, #4
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fe f82d 	bl	8009c98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc42:	4b0f      	ldr	r3, [pc, #60]	; (800bc80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d903      	bls.n	800bc52 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4e:	4a0c      	ldr	r2, [pc, #48]	; (800bc80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc56:	4613      	mov	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4a07      	ldr	r2, [pc, #28]	; (800bc7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc60:	441a      	add	r2, r3
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	3304      	adds	r3, #4
 800bc66:	4619      	mov	r1, r3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	f7fd ffb8 	bl	8009bde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc6e:	bf00      	nop
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000ae0 	.word	0x20000ae0
 800bc7c:	20000ae4 	.word	0x20000ae4
 800bc80:	20000fbc 	.word	0x20000fbc

0800bc84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc84:	b480      	push	{r7}
 800bc86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc88:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d004      	beq.n	800bc9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc90:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc96:	3201      	adds	r2, #1
 800bc98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bc9a:	4b03      	ldr	r3, [pc, #12]	; (800bca8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
	}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr
 800bca8:	20000ae0 	.word	0x20000ae0

0800bcac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcb6:	4b21      	ldr	r3, [pc, #132]	; (800bd3c <prvAddCurrentTaskToDelayedList+0x90>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcbc:	4b20      	ldr	r3, [pc, #128]	; (800bd40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fd ffe8 	bl	8009c98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcce:	d10a      	bne.n	800bce6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d007      	beq.n	800bce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcd6:	4b1a      	ldr	r3, [pc, #104]	; (800bd40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4819      	ldr	r0, [pc, #100]	; (800bd44 <prvAddCurrentTaskToDelayedList+0x98>)
 800bce0:	f7fd ff7d 	bl	8009bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bce4:	e026      	b.n	800bd34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4413      	add	r3, r2
 800bcec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcee:	4b14      	ldr	r3, [pc, #80]	; (800bd40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d209      	bcs.n	800bd12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcfe:	4b12      	ldr	r3, [pc, #72]	; (800bd48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3304      	adds	r3, #4
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4610      	mov	r0, r2
 800bd0c:	f7fd ff8b 	bl	8009c26 <vListInsert>
}
 800bd10:	e010      	b.n	800bd34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd12:	4b0e      	ldr	r3, [pc, #56]	; (800bd4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	4b0a      	ldr	r3, [pc, #40]	; (800bd40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f7fd ff81 	bl	8009c26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd24:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d202      	bcs.n	800bd34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd2e:	4a08      	ldr	r2, [pc, #32]	; (800bd50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	6013      	str	r3, [r2, #0]
}
 800bd34:	bf00      	nop
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20000fb8 	.word	0x20000fb8
 800bd40:	20000ae0 	.word	0x20000ae0
 800bd44:	20000fa0 	.word	0x20000fa0
 800bd48:	20000f70 	.word	0x20000f70
 800bd4c:	20000f6c 	.word	0x20000f6c
 800bd50:	20000fd4 	.word	0x20000fd4

0800bd54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b08a      	sub	sp, #40	; 0x28
 800bd58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd5e:	f000 fb07 	bl	800c370 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd62:	4b1c      	ldr	r3, [pc, #112]	; (800bdd4 <xTimerCreateTimerTask+0x80>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d021      	beq.n	800bdae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd72:	1d3a      	adds	r2, r7, #4
 800bd74:	f107 0108 	add.w	r1, r7, #8
 800bd78:	f107 030c 	add.w	r3, r7, #12
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fd fee7 	bl	8009b50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd82:	6879      	ldr	r1, [r7, #4]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	9202      	str	r2, [sp, #8]
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	2300      	movs	r3, #0
 800bd92:	460a      	mov	r2, r1
 800bd94:	4910      	ldr	r1, [pc, #64]	; (800bdd8 <xTimerCreateTimerTask+0x84>)
 800bd96:	4811      	ldr	r0, [pc, #68]	; (800bddc <xTimerCreateTimerTask+0x88>)
 800bd98:	f7fe ffb6 	bl	800ad08 <xTaskCreateStatic>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	4a10      	ldr	r2, [pc, #64]	; (800bde0 <xTimerCreateTimerTask+0x8c>)
 800bda0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bda2:	4b0f      	ldr	r3, [pc, #60]	; (800bde0 <xTimerCreateTimerTask+0x8c>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	613b      	str	r3, [r7, #16]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bdca:	697b      	ldr	r3, [r7, #20]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20001010 	.word	0x20001010
 800bdd8:	0800cf80 	.word	0x0800cf80
 800bddc:	0800bf19 	.word	0x0800bf19
 800bde0:	20001014 	.word	0x20001014

0800bde4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08a      	sub	sp, #40	; 0x28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	623b      	str	r3, [r7, #32]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be12:	4b1a      	ldr	r3, [pc, #104]	; (800be7c <xTimerGenericCommand+0x98>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d02a      	beq.n	800be70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b05      	cmp	r3, #5
 800be2a:	dc18      	bgt.n	800be5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be2c:	f7ff fdb4 	bl	800b998 <xTaskGetSchedulerState>
 800be30:	4603      	mov	r3, r0
 800be32:	2b02      	cmp	r3, #2
 800be34:	d109      	bne.n	800be4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be36:	4b11      	ldr	r3, [pc, #68]	; (800be7c <xTimerGenericCommand+0x98>)
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	f107 0110 	add.w	r1, r7, #16
 800be3e:	2300      	movs	r3, #0
 800be40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be42:	f7fe f8fb 	bl	800a03c <xQueueGenericSend>
 800be46:	6278      	str	r0, [r7, #36]	; 0x24
 800be48:	e012      	b.n	800be70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be4a:	4b0c      	ldr	r3, [pc, #48]	; (800be7c <xTimerGenericCommand+0x98>)
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	f107 0110 	add.w	r1, r7, #16
 800be52:	2300      	movs	r3, #0
 800be54:	2200      	movs	r2, #0
 800be56:	f7fe f8f1 	bl	800a03c <xQueueGenericSend>
 800be5a:	6278      	str	r0, [r7, #36]	; 0x24
 800be5c:	e008      	b.n	800be70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be5e:	4b07      	ldr	r3, [pc, #28]	; (800be7c <xTimerGenericCommand+0x98>)
 800be60:	6818      	ldr	r0, [r3, #0]
 800be62:	f107 0110 	add.w	r1, r7, #16
 800be66:	2300      	movs	r3, #0
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	f7fe f9e5 	bl	800a238 <xQueueGenericSendFromISR>
 800be6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be72:	4618      	mov	r0, r3
 800be74:	3728      	adds	r7, #40	; 0x28
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20001010 	.word	0x20001010

0800be80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af02      	add	r7, sp, #8
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be8a:	4b22      	ldr	r3, [pc, #136]	; (800bf14 <prvProcessExpiredTimer+0x94>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	3304      	adds	r3, #4
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fd fefd 	bl	8009c98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d022      	beq.n	800bef2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	699a      	ldr	r2, [r3, #24]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	18d1      	adds	r1, r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	6978      	ldr	r0, [r7, #20]
 800beba:	f000 f8d1 	bl	800c060 <prvInsertTimerInActiveList>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d01f      	beq.n	800bf04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bec4:	2300      	movs	r3, #0
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	2300      	movs	r3, #0
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	2100      	movs	r1, #0
 800bece:	6978      	ldr	r0, [r7, #20]
 800bed0:	f7ff ff88 	bl	800bde4 <xTimerGenericCommand>
 800bed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d113      	bne.n	800bf04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	60fb      	str	r3, [r7, #12]
}
 800beee:	bf00      	nop
 800bef0:	e7fe      	b.n	800bef0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bef8:	f023 0301 	bic.w	r3, r3, #1
 800befc:	b2da      	uxtb	r2, r3
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	6978      	ldr	r0, [r7, #20]
 800bf0a:	4798      	blx	r3
}
 800bf0c:	bf00      	nop
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	20001008 	.word	0x20001008

0800bf18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf20:	f107 0308 	add.w	r3, r7, #8
 800bf24:	4618      	mov	r0, r3
 800bf26:	f000 f857 	bl	800bfd8 <prvGetNextExpireTime>
 800bf2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 f803 	bl	800bf3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf36:	f000 f8d5 	bl	800c0e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf3a:	e7f1      	b.n	800bf20 <prvTimerTask+0x8>

0800bf3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf46:	f7ff f93b 	bl	800b1c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf4a:	f107 0308 	add.w	r3, r7, #8
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 f866 	bl	800c020 <prvSampleTimeNow>
 800bf54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d130      	bne.n	800bfbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10a      	bne.n	800bf78 <prvProcessTimerOrBlockTask+0x3c>
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d806      	bhi.n	800bf78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf6a:	f7ff f937 	bl	800b1dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf6e:	68f9      	ldr	r1, [r7, #12]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff ff85 	bl	800be80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf76:	e024      	b.n	800bfc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d008      	beq.n	800bf90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <prvProcessTimerOrBlockTask+0x90>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <prvProcessTimerOrBlockTask+0x50>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e000      	b.n	800bf8e <prvProcessTimerOrBlockTask+0x52>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf90:	4b0f      	ldr	r3, [pc, #60]	; (800bfd0 <prvProcessTimerOrBlockTask+0x94>)
 800bf92:	6818      	ldr	r0, [r3, #0]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f7fe fe7f 	bl	800aca0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bfa2:	f7ff f91b 	bl	800b1dc <xTaskResumeAll>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10a      	bne.n	800bfc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bfac:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <prvProcessTimerOrBlockTask+0x98>)
 800bfae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	f3bf 8f6f 	isb	sy
}
 800bfbc:	e001      	b.n	800bfc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bfbe:	f7ff f90d 	bl	800b1dc <xTaskResumeAll>
}
 800bfc2:	bf00      	nop
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	2000100c 	.word	0x2000100c
 800bfd0:	20001010 	.word	0x20001010
 800bfd4:	e000ed04 	.word	0xe000ed04

0800bfd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bfe0:	4b0e      	ldr	r3, [pc, #56]	; (800c01c <prvGetNextExpireTime+0x44>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <prvGetNextExpireTime+0x16>
 800bfea:	2201      	movs	r2, #1
 800bfec:	e000      	b.n	800bff0 <prvGetNextExpireTime+0x18>
 800bfee:	2200      	movs	r2, #0
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d105      	bne.n	800c008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bffc:	4b07      	ldr	r3, [pc, #28]	; (800c01c <prvGetNextExpireTime+0x44>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	60fb      	str	r3, [r7, #12]
 800c006:	e001      	b.n	800c00c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c00c:	68fb      	ldr	r3, [r7, #12]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	20001008 	.word	0x20001008

0800c020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c028:	f7ff f976 	bl	800b318 <xTaskGetTickCount>
 800c02c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c02e:	4b0b      	ldr	r3, [pc, #44]	; (800c05c <prvSampleTimeNow+0x3c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	429a      	cmp	r2, r3
 800c036:	d205      	bcs.n	800c044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c038:	f000 f936 	bl	800c2a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	e002      	b.n	800c04a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c04a:	4a04      	ldr	r2, [pc, #16]	; (800c05c <prvSampleTimeNow+0x3c>)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c050:	68fb      	ldr	r3, [r7, #12]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	20001018 	.word	0x20001018

0800c060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c06e:	2300      	movs	r3, #0
 800c070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	429a      	cmp	r2, r3
 800c084:	d812      	bhi.n	800c0ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	1ad2      	subs	r2, r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	429a      	cmp	r2, r3
 800c092:	d302      	bcc.n	800c09a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	e01b      	b.n	800c0d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c09a:	4b10      	ldr	r3, [pc, #64]	; (800c0dc <prvInsertTimerInActiveList+0x7c>)
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	f7fd fdbe 	bl	8009c26 <vListInsert>
 800c0aa:	e012      	b.n	800c0d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d206      	bcs.n	800c0c2 <prvInsertTimerInActiveList+0x62>
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d302      	bcc.n	800c0c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	617b      	str	r3, [r7, #20]
 800c0c0:	e007      	b.n	800c0d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0c2:	4b07      	ldr	r3, [pc, #28]	; (800c0e0 <prvInsertTimerInActiveList+0x80>)
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	f7fd fdaa 	bl	8009c26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0d2:	697b      	ldr	r3, [r7, #20]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	2000100c 	.word	0x2000100c
 800c0e0:	20001008 	.word	0x20001008

0800c0e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08e      	sub	sp, #56	; 0x38
 800c0e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0ea:	e0ca      	b.n	800c282 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	da18      	bge.n	800c124 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c0f2:	1d3b      	adds	r3, r7, #4
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10a      	bne.n	800c114 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	61fb      	str	r3, [r7, #28]
}
 800c110:	bf00      	nop
 800c112:	e7fe      	b.n	800c112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c11a:	6850      	ldr	r0, [r2, #4]
 800c11c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c11e:	6892      	ldr	r2, [r2, #8]
 800c120:	4611      	mov	r1, r2
 800c122:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	f2c0 80ab 	blt.w	800c282 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d004      	beq.n	800c142 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13a:	3304      	adds	r3, #4
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fd fdab 	bl	8009c98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c142:	463b      	mov	r3, r7
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff ff6b 	bl	800c020 <prvSampleTimeNow>
 800c14a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b09      	cmp	r3, #9
 800c150:	f200 8096 	bhi.w	800c280 <prvProcessReceivedCommands+0x19c>
 800c154:	a201      	add	r2, pc, #4	; (adr r2, 800c15c <prvProcessReceivedCommands+0x78>)
 800c156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15a:	bf00      	nop
 800c15c:	0800c185 	.word	0x0800c185
 800c160:	0800c185 	.word	0x0800c185
 800c164:	0800c185 	.word	0x0800c185
 800c168:	0800c1f9 	.word	0x0800c1f9
 800c16c:	0800c20d 	.word	0x0800c20d
 800c170:	0800c257 	.word	0x0800c257
 800c174:	0800c185 	.word	0x0800c185
 800c178:	0800c185 	.word	0x0800c185
 800c17c:	0800c1f9 	.word	0x0800c1f9
 800c180:	0800c20d 	.word	0x0800c20d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c18a:	f043 0301 	orr.w	r3, r3, #1
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	18d1      	adds	r1, r2, r3
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1a4:	f7ff ff5c 	bl	800c060 <prvInsertTimerInActiveList>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d069      	beq.n	800c282 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1bc:	f003 0304 	and.w	r3, r3, #4
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d05e      	beq.n	800c282 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c8:	699b      	ldr	r3, [r3, #24]
 800c1ca:	441a      	add	r2, r3
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1d6:	f7ff fe05 	bl	800bde4 <xTimerGenericCommand>
 800c1da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d14f      	bne.n	800c282 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	61bb      	str	r3, [r7, #24]
}
 800c1f4:	bf00      	nop
 800c1f6:	e7fe      	b.n	800c1f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1fe:	f023 0301 	bic.w	r3, r3, #1
 800c202:	b2da      	uxtb	r2, r3
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c20a:	e03a      	b.n	800c282 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c212:	f043 0301 	orr.w	r3, r3, #1
 800c216:	b2da      	uxtb	r2, r3
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	617b      	str	r3, [r7, #20]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c244:	699a      	ldr	r2, [r3, #24]
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	18d1      	adds	r1, r2, r3
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c24e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c250:	f7ff ff06 	bl	800c060 <prvInsertTimerInActiveList>
					break;
 800c254:	e015      	b.n	800c282 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c25c:	f003 0302 	and.w	r3, r3, #2
 800c260:	2b00      	cmp	r3, #0
 800c262:	d103      	bne.n	800c26c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c266:	f000 fbdb 	bl	800ca20 <vPortFree>
 800c26a:	e00a      	b.n	800c282 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c272:	f023 0301 	bic.w	r3, r3, #1
 800c276:	b2da      	uxtb	r2, r3
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c27e:	e000      	b.n	800c282 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c282:	4b08      	ldr	r3, [pc, #32]	; (800c2a4 <prvProcessReceivedCommands+0x1c0>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	1d39      	adds	r1, r7, #4
 800c288:	2200      	movs	r2, #0
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fe f8fc 	bl	800a488 <xQueueReceive>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	f47f af2a 	bne.w	800c0ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	3730      	adds	r7, #48	; 0x30
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20001010 	.word	0x20001010

0800c2a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2ae:	e048      	b.n	800c342 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2b0:	4b2d      	ldr	r3, [pc, #180]	; (800c368 <prvSwitchTimerLists+0xc0>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ba:	4b2b      	ldr	r3, [pc, #172]	; (800c368 <prvSwitchTimerLists+0xc0>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fd fce5 	bl	8009c98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2dc:	f003 0304 	and.w	r3, r3, #4
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d02e      	beq.n	800c342 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d90e      	bls.n	800c314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c302:	4b19      	ldr	r3, [pc, #100]	; (800c368 <prvSwitchTimerLists+0xc0>)
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3304      	adds	r3, #4
 800c30a:	4619      	mov	r1, r3
 800c30c:	4610      	mov	r0, r2
 800c30e:	f7fd fc8a 	bl	8009c26 <vListInsert>
 800c312:	e016      	b.n	800c342 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c314:	2300      	movs	r3, #0
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	2300      	movs	r3, #0
 800c31a:	693a      	ldr	r2, [r7, #16]
 800c31c:	2100      	movs	r1, #0
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f7ff fd60 	bl	800bde4 <xTimerGenericCommand>
 800c324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	603b      	str	r3, [r7, #0]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c342:	4b09      	ldr	r3, [pc, #36]	; (800c368 <prvSwitchTimerLists+0xc0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1b1      	bne.n	800c2b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c34c:	4b06      	ldr	r3, [pc, #24]	; (800c368 <prvSwitchTimerLists+0xc0>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c352:	4b06      	ldr	r3, [pc, #24]	; (800c36c <prvSwitchTimerLists+0xc4>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a04      	ldr	r2, [pc, #16]	; (800c368 <prvSwitchTimerLists+0xc0>)
 800c358:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c35a:	4a04      	ldr	r2, [pc, #16]	; (800c36c <prvSwitchTimerLists+0xc4>)
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	6013      	str	r3, [r2, #0]
}
 800c360:	bf00      	nop
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	20001008 	.word	0x20001008
 800c36c:	2000100c 	.word	0x2000100c

0800c370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c376:	f000 f965 	bl	800c644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c37a:	4b15      	ldr	r3, [pc, #84]	; (800c3d0 <prvCheckForValidListAndQueue+0x60>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d120      	bne.n	800c3c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c382:	4814      	ldr	r0, [pc, #80]	; (800c3d4 <prvCheckForValidListAndQueue+0x64>)
 800c384:	f7fd fbfe 	bl	8009b84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c388:	4813      	ldr	r0, [pc, #76]	; (800c3d8 <prvCheckForValidListAndQueue+0x68>)
 800c38a:	f7fd fbfb 	bl	8009b84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c38e:	4b13      	ldr	r3, [pc, #76]	; (800c3dc <prvCheckForValidListAndQueue+0x6c>)
 800c390:	4a10      	ldr	r2, [pc, #64]	; (800c3d4 <prvCheckForValidListAndQueue+0x64>)
 800c392:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c394:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <prvCheckForValidListAndQueue+0x70>)
 800c396:	4a10      	ldr	r2, [pc, #64]	; (800c3d8 <prvCheckForValidListAndQueue+0x68>)
 800c398:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c39a:	2300      	movs	r3, #0
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	4b11      	ldr	r3, [pc, #68]	; (800c3e4 <prvCheckForValidListAndQueue+0x74>)
 800c3a0:	4a11      	ldr	r2, [pc, #68]	; (800c3e8 <prvCheckForValidListAndQueue+0x78>)
 800c3a2:	2110      	movs	r1, #16
 800c3a4:	200a      	movs	r0, #10
 800c3a6:	f7fd fd09 	bl	8009dbc <xQueueGenericCreateStatic>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4a08      	ldr	r2, [pc, #32]	; (800c3d0 <prvCheckForValidListAndQueue+0x60>)
 800c3ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c3b0:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <prvCheckForValidListAndQueue+0x60>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d005      	beq.n	800c3c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3b8:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <prvCheckForValidListAndQueue+0x60>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	490b      	ldr	r1, [pc, #44]	; (800c3ec <prvCheckForValidListAndQueue+0x7c>)
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe fc1a 	bl	800abf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3c4:	f000 f96e 	bl	800c6a4 <vPortExitCritical>
}
 800c3c8:	bf00      	nop
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20001010 	.word	0x20001010
 800c3d4:	20000fe0 	.word	0x20000fe0
 800c3d8:	20000ff4 	.word	0x20000ff4
 800c3dc:	20001008 	.word	0x20001008
 800c3e0:	2000100c 	.word	0x2000100c
 800c3e4:	200010bc 	.word	0x200010bc
 800c3e8:	2000101c 	.word	0x2000101c
 800c3ec:	0800cf88 	.word	0x0800cf88

0800c3f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3b04      	subs	r3, #4
 800c400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3b04      	subs	r3, #4
 800c40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	f023 0201 	bic.w	r2, r3, #1
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3b04      	subs	r3, #4
 800c41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c420:	4a0c      	ldr	r2, [pc, #48]	; (800c454 <pxPortInitialiseStack+0x64>)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3b14      	subs	r3, #20
 800c42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	3b04      	subs	r3, #4
 800c436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f06f 0202 	mvn.w	r2, #2
 800c43e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3b20      	subs	r3, #32
 800c444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c446:	68fb      	ldr	r3, [r7, #12]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr
 800c454:	0800c459 	.word	0x0800c459

0800c458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c462:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <prvTaskExitError+0x54>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46a:	d00a      	beq.n	800c482 <prvTaskExitError+0x2a>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	60fb      	str	r3, [r7, #12]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <prvTaskExitError+0x28>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	60bb      	str	r3, [r7, #8]
}
 800c494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c496:	bf00      	nop
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0fc      	beq.n	800c498 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	2000000c 	.word	0x2000000c

0800c4b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4b0:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <pxCurrentTCBConst2>)
 800c4b2:	6819      	ldr	r1, [r3, #0]
 800c4b4:	6808      	ldr	r0, [r1, #0]
 800c4b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ba:	f380 8809 	msr	PSP, r0
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f04f 0000 	mov.w	r0, #0
 800c4c6:	f380 8811 	msr	BASEPRI, r0
 800c4ca:	4770      	bx	lr
 800c4cc:	f3af 8000 	nop.w

0800c4d0 <pxCurrentTCBConst2>:
 800c4d0:	20000ae0 	.word	0x20000ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop

0800c4d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4d8:	4808      	ldr	r0, [pc, #32]	; (800c4fc <prvPortStartFirstTask+0x24>)
 800c4da:	6800      	ldr	r0, [r0, #0]
 800c4dc:	6800      	ldr	r0, [r0, #0]
 800c4de:	f380 8808 	msr	MSP, r0
 800c4e2:	f04f 0000 	mov.w	r0, #0
 800c4e6:	f380 8814 	msr	CONTROL, r0
 800c4ea:	b662      	cpsie	i
 800c4ec:	b661      	cpsie	f
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	df00      	svc	0
 800c4f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4fa:	bf00      	nop
 800c4fc:	e000ed08 	.word	0xe000ed08

0800c500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c506:	4b46      	ldr	r3, [pc, #280]	; (800c620 <xPortStartScheduler+0x120>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a46      	ldr	r2, [pc, #280]	; (800c624 <xPortStartScheduler+0x124>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d10a      	bne.n	800c526 <xPortStartScheduler+0x26>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	613b      	str	r3, [r7, #16]
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c526:	4b3e      	ldr	r3, [pc, #248]	; (800c620 <xPortStartScheduler+0x120>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a3f      	ldr	r2, [pc, #252]	; (800c628 <xPortStartScheduler+0x128>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d10a      	bne.n	800c546 <xPortStartScheduler+0x46>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	60fb      	str	r3, [r7, #12]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c546:	4b39      	ldr	r3, [pc, #228]	; (800c62c <xPortStartScheduler+0x12c>)
 800c548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	22ff      	movs	r2, #255	; 0xff
 800c556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	b2db      	uxtb	r3, r3
 800c564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	4b31      	ldr	r3, [pc, #196]	; (800c630 <xPortStartScheduler+0x130>)
 800c56c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c56e:	4b31      	ldr	r3, [pc, #196]	; (800c634 <xPortStartScheduler+0x134>)
 800c570:	2207      	movs	r2, #7
 800c572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c574:	e009      	b.n	800c58a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c576:	4b2f      	ldr	r3, [pc, #188]	; (800c634 <xPortStartScheduler+0x134>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3b01      	subs	r3, #1
 800c57c:	4a2d      	ldr	r2, [pc, #180]	; (800c634 <xPortStartScheduler+0x134>)
 800c57e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c580:	78fb      	ldrb	r3, [r7, #3]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	b2db      	uxtb	r3, r3
 800c588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c592:	2b80      	cmp	r3, #128	; 0x80
 800c594:	d0ef      	beq.n	800c576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c596:	4b27      	ldr	r3, [pc, #156]	; (800c634 <xPortStartScheduler+0x134>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f1c3 0307 	rsb	r3, r3, #7
 800c59e:	2b04      	cmp	r3, #4
 800c5a0:	d00a      	beq.n	800c5b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	60bb      	str	r3, [r7, #8]
}
 800c5b4:	bf00      	nop
 800c5b6:	e7fe      	b.n	800c5b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5b8:	4b1e      	ldr	r3, [pc, #120]	; (800c634 <xPortStartScheduler+0x134>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	021b      	lsls	r3, r3, #8
 800c5be:	4a1d      	ldr	r2, [pc, #116]	; (800c634 <xPortStartScheduler+0x134>)
 800c5c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5c2:	4b1c      	ldr	r3, [pc, #112]	; (800c634 <xPortStartScheduler+0x134>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5ca:	4a1a      	ldr	r2, [pc, #104]	; (800c634 <xPortStartScheduler+0x134>)
 800c5cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5d6:	4b18      	ldr	r3, [pc, #96]	; (800c638 <xPortStartScheduler+0x138>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a17      	ldr	r2, [pc, #92]	; (800c638 <xPortStartScheduler+0x138>)
 800c5dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5e2:	4b15      	ldr	r3, [pc, #84]	; (800c638 <xPortStartScheduler+0x138>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a14      	ldr	r2, [pc, #80]	; (800c638 <xPortStartScheduler+0x138>)
 800c5e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5ee:	f000 f8dd 	bl	800c7ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5f2:	4b12      	ldr	r3, [pc, #72]	; (800c63c <xPortStartScheduler+0x13c>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5f8:	f000 f8fc 	bl	800c7f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5fc:	4b10      	ldr	r3, [pc, #64]	; (800c640 <xPortStartScheduler+0x140>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a0f      	ldr	r2, [pc, #60]	; (800c640 <xPortStartScheduler+0x140>)
 800c602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c608:	f7ff ff66 	bl	800c4d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c60c:	f7fe ff4e 	bl	800b4ac <vTaskSwitchContext>
	prvTaskExitError();
 800c610:	f7ff ff22 	bl	800c458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	e000ed00 	.word	0xe000ed00
 800c624:	410fc271 	.word	0x410fc271
 800c628:	410fc270 	.word	0x410fc270
 800c62c:	e000e400 	.word	0xe000e400
 800c630:	2000110c 	.word	0x2000110c
 800c634:	20001110 	.word	0x20001110
 800c638:	e000ed20 	.word	0xe000ed20
 800c63c:	2000000c 	.word	0x2000000c
 800c640:	e000ef34 	.word	0xe000ef34

0800c644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	607b      	str	r3, [r7, #4]
}
 800c65c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c65e:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <vPortEnterCritical+0x58>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	4a0d      	ldr	r2, [pc, #52]	; (800c69c <vPortEnterCritical+0x58>)
 800c666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c668:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <vPortEnterCritical+0x58>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d10f      	bne.n	800c690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c670:	4b0b      	ldr	r3, [pc, #44]	; (800c6a0 <vPortEnterCritical+0x5c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00a      	beq.n	800c690 <vPortEnterCritical+0x4c>
	__asm volatile
 800c67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67e:	f383 8811 	msr	BASEPRI, r3
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	603b      	str	r3, [r7, #0]
}
 800c68c:	bf00      	nop
 800c68e:	e7fe      	b.n	800c68e <vPortEnterCritical+0x4a>
	}
}
 800c690:	bf00      	nop
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	2000000c 	.word	0x2000000c
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6aa:	4b12      	ldr	r3, [pc, #72]	; (800c6f4 <vPortExitCritical+0x50>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <vPortExitCritical+0x24>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	607b      	str	r3, [r7, #4]
}
 800c6c4:	bf00      	nop
 800c6c6:	e7fe      	b.n	800c6c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c6c8:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <vPortExitCritical+0x50>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	4a09      	ldr	r2, [pc, #36]	; (800c6f4 <vPortExitCritical+0x50>)
 800c6d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6d2:	4b08      	ldr	r3, [pc, #32]	; (800c6f4 <vPortExitCritical+0x50>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d105      	bne.n	800c6e6 <vPortExitCritical+0x42>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	f383 8811 	msr	BASEPRI, r3
}
 800c6e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	2000000c 	.word	0x2000000c
	...

0800c700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c700:	f3ef 8009 	mrs	r0, PSP
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	4b15      	ldr	r3, [pc, #84]	; (800c760 <pxCurrentTCBConst>)
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	f01e 0f10 	tst.w	lr, #16
 800c710:	bf08      	it	eq
 800c712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71a:	6010      	str	r0, [r2, #0]
 800c71c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c720:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c724:	f380 8811 	msr	BASEPRI, r0
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f7fe febc 	bl	800b4ac <vTaskSwitchContext>
 800c734:	f04f 0000 	mov.w	r0, #0
 800c738:	f380 8811 	msr	BASEPRI, r0
 800c73c:	bc09      	pop	{r0, r3}
 800c73e:	6819      	ldr	r1, [r3, #0]
 800c740:	6808      	ldr	r0, [r1, #0]
 800c742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c746:	f01e 0f10 	tst.w	lr, #16
 800c74a:	bf08      	it	eq
 800c74c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c750:	f380 8809 	msr	PSP, r0
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	f3af 8000 	nop.w

0800c760 <pxCurrentTCBConst>:
 800c760:	20000ae0 	.word	0x20000ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop

0800c768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	607b      	str	r3, [r7, #4]
}
 800c780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c782:	f7fe fdd9 	bl	800b338 <xTaskIncrementTick>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c78c:	4b06      	ldr	r3, [pc, #24]	; (800c7a8 <xPortSysTickHandler+0x40>)
 800c78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	2300      	movs	r3, #0
 800c796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	f383 8811 	msr	BASEPRI, r3
}
 800c79e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	e000ed04 	.word	0xe000ed04

0800c7ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7b0:	4b0b      	ldr	r3, [pc, #44]	; (800c7e0 <vPortSetupTimerInterrupt+0x34>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7b6:	4b0b      	ldr	r3, [pc, #44]	; (800c7e4 <vPortSetupTimerInterrupt+0x38>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7bc:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <vPortSetupTimerInterrupt+0x3c>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a0a      	ldr	r2, [pc, #40]	; (800c7ec <vPortSetupTimerInterrupt+0x40>)
 800c7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c6:	099b      	lsrs	r3, r3, #6
 800c7c8:	4a09      	ldr	r2, [pc, #36]	; (800c7f0 <vPortSetupTimerInterrupt+0x44>)
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7ce:	4b04      	ldr	r3, [pc, #16]	; (800c7e0 <vPortSetupTimerInterrupt+0x34>)
 800c7d0:	2207      	movs	r2, #7
 800c7d2:	601a      	str	r2, [r3, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	e000e010 	.word	0xe000e010
 800c7e4:	e000e018 	.word	0xe000e018
 800c7e8:	20000000 	.word	0x20000000
 800c7ec:	10624dd3 	.word	0x10624dd3
 800c7f0:	e000e014 	.word	0xe000e014

0800c7f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c804 <vPortEnableVFP+0x10>
 800c7f8:	6801      	ldr	r1, [r0, #0]
 800c7fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7fe:	6001      	str	r1, [r0, #0]
 800c800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c802:	bf00      	nop
 800c804:	e000ed88 	.word	0xe000ed88

0800c808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c80e:	f3ef 8305 	mrs	r3, IPSR
 800c812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2b0f      	cmp	r3, #15
 800c818:	d914      	bls.n	800c844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c81a:	4a17      	ldr	r2, [pc, #92]	; (800c878 <vPortValidateInterruptPriority+0x70>)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4413      	add	r3, r2
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c824:	4b15      	ldr	r3, [pc, #84]	; (800c87c <vPortValidateInterruptPriority+0x74>)
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	7afa      	ldrb	r2, [r7, #11]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d20a      	bcs.n	800c844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	607b      	str	r3, [r7, #4]
}
 800c840:	bf00      	nop
 800c842:	e7fe      	b.n	800c842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c844:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <vPortValidateInterruptPriority+0x78>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c84c:	4b0d      	ldr	r3, [pc, #52]	; (800c884 <vPortValidateInterruptPriority+0x7c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	429a      	cmp	r2, r3
 800c852:	d90a      	bls.n	800c86a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	603b      	str	r3, [r7, #0]
}
 800c866:	bf00      	nop
 800c868:	e7fe      	b.n	800c868 <vPortValidateInterruptPriority+0x60>
	}
 800c86a:	bf00      	nop
 800c86c:	3714      	adds	r7, #20
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	e000e3f0 	.word	0xe000e3f0
 800c87c:	2000110c 	.word	0x2000110c
 800c880:	e000ed0c 	.word	0xe000ed0c
 800c884:	20001110 	.word	0x20001110

0800c888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08a      	sub	sp, #40	; 0x28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c890:	2300      	movs	r3, #0
 800c892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c894:	f7fe fc94 	bl	800b1c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c898:	4b5b      	ldr	r3, [pc, #364]	; (800ca08 <pvPortMalloc+0x180>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8a0:	f000 f920 	bl	800cae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8a4:	4b59      	ldr	r3, [pc, #356]	; (800ca0c <pvPortMalloc+0x184>)
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f040 8093 	bne.w	800c9d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d01d      	beq.n	800c8f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c8b8:	2208      	movs	r2, #8
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4413      	add	r3, r2
 800c8be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d014      	beq.n	800c8f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f023 0307 	bic.w	r3, r3, #7
 800c8d0:	3308      	adds	r3, #8
 800c8d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f003 0307 	and.w	r3, r3, #7
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00a      	beq.n	800c8f4 <pvPortMalloc+0x6c>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	617b      	str	r3, [r7, #20]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d06e      	beq.n	800c9d8 <pvPortMalloc+0x150>
 800c8fa:	4b45      	ldr	r3, [pc, #276]	; (800ca10 <pvPortMalloc+0x188>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	429a      	cmp	r2, r3
 800c902:	d869      	bhi.n	800c9d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c904:	4b43      	ldr	r3, [pc, #268]	; (800ca14 <pvPortMalloc+0x18c>)
 800c906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c908:	4b42      	ldr	r3, [pc, #264]	; (800ca14 <pvPortMalloc+0x18c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c90e:	e004      	b.n	800c91a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	429a      	cmp	r2, r3
 800c922:	d903      	bls.n	800c92c <pvPortMalloc+0xa4>
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1f1      	bne.n	800c910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c92c:	4b36      	ldr	r3, [pc, #216]	; (800ca08 <pvPortMalloc+0x180>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c932:	429a      	cmp	r2, r3
 800c934:	d050      	beq.n	800c9d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2208      	movs	r2, #8
 800c93c:	4413      	add	r3, r2
 800c93e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	2308      	movs	r3, #8
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	429a      	cmp	r2, r3
 800c956:	d91f      	bls.n	800c998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4413      	add	r3, r2
 800c95e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	f003 0307 	and.w	r3, r3, #7
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00a      	beq.n	800c980 <pvPortMalloc+0xf8>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96e:	f383 8811 	msr	BASEPRI, r3
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	f3bf 8f4f 	dsb	sy
 800c97a:	613b      	str	r3, [r7, #16]
}
 800c97c:	bf00      	nop
 800c97e:	e7fe      	b.n	800c97e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	1ad2      	subs	r2, r2, r3
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c992:	69b8      	ldr	r0, [r7, #24]
 800c994:	f000 f908 	bl	800cba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c998:	4b1d      	ldr	r3, [pc, #116]	; (800ca10 <pvPortMalloc+0x188>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	4a1b      	ldr	r2, [pc, #108]	; (800ca10 <pvPortMalloc+0x188>)
 800c9a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9a6:	4b1a      	ldr	r3, [pc, #104]	; (800ca10 <pvPortMalloc+0x188>)
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	4b1b      	ldr	r3, [pc, #108]	; (800ca18 <pvPortMalloc+0x190>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d203      	bcs.n	800c9ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9b2:	4b17      	ldr	r3, [pc, #92]	; (800ca10 <pvPortMalloc+0x188>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a18      	ldr	r2, [pc, #96]	; (800ca18 <pvPortMalloc+0x190>)
 800c9b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	4b13      	ldr	r3, [pc, #76]	; (800ca0c <pvPortMalloc+0x184>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	431a      	orrs	r2, r3
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c9ce:	4b13      	ldr	r3, [pc, #76]	; (800ca1c <pvPortMalloc+0x194>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	4a11      	ldr	r2, [pc, #68]	; (800ca1c <pvPortMalloc+0x194>)
 800c9d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9d8:	f7fe fc00 	bl	800b1dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00a      	beq.n	800c9fc <pvPortMalloc+0x174>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	60fb      	str	r3, [r7, #12]
}
 800c9f8:	bf00      	nop
 800c9fa:	e7fe      	b.n	800c9fa <pvPortMalloc+0x172>
	return pvReturn;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3728      	adds	r7, #40	; 0x28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	20002a48 	.word	0x20002a48
 800ca0c:	20002a5c 	.word	0x20002a5c
 800ca10:	20002a4c 	.word	0x20002a4c
 800ca14:	20002a40 	.word	0x20002a40
 800ca18:	20002a50 	.word	0x20002a50
 800ca1c:	20002a54 	.word	0x20002a54

0800ca20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d04d      	beq.n	800cace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca32:	2308      	movs	r3, #8
 800ca34:	425b      	negs	r3, r3
 800ca36:	697a      	ldr	r2, [r7, #20]
 800ca38:	4413      	add	r3, r2
 800ca3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	685a      	ldr	r2, [r3, #4]
 800ca44:	4b24      	ldr	r3, [pc, #144]	; (800cad8 <vPortFree+0xb8>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4013      	ands	r3, r2
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10a      	bne.n	800ca64 <vPortFree+0x44>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	60fb      	str	r3, [r7, #12]
}
 800ca60:	bf00      	nop
 800ca62:	e7fe      	b.n	800ca62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00a      	beq.n	800ca82 <vPortFree+0x62>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	60bb      	str	r3, [r7, #8]
}
 800ca7e:	bf00      	nop
 800ca80:	e7fe      	b.n	800ca80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	4b14      	ldr	r3, [pc, #80]	; (800cad8 <vPortFree+0xb8>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d01e      	beq.n	800cace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d11a      	bne.n	800cace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	4b0e      	ldr	r3, [pc, #56]	; (800cad8 <vPortFree+0xb8>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	43db      	mvns	r3, r3
 800caa2:	401a      	ands	r2, r3
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800caa8:	f7fe fb8a 	bl	800b1c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	4b0a      	ldr	r3, [pc, #40]	; (800cadc <vPortFree+0xbc>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4413      	add	r3, r2
 800cab6:	4a09      	ldr	r2, [pc, #36]	; (800cadc <vPortFree+0xbc>)
 800cab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caba:	6938      	ldr	r0, [r7, #16]
 800cabc:	f000 f874 	bl	800cba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cac0:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <vPortFree+0xc0>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3301      	adds	r3, #1
 800cac6:	4a06      	ldr	r2, [pc, #24]	; (800cae0 <vPortFree+0xc0>)
 800cac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800caca:	f7fe fb87 	bl	800b1dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cace:	bf00      	nop
 800cad0:	3718      	adds	r7, #24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20002a5c 	.word	0x20002a5c
 800cadc:	20002a4c 	.word	0x20002a4c
 800cae0:	20002a58 	.word	0x20002a58

0800cae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800caea:	f641 132c 	movw	r3, #6444	; 0x192c
 800caee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800caf0:	4b27      	ldr	r3, [pc, #156]	; (800cb90 <prvHeapInit+0xac>)
 800caf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f003 0307 	and.w	r3, r3, #7
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00c      	beq.n	800cb18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	3307      	adds	r3, #7
 800cb02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f023 0307 	bic.w	r3, r3, #7
 800cb0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	4a1f      	ldr	r2, [pc, #124]	; (800cb90 <prvHeapInit+0xac>)
 800cb14:	4413      	add	r3, r2
 800cb16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb1c:	4a1d      	ldr	r2, [pc, #116]	; (800cb94 <prvHeapInit+0xb0>)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb22:	4b1c      	ldr	r3, [pc, #112]	; (800cb94 <prvHeapInit+0xb0>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb30:	2208      	movs	r2, #8
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	1a9b      	subs	r3, r3, r2
 800cb36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f023 0307 	bic.w	r3, r3, #7
 800cb3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4a15      	ldr	r2, [pc, #84]	; (800cb98 <prvHeapInit+0xb4>)
 800cb44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb46:	4b14      	ldr	r3, [pc, #80]	; (800cb98 <prvHeapInit+0xb4>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb4e:	4b12      	ldr	r3, [pc, #72]	; (800cb98 <prvHeapInit+0xb4>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2200      	movs	r2, #0
 800cb54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	1ad2      	subs	r2, r2, r3
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb64:	4b0c      	ldr	r3, [pc, #48]	; (800cb98 <prvHeapInit+0xb4>)
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	4a0a      	ldr	r2, [pc, #40]	; (800cb9c <prvHeapInit+0xb8>)
 800cb72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	4a09      	ldr	r2, [pc, #36]	; (800cba0 <prvHeapInit+0xbc>)
 800cb7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb7c:	4b09      	ldr	r3, [pc, #36]	; (800cba4 <prvHeapInit+0xc0>)
 800cb7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb82:	601a      	str	r2, [r3, #0]
}
 800cb84:	bf00      	nop
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr
 800cb90:	20001114 	.word	0x20001114
 800cb94:	20002a40 	.word	0x20002a40
 800cb98:	20002a48 	.word	0x20002a48
 800cb9c:	20002a50 	.word	0x20002a50
 800cba0:	20002a4c 	.word	0x20002a4c
 800cba4:	20002a5c 	.word	0x20002a5c

0800cba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbb0:	4b28      	ldr	r3, [pc, #160]	; (800cc54 <prvInsertBlockIntoFreeList+0xac>)
 800cbb2:	60fb      	str	r3, [r7, #12]
 800cbb4:	e002      	b.n	800cbbc <prvInsertBlockIntoFreeList+0x14>
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d8f7      	bhi.n	800cbb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d108      	bne.n	800cbea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	441a      	add	r2, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	441a      	add	r2, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d118      	bne.n	800cc30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	4b15      	ldr	r3, [pc, #84]	; (800cc58 <prvInsertBlockIntoFreeList+0xb0>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d00d      	beq.n	800cc26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	441a      	add	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	e008      	b.n	800cc38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc26:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <prvInsertBlockIntoFreeList+0xb0>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	e003      	b.n	800cc38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d002      	beq.n	800cc46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc46:	bf00      	nop
 800cc48:	3714      	adds	r7, #20
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	20002a40 	.word	0x20002a40
 800cc58:	20002a48 	.word	0x20002a48

0800cc5c <memset>:
 800cc5c:	4402      	add	r2, r0
 800cc5e:	4603      	mov	r3, r0
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d100      	bne.n	800cc66 <memset+0xa>
 800cc64:	4770      	bx	lr
 800cc66:	f803 1b01 	strb.w	r1, [r3], #1
 800cc6a:	e7f9      	b.n	800cc60 <memset+0x4>

0800cc6c <_reclaim_reent>:
 800cc6c:	4b29      	ldr	r3, [pc, #164]	; (800cd14 <_reclaim_reent+0xa8>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4283      	cmp	r3, r0
 800cc72:	b570      	push	{r4, r5, r6, lr}
 800cc74:	4604      	mov	r4, r0
 800cc76:	d04b      	beq.n	800cd10 <_reclaim_reent+0xa4>
 800cc78:	69c3      	ldr	r3, [r0, #28]
 800cc7a:	b143      	cbz	r3, 800cc8e <_reclaim_reent+0x22>
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d144      	bne.n	800cd0c <_reclaim_reent+0xa0>
 800cc82:	69e3      	ldr	r3, [r4, #28]
 800cc84:	6819      	ldr	r1, [r3, #0]
 800cc86:	b111      	cbz	r1, 800cc8e <_reclaim_reent+0x22>
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f000 f879 	bl	800cd80 <_free_r>
 800cc8e:	6961      	ldr	r1, [r4, #20]
 800cc90:	b111      	cbz	r1, 800cc98 <_reclaim_reent+0x2c>
 800cc92:	4620      	mov	r0, r4
 800cc94:	f000 f874 	bl	800cd80 <_free_r>
 800cc98:	69e1      	ldr	r1, [r4, #28]
 800cc9a:	b111      	cbz	r1, 800cca2 <_reclaim_reent+0x36>
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f000 f86f 	bl	800cd80 <_free_r>
 800cca2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cca4:	b111      	cbz	r1, 800ccac <_reclaim_reent+0x40>
 800cca6:	4620      	mov	r0, r4
 800cca8:	f000 f86a 	bl	800cd80 <_free_r>
 800ccac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccae:	b111      	cbz	r1, 800ccb6 <_reclaim_reent+0x4a>
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f000 f865 	bl	800cd80 <_free_r>
 800ccb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ccb8:	b111      	cbz	r1, 800ccc0 <_reclaim_reent+0x54>
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 f860 	bl	800cd80 <_free_r>
 800ccc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ccc2:	b111      	cbz	r1, 800ccca <_reclaim_reent+0x5e>
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f000 f85b 	bl	800cd80 <_free_r>
 800ccca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cccc:	b111      	cbz	r1, 800ccd4 <_reclaim_reent+0x68>
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f000 f856 	bl	800cd80 <_free_r>
 800ccd4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ccd6:	b111      	cbz	r1, 800ccde <_reclaim_reent+0x72>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f000 f851 	bl	800cd80 <_free_r>
 800ccde:	6a23      	ldr	r3, [r4, #32]
 800cce0:	b1b3      	cbz	r3, 800cd10 <_reclaim_reent+0xa4>
 800cce2:	4620      	mov	r0, r4
 800cce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cce8:	4718      	bx	r3
 800ccea:	5949      	ldr	r1, [r1, r5]
 800ccec:	b941      	cbnz	r1, 800cd00 <_reclaim_reent+0x94>
 800ccee:	3504      	adds	r5, #4
 800ccf0:	69e3      	ldr	r3, [r4, #28]
 800ccf2:	2d80      	cmp	r5, #128	; 0x80
 800ccf4:	68d9      	ldr	r1, [r3, #12]
 800ccf6:	d1f8      	bne.n	800ccea <_reclaim_reent+0x7e>
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 f841 	bl	800cd80 <_free_r>
 800ccfe:	e7c0      	b.n	800cc82 <_reclaim_reent+0x16>
 800cd00:	680e      	ldr	r6, [r1, #0]
 800cd02:	4620      	mov	r0, r4
 800cd04:	f000 f83c 	bl	800cd80 <_free_r>
 800cd08:	4631      	mov	r1, r6
 800cd0a:	e7ef      	b.n	800ccec <_reclaim_reent+0x80>
 800cd0c:	2500      	movs	r5, #0
 800cd0e:	e7ef      	b.n	800ccf0 <_reclaim_reent+0x84>
 800cd10:	bd70      	pop	{r4, r5, r6, pc}
 800cd12:	bf00      	nop
 800cd14:	2000005c 	.word	0x2000005c

0800cd18 <__libc_init_array>:
 800cd18:	b570      	push	{r4, r5, r6, lr}
 800cd1a:	4d0d      	ldr	r5, [pc, #52]	; (800cd50 <__libc_init_array+0x38>)
 800cd1c:	4c0d      	ldr	r4, [pc, #52]	; (800cd54 <__libc_init_array+0x3c>)
 800cd1e:	1b64      	subs	r4, r4, r5
 800cd20:	10a4      	asrs	r4, r4, #2
 800cd22:	2600      	movs	r6, #0
 800cd24:	42a6      	cmp	r6, r4
 800cd26:	d109      	bne.n	800cd3c <__libc_init_array+0x24>
 800cd28:	4d0b      	ldr	r5, [pc, #44]	; (800cd58 <__libc_init_array+0x40>)
 800cd2a:	4c0c      	ldr	r4, [pc, #48]	; (800cd5c <__libc_init_array+0x44>)
 800cd2c:	f000 f880 	bl	800ce30 <_init>
 800cd30:	1b64      	subs	r4, r4, r5
 800cd32:	10a4      	asrs	r4, r4, #2
 800cd34:	2600      	movs	r6, #0
 800cd36:	42a6      	cmp	r6, r4
 800cd38:	d105      	bne.n	800cd46 <__libc_init_array+0x2e>
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd40:	4798      	blx	r3
 800cd42:	3601      	adds	r6, #1
 800cd44:	e7ee      	b.n	800cd24 <__libc_init_array+0xc>
 800cd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4a:	4798      	blx	r3
 800cd4c:	3601      	adds	r6, #1
 800cd4e:	e7f2      	b.n	800cd36 <__libc_init_array+0x1e>
 800cd50:	0800d150 	.word	0x0800d150
 800cd54:	0800d150 	.word	0x0800d150
 800cd58:	0800d150 	.word	0x0800d150
 800cd5c:	0800d154 	.word	0x0800d154

0800cd60 <__retarget_lock_acquire_recursive>:
 800cd60:	4770      	bx	lr

0800cd62 <__retarget_lock_release_recursive>:
 800cd62:	4770      	bx	lr

0800cd64 <memcpy>:
 800cd64:	440a      	add	r2, r1
 800cd66:	4291      	cmp	r1, r2
 800cd68:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd6c:	d100      	bne.n	800cd70 <memcpy+0xc>
 800cd6e:	4770      	bx	lr
 800cd70:	b510      	push	{r4, lr}
 800cd72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd7a:	4291      	cmp	r1, r2
 800cd7c:	d1f9      	bne.n	800cd72 <memcpy+0xe>
 800cd7e:	bd10      	pop	{r4, pc}

0800cd80 <_free_r>:
 800cd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd82:	2900      	cmp	r1, #0
 800cd84:	d044      	beq.n	800ce10 <_free_r+0x90>
 800cd86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd8a:	9001      	str	r0, [sp, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f1a1 0404 	sub.w	r4, r1, #4
 800cd92:	bfb8      	it	lt
 800cd94:	18e4      	addlt	r4, r4, r3
 800cd96:	f000 f83f 	bl	800ce18 <__malloc_lock>
 800cd9a:	4a1e      	ldr	r2, [pc, #120]	; (800ce14 <_free_r+0x94>)
 800cd9c:	9801      	ldr	r0, [sp, #4]
 800cd9e:	6813      	ldr	r3, [r2, #0]
 800cda0:	b933      	cbnz	r3, 800cdb0 <_free_r+0x30>
 800cda2:	6063      	str	r3, [r4, #4]
 800cda4:	6014      	str	r4, [r2, #0]
 800cda6:	b003      	add	sp, #12
 800cda8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdac:	f000 b83a 	b.w	800ce24 <__malloc_unlock>
 800cdb0:	42a3      	cmp	r3, r4
 800cdb2:	d908      	bls.n	800cdc6 <_free_r+0x46>
 800cdb4:	6825      	ldr	r5, [r4, #0]
 800cdb6:	1961      	adds	r1, r4, r5
 800cdb8:	428b      	cmp	r3, r1
 800cdba:	bf01      	itttt	eq
 800cdbc:	6819      	ldreq	r1, [r3, #0]
 800cdbe:	685b      	ldreq	r3, [r3, #4]
 800cdc0:	1949      	addeq	r1, r1, r5
 800cdc2:	6021      	streq	r1, [r4, #0]
 800cdc4:	e7ed      	b.n	800cda2 <_free_r+0x22>
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	b10b      	cbz	r3, 800cdd0 <_free_r+0x50>
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	d9fa      	bls.n	800cdc6 <_free_r+0x46>
 800cdd0:	6811      	ldr	r1, [r2, #0]
 800cdd2:	1855      	adds	r5, r2, r1
 800cdd4:	42a5      	cmp	r5, r4
 800cdd6:	d10b      	bne.n	800cdf0 <_free_r+0x70>
 800cdd8:	6824      	ldr	r4, [r4, #0]
 800cdda:	4421      	add	r1, r4
 800cddc:	1854      	adds	r4, r2, r1
 800cdde:	42a3      	cmp	r3, r4
 800cde0:	6011      	str	r1, [r2, #0]
 800cde2:	d1e0      	bne.n	800cda6 <_free_r+0x26>
 800cde4:	681c      	ldr	r4, [r3, #0]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	6053      	str	r3, [r2, #4]
 800cdea:	440c      	add	r4, r1
 800cdec:	6014      	str	r4, [r2, #0]
 800cdee:	e7da      	b.n	800cda6 <_free_r+0x26>
 800cdf0:	d902      	bls.n	800cdf8 <_free_r+0x78>
 800cdf2:	230c      	movs	r3, #12
 800cdf4:	6003      	str	r3, [r0, #0]
 800cdf6:	e7d6      	b.n	800cda6 <_free_r+0x26>
 800cdf8:	6825      	ldr	r5, [r4, #0]
 800cdfa:	1961      	adds	r1, r4, r5
 800cdfc:	428b      	cmp	r3, r1
 800cdfe:	bf04      	itt	eq
 800ce00:	6819      	ldreq	r1, [r3, #0]
 800ce02:	685b      	ldreq	r3, [r3, #4]
 800ce04:	6063      	str	r3, [r4, #4]
 800ce06:	bf04      	itt	eq
 800ce08:	1949      	addeq	r1, r1, r5
 800ce0a:	6021      	streq	r1, [r4, #0]
 800ce0c:	6054      	str	r4, [r2, #4]
 800ce0e:	e7ca      	b.n	800cda6 <_free_r+0x26>
 800ce10:	b003      	add	sp, #12
 800ce12:	bd30      	pop	{r4, r5, pc}
 800ce14:	20002b9c 	.word	0x20002b9c

0800ce18 <__malloc_lock>:
 800ce18:	4801      	ldr	r0, [pc, #4]	; (800ce20 <__malloc_lock+0x8>)
 800ce1a:	f7ff bfa1 	b.w	800cd60 <__retarget_lock_acquire_recursive>
 800ce1e:	bf00      	nop
 800ce20:	20002b98 	.word	0x20002b98

0800ce24 <__malloc_unlock>:
 800ce24:	4801      	ldr	r0, [pc, #4]	; (800ce2c <__malloc_unlock+0x8>)
 800ce26:	f7ff bf9c 	b.w	800cd62 <__retarget_lock_release_recursive>
 800ce2a:	bf00      	nop
 800ce2c:	20002b98 	.word	0x20002b98

0800ce30 <_init>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	bf00      	nop
 800ce34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce36:	bc08      	pop	{r3}
 800ce38:	469e      	mov	lr, r3
 800ce3a:	4770      	bx	lr

0800ce3c <_fini>:
 800ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3e:	bf00      	nop
 800ce40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce42:	bc08      	pop	{r3}
 800ce44:	469e      	mov	lr, r3
 800ce46:	4770      	bx	lr
