
plants_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b698  0800b698  0001b698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e8  0800b8e8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8f0  0800b8f0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8f0  0800b8f0  0001b8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8f4  0800b8f4  0001b8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a78  20000060  0800b958  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad8  0800b958  00022ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002471b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004814  00000000  00000000  000447ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d40  00000000  00000000  00049008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a3  00000000  00000000  0004ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c7a  00000000  00000000  0004c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000224f8  00000000  00000000  00070065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee077  00000000  00000000  0009255d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008230  00000000  00000000  001805d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00188804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b680 	.word	0x0800b680

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800b680 	.word	0x0800b680

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00a fb1b 	bl	800b4ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ee2:	f002 fc4f 	bl	8003784 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000eec:	f000 fac6 	bl	800147c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000efc:	f004 f87e 	bl	8004ffc <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f06:	f000 fab9 	bl	800147c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_ADC1_Init+0xec>)
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0e:	2306      	movs	r3, #6
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f12:	2305      	movs	r3, #5
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000f28:	f003 fa32 	bl	8004390 <HAL_ADC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f32:	f000 faa3 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000007c 	.word	0x2000007c
 8000f44:	04300002 	.word	0x04300002

08000f48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09e      	sub	sp, #120	; 0x78
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2250      	movs	r2, #80	; 0x50
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00a fa9f 	bl	800b4ac <memset>
  if(adcHandle->Instance==ADC1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f76:	d13c      	bne.n	8000ff2 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f82:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 f9eb 	bl	8006364 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f000 fa72 	bl	800147c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ANALOG_IN_Pin;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f004 f9d5 	bl	800538c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2012      	movs	r0, #18
 8000fe8:	f004 f9a8 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fec:	2012      	movs	r0, #18
 8000fee:	f004 f9bf 	bl	8005370 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3778      	adds	r7, #120	; 0x78
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <readADCData>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
uint32_t readADCData(ADC_HandleTypeDef _adcHandle)
{
 8001000:	b084      	sub	sp, #16
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	f107 0c10 	add.w	ip, r7, #16
 800100c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t analogReadValue;

	HAL_ADC_Start(&_adcHandle);
 8001010:	f107 0010 	add.w	r0, r7, #16
 8001014:	f002 fd64 	bl	8003ae0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&_adcHandle, 1000);
 8001018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101c:	f107 0010 	add.w	r0, r7, #16
 8001020:	f002 fe5c 	bl	8003cdc <HAL_ADC_PollForConversion>

	analogReadValue = (uint32_t) HAL_ADC_GetValue(&_adcHandle);
 8001024:	f107 0010 	add.w	r0, r7, #16
 8001028:	f002 ff4c 	bl	8003ec4 <HAL_ADC_GetValue>
 800102c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&_adcHandle);
 800102e:	f107 0010 	add.w	r0, r7, #16
 8001032:	f002 fe1f 	bl	8003c74 <HAL_ADC_Stop>

	return analogReadValue;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001042:	b004      	add	sp, #16
 8001044:	4770      	bx	lr
	...

08001048 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UART_Semaphore */
  UART_SemaphoreHandle = osSemaphoreNew(1, 0, &UART_Semaphore_attributes);
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <MX_FREERTOS_Init+0x98>)
 800104e:	2100      	movs	r1, #0
 8001050:	2001      	movs	r0, #1
 8001052:	f006 ff34 	bl	8007ebe <osSemaphoreNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <MX_FREERTOS_Init+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Semaphore */
  ADC_SemaphoreHandle = osSemaphoreNew(1, 0, &ADC_Semaphore_attributes);
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <MX_FREERTOS_Init+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	2001      	movs	r0, #1
 8001062:	f006 ff2c 	bl	8007ebe <osSemaphoreNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <MX_FREERTOS_Init+0xa4>)
 800106a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueToUART */
  queueToUARTHandle = osMessageQueueNew (16, sizeof(SensorData), &queueToUART_attributes);
 800106c:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <MX_FREERTOS_Init+0xa8>)
 800106e:	2108      	movs	r1, #8
 8001070:	2010      	movs	r0, #16
 8001072:	f007 f843 	bl	80080fc <osMessageQueueNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <MX_FREERTOS_Init+0xac>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of queueToPump */
  queueToPumpHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueToPump_attributes);
 800107c:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <MX_FREERTOS_Init+0xb0>)
 800107e:	2102      	movs	r1, #2
 8001080:	2010      	movs	r0, #16
 8001082:	f007 f83b 	bl	80080fc <osMessageQueueNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_FREERTOS_Init+0xb4>)
 800108a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensAnalog01 */
  sensAnalog01Handle = osThreadNew(sensAnalog01Task, NULL, &sensAnalog01_attributes);
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_FREERTOS_Init+0xb8>)
 800108e:	2100      	movs	r1, #0
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <MX_FREERTOS_Init+0xbc>)
 8001092:	f006 fe67 	bl	8007d64 <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <MX_FREERTOS_Init+0xc0>)
 800109a:	6013      	str	r3, [r2, #0]

  /* creation of sensUART */
  sensUARTHandle = osThreadNew(sensUARTTask, NULL, &sensUART_attributes);
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_FREERTOS_Init+0xc4>)
 800109e:	2100      	movs	r1, #0
 80010a0:	481b      	ldr	r0, [pc, #108]	; (8001110 <MX_FREERTOS_Init+0xc8>)
 80010a2:	f006 fe5f 	bl	8007d64 <osThreadNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <MX_FREERTOS_Init+0xcc>)
 80010aa:	6013      	str	r3, [r2, #0]

  /* creation of sensI2C */
  sensI2CHandle = osThreadNew(sensI2CTask, NULL, &sensI2C_attributes);
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <MX_FREERTOS_Init+0xd0>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	481a      	ldr	r0, [pc, #104]	; (800111c <MX_FREERTOS_Init+0xd4>)
 80010b2:	f006 fe57 	bl	8007d64 <osThreadNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <MX_FREERTOS_Init+0xd8>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* creation of sensAnalog02 */
  sensAnalog02Handle = osThreadNew(sensAnalog02Task, NULL, &sensAnalog02_attributes);
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <MX_FREERTOS_Init+0xdc>)
 80010be:	2100      	movs	r1, #0
 80010c0:	4819      	ldr	r0, [pc, #100]	; (8001128 <MX_FREERTOS_Init+0xe0>)
 80010c2:	f006 fe4f 	bl	8007d64 <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <MX_FREERTOS_Init+0xe4>)
 80010ca:	6013      	str	r3, [r2, #0]

  /* creation of pumpTask */
  pumpTaskHandle = osThreadNew(StartPumpTask, NULL, &pumpTask_attributes);
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_FREERTOS_Init+0xe8>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4818      	ldr	r0, [pc, #96]	; (8001134 <MX_FREERTOS_Init+0xec>)
 80010d2:	f006 fe47 	bl	8007d64 <osThreadNew>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_FREERTOS_Init+0xf0>)
 80010da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	0800b838 	.word	0x0800b838
 80010e4:	20000104 	.word	0x20000104
 80010e8:	0800b848 	.word	0x0800b848
 80010ec:	20000108 	.word	0x20000108
 80010f0:	0800b808 	.word	0x0800b808
 80010f4:	200000fc 	.word	0x200000fc
 80010f8:	0800b820 	.word	0x0800b820
 80010fc:	20000100 	.word	0x20000100
 8001100:	0800b754 	.word	0x0800b754
 8001104:	0800113d 	.word	0x0800113d
 8001108:	200000e8 	.word	0x200000e8
 800110c:	0800b778 	.word	0x0800b778
 8001110:	080011b1 	.word	0x080011b1
 8001114:	200000ec 	.word	0x200000ec
 8001118:	0800b79c 	.word	0x0800b79c
 800111c:	080011e9 	.word	0x080011e9
 8001120:	200000f0 	.word	0x200000f0
 8001124:	0800b7c0 	.word	0x0800b7c0
 8001128:	080011f9 	.word	0x080011f9
 800112c:	200000f4 	.word	0x200000f4
 8001130:	0800b7e4 	.word	0x0800b7e4
 8001134:	08001265 	.word	0x08001265
 8001138:	200000f8 	.word	0x200000f8

0800113c <sensAnalog01Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sensAnalog01Task */
void sensAnalog01Task(void *argument)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b09d      	sub	sp, #116	; 0x74
 8001140:	af18      	add	r7, sp, #96	; 0x60
 8001142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog01Task */
	SensorData analog1task =
 8001144:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <sensAnalog01Task+0x64>)
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}
	};

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <sensAnalog01Task+0x68>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2164      	movs	r1, #100	; 0x64
 8001158:	4618      	mov	r0, r3
 800115a:	f006 ff39 	bl	8007fd0 <osSemaphoreAcquire>
	  analog1task.data = readADCData(hadc1);
 800115e:	4c12      	ldr	r4, [pc, #72]	; (80011a8 <sensAnalog01Task+0x6c>)
 8001160:	4668      	mov	r0, sp
 8001162:	f104 0310 	add.w	r3, r4, #16
 8001166:	225c      	movs	r2, #92	; 0x5c
 8001168:	4619      	mov	r1, r3
 800116a:	f00a fa23 	bl	800b5b4 <memcpy>
 800116e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001172:	f7ff ff45 	bl	8001000 <readADCData>
 8001176:	4603      	mov	r3, r0
 8001178:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <sensAnalog01Task+0x68>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f006 ff78 	bl	8008074 <osSemaphoreRelease>
	  //analog1task.data = 4321;

	  if(osOK==osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog1task, 0, osWaitForever))
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <sensAnalog01Task+0x70>)
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	f107 0108 	add.w	r1, r7, #8
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	2200      	movs	r2, #0
 8001192:	f007 f827 	bl	80081e4 <osMessageQueuePut>
	  {
		  //printf("Sending %d from %d \n \r", analog1task.data, analog1task.id);
	  }


    osDelay(1000);
 8001196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119a:	f006 fe75 	bl	8007e88 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 800119e:	e7d8      	b.n	8001152 <sensAnalog01Task+0x16>
 80011a0:	0800b710 	.word	0x0800b710
 80011a4:	20000108 	.word	0x20000108
 80011a8:	2000007c 	.word	0x2000007c
 80011ac:	200000fc 	.word	0x200000fc

080011b0 <sensUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensUARTTask */
void sensUARTTask(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensUARTTask */
	SensorData receivedData;
  /* Infinite loop */
  for(;;)
  {
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <sensUARTTask+0x30>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f107 0108 	add.w	r1, r7, #8
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	2200      	movs	r2, #0
 80011c6:	f007 f86d 	bl	80082a4 <osMessageQueueGet>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f3      	bne.n	80011b8 <sensUARTTask+0x8>
	{
		printf("%d : %d \n \r", receivedData.id, receivedData.data);
 80011d0:	7a3b      	ldrb	r3, [r7, #8]
 80011d2:	4619      	mov	r1, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <sensUARTTask+0x34>)
 80011da:	f001 fda3 	bl	8002d24 <printf_>
	if(osOK == osMessageQueueGet(queueToUARTHandle, (SensorData*)&receivedData, 0, osWaitForever))
 80011de:	e7eb      	b.n	80011b8 <sensUARTTask+0x8>
 80011e0:	200000fc 	.word	0x200000fc
 80011e4:	0800b718 	.word	0x0800b718

080011e8 <sensI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensI2CTask */
void sensI2CTask(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensI2CTask */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f006 fe49 	bl	8007e88 <osDelay>
 80011f6:	e7fb      	b.n	80011f0 <sensI2CTask+0x8>

080011f8 <sensAnalog02Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensAnalog02Task */
void sensAnalog02Task(void *argument)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b09d      	sub	sp, #116	; 0x74
 80011fc:	af18      	add	r7, sp, #96	; 0x60
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalog02Task */
	SensorData analog2task =
 8001200:	2302      	movs	r3, #2
 8001202:	723b      	strb	r3, [r7, #8]
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
	};

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <sensAnalog02Task+0x60>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	4618      	mov	r0, r3
 8001210:	f006 fede 	bl	8007fd0 <osSemaphoreAcquire>
	  analog2task.data = readADCData(hadc1);
 8001214:	4c11      	ldr	r4, [pc, #68]	; (800125c <sensAnalog02Task+0x64>)
 8001216:	4668      	mov	r0, sp
 8001218:	f104 0310 	add.w	r3, r4, #16
 800121c:	225c      	movs	r2, #92	; 0x5c
 800121e:	4619      	mov	r1, r3
 8001220:	f00a f9c8 	bl	800b5b4 <memcpy>
 8001224:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001228:	f7ff feea 	bl	8001000 <readADCData>
 800122c:	4603      	mov	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(ADC_SemaphoreHandle);
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <sensAnalog02Task+0x60>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f006 ff1d 	bl	8008074 <osSemaphoreRelease>
//	  analog2task.data = 1234;
	  if(osOK==osMessageQueuePut(queueToUARTHandle, (SensorData*)&analog2task, 0, osWaitForever))
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <sensAnalog02Task+0x68>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f107 0108 	add.w	r1, r7, #8
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	2200      	movs	r2, #0
 8001248:	f006 ffcc 	bl	80081e4 <osMessageQueuePut>
	  {
	  //printf("Sending %d from %d \n \r", analog2task.data, analog2task.id);

	  }
	  osDelay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001250:	f006 fe1a 	bl	8007e88 <osDelay>
	  osSemaphoreAcquire(ADC_SemaphoreHandle, 100);
 8001254:	e7d8      	b.n	8001208 <sensAnalog02Task+0x10>
 8001256:	bf00      	nop
 8001258:	20000108 	.word	0x20000108
 800125c:	2000007c 	.word	0x2000007c
 8001260:	200000fc 	.word	0x200000fc

08001264 <StartPumpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPumpTask */
void StartPumpTask(void *argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPumpTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800126c:	2120      	movs	r1, #32
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f004 fa25 	bl	80056c0 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127a:	f006 fe05 	bl	8007e88 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800127e:	e7f5      	b.n	800126c <StartPumpTask+0x8>

08001280 <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	//osSemaphoreAcquire(UART_SemaphoreHandle, osWaitForever);
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &character, 1, 1000);
 800128a:	1df9      	adds	r1, r7, #7
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	2201      	movs	r2, #1
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <_putchar+0x20>)
 8001294:	f005 fe2c 	bl	8006ef0 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart5, (uint8_t*) &character, 1, 1000);
	//osSemaphoreRelease(UART_SemaphoreHandle);
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000158 	.word	0x20000158

080012a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MX_GPIO_Init+0xec>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <MX_GPIO_Init+0xec>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MX_GPIO_Init+0xec>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_GPIO_Init+0xec>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a2e      	ldr	r2, [pc, #184]	; (8001390 <MX_GPIO_Init+0xec>)
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <MX_GPIO_Init+0xec>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_GPIO_Init+0xec>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <MX_GPIO_Init+0xec>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_GPIO_Init+0xec>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <MX_GPIO_Init+0xec>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <MX_GPIO_Init+0xec>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <MX_GPIO_Init+0xec>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_GPIO_Init+0xec>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <MX_GPIO_Init+0xec>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_GPIO_Init+0xec>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2120      	movs	r1, #32
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f004 f9a9 	bl	8005690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800133e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001344:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	480f      	ldr	r0, [pc, #60]	; (8001394 <MX_GPIO_Init+0xf0>)
 8001356:	f004 f819 	bl	800538c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800135a:	2320      	movs	r3, #32
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f004 f80a 	bl	800538c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2105      	movs	r1, #5
 800137c:	2028      	movs	r0, #40	; 0x28
 800137e:	f003 ffdd 	bl	800533c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001382:	2028      	movs	r0, #40	; 0x28
 8001384:	f003 fff4 	bl	8005370 <HAL_NVIC_EnableIRQ>

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	48000800 	.word	0x48000800

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f001 ff2d 	bl	80031fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f80f 	bl	80013c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f7ff ff7e 	bl	80012a4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80013a8:	f001 fdb2 	bl	8002f10 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80013ac:	f7ff fd54 	bl	8000e58 <MX_ADC1_Init>
  MX_UART5_Init();
 80013b0:	f001 fdf8 	bl	8002fa4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013b4:	f006 fc8c 	bl	8007cd0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80013b8:	f7ff fe46 	bl	8001048 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013bc:	f006 fcac 	bl	8007d18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <main+0x28>

080013c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b094      	sub	sp, #80	; 0x50
 80013c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c8:	f107 0318 	add.w	r3, r7, #24
 80013cc:	2238      	movs	r2, #56	; 0x38
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00a f86b 	bl	800b4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f004 f9a9 	bl	800573c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f8:	2302      	movs	r3, #2
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013fc:	2302      	movs	r3, #2
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001400:	2304      	movs	r3, #4
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001404:	2355      	movs	r3, #85	; 0x55
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001410:	2302      	movs	r3, #2
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fa43 	bl	80058a4 <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001424:	f000 f82a 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2303      	movs	r3, #3
 800142e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2104      	movs	r1, #4
 8001440:	4618      	mov	r0, r3
 8001442:	f004 fd41 	bl	8005ec8 <HAL_RCC_ClockConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800144c:	f000 f816 	bl	800147c <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	3750      	adds	r7, #80	; 0x50
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800146a:	f001 fedf 	bl	800322c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40012c00 	.word	0x40012c00

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>

08001486 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <_out_char+0x1e>
    _putchar(character);
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fee0 	bl	8001280 <_putchar>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e002      	b.n	80014de <_strnlen_s+0x16>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3301      	adds	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d004      	beq.n	80014f0 <_strnlen_s+0x28>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	1e5a      	subs	r2, r3, #1
 80014ea:	603a      	str	r2, [r7, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f3      	bne.n	80014d8 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1ad3      	subs	r3, r2, r3
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b2f      	cmp	r3, #47	; 0x2f
 8001510:	d904      	bls.n	800151c <_is_digit+0x1a>
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b39      	cmp	r3, #57	; 0x39
 8001516:	d801      	bhi.n	800151c <_is_digit+0x1a>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <_is_digit+0x1c>
 800151c:	2300      	movs	r3, #0
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800153c:	e00e      	b.n	800155c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4618      	mov	r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	1c59      	adds	r1, r3, #1
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6011      	str	r1, [r2, #0]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4403      	add	r3, r0
 8001558:	3b30      	subs	r3, #48	; 0x30
 800155a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ffcd 	bl	8001502 <_is_digit>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1e7      	bne.n	800153e <_atoi+0xe>
  }
  return i;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800158a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d125      	bne.n	80015e0 <_out_rev+0x68>
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d120      	bne.n	80015e0 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e00a      	b.n	80015ba <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	1c53      	adds	r3, r2, #1
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	68fc      	ldr	r4, [r7, #12]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	2020      	movs	r0, #32
 80015b2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3f0      	bcc.n	80015a4 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80015c2:	e00d      	b.n	80015e0 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	3b01      	subs	r3, #1
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	4413      	add	r3, r2
 80015d0:	7818      	ldrb	r0, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	1c53      	adds	r3, r2, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	68fc      	ldr	r4, [r7, #12]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	47a0      	blx	r4
  while (len) {
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ee      	bne.n	80015c4 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <_out_rev+0x96>
    while (idx - start_idx < width) {
 80015f0:	e007      	b.n	8001602 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	1c53      	adds	r3, r2, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	68fc      	ldr	r4, [r7, #12]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	2020      	movs	r0, #32
 8001600:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160a:	429a      	cmp	r2, r3
 800160c:	d8f1      	bhi.n	80015f2 <_out_rev+0x7a>
    }
  }

  return idx;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}

08001618 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af04      	add	r7, sp, #16
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d136      	bne.n	800169e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	2b00      	cmp	r3, #0
 8001634:	d018      	beq.n	8001668 <_ntoa_format+0x50>
 8001636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d013      	beq.n	8001668 <_ntoa_format+0x50>
 8001640:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d104      	bne.n	8001652 <_ntoa_format+0x3a>
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00a      	beq.n	8001668 <_ntoa_format+0x50>
      width--;
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001654:	3b01      	subs	r3, #1
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001658:	e006      	b.n	8001668 <_ntoa_format+0x50>
      buf[len++] = '0';
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	61fa      	str	r2, [r7, #28]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4413      	add	r3, r2
 8001664:	2230      	movs	r2, #48	; 0x30
 8001666:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	429a      	cmp	r2, r3
 800166e:	d20a      	bcs.n	8001686 <_ntoa_format+0x6e>
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b1f      	cmp	r3, #31
 8001674:	d9f1      	bls.n	800165a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001676:	e006      	b.n	8001686 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	61fa      	str	r2, [r7, #28]
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4413      	add	r3, r2
 8001682:	2230      	movs	r2, #48	; 0x30
 8001684:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <_ntoa_format+0x86>
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	429a      	cmp	r2, r3
 8001696:	d202      	bcs.n	800169e <_ntoa_format+0x86>
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b1f      	cmp	r3, #31
 800169c:	d9ec      	bls.n	8001678 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d058      	beq.n	800175a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80016a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <_ntoa_format+0xc8>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <_ntoa_format+0xc8>
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016bc:	429a      	cmp	r2, r3
 80016be:	d003      	beq.n	80016c8 <_ntoa_format+0xb0>
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d10b      	bne.n	80016e0 <_ntoa_format+0xc8>
      len--;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <_ntoa_format+0xc8>
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d102      	bne.n	80016e0 <_ntoa_format+0xc8>
        len--;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b01      	subs	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d10f      	bne.n	8001706 <_ntoa_format+0xee>
 80016e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10a      	bne.n	8001706 <_ntoa_format+0xee>
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	2b1f      	cmp	r3, #31
 80016f4:	d807      	bhi.n	8001706 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	61fa      	str	r2, [r7, #28]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4413      	add	r3, r2
 8001700:	2278      	movs	r2, #120	; 0x78
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	e01f      	b.n	8001746 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	2b10      	cmp	r3, #16
 800170a:	d10f      	bne.n	800172c <_ntoa_format+0x114>
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <_ntoa_format+0x114>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b1f      	cmp	r3, #31
 800171a:	d807      	bhi.n	800172c <_ntoa_format+0x114>
      buf[len++] = 'X';
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	61fa      	str	r2, [r7, #28]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4413      	add	r3, r2
 8001726:	2258      	movs	r2, #88	; 0x58
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e00c      	b.n	8001746 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	2b02      	cmp	r3, #2
 8001730:	d109      	bne.n	8001746 <_ntoa_format+0x12e>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	2b1f      	cmp	r3, #31
 8001736:	d806      	bhi.n	8001746 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	61fa      	str	r2, [r7, #28]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4413      	add	r3, r2
 8001742:	2262      	movs	r2, #98	; 0x62
 8001744:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b1f      	cmp	r3, #31
 800174a:	d806      	bhi.n	800175a <_ntoa_format+0x142>
      buf[len++] = '0';
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	61fa      	str	r2, [r7, #28]
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4413      	add	r3, r2
 8001756:	2230      	movs	r2, #48	; 0x30
 8001758:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	2b1f      	cmp	r3, #31
 800175e:	d824      	bhi.n	80017aa <_ntoa_format+0x192>
    if (negative) {
 8001760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	61fa      	str	r2, [r7, #28]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4413      	add	r3, r2
 8001772:	222d      	movs	r2, #45	; 0x2d
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e018      	b.n	80017aa <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	61fa      	str	r2, [r7, #28]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4413      	add	r3, r2
 800178c:	222b      	movs	r2, #43	; 0x2b
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e00b      	b.n	80017aa <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <_ntoa_format+0x192>
      buf[len++] = ' ';
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	61fa      	str	r2, [r7, #28]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4413      	add	r3, r2
 80017a6:	2220      	movs	r2, #32
 80017a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	9303      	str	r3, [sp, #12]
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	9302      	str	r3, [sp, #8]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fed9 	bl	8001578 <_out_rev>
 80017c6:	4603      	mov	r3, r0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	af08      	add	r7, sp, #32
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80017e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d103      	bne.n	80017f0 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	f023 0310 	bic.w	r3, r3, #16
 80017ee:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80017f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <_ntoa_long+0x30>
 80017fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d032      	beq.n	8001866 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001804:	fbb3 f2f2 	udiv	r2, r3, r2
 8001808:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800180a:	fb01 f202 	mul.w	r2, r1, r2
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001814:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001818:	2b09      	cmp	r3, #9
 800181a:	d804      	bhi.n	8001826 <_ntoa_long+0x56>
 800181c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001820:	3330      	adds	r3, #48	; 0x30
 8001822:	b2da      	uxtb	r2, r3
 8001824:	e00d      	b.n	8001842 <_ntoa_long+0x72>
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <_ntoa_long+0x64>
 8001830:	2241      	movs	r2, #65	; 0x41
 8001832:	e000      	b.n	8001836 <_ntoa_long+0x66>
 8001834:	2261      	movs	r2, #97	; 0x61
 8001836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800183a:	4413      	add	r3, r2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	3b0a      	subs	r3, #10
 8001840:	b2da      	uxtb	r2, r3
 8001842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001844:	1c59      	adds	r1, r3, #1
 8001846:	6379      	str	r1, [r7, #52]	; 0x34
 8001848:	3338      	adds	r3, #56	; 0x38
 800184a:	443b      	add	r3, r7
 800184c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800185a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <_ntoa_long+0x96>
 8001860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001862:	2b1f      	cmp	r3, #31
 8001864:	d9cc      	bls.n	8001800 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001868:	9306      	str	r3, [sp, #24]
 800186a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800186c:	9305      	str	r3, [sp, #20]
 800186e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001870:	9304      	str	r3, [sp, #16]
 8001872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001874:	9303      	str	r3, [sp, #12]
 8001876:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff fec3 	bl	8001618 <_ntoa_format>
 8001892:	4603      	mov	r3, r0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3738      	adds	r7, #56	; 0x38
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b096      	sub	sp, #88	; 0x58
 80018a0:	af08      	add	r7, sp, #32
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80018ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018b2:	4313      	orrs	r3, r2
 80018b4:	d103      	bne.n	80018be <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80018b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018b8:	f023 0310 	bic.w	r3, r3, #16
 80018bc:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80018be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <_ntoa_long_long+0x34>
 80018c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018cc:	4313      	orrs	r3, r2
 80018ce:	d037      	beq.n	8001940 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80018d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018d8:	f7ff f940 	bl	8000b5c <__aeabi_uldivmod>
 80018dc:	4613      	mov	r3, r2
 80018de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80018e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018e6:	2b09      	cmp	r3, #9
 80018e8:	d804      	bhi.n	80018f4 <_ntoa_long_long+0x58>
 80018ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018ee:	3330      	adds	r3, #48	; 0x30
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	e00d      	b.n	8001910 <_ntoa_long_long+0x74>
 80018f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <_ntoa_long_long+0x66>
 80018fe:	2241      	movs	r2, #65	; 0x41
 8001900:	e000      	b.n	8001904 <_ntoa_long_long+0x68>
 8001902:	2261      	movs	r2, #97	; 0x61
 8001904:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001908:	4413      	add	r3, r2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	3b0a      	subs	r3, #10
 800190e:	b2da      	uxtb	r2, r3
 8001910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001912:	1c59      	adds	r1, r3, #1
 8001914:	6379      	str	r1, [r7, #52]	; 0x34
 8001916:	3338      	adds	r3, #56	; 0x38
 8001918:	443b      	add	r3, r7
 800191a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800191e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001922:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001926:	f7ff f919 	bl	8000b5c <__aeabi_uldivmod>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001932:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001936:	4313      	orrs	r3, r2
 8001938:	d002      	beq.n	8001940 <_ntoa_long_long+0xa4>
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	2b1f      	cmp	r3, #31
 800193e:	d9c7      	bls.n	80018d0 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001942:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001944:	9206      	str	r2, [sp, #24]
 8001946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001948:	9205      	str	r2, [sp, #20]
 800194a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800194c:	9204      	str	r2, [sp, #16]
 800194e:	9303      	str	r3, [sp, #12]
 8001950:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f7ff fe56 	bl	8001618 <_ntoa_format>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3738      	adds	r7, #56	; 0x38
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b09d      	sub	sp, #116	; 0x74
 800197c:	af04      	add	r7, sp, #16
 800197e:	6178      	str	r0, [r7, #20]
 8001980:	6139      	str	r1, [r7, #16]
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800199a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800199e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a2:	f7ff f861 	bl	8000a68 <__aeabi_dcmpeq>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80019ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ae:	9303      	str	r3, [sp, #12]
 80019b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	2303      	movs	r3, #3
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	4ba7      	ldr	r3, [pc, #668]	; (8001c58 <_ftoa+0x2e0>)
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff fdd8 	bl	8001578 <_out_rev>
 80019c8:	4603      	mov	r3, r0
 80019ca:	e222      	b.n	8001e12 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80019d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019d8:	f7ff f850 	bl	8000a7c <__aeabi_dcmplt>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00f      	beq.n	8001a02 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80019e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019e4:	9303      	str	r3, [sp, #12]
 80019e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2304      	movs	r3, #4
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	4b9b      	ldr	r3, [pc, #620]	; (8001c5c <_ftoa+0x2e4>)
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	6939      	ldr	r1, [r7, #16]
 80019f8:	6978      	ldr	r0, [r7, #20]
 80019fa:	f7ff fdbd 	bl	8001578 <_out_rev>
 80019fe:	4603      	mov	r3, r0
 8001a00:	e207      	b.n	8001e12 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295
 8001a06:	4b96      	ldr	r3, [pc, #600]	; (8001c60 <_ftoa+0x2e8>)
 8001a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a0c:	f7ff f854 	bl	8000ab8 <__aeabi_dcmpgt>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01d      	beq.n	8001a52 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <_ftoa+0xac>
 8001a20:	4b90      	ldr	r3, [pc, #576]	; (8001c64 <_ftoa+0x2ec>)
 8001a22:	e000      	b.n	8001a26 <_ftoa+0xae>
 8001a24:	4b90      	ldr	r3, [pc, #576]	; (8001c68 <_ftoa+0x2f0>)
 8001a26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a28:	f002 0204 	and.w	r2, r2, #4
 8001a2c:	2a00      	cmp	r2, #0
 8001a2e:	d001      	beq.n	8001a34 <_ftoa+0xbc>
 8001a30:	2204      	movs	r2, #4
 8001a32:	e000      	b.n	8001a36 <_ftoa+0xbe>
 8001a34:	2203      	movs	r2, #3
 8001a36:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001a38:	9103      	str	r1, [sp, #12]
 8001a3a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a3c:	9102      	str	r1, [sp, #8]
 8001a3e:	9201      	str	r2, [sp, #4]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	6939      	ldr	r1, [r7, #16]
 8001a48:	6978      	ldr	r0, [r7, #20]
 8001a4a:	f7ff fd95 	bl	8001578 <_out_rev>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	e1df      	b.n	8001e12 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001a52:	a37d      	add	r3, pc, #500	; (adr r3, 8001c48 <_ftoa+0x2d0>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a5c:	f7ff f82c 	bl	8000ab8 <__aeabi_dcmpgt>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <_ftoa+0x102>
 8001a66:	a37a      	add	r3, pc, #488	; (adr r3, 8001c50 <_ftoa+0x2d8>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a70:	f7ff f804 	bl	8000a7c <__aeabi_dcmplt>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00f      	beq.n	8001a9a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	ed97 0b00 	vldr	d0, [r7]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	6939      	ldr	r1, [r7, #16]
 8001a90:	6978      	ldr	r0, [r7, #20]
 8001a92:	f000 f9c9 	bl	8001e28 <_etoa>
 8001a96:	4603      	mov	r3, r0
 8001a98:	e1bb      	b.n	8001e12 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aac:	f7fe ffe6 	bl	8000a7c <__aeabi_dcmplt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00e      	beq.n	8001ad4 <_ftoa+0x15c>
    negative = true;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	f7fe fbae 	bl	8000228 <__aeabi_dsub>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10d      	bne.n	8001afa <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001ade:	2306      	movs	r3, #6
 8001ae0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001ae2:	e00a      	b.n	8001afa <_ftoa+0x182>
    buf[len++] = '0';
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001aea:	3360      	adds	r3, #96	; 0x60
 8001aec:	443b      	add	r3, r7
 8001aee:	2230      	movs	r2, #48	; 0x30
 8001af0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af6:	3b01      	subs	r3, #1
 8001af8:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afc:	2b1f      	cmp	r3, #31
 8001afe:	d802      	bhi.n	8001b06 <_ftoa+0x18e>
 8001b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b02:	2b09      	cmp	r3, #9
 8001b04:	d8ee      	bhi.n	8001ae4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0a:	f7fe ffdf 	bl	8000acc <__aeabi_d2iz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001b12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001b14:	f7fe fcd6 	bl	80004c4 <__aeabi_i2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b20:	f7fe fb82 	bl	8000228 <__aeabi_dsub>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4a4f      	ldr	r2, [pc, #316]	; (8001c6c <_ftoa+0x2f4>)
 8001b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fd2e 	bl	8000598 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001b44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b48:	f7fe ffe8 	bl	8000b1c <__aeabi_d2uiz>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001b50:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b52:	f7fe fca7 	bl	80004a4 <__aeabi_ui2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b5e:	f7fe fb63 	bl	8000228 <__aeabi_dsub>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <_ftoa+0x2f8>)
 8001b70:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b74:	f7fe ffa0 	bl	8000ab8 <__aeabi_dcmpgt>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <_ftoa+0x234>
    ++frac;
 8001b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b80:	3301      	adds	r3, #1
 8001b82:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001b84:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b86:	f7fe fc8d 	bl	80004a4 <__aeabi_ui2d>
 8001b8a:	4a38      	ldr	r2, [pc, #224]	; (8001c6c <_ftoa+0x2f4>)
 8001b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe ff85 	bl	8000aa4 <__aeabi_dcmpge>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01a      	beq.n	8001bd6 <_ftoa+0x25e>
      frac = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8001baa:	e014      	b.n	8001bd6 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <_ftoa+0x2f8>)
 8001bb2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001bb6:	f7fe ff61 	bl	8000a7c <__aeabi_dcmplt>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <_ftoa+0x258>
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d14b      	bne.n	8001c74 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8001bdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001bde:	f7fe fc71 	bl	80004c4 <__aeabi_i2d>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bea:	f7fe fb1d 	bl	8000228 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	461c      	mov	r4, r3
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <_ftoa+0x2f8>)
 8001c00:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c04:	f7fe ff3a 	bl	8000a7c <__aeabi_dcmplt>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <_ftoa+0x29a>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	461c      	mov	r4, r3
 8001c12:	b2e3      	uxtb	r3, r4
 8001c14:	f083 0301 	eor.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <_ftoa+0x2ba>
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_ftoa+0x2f8>)
 8001c24:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c28:	f7fe ff46 	bl	8000ab8 <__aeabi_dcmpgt>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d064      	beq.n	8001cfc <_ftoa+0x384>
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8081 	beq.w	8001d40 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c40:	3301      	adds	r3, #1
 8001c42:	657b      	str	r3, [r7, #84]	; 0x54
 8001c44:	e07c      	b.n	8001d40 <_ftoa+0x3c8>
 8001c46:	bf00      	nop
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	41cdcd65 	.word	0x41cdcd65
 8001c50:	00000000 	.word	0x00000000
 8001c54:	c1cdcd65 	.word	0xc1cdcd65
 8001c58:	0800b724 	.word	0x0800b724
 8001c5c:	0800b728 	.word	0x0800b728
 8001c60:	7fefffff 	.word	0x7fefffff
 8001c64:	0800b730 	.word	0x0800b730
 8001c68:	0800b738 	.word	0x0800b738
 8001c6c:	0800b858 	.word	0x0800b858
 8001c70:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8001c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001c78:	e01f      	b.n	8001cba <_ftoa+0x342>
      --count;
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001c80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c82:	4b66      	ldr	r3, [pc, #408]	; (8001e1c <_ftoa+0x4a4>)
 8001c84:	fba3 2301 	umull	r2, r3, r3, r1
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	1aca      	subs	r2, r1, r3
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c98:	1c59      	adds	r1, r3, #1
 8001c9a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001c9c:	3230      	adds	r2, #48	; 0x30
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	3360      	adds	r3, #96	; 0x60
 8001ca2:	443b      	add	r3, r7
 8001ca4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001caa:	4a5c      	ldr	r2, [pc, #368]	; (8001e1c <_ftoa+0x4a4>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8001cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cbc:	2b1f      	cmp	r3, #31
 8001cbe:	d9dc      	bls.n	8001c7a <_ftoa+0x302>
 8001cc0:	e009      	b.n	8001cd6 <_ftoa+0x35e>
        break;
 8001cc2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001cc4:	e007      	b.n	8001cd6 <_ftoa+0x35e>
      buf[len++] = '0';
 8001cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ccc:	3360      	adds	r3, #96	; 0x60
 8001cce:	443b      	add	r3, r7
 8001cd0:	2230      	movs	r2, #48	; 0x30
 8001cd2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd8:	2b1f      	cmp	r3, #31
 8001cda:	d804      	bhi.n	8001ce6 <_ftoa+0x36e>
 8001cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cde:	1e5a      	subs	r2, r3, #1
 8001ce0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ef      	bne.n	8001cc6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce8:	2b1f      	cmp	r3, #31
 8001cea:	d829      	bhi.n	8001d40 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8001cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cf2:	3360      	adds	r3, #96	; 0x60
 8001cf4:	443b      	add	r3, r7
 8001cf6:	222e      	movs	r2, #46	; 0x2e
 8001cf8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001cfc:	e020      	b.n	8001d40 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8001cfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d00:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <_ftoa+0x4a8>)
 8001d02:	fb83 1302 	smull	r1, r3, r3, r2
 8001d06:	1099      	asrs	r1, r3, #2
 8001d08:	17d3      	asrs	r3, r2, #31
 8001d0a:	1ac9      	subs	r1, r1, r3
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	1ad1      	subs	r1, r2, r3
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001d1e:	3230      	adds	r2, #48	; 0x30
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	3360      	adds	r3, #96	; 0x60
 8001d24:	443b      	add	r3, r7
 8001d26:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2c:	4a3c      	ldr	r2, [pc, #240]	; (8001e20 <_ftoa+0x4a8>)
 8001d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d32:	1092      	asrs	r2, r2, #2
 8001d34:	17db      	asrs	r3, r3, #31
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	657b      	str	r3, [r7, #84]	; 0x54
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d42:	2b1f      	cmp	r3, #31
 8001d44:	d9db      	bls.n	8001cfe <_ftoa+0x386>
 8001d46:	e000      	b.n	8001d4a <_ftoa+0x3d2>
      break;
 8001d48:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d123      	bne.n	8001d9c <_ftoa+0x424>
 8001d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01e      	beq.n	8001d9c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d014      	beq.n	8001d8e <_ftoa+0x416>
 8001d64:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <_ftoa+0x3fe>
 8001d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <_ftoa+0x416>
      width--;
 8001d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001d7c:	e007      	b.n	8001d8e <_ftoa+0x416>
      buf[len++] = '0';
 8001d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d84:	3360      	adds	r3, #96	; 0x60
 8001d86:	443b      	add	r3, r7
 8001d88:	2230      	movs	r2, #48	; 0x30
 8001d8a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001d8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d202      	bcs.n	8001d9c <_ftoa+0x424>
 8001d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d98:	2b1f      	cmp	r3, #31
 8001d9a:	d9f0      	bls.n	8001d7e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9e:	2b1f      	cmp	r3, #31
 8001da0:	d827      	bhi.n	8001df2 <_ftoa+0x47a>
    if (negative) {
 8001da2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <_ftoa+0x444>
      buf[len++] = '-';
 8001daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001db0:	3360      	adds	r3, #96	; 0x60
 8001db2:	443b      	add	r3, r7
 8001db4:	222d      	movs	r2, #45	; 0x2d
 8001db6:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001dba:	e01a      	b.n	8001df2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8001dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dcc:	3360      	adds	r3, #96	; 0x60
 8001dce:	443b      	add	r3, r7
 8001dd0:	222b      	movs	r2, #43	; 0x2b
 8001dd2:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001dd6:	e00c      	b.n	8001df2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8001dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <_ftoa+0x47a>
      buf[len++] = ' ';
 8001de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001de8:	3360      	adds	r3, #96	; 0x60
 8001dea:	443b      	add	r3, r7
 8001dec:	2220      	movs	r2, #32
 8001dee:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df4:	9303      	str	r3, [sp, #12]
 8001df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff fbb4 	bl	8001578 <_out_rev>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3764      	adds	r7, #100	; 0x64
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	cccccccd 	.word	0xcccccccd
 8001e20:	66666667 	.word	0x66666667
 8001e24:	00000000 	.word	0x00000000

08001e28 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2c:	b09f      	sub	sp, #124	; 0x7c
 8001e2e:	af06      	add	r7, sp, #24
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24
 8001e32:	6239      	str	r1, [r7, #32]
 8001e34:	61fa      	str	r2, [r7, #28]
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001e3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e44:	f7fe fe10 	bl	8000a68 <__aeabi_dcmpeq>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d014      	beq.n	8001e78 <_etoa+0x50>
 8001e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e52:	4bc1      	ldr	r3, [pc, #772]	; (8002158 <_etoa+0x330>)
 8001e54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e58:	f7fe fe2e 	bl	8000ab8 <__aeabi_dcmpgt>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <_etoa+0x50>
 8001e62:	f04f 32ff 	mov.w	r2, #4294967295
 8001e66:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001e6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e6e:	f7fe fe05 	bl	8000a7c <__aeabi_dcmplt>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d012      	beq.n	8001e9e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001e78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	6a39      	ldr	r1, [r7, #32]
 8001e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e96:	f7ff fd6f 	bl	8001978 <_ftoa>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	e23f      	b.n	800231e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	461e      	mov	r6, r3
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eae:	f7fe fde5 	bl	8000a7c <__aeabi_dcmplt>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <_etoa+0x94>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	461e      	mov	r6, r3
 8001ebc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8001ec0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <_etoa+0xb4>
    value = -value;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	ed97 7b00 	vldr	d7, [r7]
 8001ed8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8001edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001ee8:	2306      	movs	r3, #6
 8001eea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001eee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001ef6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	0d0a      	lsrs	r2, r1, #20
 8001f04:	2300      	movs	r3, #0
 8001f06:	4613      	mov	r3, r2
 8001f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f0c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f16:	4690      	mov	r8, r2
 8001f18:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8001f1c:	4644      	mov	r4, r8
 8001f1e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8001f22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8001f26:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001f2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f2c:	f7fe faca 	bl	80004c4 <__aeabi_i2d>
 8001f30:	a37d      	add	r3, pc, #500	; (adr r3, 8002128 <_etoa+0x300>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb2f 	bl	8000598 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	a37b      	add	r3, pc, #492	; (adr r3, 8002130 <_etoa+0x308>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe f970 	bl	800022c <__adddf3>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4b7f      	ldr	r3, [pc, #508]	; (800215c <_etoa+0x334>)
 8001f5e:	f7fe f963 	bl	8000228 <__aeabi_dsub>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	a373      	add	r3, pc, #460	; (adr r3, 8002138 <_etoa+0x310>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fb12 	bl	8000598 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe f956 	bl	800022c <__adddf3>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fda0 	bl	8000acc <__aeabi_d2iz>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8001f90:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f92:	f7fe fa97 	bl	80004c4 <__aeabi_i2d>
 8001f96:	a36a      	add	r3, pc, #424	; (adr r3, 8002140 <_etoa+0x318>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fafc 	bl	8000598 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <_etoa+0x338>)
 8001fae:	f7fe f93d 	bl	800022c <__adddf3>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fd87 	bl	8000acc <__aeabi_d2iz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001fc2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001fc4:	f7fe fa7e 	bl	80004c4 <__aeabi_i2d>
 8001fc8:	a35f      	add	r3, pc, #380	; (adr r3, 8002148 <_etoa+0x320>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fae3 	bl	8000598 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4614      	mov	r4, r2
 8001fd8:	461d      	mov	r5, r3
 8001fda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001fdc:	f7fe fa72 	bl	80004c4 <__aeabi_i2d>
 8001fe0:	a35b      	add	r3, pc, #364	; (adr r3, 8002150 <_etoa+0x328>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe fad7 	bl	8000598 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4620      	mov	r0, r4
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	f7fe f919 	bl	8000228 <__aeabi_dsub>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8001ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002002:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002006:	f7fe fac7 	bl	8000598 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002014:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002018:	17da      	asrs	r2, r3, #31
 800201a:	469a      	mov	sl, r3
 800201c:	4693      	mov	fp, r2
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800202a:	2200      	movs	r2, #0
 800202c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002030:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002034:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	f7fe f8f6 	bl	800022c <__adddf3>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4690      	mov	r8, r2
 8002046:	4699      	mov	r9, r3
 8002048:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002054:	f7fe f8e8 	bl	8000228 <__aeabi_dsub>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4692      	mov	sl, r2
 800205e:	469b      	mov	fp, r3
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <_etoa+0x33c>)
 8002066:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800206a:	f7fe fbbf 	bl	80007ec <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <_etoa+0x340>)
 800207c:	f7fe f8d6 	bl	800022c <__adddf3>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002088:	f7fe fbb0 	bl	80007ec <__aeabi_ddiv>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	4b34      	ldr	r3, [pc, #208]	; (800216c <_etoa+0x344>)
 800209a:	f7fe f8c7 	bl	800022c <__adddf3>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020a6:	f7fe fba1 	bl	80007ec <__aeabi_ddiv>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4650      	mov	r0, sl
 80020b0:	4659      	mov	r1, fp
 80020b2:	f7fe f8bb 	bl	800022c <__adddf3>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4640      	mov	r0, r8
 80020bc:	4649      	mov	r1, r9
 80020be:	f7fe fb95 	bl	80007ec <__aeabi_ddiv>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <_etoa+0x348>)
 80020d0:	f7fe f8ac 	bl	800022c <__adddf3>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe fa5c 	bl	8000598 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80020e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f0:	f7fe fcc4 	bl	8000a7c <__aeabi_dcmplt>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <_etoa+0x2ee>
    expval--;
 80020fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fc:	3b01      	subs	r3, #1
 80020fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002100:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <_etoa+0x340>)
 800210a:	f7fe fb6f 	bl	80007ec <__aeabi_ddiv>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002118:	2b63      	cmp	r3, #99	; 0x63
 800211a:	dc2b      	bgt.n	8002174 <_etoa+0x34c>
 800211c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800211e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002122:	db27      	blt.n	8002174 <_etoa+0x34c>
 8002124:	2304      	movs	r3, #4
 8002126:	e026      	b.n	8002176 <_etoa+0x34e>
 8002128:	509f79fb 	.word	0x509f79fb
 800212c:	3fd34413 	.word	0x3fd34413
 8002130:	8b60c8b3 	.word	0x8b60c8b3
 8002134:	3fc68a28 	.word	0x3fc68a28
 8002138:	636f4361 	.word	0x636f4361
 800213c:	3fd287a7 	.word	0x3fd287a7
 8002140:	0979a371 	.word	0x0979a371
 8002144:	400a934f 	.word	0x400a934f
 8002148:	bbb55516 	.word	0xbbb55516
 800214c:	40026bb1 	.word	0x40026bb1
 8002150:	fefa39ef 	.word	0xfefa39ef
 8002154:	3fe62e42 	.word	0x3fe62e42
 8002158:	7fefffff 	.word	0x7fefffff
 800215c:	3ff80000 	.word	0x3ff80000
 8002160:	3fe00000 	.word	0x3fe00000
 8002164:	402c0000 	.word	0x402c0000
 8002168:	40240000 	.word	0x40240000
 800216c:	40180000 	.word	0x40180000
 8002170:	3ff00000 	.word	0x3ff00000
 8002174:	2305      	movs	r3, #5
 8002176:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800217c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002180:	2b00      	cmp	r3, #0
 8002182:	d03d      	beq.n	8002200 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002184:	a368      	add	r3, pc, #416	; (adr r3, 8002328 <_etoa+0x500>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800218e:	f7fe fc89 	bl	8000aa4 <__aeabi_dcmpge>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d024      	beq.n	80021e2 <_etoa+0x3ba>
 8002198:	a365      	add	r3, pc, #404	; (adr r3, 8002330 <_etoa+0x508>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021a2:	f7fe fc6b 	bl	8000a7c <__aeabi_dcmplt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01a      	beq.n	80021e2 <_etoa+0x3ba>
      if ((int)prec > expval) {
 80021ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021b2:	429a      	cmp	r2, r3
 80021b4:	da07      	bge.n	80021c6 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80021b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80021ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021c4:	e002      	b.n	80021cc <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80021cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021e0:	e00e      	b.n	8002200 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80021e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <_etoa+0x3d8>
 80021ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <_etoa+0x3d8>
        --prec;
 80021f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002204:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002206:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800220a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800220c:	429a      	cmp	r2, r3
 800220e:	d904      	bls.n	800221a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	657b      	str	r3, [r7, #84]	; 0x54
 8002218:	e001      	b.n	800221e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800221e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <_etoa+0x40c>
 800222a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <_etoa+0x426>
    value /= conv.F;
 800223a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800223e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002242:	f7fe fad3 	bl	80007ec <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002252:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <_etoa+0x440>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e003      	b.n	8002270 <_etoa+0x448>
 8002268:	ed97 7b04 	vldr	d7, [r7, #16]
 800226c:	ed87 7b02 	vstr	d7, [r7, #8]
 8002270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	ed97 0b02 	vldr	d0, [r7, #8]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002290:	f7ff fb72 	bl	8001978 <_ftoa>
 8002294:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03f      	beq.n	800231c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800229c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <_etoa+0x484>
 80022a8:	2045      	movs	r0, #69	; 0x45
 80022aa:	e000      	b.n	80022ae <_etoa+0x486>
 80022ac:	2065      	movs	r0, #101	; 0x65
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	1c53      	adds	r3, r2, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	6a39      	ldr	r1, [r7, #32]
 80022ba:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bfb8      	it	lt
 80022c2:	425b      	neglt	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c8:	0fdb      	lsrs	r3, r3, #31
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022ce:	3a01      	subs	r2, #1
 80022d0:	2105      	movs	r1, #5
 80022d2:	9105      	str	r1, [sp, #20]
 80022d4:	9204      	str	r2, [sp, #16]
 80022d6:	2200      	movs	r2, #0
 80022d8:	9203      	str	r2, [sp, #12]
 80022da:	220a      	movs	r2, #10
 80022dc:	9202      	str	r2, [sp, #8]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	9000      	str	r0, [sp, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	6a39      	ldr	r1, [r7, #32]
 80022e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022ea:	f7ff fa71 	bl	80017d0 <_ntoa_long>
 80022ee:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80022f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00f      	beq.n	800231c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80022fc:	e007      	b.n	800230e <_etoa+0x4e6>
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	1c53      	adds	r3, r2, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	2020      	movs	r0, #32
 800230c:	47a0      	blx	r4
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f0      	bhi.n	80022fe <_etoa+0x4d6>
    }
  }
  return idx;
 800231c:	69fb      	ldr	r3, [r7, #28]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3764      	adds	r7, #100	; 0x64
 8002322:	46bd      	mov	sp, r7
 8002324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002328:	eb1c432d 	.word	0xeb1c432d
 800232c:	3f1a36e2 	.word	0x3f1a36e2
 8002330:	00000000 	.word	0x00000000
 8002334:	412e8480 	.word	0x412e8480

08002338 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800233c:	b0a3      	sub	sp, #140	; 0x8c
 800233e:	af0a      	add	r7, sp, #40	; 0x28
 8002340:	6178      	str	r0, [r7, #20]
 8002342:	6139      	str	r1, [r7, #16]
 8002344:	60fa      	str	r2, [r7, #12]
 8002346:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 84cf 	bne.w	8002cf2 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8002354:	4ba8      	ldr	r3, [pc, #672]	; (80025f8 <_vsnprintf+0x2c0>)
 8002356:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002358:	f000 bccb 	b.w	8002cf2 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b25      	cmp	r3, #37	; 0x25
 8002362:	d00d      	beq.n	8002380 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	7818      	ldrb	r0, [r3, #0]
 8002368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800236a:	1c53      	adds	r3, r2, #1
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800236e:	697c      	ldr	r4, [r7, #20]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6939      	ldr	r1, [r7, #16]
 8002374:	47a0      	blx	r4
      format++;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3301      	adds	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
      continue;
 800237c:	f000 bcb9 	b.w	8002cf2 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3301      	adds	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	3b20      	subs	r3, #32
 8002390:	2b10      	cmp	r3, #16
 8002392:	d857      	bhi.n	8002444 <_vsnprintf+0x10c>
 8002394:	a201      	add	r2, pc, #4	; (adr r2, 800239c <_vsnprintf+0x64>)
 8002396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239a:	bf00      	nop
 800239c:	0800241d 	.word	0x0800241d
 80023a0:	08002445 	.word	0x08002445
 80023a4:	08002445 	.word	0x08002445
 80023a8:	08002431 	.word	0x08002431
 80023ac:	08002445 	.word	0x08002445
 80023b0:	08002445 	.word	0x08002445
 80023b4:	08002445 	.word	0x08002445
 80023b8:	08002445 	.word	0x08002445
 80023bc:	08002445 	.word	0x08002445
 80023c0:	08002445 	.word	0x08002445
 80023c4:	08002445 	.word	0x08002445
 80023c8:	08002409 	.word	0x08002409
 80023cc:	08002445 	.word	0x08002445
 80023d0:	080023f5 	.word	0x080023f5
 80023d4:	08002445 	.word	0x08002445
 80023d8:	08002445 	.word	0x08002445
 80023dc:	080023e1 	.word	0x080023e1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80023e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	2301      	movs	r3, #1
 80023f0:	653b      	str	r3, [r7, #80]	; 0x50
 80023f2:	e02a      	b.n	800244a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80023f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3301      	adds	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	2301      	movs	r3, #1
 8002404:	653b      	str	r3, [r7, #80]	; 0x50
 8002406:	e020      	b.n	800244a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3301      	adds	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	2301      	movs	r3, #1
 8002418:	653b      	str	r3, [r7, #80]	; 0x50
 800241a:	e016      	b.n	800244a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800241c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800241e:	f043 0308 	orr.w	r3, r3, #8
 8002422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3301      	adds	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	2301      	movs	r3, #1
 800242c:	653b      	str	r3, [r7, #80]	; 0x50
 800242e:	e00c      	b.n	800244a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002432:	f043 0310 	orr.w	r3, r3, #16
 8002436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	3301      	adds	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	2301      	movs	r3, #1
 8002440:	653b      	str	r3, [r7, #80]	; 0x50
 8002442:	e002      	b.n	800244a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002444:	2300      	movs	r3, #0
 8002446:	653b      	str	r3, [r7, #80]	; 0x50
 8002448:	bf00      	nop
      }
    } while (n);
 800244a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244c:	2b00      	cmp	r3, #0
 800244e:	d19c      	bne.n	800238a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f852 	bl	8001502 <_is_digit>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff f861 	bl	8001530 <_atoi>
 800246e:	65b8      	str	r0, [r7, #88]	; 0x58
 8002470:	e01a      	b.n	80024a8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b2a      	cmp	r3, #42	; 0x2a
 8002478:	d116      	bne.n	80024a8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800247a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800247e:	1d1a      	adds	r2, r3, #4
 8002480:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8002488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248a:	2b00      	cmp	r3, #0
 800248c:	da07      	bge.n	800249e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800248e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	425b      	negs	r3, r3
 800249a:	65bb      	str	r3, [r7, #88]	; 0x58
 800249c:	e001      	b.n	80024a2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b2e      	cmp	r3, #46	; 0x2e
 80024b2:	d127      	bne.n	8002504 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ba:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3301      	adds	r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f81b 	bl	8001502 <_is_digit>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f82a 	bl	8001530 <_atoi>
 80024dc:	6578      	str	r0, [r7, #84]	; 0x54
 80024de:	e011      	b.n	8002504 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b2a      	cmp	r3, #42	; 0x2a
 80024e6:	d10d      	bne.n	8002504 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80024e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024ec:	1d1a      	adds	r2, r3, #4
 80024ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80024f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80024fc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3301      	adds	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	3b68      	subs	r3, #104	; 0x68
 800250a:	2b12      	cmp	r3, #18
 800250c:	d866      	bhi.n	80025dc <_vsnprintf+0x2a4>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <_vsnprintf+0x1dc>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002587 	.word	0x08002587
 8002518:	080025dd 	.word	0x080025dd
 800251c:	080025bd 	.word	0x080025bd
 8002520:	080025dd 	.word	0x080025dd
 8002524:	08002561 	.word	0x08002561
 8002528:	080025dd 	.word	0x080025dd
 800252c:	080025dd 	.word	0x080025dd
 8002530:	080025dd 	.word	0x080025dd
 8002534:	080025dd 	.word	0x080025dd
 8002538:	080025dd 	.word	0x080025dd
 800253c:	080025dd 	.word	0x080025dd
 8002540:	080025dd 	.word	0x080025dd
 8002544:	080025ad 	.word	0x080025ad
 8002548:	080025dd 	.word	0x080025dd
 800254c:	080025dd 	.word	0x080025dd
 8002550:	080025dd 	.word	0x080025dd
 8002554:	080025dd 	.word	0x080025dd
 8002558:	080025dd 	.word	0x080025dd
 800255c:	080025cd 	.word	0x080025cd
      case 'l' :
        flags |= FLAGS_LONG;
 8002560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002566:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3301      	adds	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b6c      	cmp	r3, #108	; 0x6c
 8002574:	d134      	bne.n	80025e0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3301      	adds	r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002584:	e02c      	b.n	80025e0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3301      	adds	r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b68      	cmp	r3, #104	; 0x68
 800259a:	d123      	bne.n	80025e4 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 800259c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	3301      	adds	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80025aa:	e01b      	b.n	80025e4 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3301      	adds	r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]
        break;
 80025ba:	e014      	b.n	80025e6 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	3301      	adds	r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
        break;
 80025ca:	e00c      	b.n	80025e6 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80025cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
        break;
 80025da:	e004      	b.n	80025e6 <_vsnprintf+0x2ae>
      default :
        break;
 80025dc:	bf00      	nop
 80025de:	e002      	b.n	80025e6 <_vsnprintf+0x2ae>
        break;
 80025e0:	bf00      	nop
 80025e2:	e000      	b.n	80025e6 <_vsnprintf+0x2ae>
        break;
 80025e4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b67      	cmp	r3, #103	; 0x67
 80025ec:	f300 80b8 	bgt.w	8002760 <_vsnprintf+0x428>
 80025f0:	2b25      	cmp	r3, #37	; 0x25
 80025f2:	da27      	bge.n	8002644 <_vsnprintf+0x30c>
 80025f4:	e370      	b.n	8002cd8 <_vsnprintf+0x9a0>
 80025f6:	bf00      	nop
 80025f8:	08001487 	.word	0x08001487
 80025fc:	3b69      	subs	r3, #105	; 0x69
 80025fe:	2201      	movs	r2, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	f249 0241 	movw	r2, #36929	; 0x9041
 8002608:	401a      	ands	r2, r3
 800260a:	2a00      	cmp	r2, #0
 800260c:	bf14      	ite	ne
 800260e:	2201      	movne	r2, #1
 8002610:	2200      	moveq	r2, #0
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	2a00      	cmp	r2, #0
 8002616:	f040 80aa 	bne.w	800276e <_vsnprintf+0x436>
 800261a:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800261e:	2a00      	cmp	r2, #0
 8002620:	bf14      	ite	ne
 8002622:	2201      	movne	r2, #1
 8002624:	2200      	moveq	r2, #0
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	2a00      	cmp	r2, #0
 800262a:	f040 82fb 	bne.w	8002c24 <_vsnprintf+0x8ec>
 800262e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 828d 	bne.w	8002b5c <_vsnprintf+0x824>
 8002642:	e349      	b.n	8002cd8 <_vsnprintf+0x9a0>
 8002644:	3b25      	subs	r3, #37	; 0x25
 8002646:	2b42      	cmp	r3, #66	; 0x42
 8002648:	f200 8346 	bhi.w	8002cd8 <_vsnprintf+0x9a0>
 800264c:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <_vsnprintf+0x31c>)
 800264e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002652:	bf00      	nop
 8002654:	08002cc1 	.word	0x08002cc1
 8002658:	08002cd9 	.word	0x08002cd9
 800265c:	08002cd9 	.word	0x08002cd9
 8002660:	08002cd9 	.word	0x08002cd9
 8002664:	08002cd9 	.word	0x08002cd9
 8002668:	08002cd9 	.word	0x08002cd9
 800266c:	08002cd9 	.word	0x08002cd9
 8002670:	08002cd9 	.word	0x08002cd9
 8002674:	08002cd9 	.word	0x08002cd9
 8002678:	08002cd9 	.word	0x08002cd9
 800267c:	08002cd9 	.word	0x08002cd9
 8002680:	08002cd9 	.word	0x08002cd9
 8002684:	08002cd9 	.word	0x08002cd9
 8002688:	08002cd9 	.word	0x08002cd9
 800268c:	08002cd9 	.word	0x08002cd9
 8002690:	08002cd9 	.word	0x08002cd9
 8002694:	08002cd9 	.word	0x08002cd9
 8002698:	08002cd9 	.word	0x08002cd9
 800269c:	08002cd9 	.word	0x08002cd9
 80026a0:	08002cd9 	.word	0x08002cd9
 80026a4:	08002cd9 	.word	0x08002cd9
 80026a8:	08002cd9 	.word	0x08002cd9
 80026ac:	08002cd9 	.word	0x08002cd9
 80026b0:	08002cd9 	.word	0x08002cd9
 80026b4:	08002cd9 	.word	0x08002cd9
 80026b8:	08002cd9 	.word	0x08002cd9
 80026bc:	08002cd9 	.word	0x08002cd9
 80026c0:	08002cd9 	.word	0x08002cd9
 80026c4:	08002cd9 	.word	0x08002cd9
 80026c8:	08002cd9 	.word	0x08002cd9
 80026cc:	08002cd9 	.word	0x08002cd9
 80026d0:	08002cd9 	.word	0x08002cd9
 80026d4:	08002a75 	.word	0x08002a75
 80026d8:	08002a25 	.word	0x08002a25
 80026dc:	08002a75 	.word	0x08002a75
 80026e0:	08002cd9 	.word	0x08002cd9
 80026e4:	08002cd9 	.word	0x08002cd9
 80026e8:	08002cd9 	.word	0x08002cd9
 80026ec:	08002cd9 	.word	0x08002cd9
 80026f0:	08002cd9 	.word	0x08002cd9
 80026f4:	08002cd9 	.word	0x08002cd9
 80026f8:	08002cd9 	.word	0x08002cd9
 80026fc:	08002cd9 	.word	0x08002cd9
 8002700:	08002cd9 	.word	0x08002cd9
 8002704:	08002cd9 	.word	0x08002cd9
 8002708:	08002cd9 	.word	0x08002cd9
 800270c:	08002cd9 	.word	0x08002cd9
 8002710:	08002cd9 	.word	0x08002cd9
 8002714:	08002cd9 	.word	0x08002cd9
 8002718:	08002cd9 	.word	0x08002cd9
 800271c:	08002cd9 	.word	0x08002cd9
 8002720:	0800276f 	.word	0x0800276f
 8002724:	08002cd9 	.word	0x08002cd9
 8002728:	08002cd9 	.word	0x08002cd9
 800272c:	08002cd9 	.word	0x08002cd9
 8002730:	08002cd9 	.word	0x08002cd9
 8002734:	08002cd9 	.word	0x08002cd9
 8002738:	08002cd9 	.word	0x08002cd9
 800273c:	08002cd9 	.word	0x08002cd9
 8002740:	08002cd9 	.word	0x08002cd9
 8002744:	08002cd9 	.word	0x08002cd9
 8002748:	0800276f 	.word	0x0800276f
 800274c:	08002ae5 	.word	0x08002ae5
 8002750:	0800276f 	.word	0x0800276f
 8002754:	08002a75 	.word	0x08002a75
 8002758:	08002a25 	.word	0x08002a25
 800275c:	08002a75 	.word	0x08002a75
 8002760:	2b78      	cmp	r3, #120	; 0x78
 8002762:	f300 82b9 	bgt.w	8002cd8 <_vsnprintf+0x9a0>
 8002766:	2b69      	cmp	r3, #105	; 0x69
 8002768:	f6bf af48 	bge.w	80025fc <_vsnprintf+0x2c4>
 800276c:	e2b4      	b.n	8002cd8 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b78      	cmp	r3, #120	; 0x78
 8002774:	d003      	beq.n	800277e <_vsnprintf+0x446>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b58      	cmp	r3, #88	; 0x58
 800277c:	d102      	bne.n	8002784 <_vsnprintf+0x44c>
          base = 16U;
 800277e:	2310      	movs	r3, #16
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
 8002782:	e013      	b.n	80027ac <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b6f      	cmp	r3, #111	; 0x6f
 800278a:	d102      	bne.n	8002792 <_vsnprintf+0x45a>
          base =  8U;
 800278c:	2308      	movs	r3, #8
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002790:	e00c      	b.n	80027ac <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b62      	cmp	r3, #98	; 0x62
 8002798:	d102      	bne.n	80027a0 <_vsnprintf+0x468>
          base =  2U;
 800279a:	2302      	movs	r3, #2
 800279c:	64bb      	str	r3, [r7, #72]	; 0x48
 800279e:	e005      	b.n	80027ac <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80027a0:	230a      	movs	r3, #10
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80027a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a6:	f023 0310 	bic.w	r3, r3, #16
 80027aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b58      	cmp	r3, #88	; 0x58
 80027b2:	d103      	bne.n	80027bc <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80027b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b69      	cmp	r3, #105	; 0x69
 80027c2:	d007      	beq.n	80027d4 <_vsnprintf+0x49c>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d003      	beq.n	80027d4 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80027cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ce:	f023 030c 	bic.w	r3, r3, #12
 80027d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80027d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80027de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b69      	cmp	r3, #105	; 0x69
 80027ec:	d004      	beq.n	80027f8 <_vsnprintf+0x4c0>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	f040 8098 	bne.w	8002928 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d031      	beq.n	8002866 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002806:	3307      	adds	r3, #7
 8002808:	f023 0307 	bic.w	r3, r3, #7
 800280c:	f103 0208 	add.w	r2, r3, #8
 8002810:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800281c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	da06      	bge.n	8002832 <_vsnprintf+0x4fa>
 8002824:	2100      	movs	r1, #0
 8002826:	f1d2 0800 	rsbs	r8, r2, #0
 800282a:	eb61 0903 	sbc.w	r9, r1, r3
 800282e:	4642      	mov	r2, r8
 8002830:	464b      	mov	r3, r9
 8002832:	69f9      	ldr	r1, [r7, #28]
 8002834:	0fc9      	lsrs	r1, r1, #31
 8002836:	b2c9      	uxtb	r1, r1
 8002838:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800283a:	2400      	movs	r4, #0
 800283c:	4682      	mov	sl, r0
 800283e:	46a3      	mov	fp, r4
 8002840:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002842:	9008      	str	r0, [sp, #32]
 8002844:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002846:	9007      	str	r0, [sp, #28]
 8002848:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800284a:	9006      	str	r0, [sp, #24]
 800284c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002850:	9102      	str	r1, [sp, #8]
 8002852:	e9cd 2300 	strd	r2, r3, [sp]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800285a:	6939      	ldr	r1, [r7, #16]
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f7ff f81d 	bl	800189c <_ntoa_long_long>
 8002862:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002864:	e0da      	b.n	8002a1c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8002870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002874:	1d1a      	adds	r2, r3, #4
 8002876:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	bfb8      	it	lt
 8002884:	425b      	neglt	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	0fdb      	lsrs	r3, r3, #31
 800288c:	b2db      	uxtb	r3, r3
 800288e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002890:	9205      	str	r2, [sp, #20]
 8002892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002894:	9204      	str	r2, [sp, #16]
 8002896:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002898:	9203      	str	r2, [sp, #12]
 800289a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800289c:	9202      	str	r2, [sp, #8]
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	9100      	str	r1, [sp, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028a6:	6939      	ldr	r1, [r7, #16]
 80028a8:	6978      	ldr	r0, [r7, #20]
 80028aa:	f7fe ff91 	bl	80017d0 <_ntoa_long>
 80028ae:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80028b0:	e0b4      	b.n	8002a1c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80028b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <_vsnprintf+0x594>
 80028bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c0:	1d1a      	adds	r2, r3, #4
 80028c2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e012      	b.n	80028f2 <_vsnprintf+0x5ba>
 80028cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <_vsnprintf+0x5ae>
 80028d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028da:	1d1a      	adds	r2, r3, #4
 80028dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	e005      	b.n	80028f2 <_vsnprintf+0x5ba>
 80028e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ea:	1d1a      	adds	r2, r3, #4
 80028ec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bfb8      	it	lt
 80028fa:	425b      	neglt	r3, r3
 80028fc:	4619      	mov	r1, r3
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	0fdb      	lsrs	r3, r3, #31
 8002902:	b2db      	uxtb	r3, r3
 8002904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002906:	9205      	str	r2, [sp, #20]
 8002908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800290a:	9204      	str	r2, [sp, #16]
 800290c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800290e:	9203      	str	r2, [sp, #12]
 8002910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002912:	9202      	str	r2, [sp, #8]
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	9100      	str	r1, [sp, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800291c:	6939      	ldr	r1, [r7, #16]
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7fe ff56 	bl	80017d0 <_ntoa_long>
 8002924:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002926:	e079      	b.n	8002a1c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	2b00      	cmp	r3, #0
 8002930:	d022      	beq.n	8002978 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002936:	3307      	adds	r3, #7
 8002938:	f023 0307 	bic.w	r3, r3, #7
 800293c:	f103 0208 	add.w	r2, r3, #8
 8002940:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800294a:	2000      	movs	r0, #0
 800294c:	460d      	mov	r5, r1
 800294e:	4606      	mov	r6, r0
 8002950:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002952:	9108      	str	r1, [sp, #32]
 8002954:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002956:	9107      	str	r1, [sp, #28]
 8002958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800295a:	9106      	str	r1, [sp, #24]
 800295c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002960:	2100      	movs	r1, #0
 8002962:	9102      	str	r1, [sp, #8]
 8002964:	e9cd 2300 	strd	r2, r3, [sp]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800296c:	6939      	ldr	r1, [r7, #16]
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7fe ff94 	bl	800189c <_ntoa_long_long>
 8002974:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002976:	e051      	b.n	8002a1c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d018      	beq.n	80029b4 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002986:	1d1a      	adds	r2, r3, #4
 8002988:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002990:	9205      	str	r2, [sp, #20]
 8002992:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002994:	9204      	str	r2, [sp, #16]
 8002996:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002998:	9203      	str	r2, [sp, #12]
 800299a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800299c:	9202      	str	r2, [sp, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	9201      	str	r2, [sp, #4]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029a8:	6939      	ldr	r1, [r7, #16]
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f7fe ff10 	bl	80017d0 <_ntoa_long>
 80029b0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80029b2:	e033      	b.n	8002a1c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80029b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <_vsnprintf+0x696>
 80029be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c2:	1d1a      	adds	r2, r3, #4
 80029c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	e012      	b.n	80029f4 <_vsnprintf+0x6bc>
 80029ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <_vsnprintf+0x6b0>
 80029d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029dc:	1d1a      	adds	r2, r3, #4
 80029de:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	e005      	b.n	80029f4 <_vsnprintf+0x6bc>
 80029e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029ec:	1d1a      	adds	r2, r3, #4
 80029ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80029f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f8:	9305      	str	r3, [sp, #20]
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	9304      	str	r3, [sp, #16]
 80029fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a00:	9303      	str	r3, [sp, #12]
 8002a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a12:	6939      	ldr	r1, [r7, #16]
 8002a14:	6978      	ldr	r0, [r7, #20]
 8002a16:	f7fe fedb 	bl	80017d0 <_ntoa_long>
 8002a1a:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
        break;
 8002a22:	e166      	b.n	8002cf2 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b46      	cmp	r3, #70	; 0x46
 8002a2a:	d103      	bne.n	8002a34 <_vsnprintf+0x6fc>
 8002a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2e:	f043 0320 	orr.w	r3, r3, #32
 8002a32:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a38:	3307      	adds	r3, #7
 8002a3a:	f023 0307 	bic.w	r3, r3, #7
 8002a3e:	f103 0208 	add.w	r2, r3, #8
 8002a42:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a46:	ed93 7b00 	vldr	d7, [r3]
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4c:	9302      	str	r3, [sp, #8]
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	eeb0 0a47 	vmov.f32	s0, s14
 8002a5a:	eef0 0a67 	vmov.f32	s1, s15
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a62:	6939      	ldr	r1, [r7, #16]
 8002a64:	6978      	ldr	r0, [r7, #20]
 8002a66:	f7fe ff87 	bl	8001978 <_ftoa>
 8002a6a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
        break;
 8002a72:	e13e      	b.n	8002cf2 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b67      	cmp	r3, #103	; 0x67
 8002a7a:	d003      	beq.n	8002a84 <_vsnprintf+0x74c>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b47      	cmp	r3, #71	; 0x47
 8002a82:	d103      	bne.n	8002a8c <_vsnprintf+0x754>
 8002a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b45      	cmp	r3, #69	; 0x45
 8002a92:	d003      	beq.n	8002a9c <_vsnprintf+0x764>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b47      	cmp	r3, #71	; 0x47
 8002a9a:	d103      	bne.n	8002aa4 <_vsnprintf+0x76c>
 8002a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aa8:	3307      	adds	r3, #7
 8002aaa:	f023 0307 	bic.w	r3, r3, #7
 8002aae:	f103 0208 	add.w	r2, r3, #8
 8002ab2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ab6:	ed93 7b00 	vldr	d7, [r3]
 8002aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abc:	9302      	str	r3, [sp, #8]
 8002abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aca:	eef0 0a67 	vmov.f32	s1, s15
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ad2:	6939      	ldr	r1, [r7, #16]
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f7ff f9a7 	bl	8001e28 <_etoa>
 8002ada:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
        break;
 8002ae2:	e106      	b.n	8002cf2 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10e      	bne.n	8002b10 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8002af2:	e007      	b.n	8002b04 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8002af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002af6:	1c53      	adds	r3, r2, #1
 8002af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002afa:	697c      	ldr	r4, [r7, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6939      	ldr	r1, [r7, #16]
 8002b00:	2020      	movs	r0, #32
 8002b02:	47a0      	blx	r4
          while (l++ < width) {
 8002b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	647a      	str	r2, [r7, #68]	; 0x44
 8002b0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8f1      	bhi.n	8002af4 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b14:	1d1a      	adds	r2, r3, #4
 8002b16:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b2d8      	uxtb	r0, r3
 8002b1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b20:	1c53      	adds	r3, r2, #1
 8002b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b24:	697c      	ldr	r4, [r7, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6939      	ldr	r1, [r7, #16]
 8002b2a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00e      	beq.n	8002b54 <_vsnprintf+0x81c>
          while (l++ < width) {
 8002b36:	e007      	b.n	8002b48 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8002b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b3a:	1c53      	adds	r3, r2, #1
 8002b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b3e:	697c      	ldr	r4, [r7, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6939      	ldr	r1, [r7, #16]
 8002b44:	2020      	movs	r0, #32
 8002b46:	47a0      	blx	r4
          while (l++ < width) {
 8002b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	647a      	str	r2, [r7, #68]	; 0x44
 8002b4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f1      	bhi.n	8002b38 <_vsnprintf+0x800>
          }
        }
        format++;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
        break;
 8002b5a:	e0ca      	b.n	8002cf2 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b60:	1d1a      	adds	r2, r3, #4
 8002b62:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <_vsnprintf+0x83c>
 8002b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b72:	e001      	b.n	8002b78 <_vsnprintf+0x840>
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b7c:	f7fe fca4 	bl	80014c8 <_strnlen_s>
 8002b80:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8002b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b90:	4293      	cmp	r3, r2
 8002b92:	bf28      	it	cs
 8002b94:	4613      	movcs	r3, r2
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8002b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11a      	bne.n	8002bd8 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8002ba2:	e007      	b.n	8002bb4 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8002ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ba6:	1c53      	adds	r3, r2, #1
 8002ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002baa:	697c      	ldr	r4, [r7, #20]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6939      	ldr	r1, [r7, #16]
 8002bb0:	2020      	movs	r0, #32
 8002bb2:	47a0      	blx	r4
          while (l++ < width) {
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f1      	bhi.n	8002ba4 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002bc0:	e00a      	b.n	8002bd8 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	643a      	str	r2, [r7, #64]	; 0x40
 8002bc8:	7818      	ldrb	r0, [r3, #0]
 8002bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bcc:	1c53      	adds	r3, r2, #1
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd0:	697c      	ldr	r4, [r7, #20]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6939      	ldr	r1, [r7, #16]
 8002bd6:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <_vsnprintf+0x8bc>
 8002be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0eb      	beq.n	8002bc2 <_vsnprintf+0x88a>
 8002bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	657a      	str	r2, [r7, #84]	; 0x54
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e6      	bne.n	8002bc2 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <_vsnprintf+0x8e4>
          while (l++ < width) {
 8002bfe:	e007      	b.n	8002c10 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8002c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c02:	1c53      	adds	r3, r2, #1
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c06:	697c      	ldr	r4, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6939      	ldr	r1, [r7, #16]
 8002c0c:	2020      	movs	r0, #32
 8002c0e:	47a0      	blx	r4
          while (l++ < width) {
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d8f1      	bhi.n	8002c00 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
        break;
 8002c22:	e066      	b.n	8002cf2 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002c24:	2308      	movs	r3, #8
 8002c26:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8002c36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d023      	beq.n	8002c86 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c42:	1d1a      	adds	r2, r3, #4
 8002c44:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	603a      	str	r2, [r7, #0]
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c54:	9308      	str	r3, [sp, #32]
 8002c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c58:	9307      	str	r3, [sp, #28]
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	9306      	str	r3, [sp, #24]
 8002c5e:	f04f 0210 	mov.w	r2, #16
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c72:	e9cd 3400 	strd	r3, r4, [sp]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c7a:	6939      	ldr	r1, [r7, #16]
 8002c7c:	6978      	ldr	r0, [r7, #20]
 8002c7e:	f7fe fe0d 	bl	800189c <_ntoa_long_long>
 8002c82:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002c84:	e018      	b.n	8002cb8 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c96:	9305      	str	r3, [sp, #20]
 8002c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c9a:	9304      	str	r3, [sp, #16]
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9e:	9303      	str	r3, [sp, #12]
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	9302      	str	r3, [sp, #8]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	9200      	str	r2, [sp, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cae:	6939      	ldr	r1, [r7, #16]
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f7fe fd8d 	bl	80017d0 <_ntoa_long>
 8002cb6:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]
        break;
 8002cbe:	e018      	b.n	8002cf2 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cc2:	1c53      	adds	r3, r2, #1
 8002cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc6:	697c      	ldr	r4, [r7, #20]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6939      	ldr	r1, [r7, #16]
 8002ccc:	2025      	movs	r0, #37	; 0x25
 8002cce:	47a0      	blx	r4
        format++;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
        break;
 8002cd6:	e00c      	b.n	8002cf2 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	7818      	ldrb	r0, [r3, #0]
 8002cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cde:	1c53      	adds	r3, r2, #1
 8002ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce2:	697c      	ldr	r4, [r7, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6939      	ldr	r1, [r7, #16]
 8002ce8:	47a0      	blx	r4
        format++;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	3301      	adds	r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
        break;
 8002cf0:	bf00      	nop
  while (*format)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f ab30 	bne.w	800235c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <_vsnprintf+0x9d2>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	e000      	b.n	8002d0c <_vsnprintf+0x9d4>
 8002d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d0c:	697c      	ldr	r4, [r7, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6939      	ldr	r1, [r7, #16]
 8002d12:	2000      	movs	r0, #0
 8002d14:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3764      	adds	r7, #100	; 0x64
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop

08002d24 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002d24:	b40f      	push	{r0, r1, r2, r3}
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002d32:	1d39      	adds	r1, r7, #4
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3e:	4806      	ldr	r0, [pc, #24]	; (8002d58 <printf_+0x34>)
 8002d40:	f7ff fafa 	bl	8002338 <_vsnprintf>
 8002d44:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d52:	b004      	add	sp, #16
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	080014a3 	.word	0x080014a3

08002d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_MspInit+0x50>)
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	4a11      	ldr	r2, [pc, #68]	; (8002dac <HAL_MspInit+0x50>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_MspInit+0x50>)
 8002d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_MspInit+0x50>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <HAL_MspInit+0x50>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_MspInit+0x50>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	210f      	movs	r1, #15
 8002d96:	f06f 0001 	mvn.w	r0, #1
 8002d9a:	f002 facf 	bl	800533c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002d9e:	f002 fd71 	bl	8005884 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002dc0:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <HAL_InitTick+0xc4>)
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <HAL_InitTick+0xc4>)
 8002dc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dca:	6613      	str	r3, [r2, #96]	; 0x60
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_InitTick+0xc4>)
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dd8:	f107 020c 	add.w	r2, r7, #12
 8002ddc:	f107 0310 	add.w	r3, r7, #16
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fa46 	bl	8006274 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002de8:	f003 fa2e 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 8002dec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <HAL_InitTick+0xc8>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0c9b      	lsrs	r3, r3, #18
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <HAL_InitTick+0xcc>)
 8002dfe:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <HAL_InitTick+0xd0>)
 8002e00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_InitTick+0xcc>)
 8002e04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_InitTick+0xcc>)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_InitTick+0xcc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_InitTick+0xcc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002e1c:	4817      	ldr	r0, [pc, #92]	; (8002e7c <HAL_InitTick+0xcc>)
 8002e1e:	f003 fcdd 	bl	80067dc <HAL_TIM_Base_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11b      	bne.n	8002e68 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002e30:	4812      	ldr	r0, [pc, #72]	; (8002e7c <HAL_InitTick+0xcc>)
 8002e32:	f003 fd35 	bl	80068a0 <HAL_TIM_Base_Start_IT>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002e44:	2019      	movs	r0, #25
 8002e46:	f002 fa93 	bl	8005370 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d808      	bhi.n	8002e62 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	2019      	movs	r0, #25
 8002e56:	f002 fa71 	bl	800533c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_InitTick+0xd4>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e002      	b.n	8002e68 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3730      	adds	r7, #48	; 0x30
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	2000010c 	.word	0x2000010c
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	20000004 	.word	0x20000004

08002e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e8c:	e7fe      	b.n	8002e8c <NMI_Handler+0x4>

08002e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <HardFault_Handler+0x4>

08002e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <MemManage_Handler+0x4>

08002e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e9e:	e7fe      	b.n	8002e9e <BusFault_Handler+0x4>

08002ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <UsageFault_Handler+0x4>

08002ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <ADC1_2_IRQHandler+0x10>)
 8002eba:	f001 f811 	bl	8003ee0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2000007c 	.word	0x2000007c

08002ec8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002ece:	f003 fd57 	bl	8006980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2000010c 	.word	0x2000010c

08002edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ee0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ee4:	f002 fc06 	bl	80056f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}

08002eec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <SystemInit+0x20>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <SystemInit+0x20>)
 8002ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart5;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f16:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <MX_LPUART1_UART_Init+0x90>)
 8002f18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f22:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f28:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f36:	220c      	movs	r2, #12
 8002f38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3a:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002f52:	4812      	ldr	r0, [pc, #72]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f54:	f003 ff7c 	bl	8006e50 <HAL_UART_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f5e:	f7fe fa8d 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f62:	2100      	movs	r1, #0
 8002f64:	480d      	ldr	r0, [pc, #52]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f66:	f004 fda5 	bl	8007ab4 <HAL_UARTEx_SetTxFifoThreshold>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002f70:	f7fe fa84 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f74:	2100      	movs	r1, #0
 8002f76:	4809      	ldr	r0, [pc, #36]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f78:	f004 fdda 	bl	8007b30 <HAL_UARTEx_SetRxFifoThreshold>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002f82:	f7fe fa7b 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_LPUART1_UART_Init+0x8c>)
 8002f88:	f004 fd5b 	bl	8007a42 <HAL_UARTEx_DisableFifoMode>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002f92:	f7fe fa73 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000158 	.word	0x20000158
 8002fa0:	40008000 	.word	0x40008000

08002fa4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <MX_UART5_Init+0x90>)
 8002faa:	4a23      	ldr	r2, [pc, #140]	; (8003038 <MX_UART5_Init+0x94>)
 8002fac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002fae:	4b21      	ldr	r3, [pc, #132]	; (8003034 <MX_UART5_Init+0x90>)
 8002fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fb4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <MX_UART5_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <MX_UART5_Init+0x90>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <MX_UART5_Init+0x90>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <MX_UART5_Init+0x90>)
 8002fca:	220c      	movs	r2, #12
 8002fcc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <MX_UART5_Init+0x90>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <MX_UART5_Init+0x90>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <MX_UART5_Init+0x90>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <MX_UART5_Init+0x90>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe6:	4b13      	ldr	r3, [pc, #76]	; (8003034 <MX_UART5_Init+0x90>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002fec:	4811      	ldr	r0, [pc, #68]	; (8003034 <MX_UART5_Init+0x90>)
 8002fee:	f003 ff2f 	bl	8006e50 <HAL_UART_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002ff8:	f7fe fa40 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	480d      	ldr	r0, [pc, #52]	; (8003034 <MX_UART5_Init+0x90>)
 8003000:	f004 fd58 	bl	8007ab4 <HAL_UARTEx_SetTxFifoThreshold>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800300a:	f7fe fa37 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800300e:	2100      	movs	r1, #0
 8003010:	4808      	ldr	r0, [pc, #32]	; (8003034 <MX_UART5_Init+0x90>)
 8003012:	f004 fd8d 	bl	8007b30 <HAL_UARTEx_SetRxFifoThreshold>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800301c:	f7fe fa2e 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <MX_UART5_Init+0x90>)
 8003022:	f004 fd0e 	bl	8007a42 <HAL_UARTEx_DisableFifoMode>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800302c:	f7fe fa26 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200001ec 	.word	0x200001ec
 8003038:	40005000 	.word	0x40005000

0800303c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b0a0      	sub	sp, #128	; 0x80
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	2250      	movs	r2, #80	; 0x50
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f008 fa25 	bl	800b4ac <memset>
  if(uartHandle->Instance==LPUART1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <HAL_UART_MspInit+0x158>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d137      	bne.n	80030dc <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800306c:	2320      	movs	r3, #32
 800306e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003070:	2300      	movs	r3, #0
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	4618      	mov	r0, r3
 800307a:	f003 f973 	bl	8006364 <HAL_RCCEx_PeriphCLKConfig>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003084:	f7fe f9fa 	bl	800147c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_UART_MspInit+0x15c>)
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	4a42      	ldr	r2, [pc, #264]	; (8003198 <HAL_UART_MspInit+0x15c>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <HAL_UART_MspInit+0x15c>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	4a3c      	ldr	r2, [pc, #240]	; (8003198 <HAL_UART_MspInit+0x15c>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ac:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_UART_MspInit+0x15c>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80030b8:	230c      	movs	r3, #12
 80030ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80030c8:	230c      	movs	r3, #12
 80030ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030d0:	4619      	mov	r1, r3
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d6:	f002 f959 	bl	800538c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80030da:	e057      	b.n	800318c <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==UART5)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2e      	ldr	r2, [pc, #184]	; (800319c <HAL_UART_MspInit+0x160>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d152      	bne.n	800318c <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80030e6:	2310      	movs	r3, #16
 80030e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80030ea:	2300      	movs	r3, #0
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 f936 	bl	8006364 <HAL_RCCEx_PeriphCLKConfig>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80030fe:	f7fe f9bd 	bl	800147c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	4a24      	ldr	r2, [pc, #144]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800310c:	6593      	str	r3, [r2, #88]	; 0x58
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_UART_MspInit+0x15c>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003138:	f043 0308 	orr.w	r3, r3, #8
 800313c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <HAL_UART_MspInit+0x15c>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800314a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003150:	2302      	movs	r3, #2
 8003152:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003158:	2300      	movs	r3, #0
 800315a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800315c:	2305      	movs	r3, #5
 800315e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003160:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003164:	4619      	mov	r1, r3
 8003166:	480e      	ldr	r0, [pc, #56]	; (80031a0 <HAL_UART_MspInit+0x164>)
 8003168:	f002 f910 	bl	800538c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800316c:	2304      	movs	r3, #4
 800316e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800317c:	2305      	movs	r3, #5
 800317e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003180:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003184:	4619      	mov	r1, r3
 8003186:	4807      	ldr	r0, [pc, #28]	; (80031a4 <HAL_UART_MspInit+0x168>)
 8003188:	f002 f900 	bl	800538c <HAL_GPIO_Init>
}
 800318c:	bf00      	nop
 800318e:	3780      	adds	r7, #128	; 0x80
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40008000 	.word	0x40008000
 8003198:	40021000 	.word	0x40021000
 800319c:	40005000 	.word	0x40005000
 80031a0:	48000800 	.word	0x48000800
 80031a4:	48000c00 	.word	0x48000c00

080031a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031ac:	f7ff fe9e 	bl	8002eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b0:	480c      	ldr	r0, [pc, #48]	; (80031e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80031b2:	490d      	ldr	r1, [pc, #52]	; (80031e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031b4:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <LoopForever+0xe>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031c8:	4c0a      	ldr	r4, [pc, #40]	; (80031f4 <LoopForever+0x16>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031d6:	f008 f9c7 	bl	800b568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031da:	f7fe f8dd 	bl	8001398 <main>

080031de <LoopForever>:

LoopForever:
    b LoopForever
 80031de:	e7fe      	b.n	80031de <LoopForever>
  ldr   r0, =_estack
 80031e0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80031e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80031ec:	0800b8f8 	.word	0x0800b8f8
  ldr r2, =_sbss
 80031f0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80031f4:	20002ad8 	.word	0x20002ad8

080031f8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031f8:	e7fe      	b.n	80031f8 <ADC3_IRQHandler>

080031fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003204:	2003      	movs	r0, #3
 8003206:	f002 f88e 	bl	8005326 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800320a:	200f      	movs	r0, #15
 800320c:	f7ff fdd0 	bl	8002db0 <HAL_InitTick>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	71fb      	strb	r3, [r7, #7]
 800321a:	e001      	b.n	8003220 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800321c:	f7ff fd9e 	bl	8002d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003220:	79fb      	ldrb	r3, [r7, #7]

}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_IncTick+0x1c>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_IncTick+0x20>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4413      	add	r3, r2
 800323a:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_IncTick+0x1c>)
 800323c:	6013      	str	r3, [r2, #0]
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000280 	.word	0x20000280
 800324c:	20000008 	.word	0x20000008

08003250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return uwTick;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_GetTick+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000280 	.word	0x20000280

08003268 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3360      	adds	r3, #96	; 0x60
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <LL_ADC_SetOffset+0x44>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	03fff000 	.word	0x03fff000

08003318 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3360      	adds	r3, #96	; 0x60
 8003326:	461a      	mov	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3360      	adds	r3, #96	; 0x60
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	431a      	orrs	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800337a:	b480      	push	{r7}
 800337c:	b087      	sub	sp, #28
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3360      	adds	r3, #96	; 0x60
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	431a      	orrs	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3360      	adds	r3, #96	; 0x60
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	615a      	str	r2, [r3, #20]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003432:	b480      	push	{r7}
 8003434:	b087      	sub	sp, #28
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3330      	adds	r3, #48	; 0x30
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	4413      	add	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	211f      	movs	r1, #31
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	401a      	ands	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	f003 011f 	and.w	r1, r3, #31
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	431a      	orrs	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3314      	adds	r3, #20
 80034c0:	461a      	mov	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	0e5b      	lsrs	r3, r3, #25
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	4413      	add	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	0d1b      	lsrs	r3, r3, #20
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2107      	movs	r1, #7
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	401a      	ands	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	0d1b      	lsrs	r3, r3, #20
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	431a      	orrs	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	43db      	mvns	r3, r3
 8003522:	401a      	ands	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0318 	and.w	r3, r3, #24
 800352a:	4908      	ldr	r1, [pc, #32]	; (800354c <LL_ADC_SetChannelSingleDiff+0x44>)
 800352c:	40d9      	lsrs	r1, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	400b      	ands	r3, r1
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	431a      	orrs	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	0007ffff 	.word	0x0007ffff

08003550 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 031f 	and.w	r3, r3, #31
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6093      	str	r3, [r2, #8]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c0:	d101      	bne.n	80035c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003610:	d101      	bne.n	8003616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800365c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003660:	f043 0202 	orr.w	r2, r3, #2
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <LL_ADC_IsEnabled+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_ADC_IsEnabled+0x1a>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d101      	bne.n	80036b2 <LL_ADC_IsDisableOngoing+0x18>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <LL_ADC_IsDisableOngoing+0x1a>
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036d4:	f043 0204 	orr.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036fc:	f043 0210 	orr.w	r2, r3, #16
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b04      	cmp	r3, #4
 8003722:	d101      	bne.n	8003728 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003746:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d101      	bne.n	8003776 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b089      	sub	sp, #36	; 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e19b      	b.n	8003ad6 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd fbcb 	bl	8000f48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fef1 	bl	80035ac <LL_ADC_IsDeepPowerDownEnabled>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fed7 	bl	8003588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff0c 	bl	80035fc <LL_ADC_IsInternalRegulatorEnabled>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fef0 	bl	80035d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037f4:	4b97      	ldr	r3, [pc, #604]	; (8003a54 <HAL_ADC_Init+0x2d0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	4a97      	ldr	r2, [pc, #604]	; (8003a58 <HAL_ADC_Init+0x2d4>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	3301      	adds	r3, #1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003808:	e002      	b.n	8003810 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3b01      	subs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f9      	bne.n	800380a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff feee 	bl	80035fc <LL_ADC_IsInternalRegulatorEnabled>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10d      	bne.n	8003842 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	f043 0210 	orr.w	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff62 	bl	8003710 <LL_ADC_REG_IsConversionOngoing>
 800384c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 8134 	bne.w	8003ac4 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 8130 	bne.w	8003ac4 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800386c:	f043 0202 	orr.w	r2, r3, #2
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fefb 	bl	8003674 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d137      	bne.n	80038f4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800388c:	d004      	beq.n	8003898 <HAL_ADC_Init+0x114>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a72      	ldr	r2, [pc, #456]	; (8003a5c <HAL_ADC_Init+0x2d8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10f      	bne.n	80038b8 <HAL_ADC_Init+0x134>
 8003898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800389c:	f7ff feea 	bl	8003674 <LL_ADC_IsEnabled>
 80038a0:	4604      	mov	r4, r0
 80038a2:	486e      	ldr	r0, [pc, #440]	; (8003a5c <HAL_ADC_Init+0x2d8>)
 80038a4:	f7ff fee6 	bl	8003674 <LL_ADC_IsEnabled>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4323      	orrs	r3, r4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e008      	b.n	80038ca <HAL_ADC_Init+0x146>
 80038b8:	4869      	ldr	r0, [pc, #420]	; (8003a60 <HAL_ADC_Init+0x2dc>)
 80038ba:	f7ff fedb 	bl	8003674 <LL_ADC_IsEnabled>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d012      	beq.n	80038f4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d6:	d004      	beq.n	80038e2 <HAL_ADC_Init+0x15e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a5f      	ldr	r2, [pc, #380]	; (8003a5c <HAL_ADC_Init+0x2d8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_Init+0x162>
 80038e2:	4a60      	ldr	r2, [pc, #384]	; (8003a64 <HAL_ADC_Init+0x2e0>)
 80038e4:	e000      	b.n	80038e8 <HAL_ADC_Init+0x164>
 80038e6:	4a60      	ldr	r2, [pc, #384]	; (8003a68 <HAL_ADC_Init+0x2e4>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f7ff fcba 	bl	8003268 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7f5b      	ldrb	r3, [r3, #29]
 80038f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003904:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800390a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003912:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	045b      	lsls	r3, r3, #17
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	4b46      	ldr	r3, [pc, #280]	; (8003a6c <HAL_ADC_Init+0x2e8>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	430b      	orrs	r3, r1
 800395e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff feef 	bl	800375e <LL_ADC_INJ_IsConversionOngoing>
 8003980:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d17b      	bne.n	8003a80 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d178      	bne.n	8003a80 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003992:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800399a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039aa:	f023 0302 	bic.w	r3, r3, #2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d017      	beq.n	80039f0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80039ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6911      	ldr	r1, [r2, #16]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80039ee:	e013      	b.n	8003a18 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d126      	bne.n	8003a70 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a44:	430a      	orrs	r2, r1
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	611a      	str	r2, [r3, #16]
 8003a52:	e015      	b.n	8003a80 <HAL_ADC_Init+0x2fc>
 8003a54:	20000000 	.word	0x20000000
 8003a58:	053e2d63 	.word	0x053e2d63
 8003a5c:	50000100 	.word	0x50000100
 8003a60:	50000400 	.word	0x50000400
 8003a64:	50000300 	.word	0x50000300
 8003a68:	50000700 	.word	0x50000700
 8003a6c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10c      	bne.n	8003aa2 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f023 010f 	bic.w	r1, r3, #15
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa0:	e007      	b.n	8003ab2 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 020f 	bic.w	r2, r2, #15
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ac2:	e007      	b.n	8003ad4 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	f043 0210 	orr.w	r2, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ad4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	; 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd90      	pop	{r4, r7, pc}
 8003ade:	bf00      	nop

08003ae0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af0:	d004      	beq.n	8003afc <HAL_ADC_Start+0x1c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a5c      	ldr	r2, [pc, #368]	; (8003c68 <HAL_ADC_Start+0x188>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_ADC_Start+0x20>
 8003afc:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_ADC_Start+0x18c>)
 8003afe:	e000      	b.n	8003b02 <HAL_ADC_Start+0x22>
 8003b00:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <HAL_ADC_Start+0x190>)
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fd24 	bl	8003550 <LL_ADC_GetMultimode>
 8003b08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fdfe 	bl	8003710 <LL_ADC_REG_IsConversionOngoing>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 809f 	bne.w	8003c5a <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_ADC_Start+0x4a>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e09a      	b.n	8003c60 <HAL_ADC_Start+0x180>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f001 f914 	bl	8004d60 <ADC_Enable>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 8086 	bne.w	8003c50 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a42      	ldr	r2, [pc, #264]	; (8003c68 <HAL_ADC_Start+0x188>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d002      	beq.n	8003b68 <HAL_ADC_Start+0x88>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	e001      	b.n	8003b6c <HAL_ADC_Start+0x8c>
 8003b68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d002      	beq.n	8003b7a <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b92:	d106      	bne.n	8003ba2 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b98:	f023 0206 	bic.w	r2, r3, #6
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	661a      	str	r2, [r3, #96]	; 0x60
 8003ba0:	e002      	b.n	8003ba8 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	221c      	movs	r2, #28
 8003bae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <HAL_ADC_Start+0x188>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d002      	beq.n	8003bc8 <HAL_ADC_Start+0xe8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	e001      	b.n	8003bcc <HAL_ADC_Start+0xec>
 8003bc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d008      	beq.n	8003be6 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d002      	beq.n	8003be6 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b09      	cmp	r3, #9
 8003be4:	d114      	bne.n	8003c10 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fd59 	bl	80036c0 <LL_ADC_REG_StartConversion>
 8003c0e:	e026      	b.n	8003c5e <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <HAL_ADC_Start+0x188>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d002      	beq.n	8003c2c <HAL_ADC_Start+0x14c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	e001      	b.n	8003c30 <HAL_ADC_Start+0x150>
 8003c2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c30:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00f      	beq.n	8003c5e <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c4e:	e006      	b.n	8003c5e <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003c58:	e001      	b.n	8003c5e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	50000100 	.word	0x50000100
 8003c6c:	50000300 	.word	0x50000300
 8003c70:	50000700 	.word	0x50000700

08003c74 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_ADC_Stop+0x16>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e023      	b.n	8003cd2 <HAL_ADC_Stop+0x5e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003c92:	2103      	movs	r1, #3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 ffa7 	bl	8004be8 <ADC_ConversionStop>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d111      	bne.n	8003cc8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f001 f8f1 	bl	8004e8c <ADC_Disable>
 8003caa:	4603      	mov	r3, r0
 8003cac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cee:	d004      	beq.n	8003cfa <HAL_ADC_PollForConversion+0x1e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a70      	ldr	r2, [pc, #448]	; (8003eb8 <HAL_ADC_PollForConversion+0x1dc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_PollForConversion+0x22>
 8003cfa:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <HAL_ADC_PollForConversion+0x1e0>)
 8003cfc:	e000      	b.n	8003d00 <HAL_ADC_PollForConversion+0x24>
 8003cfe:	4b70      	ldr	r3, [pc, #448]	; (8003ec0 <HAL_ADC_PollForConversion+0x1e4>)
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fc25 	bl	8003550 <LL_ADC_GetMultimode>
 8003d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d102      	bne.n	8003d16 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003d10:	2308      	movs	r3, #8
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e037      	b.n	8003d86 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d002      	beq.n	8003d28 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b09      	cmp	r3, #9
 8003d26:	d111      	bne.n	8003d4c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0b3      	b.n	8003eae <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d46:	2304      	movs	r3, #4
 8003d48:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003d4a:	e01c      	b.n	8003d86 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d54:	d004      	beq.n	8003d60 <HAL_ADC_PollForConversion+0x84>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a57      	ldr	r2, [pc, #348]	; (8003eb8 <HAL_ADC_PollForConversion+0x1dc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_PollForConversion+0x88>
 8003d60:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <HAL_ADC_PollForConversion+0x1e0>)
 8003d62:	e000      	b.n	8003d66 <HAL_ADC_PollForConversion+0x8a>
 8003d64:	4b56      	ldr	r3, [pc, #344]	; (8003ec0 <HAL_ADC_PollForConversion+0x1e4>)
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fc00 	bl	800356c <LL_ADC_GetMultiDMATransfer>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e095      	b.n	8003eae <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d82:	2304      	movs	r3, #4
 8003d84:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d86:	f7ff fa63 	bl	8003250 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d8c:	e021      	b.n	8003dd2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d01d      	beq.n	8003dd2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d96:	f7ff fa5b 	bl	8003250 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <HAL_ADC_PollForConversion+0xd0>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d112      	bne.n	8003dd2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e06d      	b.n	8003eae <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0d6      	beq.n	8003d8e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fb0b 	bl	800340c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01c      	beq.n	8003e36 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7f5b      	ldrb	r3, [r3, #29]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d118      	bne.n	8003e36 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d111      	bne.n	8003e36 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d105      	bne.n	8003e36 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_ADC_PollForConversion+0x1dc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d002      	beq.n	8003e46 <HAL_ADC_PollForConversion+0x16a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	e001      	b.n	8003e4a <HAL_ADC_PollForConversion+0x16e>
 8003e46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d008      	beq.n	8003e64 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d002      	beq.n	8003e64 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b09      	cmp	r3, #9
 8003e62:	d104      	bne.n	8003e6e <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e00d      	b.n	8003e8a <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a11      	ldr	r2, [pc, #68]	; (8003eb8 <HAL_ADC_PollForConversion+0x1dc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d002      	beq.n	8003e7e <HAL_ADC_PollForConversion+0x1a2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	e001      	b.n	8003e82 <HAL_ADC_PollForConversion+0x1a6>
 8003e7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e82:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d104      	bne.n	8003e9a <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2208      	movs	r2, #8
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e008      	b.n	8003eac <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	220c      	movs	r2, #12
 8003eaa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	50000100 	.word	0x50000100
 8003ebc:	50000300 	.word	0x50000300
 8003ec0:	50000700 	.word	0x50000700

08003ec4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ee8:	2300      	movs	r3, #0
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f04:	d004      	beq.n	8003f10 <HAL_ADC_IRQHandler+0x30>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a87      	ldr	r2, [pc, #540]	; (8004128 <HAL_ADC_IRQHandler+0x248>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_IRQHandler+0x34>
 8003f10:	4b86      	ldr	r3, [pc, #536]	; (800412c <HAL_ADC_IRQHandler+0x24c>)
 8003f12:	e000      	b.n	8003f16 <HAL_ADC_IRQHandler+0x36>
 8003f14:	4b86      	ldr	r3, [pc, #536]	; (8004130 <HAL_ADC_IRQHandler+0x250>)
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fb1a 	bl	8003550 <LL_ADC_GetMultimode>
 8003f1c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d017      	beq.n	8003f58 <HAL_ADC_IRQHandler+0x78>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d012      	beq.n	8003f58 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d105      	bne.n	8003f4a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f42:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f001 f84b 	bl	8004fe6 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2202      	movs	r2, #2
 8003f56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x8c>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8085 	beq.w	8004082 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d07f      	beq.n	8004082 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fa34 	bl	800340c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d064      	beq.n	8004074 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5e      	ldr	r2, [pc, #376]	; (8004128 <HAL_ADC_IRQHandler+0x248>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d002      	beq.n	8003fba <HAL_ADC_IRQHandler+0xda>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	e001      	b.n	8003fbe <HAL_ADC_IRQHandler+0xde>
 8003fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d008      	beq.n	8003fd8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b05      	cmp	r3, #5
 8003fd0:	d002      	beq.n	8003fd8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b09      	cmp	r3, #9
 8003fd6:	d104      	bne.n	8003fe2 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	e00d      	b.n	8003ffe <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a50      	ldr	r2, [pc, #320]	; (8004128 <HAL_ADC_IRQHandler+0x248>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d002      	beq.n	8003ff2 <HAL_ADC_IRQHandler+0x112>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	e001      	b.n	8003ff6 <HAL_ADC_IRQHandler+0x116>
 8003ff2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ff6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d135      	bne.n	8004074 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b08      	cmp	r3, #8
 8004014:	d12e      	bne.n	8004074 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fb78 	bl	8003710 <LL_ADC_REG_IsConversionOngoing>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11a      	bne.n	800405c <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 020c 	bic.w	r2, r2, #12
 8004034:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d112      	bne.n	8004074 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	65da      	str	r2, [r3, #92]	; 0x5c
 800405a:	e00b      	b.n	8004074 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	f043 0210 	orr.w	r2, r3, #16
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	f043 0201 	orr.w	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f96d 	bl	8004354 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	220c      	movs	r2, #12
 8004080:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_ADC_IRQHandler+0x1b6>
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80a1 	beq.w	80041e4 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 809b 	beq.w	80041e4 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff f9dd 	bl	800348a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80040d0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff f998 	bl	800340c <LL_ADC_REG_IsTriggerSourceSWStart>
 80040dc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a11      	ldr	r2, [pc, #68]	; (8004128 <HAL_ADC_IRQHandler+0x248>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d002      	beq.n	80040ee <HAL_ADC_IRQHandler+0x20e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e001      	b.n	80040f2 <HAL_ADC_IRQHandler+0x212>
 80040ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d008      	beq.n	800410c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b06      	cmp	r3, #6
 8004104:	d002      	beq.n	800410c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b07      	cmp	r3, #7
 800410a:	d104      	bne.n	8004116 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	623b      	str	r3, [r7, #32]
 8004114:	e014      	b.n	8004140 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a03      	ldr	r2, [pc, #12]	; (8004128 <HAL_ADC_IRQHandler+0x248>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d009      	beq.n	8004134 <HAL_ADC_IRQHandler+0x254>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	e008      	b.n	8004138 <HAL_ADC_IRQHandler+0x258>
 8004126:	bf00      	nop
 8004128:	50000100 	.word	0x50000100
 800412c:	50000300 	.word	0x50000300
 8004130:	50000700 	.word	0x50000700
 8004134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004138:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d047      	beq.n	80041d6 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_ADC_IRQHandler+0x280>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03f      	beq.n	80041d6 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	d13a      	bne.n	80041d6 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d133      	bne.n	80041d6 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d12e      	bne.n	80041d6 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff faee 	bl	800375e <LL_ADC_INJ_IsConversionOngoing>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d11a      	bne.n	80041be <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004196:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d112      	bne.n	80041d6 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	f043 0201 	orr.w	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80041bc:	e00b      	b.n	80041d6 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c2:	f043 0210 	orr.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fedd 	bl	8004f96 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2260      	movs	r2, #96	; 0x60
 80041e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d011      	beq.n	8004212 <HAL_ADC_IRQHandler+0x332>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00c      	beq.n	8004212 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f8af 	bl	8004368 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <HAL_ADC_IRQHandler+0x362>
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fec3 	bl	8004fbe <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004248:	2b00      	cmp	r3, #0
 800424a:	d012      	beq.n	8004272 <HAL_ADC_IRQHandler+0x392>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 feb5 	bl	8004fd2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d043      	beq.n	8004304 <HAL_ADC_IRQHandler+0x424>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	d03e      	beq.n	8004304 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 800428e:	2301      	movs	r3, #1
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
 8004292:	e021      	b.n	80042d8 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d015      	beq.n	80042c6 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a2:	d004      	beq.n	80042ae <HAL_ADC_IRQHandler+0x3ce>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a27      	ldr	r2, [pc, #156]	; (8004348 <HAL_ADC_IRQHandler+0x468>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_IRQHandler+0x3d2>
 80042ae:	4b27      	ldr	r3, [pc, #156]	; (800434c <HAL_ADC_IRQHandler+0x46c>)
 80042b0:	e000      	b.n	80042b4 <HAL_ADC_IRQHandler+0x3d4>
 80042b2:	4b27      	ldr	r3, [pc, #156]	; (8004350 <HAL_ADC_IRQHandler+0x470>)
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff f959 	bl	800356c <LL_ADC_GetMultiDMATransfer>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00b      	beq.n	80042d8 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80042c0:	2301      	movs	r3, #1
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	e008      	b.n	80042d8 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80042d4:	2301      	movs	r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d10e      	bne.n	80042fc <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ee:	f043 0202 	orr.w	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f840 	bl	800437c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2210      	movs	r2, #16
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430a:	2b00      	cmp	r3, #0
 800430c:	d018      	beq.n	8004340 <HAL_ADC_IRQHandler+0x460>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004328:	f043 0208 	orr.w	r2, r3, #8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004338:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fe35 	bl	8004faa <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004340:	bf00      	nop
 8004342:	3728      	adds	r7, #40	; 0x28
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	50000100 	.word	0x50000100
 800434c:	50000300 	.word	0x50000300
 8004350:	50000700 	.word	0x50000700

08004354 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b0b6      	sub	sp, #216	; 0xd8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x24>
 80043ae:	2302      	movs	r3, #2
 80043b0:	f000 bc04 	b.w	8004bbc <HAL_ADC_ConfigChannel+0x82c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff f9a5 	bl	8003710 <LL_ADC_REG_IsConversionOngoing>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 83e8 	bne.w	8004b9e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	f7ff f829 	bl	8003432 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff f993 	bl	8003710 <LL_ADC_REG_IsConversionOngoing>
 80043ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff f9b3 	bl	800375e <LL_ADC_INJ_IsConversionOngoing>
 80043f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004400:	2b00      	cmp	r3, #0
 8004402:	f040 81d9 	bne.w	80047b8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004406:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 81d4 	bne.w	80047b8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004418:	d10f      	bne.n	800443a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	4619      	mov	r1, r3
 8004426:	f7ff f843 	bl	80034b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe ffd7 	bl	80033e6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004438:	e00e      	b.n	8004458 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6819      	ldr	r1, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	461a      	mov	r2, r3
 8004448:	f7ff f832 	bl	80034b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe ffc7 	bl	80033e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	08db      	lsrs	r3, r3, #3
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b04      	cmp	r3, #4
 8004478:	d022      	beq.n	80044c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6919      	ldr	r1, [r3, #16]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800448a:	f7fe ff21 	bl	80032d0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6919      	ldr	r1, [r3, #16]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	461a      	mov	r2, r3
 800449c:	f7fe ff6d 	bl	800337a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d102      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x126>
 80044b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044b4:	e000      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x128>
 80044b6:	2300      	movs	r3, #0
 80044b8:	461a      	mov	r2, r3
 80044ba:	f7fe ff79 	bl	80033b0 <LL_ADC_SetOffsetSaturation>
 80044be:	e17b      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe ff26 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x15c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2100      	movs	r1, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe ff1b 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80044e2:	4603      	mov	r3, r0
 80044e4:	0e9b      	lsrs	r3, r3, #26
 80044e6:	f003 021f 	and.w	r2, r3, #31
 80044ea:	e01e      	b.n	800452a <HAL_ADC_ConfigChannel+0x19a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe ff10 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800450a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800450e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800451a:	2320      	movs	r3, #32
 800451c:	e004      	b.n	8004528 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800451e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x1b2>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	e018      	b.n	8004574 <HAL_ADC_ConfigChannel+0x1e4>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800455a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800455e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004566:	2320      	movs	r3, #32
 8004568:	e004      	b.n	8004574 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800456a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004574:	429a      	cmp	r2, r3
 8004576:	d106      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2200      	movs	r2, #0
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe fedf 	bl	8003344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2101      	movs	r1, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fec3 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004592:	4603      	mov	r3, r0
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x222>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe feb8 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	0e9b      	lsrs	r3, r3, #26
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	e01e      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x260>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2101      	movs	r1, #1
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fead 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80045d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80045d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80045e0:	2320      	movs	r3, #32
 80045e2:	e004      	b.n	80045ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80045e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045e8:	fab3 f383 	clz	r3, r3
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x278>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	e018      	b.n	800463a <HAL_ADC_ConfigChannel+0x2aa>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800461c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800462c:	2320      	movs	r3, #32
 800462e:	e004      	b.n	800463a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800463a:	429a      	cmp	r2, r3
 800463c:	d106      	bne.n	800464c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2200      	movs	r2, #0
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fe7c 	bl	8003344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2102      	movs	r1, #2
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fe60 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004658:	4603      	mov	r3, r0
 800465a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x2e8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2102      	movs	r1, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe fe55 	bl	8003318 <LL_ADC_GetOffsetChannel>
 800466e:	4603      	mov	r3, r0
 8004670:	0e9b      	lsrs	r3, r3, #26
 8004672:	f003 021f 	and.w	r2, r3, #31
 8004676:	e01e      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x326>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2102      	movs	r1, #2
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fe4a 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004684:	4603      	mov	r3, r0
 8004686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004696:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800469a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800469e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80046a6:	2320      	movs	r3, #32
 80046a8:	e004      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80046aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x33e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	0e9b      	lsrs	r3, r3, #26
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	e016      	b.n	80046fc <HAL_ADC_ConfigChannel+0x36c>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80046e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80046e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80046ee:	2320      	movs	r3, #32
 80046f0:	e004      	b.n	80046fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80046f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d106      	bne.n	800470e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f7fe fe1b 	bl	8003344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2103      	movs	r1, #3
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe fdff 	bl	8003318 <LL_ADC_GetOffsetChannel>
 800471a:	4603      	mov	r3, r0
 800471c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <HAL_ADC_ConfigChannel+0x3aa>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2103      	movs	r1, #3
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fdf4 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004730:	4603      	mov	r3, r0
 8004732:	0e9b      	lsrs	r3, r3, #26
 8004734:	f003 021f 	and.w	r2, r3, #31
 8004738:	e017      	b.n	800476a <HAL_ADC_ConfigChannel+0x3da>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2103      	movs	r1, #3
 8004740:	4618      	mov	r0, r3
 8004742:	f7fe fde9 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004746:	4603      	mov	r3, r0
 8004748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474c:	fa93 f3a3 	rbit	r3, r3
 8004750:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004754:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800475c:	2320      	movs	r3, #32
 800475e:	e003      	b.n	8004768 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x3f2>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	0e9b      	lsrs	r3, r3, #26
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	e011      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x416>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004792:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800479a:	2320      	movs	r3, #32
 800479c:	e003      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800479e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a0:	fab3 f383 	clz	r3, r3
 80047a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d106      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	2103      	movs	r1, #3
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fdc6 	bl	8003344 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe ff59 	bl	8003674 <LL_ADC_IsEnabled>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 813d 	bne.w	8004a44 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f7fe fe96 	bl	8003508 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4aa2      	ldr	r2, [pc, #648]	; (8004a6c <HAL_ADC_ConfigChannel+0x6dc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f040 812e 	bne.w	8004a44 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x480>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0e9b      	lsrs	r3, r3, #26
 80047fe:	3301      	adds	r3, #1
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2b09      	cmp	r3, #9
 8004806:	bf94      	ite	ls
 8004808:	2301      	movls	r3, #1
 800480a:	2300      	movhi	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e019      	b.n	8004844 <HAL_ADC_ConfigChannel+0x4b4>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800481e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004820:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004828:	2320      	movs	r3, #32
 800482a:	e003      	b.n	8004834 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800482c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482e:	fab3 f383 	clz	r3, r3
 8004832:	b2db      	uxtb	r3, r3
 8004834:	3301      	adds	r3, #1
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	2b09      	cmp	r3, #9
 800483c:	bf94      	ite	ls
 800483e:	2301      	movls	r3, #1
 8004840:	2300      	movhi	r3, #0
 8004842:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004844:	2b00      	cmp	r3, #0
 8004846:	d079      	beq.n	800493c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x4d4>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	0e9b      	lsrs	r3, r3, #26
 800485a:	3301      	adds	r3, #1
 800485c:	069b      	lsls	r3, r3, #26
 800485e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004862:	e015      	b.n	8004890 <HAL_ADC_ConfigChannel+0x500>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	fa93 f3a3 	rbit	r3, r3
 8004870:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004874:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800487c:	2320      	movs	r3, #32
 800487e:	e003      	b.n	8004888 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	3301      	adds	r3, #1
 800488a:	069b      	lsls	r3, r3, #26
 800488c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x520>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0e9b      	lsrs	r3, r3, #26
 80048a2:	3301      	adds	r3, #1
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	2101      	movs	r1, #1
 80048aa:	fa01 f303 	lsl.w	r3, r1, r3
 80048ae:	e017      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x550>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b8:	fa93 f3a3 	rbit	r3, r3
 80048bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80048be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80048c8:	2320      	movs	r3, #32
 80048ca:	e003      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80048cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3301      	adds	r3, #1
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2101      	movs	r1, #1
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	ea42 0103 	orr.w	r1, r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x576>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	0e9b      	lsrs	r3, r3, #26
 80048f6:	3301      	adds	r3, #1
 80048f8:	f003 021f 	and.w	r2, r3, #31
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	051b      	lsls	r3, r3, #20
 8004904:	e018      	b.n	8004938 <HAL_ADC_ConfigChannel+0x5a8>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800491e:	2320      	movs	r3, #32
 8004920:	e003      	b.n	800492a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	fab3 f383 	clz	r3, r3
 8004928:	b2db      	uxtb	r3, r3
 800492a:	3301      	adds	r3, #1
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004938:	430b      	orrs	r3, r1
 800493a:	e07e      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x5c8>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	3301      	adds	r3, #1
 8004950:	069b      	lsls	r3, r3, #26
 8004952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004956:	e015      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5f4>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	fa93 f3a3 	rbit	r3, r3
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004970:	2320      	movs	r3, #32
 8004972:	e003      	b.n	800497c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	3301      	adds	r3, #1
 800497e:	069b      	lsls	r3, r3, #26
 8004980:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x614>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0e9b      	lsrs	r3, r3, #26
 8004996:	3301      	adds	r3, #1
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	e017      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x644>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	61fb      	str	r3, [r7, #28]
  return result;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80049bc:	2320      	movs	r3, #32
 80049be:	e003      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3301      	adds	r3, #1
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	ea42 0103 	orr.w	r1, r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10d      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x670>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	0e9b      	lsrs	r3, r3, #26
 80049ea:	3301      	adds	r3, #1
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4613      	mov	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	3b1e      	subs	r3, #30
 80049f8:	051b      	lsls	r3, r3, #20
 80049fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049fe:	e01b      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x6a8>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	613b      	str	r3, [r7, #16]
  return result;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004a18:	2320      	movs	r3, #32
 8004a1a:	e003      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3301      	adds	r3, #1
 8004a26:	f003 021f 	and.w	r2, r3, #31
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	3b1e      	subs	r3, #30
 8004a32:	051b      	lsls	r3, r3, #20
 8004a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f7fe fd36 	bl	80034b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_ADC_ConfigChannel+0x6e0>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80af 	beq.w	8004bb0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a5a:	d004      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x6d6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <HAL_ADC_ConfigChannel+0x6e4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10a      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x6ec>
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_ADC_ConfigChannel+0x6e8>)
 8004a68:	e009      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x6ee>
 8004a6a:	bf00      	nop
 8004a6c:	407f0000 	.word	0x407f0000
 8004a70:	80080000 	.word	0x80080000
 8004a74:	50000100 	.word	0x50000100
 8004a78:	50000300 	.word	0x50000300
 8004a7c:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <HAL_ADC_ConfigChannel+0x834>)
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fc18 	bl	80032b4 <LL_ADC_GetCommonPathInternalCh>
 8004a84:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a4e      	ldr	r2, [pc, #312]	; (8004bc8 <HAL_ADC_ConfigChannel+0x838>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d004      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x70c>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a4d      	ldr	r2, [pc, #308]	; (8004bcc <HAL_ADC_ConfigChannel+0x83c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d134      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d12e      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ab0:	d17e      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aba:	d004      	beq.n	8004ac6 <HAL_ADC_ConfigChannel+0x736>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a43      	ldr	r2, [pc, #268]	; (8004bd0 <HAL_ADC_ConfigChannel+0x840>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x73a>
 8004ac6:	4a43      	ldr	r2, [pc, #268]	; (8004bd4 <HAL_ADC_ConfigChannel+0x844>)
 8004ac8:	e000      	b.n	8004acc <HAL_ADC_ConfigChannel+0x73c>
 8004aca:	4a3e      	ldr	r2, [pc, #248]	; (8004bc4 <HAL_ADC_ConfigChannel+0x834>)
 8004acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ad0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7fe fbd9 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004adc:	4b3e      	ldr	r3, [pc, #248]	; (8004bd8 <HAL_ADC_ConfigChannel+0x848>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	099b      	lsrs	r3, r3, #6
 8004ae2:	4a3e      	ldr	r2, [pc, #248]	; (8004bdc <HAL_ADC_ConfigChannel+0x84c>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	099b      	lsrs	r3, r3, #6
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	4613      	mov	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004af6:	e002      	b.n	8004afe <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f9      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b04:	e054      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <HAL_ADC_ConfigChannel+0x850>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d120      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11a      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b24:	d144      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b2e:	d004      	beq.n	8004b3a <HAL_ADC_ConfigChannel+0x7aa>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <HAL_ADC_ConfigChannel+0x840>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x7ae>
 8004b3a:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <HAL_ADC_ConfigChannel+0x844>)
 8004b3c:	e000      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x7b0>
 8004b3e:	4a21      	ldr	r2, [pc, #132]	; (8004bc4 <HAL_ADC_ConfigChannel+0x834>)
 8004b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fe fb9f 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b50:	e02e      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a23      	ldr	r2, [pc, #140]	; (8004be4 <HAL_ADC_ConfigChannel+0x854>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d129      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d123      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <HAL_ADC_ConfigChannel+0x840>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01e      	beq.n	8004bb0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b7a:	d004      	beq.n	8004b86 <HAL_ADC_ConfigChannel+0x7f6>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <HAL_ADC_ConfigChannel+0x840>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x7fa>
 8004b86:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <HAL_ADC_ConfigChannel+0x844>)
 8004b88:	e000      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x7fc>
 8004b8a:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <HAL_ADC_ConfigChannel+0x834>)
 8004b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f7fe fb79 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
 8004b9c:	e008      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bb8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	37d8      	adds	r7, #216	; 0xd8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	50000700 	.word	0x50000700
 8004bc8:	c3210000 	.word	0xc3210000
 8004bcc:	90c00010 	.word	0x90c00010
 8004bd0:	50000100 	.word	0x50000100
 8004bd4:	50000300 	.word	0x50000300
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	053e2d63 	.word	0x053e2d63
 8004be0:	c7520000 	.word	0xc7520000
 8004be4:	cb840000 	.word	0xcb840000

08004be8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fd86 	bl	8003710 <LL_ADC_REG_IsConversionOngoing>
 8004c04:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fda7 	bl	800375e <LL_ADC_INJ_IsConversionOngoing>
 8004c10:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8098 	beq.w	8004d50 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02a      	beq.n	8004c84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7f5b      	ldrb	r3, [r3, #29]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d126      	bne.n	8004c84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7f1b      	ldrb	r3, [r3, #28]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d122      	bne.n	8004c84 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c42:	e014      	b.n	8004c6e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4a45      	ldr	r2, [pc, #276]	; (8004d5c <ADC_ConversionStop+0x174>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d90d      	bls.n	8004c68 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	f043 0210 	orr.w	r2, r3, #16
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5c:	f043 0201 	orr.w	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e074      	b.n	8004d52 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d1e3      	bne.n	8004c44 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2240      	movs	r2, #64	; 0x40
 8004c82:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d014      	beq.n	8004cb4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fd3e 	bl	8003710 <LL_ADC_REG_IsConversionOngoing>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fcfb 	bl	800369a <LL_ADC_IsDisableOngoing>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fd1a 	bl	80036e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d014      	beq.n	8004ce4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fd4d 	bl	800375e <LL_ADC_INJ_IsConversionOngoing>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00c      	beq.n	8004ce4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fce3 	bl	800369a <LL_ADC_IsDisableOngoing>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d104      	bne.n	8004ce4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fd29 	bl	8003736 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d005      	beq.n	8004cf6 <ADC_ConversionStop+0x10e>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d105      	bne.n	8004cfc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	617b      	str	r3, [r7, #20]
        break;
 8004cf4:	e005      	b.n	8004d02 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	617b      	str	r3, [r7, #20]
        break;
 8004cfa:	e002      	b.n	8004d02 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	617b      	str	r3, [r7, #20]
        break;
 8004d00:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004d02:	f7fe faa5 	bl	8003250 <HAL_GetTick>
 8004d06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d08:	e01b      	b.n	8004d42 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d0a:	f7fe faa1 	bl	8003250 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	d914      	bls.n	8004d42 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	f043 0210 	orr.w	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e007      	b.n	8004d52 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1dc      	bne.n	8004d0a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	a33fffff 	.word	0xa33fffff

08004d60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fc7f 	bl	8003674 <LL_ADC_IsEnabled>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d176      	bne.n	8004e6a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	4b3c      	ldr	r3, [pc, #240]	; (8004e74 <ADC_Enable+0x114>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00d      	beq.n	8004da6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	f043 0210 	orr.w	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9a:	f043 0201 	orr.w	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e062      	b.n	8004e6c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fc3a 	bl	8003624 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db8:	d004      	beq.n	8004dc4 <ADC_Enable+0x64>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2e      	ldr	r2, [pc, #184]	; (8004e78 <ADC_Enable+0x118>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <ADC_Enable+0x68>
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <ADC_Enable+0x11c>)
 8004dc6:	e000      	b.n	8004dca <ADC_Enable+0x6a>
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <ADC_Enable+0x120>)
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fa72 	bl	80032b4 <LL_ADC_GetCommonPathInternalCh>
 8004dd0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d013      	beq.n	8004e02 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dda:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <ADC_Enable+0x124>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	099b      	lsrs	r3, r3, #6
 8004de0:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <ADC_Enable+0x128>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004df4:	e002      	b.n	8004dfc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f9      	bne.n	8004df6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e02:	f7fe fa25 	bl	8003250 <HAL_GetTick>
 8004e06:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e08:	e028      	b.n	8004e5c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fc30 	bl	8003674 <LL_ADC_IsEnabled>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe fc00 	bl	8003624 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e24:	f7fe fa14 	bl	8003250 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d914      	bls.n	8004e5c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d00d      	beq.n	8004e5c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e44:	f043 0210 	orr.w	r2, r3, #16
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e007      	b.n	8004e6c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d1cf      	bne.n	8004e0a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	8000003f 	.word	0x8000003f
 8004e78:	50000100 	.word	0x50000100
 8004e7c:	50000300 	.word	0x50000300
 8004e80:	50000700 	.word	0x50000700
 8004e84:	20000000 	.word	0x20000000
 8004e88:	053e2d63 	.word	0x053e2d63

08004e8c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe fbfe 	bl	800369a <LL_ADC_IsDisableOngoing>
 8004e9e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe fbe5 	bl	8003674 <LL_ADC_IsEnabled>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d047      	beq.n	8004f40 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d144      	bne.n	8004f40 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 030d 	and.w	r3, r3, #13
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d10c      	bne.n	8004ede <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe fbbf 	bl	800364c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ed6:	f7fe f9bb 	bl	8003250 <HAL_GetTick>
 8004eda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004edc:	e029      	b.n	8004f32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	f043 0210 	orr.w	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e023      	b.n	8004f42 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004efa:	f7fe f9a9 	bl	8003250 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d914      	bls.n	8004f32 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	f043 0210 	orr.w	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f26:	f043 0201 	orr.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e007      	b.n	8004f42 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1dc      	bne.n	8004efa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <LL_ADC_IsEnabled>:
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <LL_ADC_IsEnabled+0x18>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <LL_ADC_IsEnabled+0x1a>
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d101      	bne.n	8004f88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b0a1      	sub	sp, #132	; 0x84
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005016:	2302      	movs	r3, #2
 8005018:	e0cb      	b.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005022:	2300      	movs	r3, #0
 8005024:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005026:	2300      	movs	r3, #0
 8005028:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005032:	d102      	bne.n	800503a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005034:	4b61      	ldr	r3, [pc, #388]	; (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	e001      	b.n	800503e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800503a:	2300      	movs	r3, #0
 800503c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0aa      	b.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff ff86 	bl	8004f70 <LL_ADC_REG_IsConversionOngoing>
 8005064:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff ff80 	bl	8004f70 <LL_ADC_REG_IsConversionOngoing>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 808c 	bne.w	8005190 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507a:	2b00      	cmp	r3, #0
 800507c:	f040 8088 	bne.w	8005190 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005088:	d004      	beq.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005094:	4b4a      	ldr	r3, [pc, #296]	; (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8005096:	e000      	b.n	800509a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005098:	4b4a      	ldr	r3, [pc, #296]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800509a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d041      	beq.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6859      	ldr	r1, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050b6:	035b      	lsls	r3, r3, #13
 80050b8:	430b      	orrs	r3, r1
 80050ba:	431a      	orrs	r2, r3
 80050bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050c8:	d004      	beq.n	80050d4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a3b      	ldr	r2, [pc, #236]	; (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d10f      	bne.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80050d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050d8:	f7ff ff37 	bl	8004f4a <LL_ADC_IsEnabled>
 80050dc:	4604      	mov	r4, r0
 80050de:	4837      	ldr	r0, [pc, #220]	; (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050e0:	f7ff ff33 	bl	8004f4a <LL_ADC_IsEnabled>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4323      	orrs	r3, r4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf0c      	ite	eq
 80050ec:	2301      	moveq	r3, #1
 80050ee:	2300      	movne	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e008      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80050f4:	4834      	ldr	r0, [pc, #208]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80050f6:	f7ff ff28 	bl	8004f4a <LL_ADC_IsEnabled>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04c      	beq.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800510a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005112:	f023 030f 	bic.w	r3, r3, #15
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	6811      	ldr	r1, [r2, #0]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	6892      	ldr	r2, [r2, #8]
 800511e:	430a      	orrs	r2, r1
 8005120:	431a      	orrs	r2, r3
 8005122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005124:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005126:	e03d      	b.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005132:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800513c:	d004      	beq.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10f      	bne.n	8005168 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8005148:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800514c:	f7ff fefd 	bl	8004f4a <LL_ADC_IsEnabled>
 8005150:	4604      	mov	r4, r0
 8005152:	481a      	ldr	r0, [pc, #104]	; (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005154:	f7ff fef9 	bl	8004f4a <LL_ADC_IsEnabled>
 8005158:	4603      	mov	r3, r0
 800515a:	4323      	orrs	r3, r4
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e008      	b.n	800517a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005168:	4817      	ldr	r0, [pc, #92]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800516a:	f7ff feee 	bl	8004f4a <LL_ADC_IsEnabled>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d012      	beq.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800517e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005186:	f023 030f 	bic.w	r3, r3, #15
 800518a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800518c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800518e:	e009      	b.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005194:	f043 0220 	orr.w	r2, r3, #32
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80051a2:	e000      	b.n	80051a6 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80051ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3784      	adds	r7, #132	; 0x84
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd90      	pop	{r4, r7, pc}
 80051ba:	bf00      	nop
 80051bc:	50000100 	.word	0x50000100
 80051c0:	50000300 	.word	0x50000300
 80051c4:	50000700 	.word	0x50000700
 80051c8:	50000400 	.word	0x50000400

080051cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <__NVIC_SetPriorityGrouping+0x44>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051e8:	4013      	ands	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051fe:	4a04      	ldr	r2, [pc, #16]	; (8005210 <__NVIC_SetPriorityGrouping+0x44>)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	60d3      	str	r3, [r2, #12]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005218:	4b04      	ldr	r3, [pc, #16]	; (800522c <__NVIC_GetPriorityGrouping+0x18>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	f003 0307 	and.w	r3, r3, #7
}
 8005222:	4618      	mov	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800523a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523e:	2b00      	cmp	r3, #0
 8005240:	db0b      	blt.n	800525a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	f003 021f 	and.w	r2, r3, #31
 8005248:	4907      	ldr	r1, [pc, #28]	; (8005268 <__NVIC_EnableIRQ+0x38>)
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2001      	movs	r0, #1
 8005252:	fa00 f202 	lsl.w	r2, r0, r2
 8005256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	e000e100 	.word	0xe000e100

0800526c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	6039      	str	r1, [r7, #0]
 8005276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db0a      	blt.n	8005296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	490c      	ldr	r1, [pc, #48]	; (80052b8 <__NVIC_SetPriority+0x4c>)
 8005286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528a:	0112      	lsls	r2, r2, #4
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	440b      	add	r3, r1
 8005290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005294:	e00a      	b.n	80052ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4908      	ldr	r1, [pc, #32]	; (80052bc <__NVIC_SetPriority+0x50>)
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3b04      	subs	r3, #4
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	440b      	add	r3, r1
 80052aa:	761a      	strb	r2, [r3, #24]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000e100 	.word	0xe000e100
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f1c3 0307 	rsb	r3, r3, #7
 80052da:	2b04      	cmp	r3, #4
 80052dc:	bf28      	it	cs
 80052de:	2304      	movcs	r3, #4
 80052e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3304      	adds	r3, #4
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d902      	bls.n	80052f0 <NVIC_EncodePriority+0x30>
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3b03      	subs	r3, #3
 80052ee:	e000      	b.n	80052f2 <NVIC_EncodePriority+0x32>
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f4:	f04f 32ff 	mov.w	r2, #4294967295
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43da      	mvns	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	401a      	ands	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005308:	f04f 31ff 	mov.w	r1, #4294967295
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	43d9      	mvns	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005318:	4313      	orrs	r3, r2
         );
}
 800531a:	4618      	mov	r0, r3
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff ff4c 	bl	80051cc <__NVIC_SetPriorityGrouping>
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800534a:	f7ff ff63 	bl	8005214 <__NVIC_GetPriorityGrouping>
 800534e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	6978      	ldr	r0, [r7, #20]
 8005356:	f7ff ffb3 	bl	80052c0 <NVIC_EncodePriority>
 800535a:	4602      	mov	r2, r0
 800535c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005360:	4611      	mov	r1, r2
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff ff82 	bl	800526c <__NVIC_SetPriority>
}
 8005368:	bf00      	nop
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800537a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff ff56 	bl	8005230 <__NVIC_EnableIRQ>
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800539a:	e15a      	b.n	8005652 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	2101      	movs	r1, #1
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 814c 	beq.w	800564c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d005      	beq.n	80053cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d130      	bne.n	800542e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	2203      	movs	r2, #3
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	43db      	mvns	r3, r3
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4013      	ands	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005402:	2201      	movs	r2, #1
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	43db      	mvns	r3, r3
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4013      	ands	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	f003 0201 	and.w	r2, r3, #1
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b03      	cmp	r3, #3
 8005438:	d017      	beq.n	800546a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	2203      	movs	r2, #3
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4013      	ands	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d123      	bne.n	80054be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	08da      	lsrs	r2, r3, #3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3208      	adds	r2, #8
 800547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005482:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	220f      	movs	r2, #15
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	08da      	lsrs	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3208      	adds	r2, #8
 80054b8:	6939      	ldr	r1, [r7, #16]
 80054ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	2203      	movs	r2, #3
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43db      	mvns	r3, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4013      	ands	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f003 0203 	and.w	r2, r3, #3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80a6 	beq.w	800564c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005500:	4b5b      	ldr	r3, [pc, #364]	; (8005670 <HAL_GPIO_Init+0x2e4>)
 8005502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005504:	4a5a      	ldr	r2, [pc, #360]	; (8005670 <HAL_GPIO_Init+0x2e4>)
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	6613      	str	r3, [r2, #96]	; 0x60
 800550c:	4b58      	ldr	r3, [pc, #352]	; (8005670 <HAL_GPIO_Init+0x2e4>)
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005518:	4a56      	ldr	r2, [pc, #344]	; (8005674 <HAL_GPIO_Init+0x2e8>)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	089b      	lsrs	r3, r3, #2
 800551e:	3302      	adds	r3, #2
 8005520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	220f      	movs	r2, #15
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4013      	ands	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005542:	d01f      	beq.n	8005584 <HAL_GPIO_Init+0x1f8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a4c      	ldr	r2, [pc, #304]	; (8005678 <HAL_GPIO_Init+0x2ec>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d019      	beq.n	8005580 <HAL_GPIO_Init+0x1f4>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a4b      	ldr	r2, [pc, #300]	; (800567c <HAL_GPIO_Init+0x2f0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <HAL_GPIO_Init+0x1f0>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a4a      	ldr	r2, [pc, #296]	; (8005680 <HAL_GPIO_Init+0x2f4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00d      	beq.n	8005578 <HAL_GPIO_Init+0x1ec>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a49      	ldr	r2, [pc, #292]	; (8005684 <HAL_GPIO_Init+0x2f8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <HAL_GPIO_Init+0x1e8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a48      	ldr	r2, [pc, #288]	; (8005688 <HAL_GPIO_Init+0x2fc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d101      	bne.n	8005570 <HAL_GPIO_Init+0x1e4>
 800556c:	2305      	movs	r3, #5
 800556e:	e00a      	b.n	8005586 <HAL_GPIO_Init+0x1fa>
 8005570:	2306      	movs	r3, #6
 8005572:	e008      	b.n	8005586 <HAL_GPIO_Init+0x1fa>
 8005574:	2304      	movs	r3, #4
 8005576:	e006      	b.n	8005586 <HAL_GPIO_Init+0x1fa>
 8005578:	2303      	movs	r3, #3
 800557a:	e004      	b.n	8005586 <HAL_GPIO_Init+0x1fa>
 800557c:	2302      	movs	r3, #2
 800557e:	e002      	b.n	8005586 <HAL_GPIO_Init+0x1fa>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_GPIO_Init+0x1fa>
 8005584:	2300      	movs	r3, #0
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	f002 0203 	and.w	r2, r2, #3
 800558c:	0092      	lsls	r2, r2, #2
 800558e:	4093      	lsls	r3, r2
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005596:	4937      	ldr	r1, [pc, #220]	; (8005674 <HAL_GPIO_Init+0x2e8>)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	3302      	adds	r3, #2
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055a4:	4b39      	ldr	r3, [pc, #228]	; (800568c <HAL_GPIO_Init+0x300>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055c8:	4a30      	ldr	r2, [pc, #192]	; (800568c <HAL_GPIO_Init+0x300>)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055ce:	4b2f      	ldr	r3, [pc, #188]	; (800568c <HAL_GPIO_Init+0x300>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055f2:	4a26      	ldr	r2, [pc, #152]	; (800568c <HAL_GPIO_Init+0x300>)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80055f8:	4b24      	ldr	r3, [pc, #144]	; (800568c <HAL_GPIO_Init+0x300>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	43db      	mvns	r3, r3
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4013      	ands	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800561c:	4a1b      	ldr	r2, [pc, #108]	; (800568c <HAL_GPIO_Init+0x300>)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005622:	4b1a      	ldr	r3, [pc, #104]	; (800568c <HAL_GPIO_Init+0x300>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	43db      	mvns	r3, r3
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4013      	ands	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005646:	4a11      	ldr	r2, [pc, #68]	; (800568c <HAL_GPIO_Init+0x300>)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	3301      	adds	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	f47f ae9d 	bne.w	800539c <HAL_GPIO_Init+0x10>
  }
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40021000 	.word	0x40021000
 8005674:	40010000 	.word	0x40010000
 8005678:	48000400 	.word	0x48000400
 800567c:	48000800 	.word	0x48000800
 8005680:	48000c00 	.word	0x48000c00
 8005684:	48001000 	.word	0x48001000
 8005688:	48001400 	.word	0x48001400
 800568c:	40010400 	.word	0x40010400

08005690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	807b      	strh	r3, [r7, #2]
 800569c:	4613      	mov	r3, r2
 800569e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056a0:	787b      	ldrb	r3, [r7, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056a6:	887a      	ldrh	r2, [r7, #2]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056ac:	e002      	b.n	80056b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056d2:	887a      	ldrh	r2, [r7, #2]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4013      	ands	r3, r2
 80056d8:	041a      	lsls	r2, r3, #16
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	43d9      	mvns	r1, r3
 80056de:	887b      	ldrh	r3, [r7, #2]
 80056e0:	400b      	ands	r3, r1
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	619a      	str	r2, [r3, #24]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005700:	695a      	ldr	r2, [r3, #20]
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d006      	beq.n	8005718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800570a:	4a05      	ldr	r2, [pc, #20]	; (8005720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f806 	bl	8005724 <HAL_GPIO_EXTI_Callback>
  }
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40010400 	.word	0x40010400

08005724 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d141      	bne.n	80057ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800574a:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005756:	d131      	bne.n	80057bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005758:	4b47      	ldr	r3, [pc, #284]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800575e:	4a46      	ldr	r2, [pc, #280]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005768:	4b43      	ldr	r3, [pc, #268]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005770:	4a41      	ldr	r2, [pc, #260]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005778:	4b40      	ldr	r3, [pc, #256]	; (800587c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2232      	movs	r2, #50	; 0x32
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	0c9b      	lsrs	r3, r3, #18
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800578e:	e002      	b.n	8005796 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3b01      	subs	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005796:	4b38      	ldr	r3, [pc, #224]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a2:	d102      	bne.n	80057aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f2      	bne.n	8005790 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057aa:	4b33      	ldr	r3, [pc, #204]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d158      	bne.n	800586a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e057      	b.n	800586c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057bc:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c2:	4a2d      	ldr	r2, [pc, #180]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057cc:	e04d      	b.n	800586a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d4:	d141      	bne.n	800585a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057d6:	4b28      	ldr	r3, [pc, #160]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d131      	bne.n	8005848 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057e4:	4b24      	ldr	r3, [pc, #144]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ea:	4a23      	ldr	r2, [pc, #140]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057f4:	4b20      	ldr	r3, [pc, #128]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057fc:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2232      	movs	r2, #50	; 0x32
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	0c9b      	lsrs	r3, r3, #18
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800581a:	e002      	b.n	8005822 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b01      	subs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d102      	bne.n	8005836 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f2      	bne.n	800581c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005836:	4b10      	ldr	r3, [pc, #64]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	d112      	bne.n	800586a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e011      	b.n	800586c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584e:	4a0a      	ldr	r2, [pc, #40]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005858:	e007      	b.n	800586a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800585a:	4b07      	ldr	r3, [pc, #28]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005862:	4a05      	ldr	r2, [pc, #20]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005868:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	40007000 	.word	0x40007000
 800587c:	20000000 	.word	0x20000000
 8005880:	431bde83 	.word	0x431bde83

08005884 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4a04      	ldr	r2, [pc, #16]	; (80058a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800588e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005892:	6093      	str	r3, [r2, #8]
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40007000 	.word	0x40007000

080058a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e2fe      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d075      	beq.n	80059ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c2:	4b97      	ldr	r3, [pc, #604]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058cc:	4b94      	ldr	r3, [pc, #592]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b0c      	cmp	r3, #12
 80058da:	d102      	bne.n	80058e2 <HAL_RCC_OscConfig+0x3e>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d002      	beq.n	80058e8 <HAL_RCC_OscConfig+0x44>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d10b      	bne.n	8005900 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e8:	4b8d      	ldr	r3, [pc, #564]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d05b      	beq.n	80059ac <HAL_RCC_OscConfig+0x108>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d157      	bne.n	80059ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e2d9      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005908:	d106      	bne.n	8005918 <HAL_RCC_OscConfig+0x74>
 800590a:	4b85      	ldr	r3, [pc, #532]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a84      	ldr	r2, [pc, #528]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	e01d      	b.n	8005954 <HAL_RCC_OscConfig+0xb0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005920:	d10c      	bne.n	800593c <HAL_RCC_OscConfig+0x98>
 8005922:	4b7f      	ldr	r3, [pc, #508]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a7e      	ldr	r2, [pc, #504]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	4b7c      	ldr	r3, [pc, #496]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a7b      	ldr	r2, [pc, #492]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e00b      	b.n	8005954 <HAL_RCC_OscConfig+0xb0>
 800593c:	4b78      	ldr	r3, [pc, #480]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a77      	ldr	r2, [pc, #476]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4b75      	ldr	r3, [pc, #468]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a74      	ldr	r2, [pc, #464]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 800594e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d013      	beq.n	8005984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fd fc78 	bl	8003250 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005964:	f7fd fc74 	bl	8003250 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	; 0x64
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e29e      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005976:	4b6a      	ldr	r3, [pc, #424]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0xc0>
 8005982:	e014      	b.n	80059ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fd fc64 	bl	8003250 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800598c:	f7fd fc60 	bl	8003250 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	; 0x64
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e28a      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800599e:	4b60      	ldr	r3, [pc, #384]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0xe8>
 80059aa:	e000      	b.n	80059ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d075      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ba:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059c4:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	d102      	bne.n	80059da <HAL_RCC_OscConfig+0x136>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d002      	beq.n	80059e0 <HAL_RCC_OscConfig+0x13c>
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d11f      	bne.n	8005a20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e0:	4b4f      	ldr	r3, [pc, #316]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_RCC_OscConfig+0x154>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e25d      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f8:	4b49      	ldr	r3, [pc, #292]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	061b      	lsls	r3, r3, #24
 8005a06:	4946      	ldr	r1, [pc, #280]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a0c:	4b45      	ldr	r3, [pc, #276]	; (8005b24 <HAL_RCC_OscConfig+0x280>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fd f9cd 	bl	8002db0 <HAL_InitTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d043      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e249      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d023      	beq.n	8005a70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a28:	4b3d      	ldr	r3, [pc, #244]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3c      	ldr	r2, [pc, #240]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7fd fc0c 	bl	8003250 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3c:	f7fd fc08 	bl	8003250 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e232      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a4e:	4b34      	ldr	r3, [pc, #208]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	061b      	lsls	r3, r3, #24
 8005a68:	492d      	ldr	r1, [pc, #180]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	604b      	str	r3, [r1, #4]
 8005a6e:	e01a      	b.n	8005aa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a70:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2a      	ldr	r2, [pc, #168]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fd fbe8 	bl	8003250 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a84:	f7fd fbe4 	bl	8003250 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e20e      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a96:	4b22      	ldr	r3, [pc, #136]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x1e0>
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d041      	beq.n	8005b36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01c      	beq.n	8005af4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aba:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac0:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005ac2:	f043 0301 	orr.w	r3, r3, #1
 8005ac6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aca:	f7fd fbc1 	bl	8003250 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ad2:	f7fd fbbd 	bl	8003250 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e1e7      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0ef      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x22e>
 8005af2:	e020      	b.n	8005b36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afa:	4a09      	ldr	r2, [pc, #36]	; (8005b20 <HAL_RCC_OscConfig+0x27c>)
 8005afc:	f023 0301 	bic.w	r3, r3, #1
 8005b00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fd fba4 	bl	8003250 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b0a:	e00d      	b.n	8005b28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0c:	f7fd fba0 	bl	8003250 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d906      	bls.n	8005b28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e1ca      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000
 8005b24:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b28:	4b8c      	ldr	r3, [pc, #560]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1ea      	bne.n	8005b0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80a6 	beq.w	8005c90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b48:	4b84      	ldr	r3, [pc, #528]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_OscConfig+0x2b4>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <HAL_RCC_OscConfig+0x2b6>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b5e:	4b7f      	ldr	r3, [pc, #508]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	4a7e      	ldr	r2, [pc, #504]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b68:	6593      	str	r3, [r2, #88]	; 0x58
 8005b6a:	4b7c      	ldr	r3, [pc, #496]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b76:	2301      	movs	r3, #1
 8005b78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b7a:	4b79      	ldr	r3, [pc, #484]	; (8005d60 <HAL_RCC_OscConfig+0x4bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d118      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b86:	4b76      	ldr	r3, [pc, #472]	; (8005d60 <HAL_RCC_OscConfig+0x4bc>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a75      	ldr	r2, [pc, #468]	; (8005d60 <HAL_RCC_OscConfig+0x4bc>)
 8005b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b92:	f7fd fb5d 	bl	8003250 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b9a:	f7fd fb59 	bl	8003250 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e183      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bac:	4b6c      	ldr	r3, [pc, #432]	; (8005d60 <HAL_RCC_OscConfig+0x4bc>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d108      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x32e>
 8005bc0:	4b66      	ldr	r3, [pc, #408]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	4a65      	ldr	r2, [pc, #404]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bd0:	e024      	b.n	8005c1c <HAL_RCC_OscConfig+0x378>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	d110      	bne.n	8005bfc <HAL_RCC_OscConfig+0x358>
 8005bda:	4b60      	ldr	r3, [pc, #384]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	4a5e      	ldr	r2, [pc, #376]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005be2:	f043 0304 	orr.w	r3, r3, #4
 8005be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bea:	4b5c      	ldr	r3, [pc, #368]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf0:	4a5a      	ldr	r2, [pc, #360]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bfa:	e00f      	b.n	8005c1c <HAL_RCC_OscConfig+0x378>
 8005bfc:	4b57      	ldr	r3, [pc, #348]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	4a56      	ldr	r2, [pc, #344]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c0c:	4b53      	ldr	r3, [pc, #332]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	4a52      	ldr	r2, [pc, #328]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005c14:	f023 0304 	bic.w	r3, r3, #4
 8005c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fd fb14 	bl	8003250 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2a:	e00a      	b.n	8005c42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fd fb10 	bl	8003250 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e138      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c42:	4b46      	ldr	r3, [pc, #280]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ed      	beq.n	8005c2c <HAL_RCC_OscConfig+0x388>
 8005c50:	e015      	b.n	8005c7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fd fafd 	bl	8003250 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c58:	e00a      	b.n	8005c70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5a:	f7fd faf9 	bl	8003250 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e121      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c70:	4b3a      	ldr	r3, [pc, #232]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1ed      	bne.n	8005c5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d105      	bne.n	8005c90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c84:	4b35      	ldr	r3, [pc, #212]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c88:	4a34      	ldr	r2, [pc, #208]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d03c      	beq.n	8005d16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01c      	beq.n	8005cde <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ca4:	4b2d      	ldr	r3, [pc, #180]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005caa:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fd facc 	bl	8003250 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cbc:	f7fd fac8 	bl	8003250 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e0f2      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cce:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ef      	beq.n	8005cbc <HAL_RCC_OscConfig+0x418>
 8005cdc:	e01b      	b.n	8005d16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cde:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ce4:	4a1d      	ldr	r2, [pc, #116]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cee:	f7fd faaf 	bl	8003250 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cf6:	f7fd faab 	bl	8003250 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e0d5      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ef      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 80c9 	beq.w	8005eb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d20:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 030c 	and.w	r3, r3, #12
 8005d28:	2b0c      	cmp	r3, #12
 8005d2a:	f000 8083 	beq.w	8005e34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d15e      	bne.n	8005df4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <HAL_RCC_OscConfig+0x4b8>)
 8005d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fd fa85 	bl	8003250 <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d48:	e00c      	b.n	8005d64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4a:	f7fd fa81 	bl	8003250 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d905      	bls.n	8005d64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0ab      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d64:	4b55      	ldr	r3, [pc, #340]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ec      	bne.n	8005d4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d70:	4b52      	ldr	r3, [pc, #328]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	4b52      	ldr	r3, [pc, #328]	; (8005ec0 <HAL_RCC_OscConfig+0x61c>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6a11      	ldr	r1, [r2, #32]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d80:	3a01      	subs	r2, #1
 8005d82:	0112      	lsls	r2, r2, #4
 8005d84:	4311      	orrs	r1, r2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d8a:	0212      	lsls	r2, r2, #8
 8005d8c:	4311      	orrs	r1, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d92:	0852      	lsrs	r2, r2, #1
 8005d94:	3a01      	subs	r2, #1
 8005d96:	0552      	lsls	r2, r2, #21
 8005d98:	4311      	orrs	r1, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d9e:	0852      	lsrs	r2, r2, #1
 8005da0:	3a01      	subs	r2, #1
 8005da2:	0652      	lsls	r2, r2, #25
 8005da4:	4311      	orrs	r1, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005daa:	06d2      	lsls	r2, r2, #27
 8005dac:	430a      	orrs	r2, r1
 8005dae:	4943      	ldr	r1, [pc, #268]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005db4:	4b41      	ldr	r3, [pc, #260]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a40      	ldr	r2, [pc, #256]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dc0:	4b3e      	ldr	r3, [pc, #248]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4a3d      	ldr	r2, [pc, #244]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fd fa40 	bl	8003250 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd4:	f7fd fa3c 	bl	8003250 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e066      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de6:	4b35      	ldr	r3, [pc, #212]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f0      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x530>
 8005df2:	e05e      	b.n	8005eb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df4:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a30      	ldr	r2, [pc, #192]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fd fa26 	bl	8003250 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fd fa22 	bl	8003250 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e04c      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e1a:	4b28      	ldr	r3, [pc, #160]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e26:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	4924      	ldr	r1, [pc, #144]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e2c:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <HAL_RCC_OscConfig+0x620>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	60cb      	str	r3, [r1, #12]
 8005e32:	e03e      	b.n	8005eb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e039      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e40:	4b1e      	ldr	r3, [pc, #120]	; (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 0203 	and.w	r2, r3, #3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d12c      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d123      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d11b      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d113      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	3b01      	subs	r3, #1
 8005e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d109      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d001      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	019f800c 	.word	0x019f800c
 8005ec4:	feeefffc 	.word	0xfeeefffc

08005ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e11e      	b.n	800611e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee0:	4b91      	ldr	r3, [pc, #580]	; (8006128 <HAL_RCC_ClockConfig+0x260>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d910      	bls.n	8005f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eee:	4b8e      	ldr	r3, [pc, #568]	; (8006128 <HAL_RCC_ClockConfig+0x260>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f023 020f 	bic.w	r2, r3, #15
 8005ef6:	498c      	ldr	r1, [pc, #560]	; (8006128 <HAL_RCC_ClockConfig+0x260>)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b8a      	ldr	r3, [pc, #552]	; (8006128 <HAL_RCC_ClockConfig+0x260>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d001      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e106      	b.n	800611e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d073      	beq.n	8006004 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d129      	bne.n	8005f78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f24:	4b81      	ldr	r3, [pc, #516]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0f4      	b.n	800611e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f34:	f000 f9d0 	bl	80062d8 <RCC_GetSysClockFreqFromPLLSource>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4a7c      	ldr	r2, [pc, #496]	; (8006130 <HAL_RCC_ClockConfig+0x268>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d93f      	bls.n	8005fc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f42:	4b7a      	ldr	r3, [pc, #488]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d033      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d12f      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f62:	4b72      	ldr	r3, [pc, #456]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f6a:	4a70      	ldr	r2, [pc, #448]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e024      	b.n	8005fc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f80:	4b6a      	ldr	r3, [pc, #424]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0c6      	b.n	800611e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f90:	4b66      	ldr	r3, [pc, #408]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0be      	b.n	800611e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005fa0:	f000 f8ce 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 8005fa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4a61      	ldr	r2, [pc, #388]	; (8006130 <HAL_RCC_ClockConfig+0x268>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d909      	bls.n	8005fc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fae:	4b5f      	ldr	r3, [pc, #380]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb6:	4a5d      	ldr	r2, [pc, #372]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fc2:	4b5a      	ldr	r3, [pc, #360]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f023 0203 	bic.w	r2, r3, #3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4957      	ldr	r1, [pc, #348]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd4:	f7fd f93c 	bl	8003250 <HAL_GetTick>
 8005fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fdc:	f7fd f938 	bl	8003250 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e095      	b.n	800611e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff2:	4b4e      	ldr	r3, [pc, #312]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 020c 	and.w	r2, r3, #12
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	429a      	cmp	r2, r3
 8006002:	d1eb      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d023      	beq.n	8006058 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800601c:	4b43      	ldr	r3, [pc, #268]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4a42      	ldr	r2, [pc, #264]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8006022:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006026:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006034:	4b3d      	ldr	r3, [pc, #244]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800603c:	4a3b      	ldr	r2, [pc, #236]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 800603e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006042:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006044:	4b39      	ldr	r3, [pc, #228]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	4936      	ldr	r1, [pc, #216]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8006052:	4313      	orrs	r3, r2
 8006054:	608b      	str	r3, [r1, #8]
 8006056:	e008      	b.n	800606a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2b80      	cmp	r3, #128	; 0x80
 800605c:	d105      	bne.n	800606a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800605e:	4b33      	ldr	r3, [pc, #204]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	4a32      	ldr	r2, [pc, #200]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 8006064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006068:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <HAL_RCC_ClockConfig+0x260>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d21d      	bcs.n	80060b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006078:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <HAL_RCC_ClockConfig+0x260>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f023 020f 	bic.w	r2, r3, #15
 8006080:	4929      	ldr	r1, [pc, #164]	; (8006128 <HAL_RCC_ClockConfig+0x260>)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	4313      	orrs	r3, r2
 8006086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006088:	f7fd f8e2 	bl	8003250 <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006090:	f7fd f8de 	bl	8003250 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	; 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e03b      	b.n	800611e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a6:	4b20      	ldr	r3, [pc, #128]	; (8006128 <HAL_RCC_ClockConfig+0x260>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d1ed      	bne.n	8006090 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4917      	ldr	r1, [pc, #92]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	490f      	ldr	r1, [pc, #60]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060f2:	f000 f825 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 80060f6:	4602      	mov	r2, r0
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_RCC_ClockConfig+0x264>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	490c      	ldr	r1, [pc, #48]	; (8006134 <HAL_RCC_ClockConfig+0x26c>)
 8006104:	5ccb      	ldrb	r3, [r1, r3]
 8006106:	f003 031f 	and.w	r3, r3, #31
 800610a:	fa22 f303 	lsr.w	r3, r2, r3
 800610e:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <HAL_RCC_ClockConfig+0x270>)
 8006110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <HAL_RCC_ClockConfig+0x274>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fc fe4a 	bl	8002db0 <HAL_InitTick>
 800611c:	4603      	mov	r3, r0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40022000 	.word	0x40022000
 800612c:	40021000 	.word	0x40021000
 8006130:	04c4b400 	.word	0x04c4b400
 8006134:	0800b8a8 	.word	0x0800b8a8
 8006138:	20000000 	.word	0x20000000
 800613c:	20000004 	.word	0x20000004

08006140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006146:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 030c 	and.w	r3, r3, #12
 800614e:	2b04      	cmp	r3, #4
 8006150:	d102      	bne.n	8006158 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006152:	4b2a      	ldr	r3, [pc, #168]	; (80061fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	e047      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006158:	4b27      	ldr	r3, [pc, #156]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 030c 	and.w	r3, r3, #12
 8006160:	2b08      	cmp	r3, #8
 8006162:	d102      	bne.n	800616a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006164:	4b26      	ldr	r3, [pc, #152]	; (8006200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	e03e      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800616a:	4b23      	ldr	r3, [pc, #140]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 030c 	and.w	r3, r3, #12
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d136      	bne.n	80061e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006176:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006180:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	3301      	adds	r3, #1
 800618c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b03      	cmp	r3, #3
 8006192:	d10c      	bne.n	80061ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006194:	4a1a      	ldr	r2, [pc, #104]	; (8006200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	fbb2 f3f3 	udiv	r3, r2, r3
 800619c:	4a16      	ldr	r2, [pc, #88]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800619e:	68d2      	ldr	r2, [r2, #12]
 80061a0:	0a12      	lsrs	r2, r2, #8
 80061a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	617b      	str	r3, [r7, #20]
      break;
 80061ac:	e00c      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ae:	4a13      	ldr	r2, [pc, #76]	; (80061fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061b8:	68d2      	ldr	r2, [r2, #12]
 80061ba:	0a12      	lsrs	r2, r2, #8
 80061bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061c0:	fb02 f303 	mul.w	r3, r2, r3
 80061c4:	617b      	str	r3, [r7, #20]
      break;
 80061c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	0e5b      	lsrs	r3, r3, #25
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	3301      	adds	r3, #1
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e001      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061e8:	693b      	ldr	r3, [r7, #16]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40021000 	.word	0x40021000
 80061fc:	00f42400 	.word	0x00f42400
 8006200:	016e3600 	.word	0x016e3600

08006204 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006208:	4b03      	ldr	r3, [pc, #12]	; (8006218 <HAL_RCC_GetHCLKFreq+0x14>)
 800620a:	681b      	ldr	r3, [r3, #0]
}
 800620c:	4618      	mov	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000000 	.word	0x20000000

0800621c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006220:	f7ff fff0 	bl	8006204 <HAL_RCC_GetHCLKFreq>
 8006224:	4602      	mov	r2, r0
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	4904      	ldr	r1, [pc, #16]	; (8006244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006232:	5ccb      	ldrb	r3, [r1, r3]
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021000 	.word	0x40021000
 8006244:	0800b8b8 	.word	0x0800b8b8

08006248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800624c:	f7ff ffda 	bl	8006204 <HAL_RCC_GetHCLKFreq>
 8006250:	4602      	mov	r2, r0
 8006252:	4b06      	ldr	r3, [pc, #24]	; (800626c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	0adb      	lsrs	r3, r3, #11
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	4904      	ldr	r1, [pc, #16]	; (8006270 <HAL_RCC_GetPCLK2Freq+0x28>)
 800625e:	5ccb      	ldrb	r3, [r1, r3]
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006268:	4618      	mov	r0, r3
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40021000 	.word	0x40021000
 8006270:	0800b8b8 	.word	0x0800b8b8

08006274 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	220f      	movs	r2, #15
 8006282:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006284:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0203 	and.w	r2, r3, #3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <HAL_RCC_GetClockConfig+0x5c>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <HAL_RCC_GetClockConfig+0x5c>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	08db      	lsrs	r3, r3, #3
 80062ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <HAL_RCC_GetClockConfig+0x60>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 020f 	and.w	r2, r3, #15
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	601a      	str	r2, [r3, #0]
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40022000 	.word	0x40022000

080062d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062de:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d10c      	bne.n	8006316 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062fc:	4a17      	ldr	r2, [pc, #92]	; (800635c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	4a14      	ldr	r2, [pc, #80]	; (8006358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006306:	68d2      	ldr	r2, [r2, #12]
 8006308:	0a12      	lsrs	r2, r2, #8
 800630a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	617b      	str	r3, [r7, #20]
    break;
 8006314:	e00c      	b.n	8006330 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006316:	4a12      	ldr	r2, [pc, #72]	; (8006360 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	fbb2 f3f3 	udiv	r3, r2, r3
 800631e:	4a0e      	ldr	r2, [pc, #56]	; (8006358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006320:	68d2      	ldr	r2, [r2, #12]
 8006322:	0a12      	lsrs	r2, r2, #8
 8006324:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006328:	fb02 f303 	mul.w	r3, r2, r3
 800632c:	617b      	str	r3, [r7, #20]
    break;
 800632e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006330:	4b09      	ldr	r3, [pc, #36]	; (8006358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	0e5b      	lsrs	r3, r3, #25
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	3301      	adds	r3, #1
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800634a:	687b      	ldr	r3, [r7, #4]
}
 800634c:	4618      	mov	r0, r3
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40021000 	.word	0x40021000
 800635c:	016e3600 	.word	0x016e3600
 8006360:	00f42400 	.word	0x00f42400

08006364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800636c:	2300      	movs	r3, #0
 800636e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006370:	2300      	movs	r3, #0
 8006372:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8098 	beq.w	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006386:	4b43      	ldr	r3, [pc, #268]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10d      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006392:	4b40      	ldr	r3, [pc, #256]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006396:	4a3f      	ldr	r2, [pc, #252]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639c:	6593      	str	r3, [r2, #88]	; 0x58
 800639e:	4b3d      	ldr	r3, [pc, #244]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063aa:	2301      	movs	r3, #1
 80063ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063ae:	4b3a      	ldr	r3, [pc, #232]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a39      	ldr	r2, [pc, #228]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063ba:	f7fc ff49 	bl	8003250 <HAL_GetTick>
 80063be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c0:	e009      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c2:	f7fc ff45 	bl	8003250 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d902      	bls.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	74fb      	strb	r3, [r7, #19]
        break;
 80063d4:	e005      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063d6:	4b30      	ldr	r3, [pc, #192]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0ef      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063e2:	7cfb      	ldrb	r3, [r7, #19]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d159      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063e8:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01e      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	429a      	cmp	r2, r3
 8006402:	d019      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006404:	4b23      	ldr	r3, [pc, #140]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006410:	4b20      	ldr	r3, [pc, #128]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006416:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006420:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006426:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006430:	4a18      	ldr	r2, [pc, #96]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d016      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fc ff05 	bl	8003250 <HAL_GetTick>
 8006446:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006448:	e00b      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800644a:	f7fc ff01 	bl	8003250 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	f241 3288 	movw	r2, #5000	; 0x1388
 8006458:	4293      	cmp	r3, r2
 800645a:	d902      	bls.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	74fb      	strb	r3, [r7, #19]
            break;
 8006460:	e006      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0ec      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006470:	7cfb      	ldrb	r3, [r7, #19]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006476:	4b07      	ldr	r3, [pc, #28]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006484:	4903      	ldr	r1, [pc, #12]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800648c:	e008      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800648e:	7cfb      	ldrb	r3, [r7, #19]
 8006490:	74bb      	strb	r3, [r7, #18]
 8006492:	e005      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006494:	40021000 	.word	0x40021000
 8006498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064a0:	7c7b      	ldrb	r3, [r7, #17]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064a6:	4ba7      	ldr	r3, [pc, #668]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064aa:	4aa6      	ldr	r2, [pc, #664]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064be:	4ba1      	ldr	r3, [pc, #644]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	f023 0203 	bic.w	r2, r3, #3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	499d      	ldr	r1, [pc, #628]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064e0:	4b98      	ldr	r3, [pc, #608]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e6:	f023 020c 	bic.w	r2, r3, #12
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4995      	ldr	r1, [pc, #596]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006502:	4b90      	ldr	r3, [pc, #576]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	498c      	ldr	r1, [pc, #560]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006524:	4b87      	ldr	r3, [pc, #540]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	4984      	ldr	r1, [pc, #528]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006546:	4b7f      	ldr	r3, [pc, #508]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	497b      	ldr	r1, [pc, #492]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006568:	4b76      	ldr	r3, [pc, #472]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	4973      	ldr	r1, [pc, #460]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800658a:	4b6e      	ldr	r3, [pc, #440]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	496a      	ldr	r1, [pc, #424]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065ac:	4b65      	ldr	r3, [pc, #404]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	4962      	ldr	r1, [pc, #392]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ce:	4b5d      	ldr	r3, [pc, #372]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	4959      	ldr	r1, [pc, #356]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f0:	4b54      	ldr	r3, [pc, #336]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	4951      	ldr	r1, [pc, #324]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660e:	2b00      	cmp	r3, #0
 8006610:	d015      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006612:	4b4c      	ldr	r3, [pc, #304]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	4948      	ldr	r1, [pc, #288]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006630:	d105      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006632:	4b44      	ldr	r3, [pc, #272]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a43      	ldr	r2, [pc, #268]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006646:	2b00      	cmp	r3, #0
 8006648:	d015      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800664a:	4b3e      	ldr	r3, [pc, #248]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	493a      	ldr	r1, [pc, #232]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006668:	d105      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800666a:	4b36      	ldr	r3, [pc, #216]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	4a35      	ldr	r2, [pc, #212]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006674:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d015      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006682:	4b30      	ldr	r3, [pc, #192]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006688:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	492c      	ldr	r1, [pc, #176]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066a0:	d105      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a2:	4b28      	ldr	r3, [pc, #160]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	4a27      	ldr	r2, [pc, #156]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ac:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d015      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066ba:	4b22      	ldr	r3, [pc, #136]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	491e      	ldr	r1, [pc, #120]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d8:	d105      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066da:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	4a19      	ldr	r2, [pc, #100]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066e4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d015      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066f2:	4b14      	ldr	r3, [pc, #80]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006700:	4910      	ldr	r1, [pc, #64]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006710:	d105      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	4a0b      	ldr	r2, [pc, #44]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800671c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d018      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800672a:	4b06      	ldr	r3, [pc, #24]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	4902      	ldr	r1, [pc, #8]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	e001      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006744:	40021000 	.word	0x40021000
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800674e:	d105      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006750:	4b21      	ldr	r3, [pc, #132]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d015      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006768:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	4918      	ldr	r1, [pc, #96]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006786:	d105      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	4a12      	ldr	r2, [pc, #72]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800678e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006792:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d015      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067a0:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ae:	490a      	ldr	r1, [pc, #40]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067be:	d105      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40021000 	.word	0x40021000

080067dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e049      	b.n	8006882 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f841 	bl	800688a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3304      	adds	r3, #4
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f000 fa28 	bl	8006c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d001      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e04f      	b.n	8006958 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a23      	ldr	r2, [pc, #140]	; (8006964 <HAL_TIM_Base_Start_IT+0xc4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d01d      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0x76>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e2:	d018      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0x76>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <HAL_TIM_Base_Start_IT+0xc8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d013      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0x76>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <HAL_TIM_Base_Start_IT+0xcc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00e      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0x76>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1c      	ldr	r2, [pc, #112]	; (8006970 <HAL_TIM_Base_Start_IT+0xd0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d009      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0x76>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <HAL_TIM_Base_Start_IT+0xd4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0x76>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a19      	ldr	r2, [pc, #100]	; (8006978 <HAL_TIM_Base_Start_IT+0xd8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d115      	bne.n	8006942 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	4b17      	ldr	r3, [pc, #92]	; (800697c <HAL_TIM_Base_Start_IT+0xdc>)
 800691e:	4013      	ands	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b06      	cmp	r3, #6
 8006926:	d015      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0xb4>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692e:	d011      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006940:	e008      	b.n	8006954 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0201 	orr.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	e000      	b.n	8006956 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40013400 	.word	0x40013400
 8006974:	40014000 	.word	0x40014000
 8006978:	40015000 	.word	0x40015000
 800697c:	00010007 	.word	0x00010007

08006980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d020      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01b      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0202 	mvn.w	r2, #2
 80069b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f931 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f923 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f934 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d020      	beq.n	8006a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01b      	beq.n	8006a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0204 	mvn.w	r2, #4
 8006a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f90b 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 8006a1c:	e005      	b.n	8006a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f8fd 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f90e 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d020      	beq.n	8006a7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01b      	beq.n	8006a7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0208 	mvn.w	r2, #8
 8006a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2204      	movs	r2, #4
 8006a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f8e5 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8d7 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f8e8 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d020      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0210 	mvn.w	r2, #16
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8bf 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8b1 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f8c2 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00c      	beq.n	8006aec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0201 	mvn.w	r2, #1
 8006ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fa fcb6 	bl	8001458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d104      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f95f 	bl	8006dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d007      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f957 	bl	8006dec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d007      	beq.n	8006b62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f87c 	bl	8006c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00c      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f06f 0220 	mvn.w	r2, #32
 8006b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f91f 	bl	8006dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00c      	beq.n	8006baa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f92b 	bl	8006e00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00c      	beq.n	8006bce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f923 	bl	8006e14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00c      	beq.n	8006bf2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f91b 	bl	8006e28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00c      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f913 	bl	8006e3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
	...

08006c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a48      	ldr	r2, [pc, #288]	; (8006da4 <TIM_Base_SetConfig+0x134>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a45      	ldr	r2, [pc, #276]	; (8006da8 <TIM_Base_SetConfig+0x138>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a44      	ldr	r2, [pc, #272]	; (8006dac <TIM_Base_SetConfig+0x13c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a43      	ldr	r2, [pc, #268]	; (8006db0 <TIM_Base_SetConfig+0x140>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a42      	ldr	r2, [pc, #264]	; (8006db4 <TIM_Base_SetConfig+0x144>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d108      	bne.n	8006cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a37      	ldr	r2, [pc, #220]	; (8006da4 <TIM_Base_SetConfig+0x134>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01f      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd0:	d01b      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	; (8006da8 <TIM_Base_SetConfig+0x138>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d017      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a33      	ldr	r2, [pc, #204]	; (8006dac <TIM_Base_SetConfig+0x13c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a32      	ldr	r2, [pc, #200]	; (8006db0 <TIM_Base_SetConfig+0x140>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00f      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a32      	ldr	r2, [pc, #200]	; (8006db8 <TIM_Base_SetConfig+0x148>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a31      	ldr	r2, [pc, #196]	; (8006dbc <TIM_Base_SetConfig+0x14c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a30      	ldr	r2, [pc, #192]	; (8006dc0 <TIM_Base_SetConfig+0x150>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2b      	ldr	r2, [pc, #172]	; (8006db4 <TIM_Base_SetConfig+0x144>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d108      	bne.n	8006d1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <TIM_Base_SetConfig+0x134>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <TIM_Base_SetConfig+0x100>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <TIM_Base_SetConfig+0x140>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00f      	beq.n	8006d70 <TIM_Base_SetConfig+0x100>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <TIM_Base_SetConfig+0x148>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00b      	beq.n	8006d70 <TIM_Base_SetConfig+0x100>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <TIM_Base_SetConfig+0x14c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d007      	beq.n	8006d70 <TIM_Base_SetConfig+0x100>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <TIM_Base_SetConfig+0x150>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_Base_SetConfig+0x100>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a12      	ldr	r2, [pc, #72]	; (8006db4 <TIM_Base_SetConfig+0x144>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d103      	bne.n	8006d78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d105      	bne.n	8006d96 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f023 0201 	bic.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	611a      	str	r2, [r3, #16]
  }
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40013400 	.word	0x40013400
 8006db4:	40015000 	.word	0x40015000
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800

08006dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e042      	b.n	8006ee8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7fc f8e1 	bl	800303c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2224      	movs	r2, #36	; 0x24
 8006e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0201 	bic.w	r2, r2, #1
 8006e90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fbb2 	bl	8007604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f8b3 	bl	800700c <UART_SetConfig>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e01b      	b.n	8006ee8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fc31 	bl	8007748 <UART_CheckIdleState>
 8006ee6:	4603      	mov	r3, r0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	; 0x28
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d17b      	bne.n	8007002 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_UART_Transmit+0x26>
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e074      	b.n	8007004 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2221      	movs	r2, #33	; 0x21
 8006f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f2a:	f7fc f991 	bl	8003250 <HAL_GetTick>
 8006f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	88fa      	ldrh	r2, [r7, #6]
 8006f34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f48:	d108      	bne.n	8006f5c <HAL_UART_Transmit+0x6c>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	e003      	b.n	8006f64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f64:	e030      	b.n	8006fc8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2180      	movs	r1, #128	; 0x80
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fc93 	bl	800789c <UART_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e03d      	b.n	8007004 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e007      	b.n	8006fb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1c8      	bne.n	8006f66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2140      	movs	r1, #64	; 0x40
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fc5c 	bl	800789c <UART_WaitOnFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e006      	b.n	8007004 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e000      	b.n	8007004 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	3720      	adds	r7, #32
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800700c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007010:	b08c      	sub	sp, #48	; 0x30
 8007012:	af00      	add	r7, sp, #0
 8007014:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	431a      	orrs	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	431a      	orrs	r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	4313      	orrs	r3, r2
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	4baa      	ldr	r3, [pc, #680]	; (80072e4 <UART_SetConfig+0x2d8>)
 800703c:	4013      	ands	r3, r2
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007044:	430b      	orrs	r3, r1
 8007046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a9f      	ldr	r2, [pc, #636]	; (80072e8 <UART_SetConfig+0x2dc>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d004      	beq.n	8007078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007074:	4313      	orrs	r3, r2
 8007076:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007082:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800708c:	430b      	orrs	r3, r1
 800708e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	f023 010f 	bic.w	r1, r3, #15
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a90      	ldr	r2, [pc, #576]	; (80072ec <UART_SetConfig+0x2e0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d125      	bne.n	80070fc <UART_SetConfig+0xf0>
 80070b0:	4b8f      	ldr	r3, [pc, #572]	; (80072f0 <UART_SetConfig+0x2e4>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d81a      	bhi.n	80070f4 <UART_SetConfig+0xe8>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <UART_SetConfig+0xb8>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070e5 	.word	0x080070e5
 80070cc:	080070dd 	.word	0x080070dd
 80070d0:	080070ed 	.word	0x080070ed
 80070d4:	2301      	movs	r3, #1
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070da:	e116      	b.n	800730a <UART_SetConfig+0x2fe>
 80070dc:	2302      	movs	r3, #2
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e2:	e112      	b.n	800730a <UART_SetConfig+0x2fe>
 80070e4:	2304      	movs	r3, #4
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ea:	e10e      	b.n	800730a <UART_SetConfig+0x2fe>
 80070ec:	2308      	movs	r3, #8
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f2:	e10a      	b.n	800730a <UART_SetConfig+0x2fe>
 80070f4:	2310      	movs	r3, #16
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e106      	b.n	800730a <UART_SetConfig+0x2fe>
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a7c      	ldr	r2, [pc, #496]	; (80072f4 <UART_SetConfig+0x2e8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d138      	bne.n	8007178 <UART_SetConfig+0x16c>
 8007106:	4b7a      	ldr	r3, [pc, #488]	; (80072f0 <UART_SetConfig+0x2e4>)
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710c:	f003 030c 	and.w	r3, r3, #12
 8007110:	2b0c      	cmp	r3, #12
 8007112:	d82d      	bhi.n	8007170 <UART_SetConfig+0x164>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x110>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007151 	.word	0x08007151
 8007120:	08007171 	.word	0x08007171
 8007124:	08007171 	.word	0x08007171
 8007128:	08007171 	.word	0x08007171
 800712c:	08007161 	.word	0x08007161
 8007130:	08007171 	.word	0x08007171
 8007134:	08007171 	.word	0x08007171
 8007138:	08007171 	.word	0x08007171
 800713c:	08007159 	.word	0x08007159
 8007140:	08007171 	.word	0x08007171
 8007144:	08007171 	.word	0x08007171
 8007148:	08007171 	.word	0x08007171
 800714c:	08007169 	.word	0x08007169
 8007150:	2300      	movs	r3, #0
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007156:	e0d8      	b.n	800730a <UART_SetConfig+0x2fe>
 8007158:	2302      	movs	r3, #2
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715e:	e0d4      	b.n	800730a <UART_SetConfig+0x2fe>
 8007160:	2304      	movs	r3, #4
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007166:	e0d0      	b.n	800730a <UART_SetConfig+0x2fe>
 8007168:	2308      	movs	r3, #8
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716e:	e0cc      	b.n	800730a <UART_SetConfig+0x2fe>
 8007170:	2310      	movs	r3, #16
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007176:	e0c8      	b.n	800730a <UART_SetConfig+0x2fe>
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a5e      	ldr	r2, [pc, #376]	; (80072f8 <UART_SetConfig+0x2ec>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d125      	bne.n	80071ce <UART_SetConfig+0x1c2>
 8007182:	4b5b      	ldr	r3, [pc, #364]	; (80072f0 <UART_SetConfig+0x2e4>)
 8007184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800718c:	2b30      	cmp	r3, #48	; 0x30
 800718e:	d016      	beq.n	80071be <UART_SetConfig+0x1b2>
 8007190:	2b30      	cmp	r3, #48	; 0x30
 8007192:	d818      	bhi.n	80071c6 <UART_SetConfig+0x1ba>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d00a      	beq.n	80071ae <UART_SetConfig+0x1a2>
 8007198:	2b20      	cmp	r3, #32
 800719a:	d814      	bhi.n	80071c6 <UART_SetConfig+0x1ba>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <UART_SetConfig+0x19a>
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	d008      	beq.n	80071b6 <UART_SetConfig+0x1aa>
 80071a4:	e00f      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80071a6:	2300      	movs	r3, #0
 80071a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ac:	e0ad      	b.n	800730a <UART_SetConfig+0x2fe>
 80071ae:	2302      	movs	r3, #2
 80071b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b4:	e0a9      	b.n	800730a <UART_SetConfig+0x2fe>
 80071b6:	2304      	movs	r3, #4
 80071b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071bc:	e0a5      	b.n	800730a <UART_SetConfig+0x2fe>
 80071be:	2308      	movs	r3, #8
 80071c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c4:	e0a1      	b.n	800730a <UART_SetConfig+0x2fe>
 80071c6:	2310      	movs	r3, #16
 80071c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071cc:	e09d      	b.n	800730a <UART_SetConfig+0x2fe>
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a4a      	ldr	r2, [pc, #296]	; (80072fc <UART_SetConfig+0x2f0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d125      	bne.n	8007224 <UART_SetConfig+0x218>
 80071d8:	4b45      	ldr	r3, [pc, #276]	; (80072f0 <UART_SetConfig+0x2e4>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071e2:	2bc0      	cmp	r3, #192	; 0xc0
 80071e4:	d016      	beq.n	8007214 <UART_SetConfig+0x208>
 80071e6:	2bc0      	cmp	r3, #192	; 0xc0
 80071e8:	d818      	bhi.n	800721c <UART_SetConfig+0x210>
 80071ea:	2b80      	cmp	r3, #128	; 0x80
 80071ec:	d00a      	beq.n	8007204 <UART_SetConfig+0x1f8>
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d814      	bhi.n	800721c <UART_SetConfig+0x210>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <UART_SetConfig+0x1f0>
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d008      	beq.n	800720c <UART_SetConfig+0x200>
 80071fa:	e00f      	b.n	800721c <UART_SetConfig+0x210>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007202:	e082      	b.n	800730a <UART_SetConfig+0x2fe>
 8007204:	2302      	movs	r3, #2
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720a:	e07e      	b.n	800730a <UART_SetConfig+0x2fe>
 800720c:	2304      	movs	r3, #4
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007212:	e07a      	b.n	800730a <UART_SetConfig+0x2fe>
 8007214:	2308      	movs	r3, #8
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721a:	e076      	b.n	800730a <UART_SetConfig+0x2fe>
 800721c:	2310      	movs	r3, #16
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007222:	e072      	b.n	800730a <UART_SetConfig+0x2fe>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a35      	ldr	r2, [pc, #212]	; (8007300 <UART_SetConfig+0x2f4>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d12a      	bne.n	8007284 <UART_SetConfig+0x278>
 800722e:	4b30      	ldr	r3, [pc, #192]	; (80072f0 <UART_SetConfig+0x2e4>)
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800723c:	d01a      	beq.n	8007274 <UART_SetConfig+0x268>
 800723e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007242:	d81b      	bhi.n	800727c <UART_SetConfig+0x270>
 8007244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007248:	d00c      	beq.n	8007264 <UART_SetConfig+0x258>
 800724a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800724e:	d815      	bhi.n	800727c <UART_SetConfig+0x270>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <UART_SetConfig+0x250>
 8007254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007258:	d008      	beq.n	800726c <UART_SetConfig+0x260>
 800725a:	e00f      	b.n	800727c <UART_SetConfig+0x270>
 800725c:	2300      	movs	r3, #0
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e052      	b.n	800730a <UART_SetConfig+0x2fe>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e04e      	b.n	800730a <UART_SetConfig+0x2fe>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007272:	e04a      	b.n	800730a <UART_SetConfig+0x2fe>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727a:	e046      	b.n	800730a <UART_SetConfig+0x2fe>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e042      	b.n	800730a <UART_SetConfig+0x2fe>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a17      	ldr	r2, [pc, #92]	; (80072e8 <UART_SetConfig+0x2dc>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d13a      	bne.n	8007304 <UART_SetConfig+0x2f8>
 800728e:	4b18      	ldr	r3, [pc, #96]	; (80072f0 <UART_SetConfig+0x2e4>)
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800729c:	d01a      	beq.n	80072d4 <UART_SetConfig+0x2c8>
 800729e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072a2:	d81b      	bhi.n	80072dc <UART_SetConfig+0x2d0>
 80072a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a8:	d00c      	beq.n	80072c4 <UART_SetConfig+0x2b8>
 80072aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ae:	d815      	bhi.n	80072dc <UART_SetConfig+0x2d0>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <UART_SetConfig+0x2b0>
 80072b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b8:	d008      	beq.n	80072cc <UART_SetConfig+0x2c0>
 80072ba:	e00f      	b.n	80072dc <UART_SetConfig+0x2d0>
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c2:	e022      	b.n	800730a <UART_SetConfig+0x2fe>
 80072c4:	2302      	movs	r3, #2
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ca:	e01e      	b.n	800730a <UART_SetConfig+0x2fe>
 80072cc:	2304      	movs	r3, #4
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d2:	e01a      	b.n	800730a <UART_SetConfig+0x2fe>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072da:	e016      	b.n	800730a <UART_SetConfig+0x2fe>
 80072dc:	2310      	movs	r3, #16
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e012      	b.n	800730a <UART_SetConfig+0x2fe>
 80072e4:	cfff69f3 	.word	0xcfff69f3
 80072e8:	40008000 	.word	0x40008000
 80072ec:	40013800 	.word	0x40013800
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40004400 	.word	0x40004400
 80072f8:	40004800 	.word	0x40004800
 80072fc:	40004c00 	.word	0x40004c00
 8007300:	40005000 	.word	0x40005000
 8007304:	2310      	movs	r3, #16
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4aae      	ldr	r2, [pc, #696]	; (80075c8 <UART_SetConfig+0x5bc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	f040 8097 	bne.w	8007444 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007316:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800731a:	2b08      	cmp	r3, #8
 800731c:	d823      	bhi.n	8007366 <UART_SetConfig+0x35a>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <UART_SetConfig+0x318>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007349 	.word	0x08007349
 8007328:	08007367 	.word	0x08007367
 800732c:	08007351 	.word	0x08007351
 8007330:	08007367 	.word	0x08007367
 8007334:	08007357 	.word	0x08007357
 8007338:	08007367 	.word	0x08007367
 800733c:	08007367 	.word	0x08007367
 8007340:	08007367 	.word	0x08007367
 8007344:	0800735f 	.word	0x0800735f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007348:	f7fe ff68 	bl	800621c <HAL_RCC_GetPCLK1Freq>
 800734c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800734e:	e010      	b.n	8007372 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007350:	4b9e      	ldr	r3, [pc, #632]	; (80075cc <UART_SetConfig+0x5c0>)
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007354:	e00d      	b.n	8007372 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007356:	f7fe fef3 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 800735a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800735c:	e009      	b.n	8007372 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007362:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007364:	e005      	b.n	8007372 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007370:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8130 	beq.w	80075da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	4a94      	ldr	r2, [pc, #592]	; (80075d0 <UART_SetConfig+0x5c4>)
 8007380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007384:	461a      	mov	r2, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	fbb3 f3f2 	udiv	r3, r3, r2
 800738c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	4413      	add	r3, r2
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	429a      	cmp	r2, r3
 800739c:	d305      	bcc.n	80073aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d903      	bls.n	80073b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073b0:	e113      	b.n	80075da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	2200      	movs	r2, #0
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	60fa      	str	r2, [r7, #12]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	4a84      	ldr	r2, [pc, #528]	; (80075d0 <UART_SetConfig+0x5c4>)
 80073c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2200      	movs	r2, #0
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073d4:	f7f9 fbc2 	bl	8000b5c <__aeabi_uldivmod>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4610      	mov	r0, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	f04f 0300 	mov.w	r3, #0
 80073e8:	020b      	lsls	r3, r1, #8
 80073ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073ee:	0202      	lsls	r2, r0, #8
 80073f0:	6979      	ldr	r1, [r7, #20]
 80073f2:	6849      	ldr	r1, [r1, #4]
 80073f4:	0849      	lsrs	r1, r1, #1
 80073f6:	2000      	movs	r0, #0
 80073f8:	460c      	mov	r4, r1
 80073fa:	4605      	mov	r5, r0
 80073fc:	eb12 0804 	adds.w	r8, r2, r4
 8007400:	eb43 0905 	adc.w	r9, r3, r5
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	469a      	mov	sl, r3
 800740c:	4693      	mov	fp, r2
 800740e:	4652      	mov	r2, sl
 8007410:	465b      	mov	r3, fp
 8007412:	4640      	mov	r0, r8
 8007414:	4649      	mov	r1, r9
 8007416:	f7f9 fba1 	bl	8000b5c <__aeabi_uldivmod>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4613      	mov	r3, r2
 8007420:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007428:	d308      	bcc.n	800743c <UART_SetConfig+0x430>
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007430:	d204      	bcs.n	800743c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6a3a      	ldr	r2, [r7, #32]
 8007438:	60da      	str	r2, [r3, #12]
 800743a:	e0ce      	b.n	80075da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007442:	e0ca      	b.n	80075da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800744c:	d166      	bne.n	800751c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800744e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007452:	2b08      	cmp	r3, #8
 8007454:	d827      	bhi.n	80074a6 <UART_SetConfig+0x49a>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <UART_SetConfig+0x450>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	08007481 	.word	0x08007481
 8007460:	08007489 	.word	0x08007489
 8007464:	08007491 	.word	0x08007491
 8007468:	080074a7 	.word	0x080074a7
 800746c:	08007497 	.word	0x08007497
 8007470:	080074a7 	.word	0x080074a7
 8007474:	080074a7 	.word	0x080074a7
 8007478:	080074a7 	.word	0x080074a7
 800747c:	0800749f 	.word	0x0800749f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007480:	f7fe fecc 	bl	800621c <HAL_RCC_GetPCLK1Freq>
 8007484:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007486:	e014      	b.n	80074b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007488:	f7fe fede 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 800748c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800748e:	e010      	b.n	80074b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007490:	4b4e      	ldr	r3, [pc, #312]	; (80075cc <UART_SetConfig+0x5c0>)
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007494:	e00d      	b.n	80074b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007496:	f7fe fe53 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 800749a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800749c:	e009      	b.n	80074b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800749e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074a4:	e005      	b.n	80074b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8090 	beq.w	80075da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	4a44      	ldr	r2, [pc, #272]	; (80075d0 <UART_SetConfig+0x5c4>)
 80074c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074cc:	005a      	lsls	r2, r3, #1
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	441a      	add	r2, r3
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	fbb2 f3f3 	udiv	r3, r2, r3
 80074de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	2b0f      	cmp	r3, #15
 80074e4:	d916      	bls.n	8007514 <UART_SetConfig+0x508>
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ec:	d212      	bcs.n	8007514 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f023 030f 	bic.w	r3, r3, #15
 80074f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	b29a      	uxth	r2, r3
 8007504:	8bfb      	ldrh	r3, [r7, #30]
 8007506:	4313      	orrs	r3, r2
 8007508:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	8bfa      	ldrh	r2, [r7, #30]
 8007510:	60da      	str	r2, [r3, #12]
 8007512:	e062      	b.n	80075da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800751a:	e05e      	b.n	80075da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800751c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007520:	2b08      	cmp	r3, #8
 8007522:	d828      	bhi.n	8007576 <UART_SetConfig+0x56a>
 8007524:	a201      	add	r2, pc, #4	; (adr r2, 800752c <UART_SetConfig+0x520>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	08007551 	.word	0x08007551
 8007530:	08007559 	.word	0x08007559
 8007534:	08007561 	.word	0x08007561
 8007538:	08007577 	.word	0x08007577
 800753c:	08007567 	.word	0x08007567
 8007540:	08007577 	.word	0x08007577
 8007544:	08007577 	.word	0x08007577
 8007548:	08007577 	.word	0x08007577
 800754c:	0800756f 	.word	0x0800756f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007550:	f7fe fe64 	bl	800621c <HAL_RCC_GetPCLK1Freq>
 8007554:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007556:	e014      	b.n	8007582 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007558:	f7fe fe76 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 800755c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800755e:	e010      	b.n	8007582 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007560:	4b1a      	ldr	r3, [pc, #104]	; (80075cc <UART_SetConfig+0x5c0>)
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007564:	e00d      	b.n	8007582 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007566:	f7fe fdeb 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 800756a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800756c:	e009      	b.n	8007582 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800756e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007574:	e005      	b.n	8007582 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007580:	bf00      	nop
    }

    if (pclk != 0U)
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	d028      	beq.n	80075da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	4a10      	ldr	r2, [pc, #64]	; (80075d0 <UART_SetConfig+0x5c4>)
 800758e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007592:	461a      	mov	r2, r3
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	fbb3 f2f2 	udiv	r2, r3, r2
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	441a      	add	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	2b0f      	cmp	r3, #15
 80075b0:	d910      	bls.n	80075d4 <UART_SetConfig+0x5c8>
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b8:	d20c      	bcs.n	80075d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	b29a      	uxth	r2, r3
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	60da      	str	r2, [r3, #12]
 80075c4:	e009      	b.n	80075da <UART_SetConfig+0x5ce>
 80075c6:	bf00      	nop
 80075c8:	40008000 	.word	0x40008000
 80075cc:	00f42400 	.word	0x00f42400
 80075d0:	0800b8c0 	.word	0x0800b8c0
      }
      else
      {
        ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2201      	movs	r2, #1
 80075de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2200      	movs	r2, #0
 80075ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2200      	movs	r2, #0
 80075f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3730      	adds	r7, #48	; 0x30
 80075fe:	46bd      	mov	sp, r7
 8007600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00a      	beq.n	800762e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	f003 0310 	and.w	r3, r3, #16
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00a      	beq.n	80076b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01a      	beq.n	800771a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007702:	d10a      	bne.n	800771a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	605a      	str	r2, [r3, #4]
  }
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b098      	sub	sp, #96	; 0x60
 800774c:	af02      	add	r7, sp, #8
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007758:	f7fb fd7a 	bl	8003250 <HAL_GetTick>
 800775c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b08      	cmp	r3, #8
 800776a:	d12f      	bne.n	80077cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800776c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007774:	2200      	movs	r2, #0
 8007776:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f88e 	bl	800789c <UART_WaitOnFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d022      	beq.n	80077cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800779a:	653b      	str	r3, [r7, #80]	; 0x50
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a4:	647b      	str	r3, [r7, #68]	; 0x44
 80077a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e6      	bne.n	8007786 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e063      	b.n	8007894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d149      	bne.n	800786e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e2:	2200      	movs	r2, #0
 80077e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f857 	bl	800789c <UART_WaitOnFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d03c      	beq.n	800786e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	623b      	str	r3, [r7, #32]
   return(result);
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007812:	633b      	str	r3, [r7, #48]	; 0x30
 8007814:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e6      	bne.n	80077f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	60fb      	str	r3, [r7, #12]
   return(result);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	64bb      	str	r3, [r7, #72]	; 0x48
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007846:	61fa      	str	r2, [r7, #28]
 8007848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	69b9      	ldr	r1, [r7, #24]
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	617b      	str	r3, [r7, #20]
   return(result);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e5      	bne.n	8007826 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e012      	b.n	8007894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3758      	adds	r7, #88	; 0x58
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	4613      	mov	r3, r2
 80078aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ac:	e04f      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d04b      	beq.n	800794e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b6:	f7fb fccb 	bl	8003250 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d302      	bcc.n	80078cc <UART_WaitOnFlagUntilTimeout+0x30>
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e04e      	b.n	800796e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0304 	and.w	r3, r3, #4
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d037      	beq.n	800794e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b80      	cmp	r3, #128	; 0x80
 80078e2:	d034      	beq.n	800794e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d031      	beq.n	800794e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d110      	bne.n	800791a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2208      	movs	r2, #8
 80078fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f838 	bl	8007976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2208      	movs	r2, #8
 800790a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e029      	b.n	800796e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007928:	d111      	bne.n	800794e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f81e 	bl	8007976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2220      	movs	r2, #32
 800793e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e00f      	b.n	800796e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69da      	ldr	r2, [r3, #28]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4013      	ands	r3, r2
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	429a      	cmp	r2, r3
 800795c:	bf0c      	ite	eq
 800795e:	2301      	moveq	r3, #1
 8007960:	2300      	movne	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	429a      	cmp	r2, r3
 800796a:	d0a0      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007976:	b480      	push	{r7}
 8007978:	b095      	sub	sp, #84	; 0x54
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800799c:	643b      	str	r3, [r7, #64]	; 0x40
 800799e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e6      	bne.n	800797e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e3      	bne.n	80079b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d118      	bne.n	8007a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f023 0310 	bic.w	r3, r3, #16
 8007a04:	647b      	str	r3, [r7, #68]	; 0x44
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a0e:	61bb      	str	r3, [r7, #24]
 8007a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6979      	ldr	r1, [r7, #20]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e6      	bne.n	80079f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a36:	bf00      	nop
 8007a38:	3754      	adds	r7, #84	; 0x54
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e027      	b.n	8007aa8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2224      	movs	r2, #36	; 0x24
 8007a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e02d      	b.n	8007b28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	; 0x24
 8007ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0201 	bic.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f84f 	bl	8007bac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e02d      	b.n	8007ba4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2224      	movs	r2, #36	; 0x24
 8007b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f811 	bl	8007bac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d108      	bne.n	8007bce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bcc:	e031      	b.n	8007c32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bce:	2308      	movs	r3, #8
 8007bd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	0e5b      	lsrs	r3, r3, #25
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	0f5b      	lsrs	r3, r3, #29
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	7b3a      	ldrb	r2, [r7, #12]
 8007bfa:	4911      	ldr	r1, [pc, #68]	; (8007c40 <UARTEx_SetNbDataToProcess+0x94>)
 8007bfc:	5c8a      	ldrb	r2, [r1, r2]
 8007bfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c02:	7b3a      	ldrb	r2, [r7, #12]
 8007c04:	490f      	ldr	r1, [pc, #60]	; (8007c44 <UARTEx_SetNbDataToProcess+0x98>)
 8007c06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	7b7a      	ldrb	r2, [r7, #13]
 8007c18:	4909      	ldr	r1, [pc, #36]	; (8007c40 <UARTEx_SetNbDataToProcess+0x94>)
 8007c1a:	5c8a      	ldrb	r2, [r1, r2]
 8007c1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c20:	7b7a      	ldrb	r2, [r7, #13]
 8007c22:	4908      	ldr	r1, [pc, #32]	; (8007c44 <UARTEx_SetNbDataToProcess+0x98>)
 8007c24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c32:	bf00      	nop
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	0800b8d8 	.word	0x0800b8d8
 8007c44:	0800b8e0 	.word	0x0800b8e0

08007c48 <__NVIC_SetPriority>:
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	6039      	str	r1, [r7, #0]
 8007c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	db0a      	blt.n	8007c72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	490c      	ldr	r1, [pc, #48]	; (8007c94 <__NVIC_SetPriority+0x4c>)
 8007c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c66:	0112      	lsls	r2, r2, #4
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c70:	e00a      	b.n	8007c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	4908      	ldr	r1, [pc, #32]	; (8007c98 <__NVIC_SetPriority+0x50>)
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	3b04      	subs	r3, #4
 8007c80:	0112      	lsls	r2, r2, #4
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	440b      	add	r3, r1
 8007c86:	761a      	strb	r2, [r3, #24]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	e000e100 	.word	0xe000e100
 8007c98:	e000ed00 	.word	0xe000ed00

08007c9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ca0:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <SysTick_Handler+0x1c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ca4:	f002 fa9a 	bl	800a1dc <xTaskGetSchedulerState>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d001      	beq.n	8007cb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007cae:	f003 f983 	bl	800afb8 <xPortSysTickHandler>
  }
}
 8007cb2:	bf00      	nop
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	e000e010 	.word	0xe000e010

08007cbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	f06f 0004 	mvn.w	r0, #4
 8007cc6:	f7ff ffbf 	bl	8007c48 <__NVIC_SetPriority>
#endif
}
 8007cca:	bf00      	nop
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cd6:	f3ef 8305 	mrs	r3, IPSR
 8007cda:	603b      	str	r3, [r7, #0]
  return(result);
 8007cdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ce2:	f06f 0305 	mvn.w	r3, #5
 8007ce6:	607b      	str	r3, [r7, #4]
 8007ce8:	e00c      	b.n	8007d04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cea:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <osKernelInitialize+0x44>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d105      	bne.n	8007cfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cf2:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <osKernelInitialize+0x44>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	607b      	str	r3, [r7, #4]
 8007cfc:	e002      	b.n	8007d04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007d02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d04:	687b      	ldr	r3, [r7, #4]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000284 	.word	0x20000284

08007d18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d1e:	f3ef 8305 	mrs	r3, IPSR
 8007d22:	603b      	str	r3, [r7, #0]
  return(result);
 8007d24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d2a:	f06f 0305 	mvn.w	r3, #5
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	e010      	b.n	8007d54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d32:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <osKernelStart+0x48>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d109      	bne.n	8007d4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d3a:	f7ff ffbf 	bl	8007cbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d3e:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <osKernelStart+0x48>)
 8007d40:	2202      	movs	r2, #2
 8007d42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d44:	f001 fdee 	bl	8009924 <vTaskStartScheduler>
      stat = osOK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	607b      	str	r3, [r7, #4]
 8007d4c:	e002      	b.n	8007d54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d54:	687b      	ldr	r3, [r7, #4]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000284 	.word	0x20000284

08007d64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08e      	sub	sp, #56	; 0x38
 8007d68:	af04      	add	r7, sp, #16
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d74:	f3ef 8305 	mrs	r3, IPSR
 8007d78:	617b      	str	r3, [r7, #20]
  return(result);
 8007d7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d17e      	bne.n	8007e7e <osThreadNew+0x11a>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d07b      	beq.n	8007e7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d86:	2380      	movs	r3, #128	; 0x80
 8007d88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d8a:	2318      	movs	r3, #24
 8007d8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d045      	beq.n	8007e2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <osThreadNew+0x48>
        name = attr->name;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d008      	beq.n	8007dd2 <osThreadNew+0x6e>
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b38      	cmp	r3, #56	; 0x38
 8007dc4:	d805      	bhi.n	8007dd2 <osThreadNew+0x6e>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <osThreadNew+0x72>
        return (NULL);
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e054      	b.n	8007e80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	089b      	lsrs	r3, r3, #2
 8007de4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <osThreadNew+0xa8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	2ba7      	cmp	r3, #167	; 0xa7
 8007df4:	d90a      	bls.n	8007e0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d006      	beq.n	8007e0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <osThreadNew+0xa8>
        mem = 1;
 8007e06:	2301      	movs	r3, #1
 8007e08:	61bb      	str	r3, [r7, #24]
 8007e0a:	e010      	b.n	8007e2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10c      	bne.n	8007e2e <osThreadNew+0xca>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d108      	bne.n	8007e2e <osThreadNew+0xca>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <osThreadNew+0xca>
          mem = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	e001      	b.n	8007e2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d110      	bne.n	8007e56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e3c:	9202      	str	r2, [sp, #8]
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6a3a      	ldr	r2, [r7, #32]
 8007e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f001 fb7e 	bl	800954c <xTaskCreateStatic>
 8007e50:	4603      	mov	r3, r0
 8007e52:	613b      	str	r3, [r7, #16]
 8007e54:	e013      	b.n	8007e7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d110      	bne.n	8007e7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f107 0310 	add.w	r3, r7, #16
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f001 fbc9 	bl	8009606 <xTaskCreate>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d001      	beq.n	8007e7e <osThreadNew+0x11a>
            hTask = NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e7e:	693b      	ldr	r3, [r7, #16]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3728      	adds	r7, #40	; 0x28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e90:	f3ef 8305 	mrs	r3, IPSR
 8007e94:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <osDelay+0x1c>
    stat = osErrorISR;
 8007e9c:	f06f 0305 	mvn.w	r3, #5
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e007      	b.n	8007eb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fd04 	bl	80098bc <vTaskDelay>
    }
  }

  return (stat);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b08a      	sub	sp, #40	; 0x28
 8007ec2:	af02      	add	r7, sp, #8
 8007ec4:	60f8      	str	r0, [r7, #12]
 8007ec6:	60b9      	str	r1, [r7, #8]
 8007ec8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ece:	f3ef 8305 	mrs	r3, IPSR
 8007ed2:	613b      	str	r3, [r7, #16]
  return(result);
 8007ed4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d175      	bne.n	8007fc6 <osSemaphoreNew+0x108>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d072      	beq.n	8007fc6 <osSemaphoreNew+0x108>
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d86e      	bhi.n	8007fc6 <osSemaphoreNew+0x108>
    mem = -1;
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d015      	beq.n	8007f20 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d006      	beq.n	8007f0a <osSemaphoreNew+0x4c>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	2b4f      	cmp	r3, #79	; 0x4f
 8007f02:	d902      	bls.n	8007f0a <osSemaphoreNew+0x4c>
        mem = 1;
 8007f04:	2301      	movs	r3, #1
 8007f06:	61bb      	str	r3, [r7, #24]
 8007f08:	e00c      	b.n	8007f24 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <osSemaphoreNew+0x66>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d104      	bne.n	8007f24 <osSemaphoreNew+0x66>
          mem = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	e001      	b.n	8007f24 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2a:	d04c      	beq.n	8007fc6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d128      	bne.n	8007f84 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d10a      	bne.n	8007f4e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	2203      	movs	r2, #3
 8007f3e:	9200      	str	r2, [sp, #0]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2100      	movs	r1, #0
 8007f44:	2001      	movs	r0, #1
 8007f46:	f000 fb5b 	bl	8008600 <xQueueGenericCreateStatic>
 8007f4a:	61f8      	str	r0, [r7, #28]
 8007f4c:	e005      	b.n	8007f5a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007f4e:	2203      	movs	r2, #3
 8007f50:	2100      	movs	r1, #0
 8007f52:	2001      	movs	r0, #1
 8007f54:	f000 fbcc 	bl	80086f0 <xQueueGenericCreate>
 8007f58:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d022      	beq.n	8007fa6 <osSemaphoreNew+0xe8>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01f      	beq.n	8007fa6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007f66:	2300      	movs	r3, #0
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	69f8      	ldr	r0, [r7, #28]
 8007f6e:	f000 fc87 	bl	8008880 <xQueueGenericSend>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d016      	beq.n	8007fa6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007f78:	69f8      	ldr	r0, [r7, #28]
 8007f7a:	f001 f913 	bl	80091a4 <vQueueDelete>
            hSemaphore = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
 8007f82:	e010      	b.n	8007fa6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d108      	bne.n	8007f9c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fc09 	bl	80087aa <xQueueCreateCountingSemaphoreStatic>
 8007f98:	61f8      	str	r0, [r7, #28]
 8007f9a:	e004      	b.n	8007fa6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fc3a 	bl	8008818 <xQueueCreateCountingSemaphore>
 8007fa4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00c      	beq.n	8007fc6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <osSemaphoreNew+0xfc>
          name = attr->name;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	e001      	b.n	8007fbe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	69f8      	ldr	r0, [r7, #28]
 8007fc2:	f001 fa3b 	bl	800943c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007fc6:	69fb      	ldr	r3, [r7, #28]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3720      	adds	r7, #32
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007fe8:	f06f 0303 	mvn.w	r3, #3
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	e039      	b.n	8008064 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff0:	f3ef 8305 	mrs	r3, IPSR
 8007ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d022      	beq.n	8008042 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008002:	f06f 0303 	mvn.w	r3, #3
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e02c      	b.n	8008064 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800800a:	2300      	movs	r3, #0
 800800c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800800e:	f107 0308 	add.w	r3, r7, #8
 8008012:	461a      	mov	r2, r3
 8008014:	2100      	movs	r1, #0
 8008016:	6938      	ldr	r0, [r7, #16]
 8008018:	f001 f844 	bl	80090a4 <xQueueReceiveFromISR>
 800801c:	4603      	mov	r3, r0
 800801e:	2b01      	cmp	r3, #1
 8008020:	d003      	beq.n	800802a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008022:	f06f 0302 	mvn.w	r3, #2
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e01c      	b.n	8008064 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d019      	beq.n	8008064 <osSemaphoreAcquire+0x94>
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <osSemaphoreAcquire+0xa0>)
 8008032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	e010      	b.n	8008064 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6938      	ldr	r0, [r7, #16]
 8008046:	f000 ff21 	bl	8008e8c <xQueueSemaphoreTake>
 800804a:	4603      	mov	r3, r0
 800804c:	2b01      	cmp	r3, #1
 800804e:	d009      	beq.n	8008064 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008056:	f06f 0301 	mvn.w	r3, #1
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e002      	b.n	8008064 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800805e:	f06f 0302 	mvn.w	r3, #2
 8008062:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008064:	697b      	ldr	r3, [r7, #20]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	e000ed04 	.word	0xe000ed04

08008074 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800808a:	f06f 0303 	mvn.w	r3, #3
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	e02c      	b.n	80080ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008092:	f3ef 8305 	mrs	r3, IPSR
 8008096:	60fb      	str	r3, [r7, #12]
  return(result);
 8008098:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800809a:	2b00      	cmp	r3, #0
 800809c:	d01a      	beq.n	80080d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800809e:	2300      	movs	r3, #0
 80080a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80080a2:	f107 0308 	add.w	r3, r7, #8
 80080a6:	4619      	mov	r1, r3
 80080a8:	6938      	ldr	r0, [r7, #16]
 80080aa:	f000 fd82 	bl	8008bb2 <xQueueGiveFromISR>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d003      	beq.n	80080bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80080b4:	f06f 0302 	mvn.w	r3, #2
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e017      	b.n	80080ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d014      	beq.n	80080ec <osSemaphoreRelease+0x78>
 80080c2:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <osSemaphoreRelease+0x84>)
 80080c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	e00b      	b.n	80080ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80080d4:	2300      	movs	r3, #0
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	6938      	ldr	r0, [r7, #16]
 80080dc:	f000 fbd0 	bl	8008880 <xQueueGenericSend>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d002      	beq.n	80080ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80080e6:	f06f 0302 	mvn.w	r3, #2
 80080ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80080ec:	697b      	ldr	r3, [r7, #20]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	e000ed04 	.word	0xe000ed04

080080fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08a      	sub	sp, #40	; 0x28
 8008100:	af02      	add	r7, sp, #8
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008108:	2300      	movs	r3, #0
 800810a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800810c:	f3ef 8305 	mrs	r3, IPSR
 8008110:	613b      	str	r3, [r7, #16]
  return(result);
 8008112:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008114:	2b00      	cmp	r3, #0
 8008116:	d15f      	bne.n	80081d8 <osMessageQueueNew+0xdc>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d05c      	beq.n	80081d8 <osMessageQueueNew+0xdc>
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d059      	beq.n	80081d8 <osMessageQueueNew+0xdc>
    mem = -1;
 8008124:	f04f 33ff 	mov.w	r3, #4294967295
 8008128:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d029      	beq.n	8008184 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d012      	beq.n	800815e <osMessageQueueNew+0x62>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b4f      	cmp	r3, #79	; 0x4f
 800813e:	d90e      	bls.n	800815e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00a      	beq.n	800815e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	695a      	ldr	r2, [r3, #20]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	429a      	cmp	r2, r3
 8008156:	d302      	bcc.n	800815e <osMessageQueueNew+0x62>
        mem = 1;
 8008158:	2301      	movs	r3, #1
 800815a:	61bb      	str	r3, [r7, #24]
 800815c:	e014      	b.n	8008188 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d110      	bne.n	8008188 <osMessageQueueNew+0x8c>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10c      	bne.n	8008188 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008172:	2b00      	cmp	r3, #0
 8008174:	d108      	bne.n	8008188 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d104      	bne.n	8008188 <osMessageQueueNew+0x8c>
          mem = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	e001      	b.n	8008188 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d10b      	bne.n	80081a6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691a      	ldr	r2, [r3, #16]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2100      	movs	r1, #0
 8008198:	9100      	str	r1, [sp, #0]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 fa2f 	bl	8008600 <xQueueGenericCreateStatic>
 80081a2:	61f8      	str	r0, [r7, #28]
 80081a4:	e008      	b.n	80081b8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d105      	bne.n	80081b8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80081ac:	2200      	movs	r2, #0
 80081ae:	68b9      	ldr	r1, [r7, #8]
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fa9d 	bl	80086f0 <xQueueGenericCreate>
 80081b6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00c      	beq.n	80081d8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <osMessageQueueNew+0xd0>
        name = attr->name;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	e001      	b.n	80081d0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80081d0:	6979      	ldr	r1, [r7, #20]
 80081d2:	69f8      	ldr	r0, [r7, #28]
 80081d4:	f001 f932 	bl	800943c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80081d8:	69fb      	ldr	r3, [r7, #28]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3720      	adds	r7, #32
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	4613      	mov	r3, r2
 80081f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081fc:	f3ef 8305 	mrs	r3, IPSR
 8008200:	617b      	str	r3, [r7, #20]
  return(result);
 8008202:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008204:	2b00      	cmp	r3, #0
 8008206:	d028      	beq.n	800825a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <osMessageQueuePut+0x36>
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <osMessageQueuePut+0x36>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800821a:	f06f 0303 	mvn.w	r3, #3
 800821e:	61fb      	str	r3, [r7, #28]
 8008220:	e038      	b.n	8008294 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008226:	f107 0210 	add.w	r2, r7, #16
 800822a:	2300      	movs	r3, #0
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	69b8      	ldr	r0, [r7, #24]
 8008230:	f000 fc24 	bl	8008a7c <xQueueGenericSendFromISR>
 8008234:	4603      	mov	r3, r0
 8008236:	2b01      	cmp	r3, #1
 8008238:	d003      	beq.n	8008242 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800823a:	f06f 0302 	mvn.w	r3, #2
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	e028      	b.n	8008294 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d025      	beq.n	8008294 <osMessageQueuePut+0xb0>
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <osMessageQueuePut+0xbc>)
 800824a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	e01c      	b.n	8008294 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <osMessageQueuePut+0x82>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008266:	f06f 0303 	mvn.w	r3, #3
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	e012      	b.n	8008294 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800826e:	2300      	movs	r3, #0
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	69b8      	ldr	r0, [r7, #24]
 8008276:	f000 fb03 	bl	8008880 <xQueueGenericSend>
 800827a:	4603      	mov	r3, r0
 800827c:	2b01      	cmp	r3, #1
 800827e:	d009      	beq.n	8008294 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008286:	f06f 0301 	mvn.w	r3, #1
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	e002      	b.n	8008294 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800828e:	f06f 0302 	mvn.w	r3, #2
 8008292:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008294:	69fb      	ldr	r3, [r7, #28]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ba:	f3ef 8305 	mrs	r3, IPSR
 80082be:	617b      	str	r3, [r7, #20]
  return(result);
 80082c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d028      	beq.n	8008318 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <osMessageQueueGet+0x34>
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <osMessageQueueGet+0x34>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80082d8:	f06f 0303 	mvn.w	r3, #3
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	e037      	b.n	8008350 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80082e0:	2300      	movs	r3, #0
 80082e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80082e4:	f107 0310 	add.w	r3, r7, #16
 80082e8:	461a      	mov	r2, r3
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	69b8      	ldr	r0, [r7, #24]
 80082ee:	f000 fed9 	bl	80090a4 <xQueueReceiveFromISR>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d003      	beq.n	8008300 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80082f8:	f06f 0302 	mvn.w	r3, #2
 80082fc:	61fb      	str	r3, [r7, #28]
 80082fe:	e027      	b.n	8008350 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d024      	beq.n	8008350 <osMessageQueueGet+0xac>
 8008306:	4b15      	ldr	r3, [pc, #84]	; (800835c <osMessageQueueGet+0xb8>)
 8008308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	e01b      	b.n	8008350 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <osMessageQueueGet+0x80>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008324:	f06f 0303 	mvn.w	r3, #3
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	e011      	b.n	8008350 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	69b8      	ldr	r0, [r7, #24]
 8008332:	f000 fccb 	bl	8008ccc <xQueueReceive>
 8008336:	4603      	mov	r3, r0
 8008338:	2b01      	cmp	r3, #1
 800833a:	d009      	beq.n	8008350 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008342:	f06f 0301 	mvn.w	r3, #1
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	e002      	b.n	8008350 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800834a:	f06f 0302 	mvn.w	r3, #2
 800834e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008350:	69fb      	ldr	r3, [r7, #28]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3720      	adds	r7, #32
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4a07      	ldr	r2, [pc, #28]	; (800838c <vApplicationGetIdleTaskMemory+0x2c>)
 8008370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4a06      	ldr	r2, [pc, #24]	; (8008390 <vApplicationGetIdleTaskMemory+0x30>)
 8008376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2280      	movs	r2, #128	; 0x80
 800837c:	601a      	str	r2, [r3, #0]
}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20000288 	.word	0x20000288
 8008390:	20000330 	.word	0x20000330

08008394 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a07      	ldr	r2, [pc, #28]	; (80083c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80083a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	4a06      	ldr	r2, [pc, #24]	; (80083c4 <vApplicationGetTimerTaskMemory+0x30>)
 80083aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20000530 	.word	0x20000530
 80083c4:	200005d8 	.word	0x200005d8

080083c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f103 0208 	add.w	r2, r3, #8
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f04f 32ff 	mov.w	r2, #4294967295
 80083e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f103 0208 	add.w	r2, r3, #8
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f103 0208 	add.w	r2, r3, #8
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	601a      	str	r2, [r3, #0]
}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008480:	d103      	bne.n	800848a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e00c      	b.n	80084a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3308      	adds	r3, #8
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e002      	b.n	8008498 <vListInsert+0x2e>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d2f6      	bcs.n	8008492 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	601a      	str	r2, [r3, #0]
}
 80084d0:	bf00      	nop
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	6892      	ldr	r2, [r2, #8]
 80084f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6852      	ldr	r2, [r2, #4]
 80084fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d103      	bne.n	8008510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	1e5a      	subs	r2, r3, #1
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008556:	bf00      	nop
 8008558:	e7fe      	b.n	8008558 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800855a:	f002 fc9b 	bl	800ae94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800856a:	fb01 f303 	mul.w	r3, r1, r3
 800856e:	441a      	add	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	3b01      	subs	r3, #1
 800858c:	68f9      	ldr	r1, [r7, #12]
 800858e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008590:	fb01 f303 	mul.w	r3, r1, r3
 8008594:	441a      	add	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	22ff      	movs	r2, #255	; 0xff
 800859e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	22ff      	movs	r2, #255	; 0xff
 80085a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d114      	bne.n	80085da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01a      	beq.n	80085ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3310      	adds	r3, #16
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 fc4b 	bl	8009e58 <xTaskRemoveFromEventList>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d012      	beq.n	80085ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085c8:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <xQueueGenericReset+0xcc>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	e009      	b.n	80085ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3310      	adds	r3, #16
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fef2 	bl	80083c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3324      	adds	r3, #36	; 0x24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff feed 	bl	80083c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085ee:	f002 fc81 	bl	800aef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085f2:	2301      	movs	r3, #1
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08e      	sub	sp, #56	; 0x38
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10a      	bne.n	800862a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008626:	bf00      	nop
 8008628:	e7fe      	b.n	8008628 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <xQueueGenericCreateStatic+0x52>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <xQueueGenericCreateStatic+0x56>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <xQueueGenericCreateStatic+0x58>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	623b      	str	r3, [r7, #32]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <xQueueGenericCreateStatic+0x7e>
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <xQueueGenericCreateStatic+0x82>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <xQueueGenericCreateStatic+0x84>
 8008682:	2300      	movs	r3, #0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	61fb      	str	r3, [r7, #28]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800869e:	2350      	movs	r3, #80	; 0x50
 80086a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b50      	cmp	r3, #80	; 0x50
 80086a6:	d00a      	beq.n	80086be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	61bb      	str	r3, [r7, #24]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00d      	beq.n	80086e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	4613      	mov	r3, r2
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f83f 	bl	8008764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3730      	adds	r7, #48	; 0x30
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08a      	sub	sp, #40	; 0x28
 80086f4:	af02      	add	r7, sp, #8
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	613b      	str	r3, [r7, #16]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3350      	adds	r3, #80	; 0x50
 8008728:	4618      	mov	r0, r3
 800872a:	f002 fcd5 	bl	800b0d8 <pvPortMalloc>
 800872e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d011      	beq.n	800875a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	3350      	adds	r3, #80	; 0x50
 800873e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008748:	79fa      	ldrb	r2, [r7, #7]
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	4613      	mov	r3, r2
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f805 	bl	8008764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800875a:	69bb      	ldr	r3, [r7, #24]
	}
 800875c:	4618      	mov	r0, r3
 800875e:	3720      	adds	r7, #32
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d103      	bne.n	8008780 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	e002      	b.n	8008786 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008792:	2101      	movs	r1, #1
 8008794:	69b8      	ldr	r0, [r7, #24]
 8008796:	f7ff fecb 	bl	8008530 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b08a      	sub	sp, #40	; 0x28
 80087ae:	af02      	add	r7, sp, #8
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	61bb      	str	r3, [r7, #24]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d90a      	bls.n	80087f0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	617b      	str	r3, [r7, #20]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087f0:	2302      	movs	r3, #2
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff ff00 	bl	8008600 <xQueueGenericCreateStatic>
 8008800:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800880e:	69fb      	ldr	r3, [r7, #28]
	}
 8008810:	4618      	mov	r0, r3
 8008812:	3720      	adds	r7, #32
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	613b      	str	r3, [r7, #16]
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d90a      	bls.n	800885c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60fb      	str	r3, [r7, #12]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800885c:	2202      	movs	r2, #2
 800885e:	2100      	movs	r1, #0
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff ff45 	bl	80086f0 <xQueueGenericCreate>
 8008866:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008874:	697b      	ldr	r3, [r7, #20]
	}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08e      	sub	sp, #56	; 0x38
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800888e:	2300      	movs	r3, #0
 8008890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <xQueueGenericSend+0x32>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d103      	bne.n	80088c0 <xQueueGenericSend+0x40>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <xQueueGenericSend+0x44>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <xQueueGenericSend+0x46>
 80088c4:	2300      	movs	r3, #0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <xQueueGenericSend+0x60>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d103      	bne.n	80088ee <xQueueGenericSend+0x6e>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <xQueueGenericSend+0x72>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <xQueueGenericSend+0x74>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xQueueGenericSend+0x8e>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	623b      	str	r3, [r7, #32]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800890e:	f001 fc65 	bl	800a1dc <xTaskGetSchedulerState>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <xQueueGenericSend+0x9e>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <xQueueGenericSend+0xa2>
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <xQueueGenericSend+0xa4>
 8008922:	2300      	movs	r3, #0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <xQueueGenericSend+0xbe>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	61fb      	str	r3, [r7, #28]
}
 800893a:	bf00      	nop
 800893c:	e7fe      	b.n	800893c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800893e:	f002 faa9 	bl	800ae94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894a:	429a      	cmp	r2, r3
 800894c:	d302      	bcc.n	8008954 <xQueueGenericSend+0xd4>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d129      	bne.n	80089a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895a:	f000 fc5e 	bl	800921a <prvCopyDataToQueue>
 800895e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	d010      	beq.n	800898a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	3324      	adds	r3, #36	; 0x24
 800896c:	4618      	mov	r0, r3
 800896e:	f001 fa73 	bl	8009e58 <xTaskRemoveFromEventList>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d013      	beq.n	80089a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008978:	4b3f      	ldr	r3, [pc, #252]	; (8008a78 <xQueueGenericSend+0x1f8>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	e00a      	b.n	80089a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008990:	4b39      	ldr	r3, [pc, #228]	; (8008a78 <xQueueGenericSend+0x1f8>)
 8008992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089a0:	f002 faa8 	bl	800aef4 <vPortExitCritical>
				return pdPASS;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e063      	b.n	8008a70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ae:	f002 faa1 	bl	800aef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e05c      	b.n	8008a70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 faad 	bl	8009f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ca:	f002 fa93 	bl	800aef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089ce:	f001 f819 	bl	8009a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089d2:	f002 fa5f 	bl	800ae94 <vPortEnterCritical>
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089dc:	b25b      	sxtb	r3, r3
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e2:	d103      	bne.n	80089ec <xQueueGenericSend+0x16c>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d103      	bne.n	8008a02 <xQueueGenericSend+0x182>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a02:	f002 fa77 	bl	800aef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a06:	1d3a      	adds	r2, r7, #4
 8008a08:	f107 0314 	add.w	r3, r7, #20
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fa9c 	bl	8009f4c <xTaskCheckForTimeOut>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d124      	bne.n	8008a64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1c:	f000 fcf5 	bl	800940a <prvIsQueueFull>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d018      	beq.n	8008a58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	3310      	adds	r3, #16
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 f9c2 	bl	8009db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a36:	f000 fc80 	bl	800933a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a3a:	f000 fff1 	bl	8009a20 <xTaskResumeAll>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f47f af7c 	bne.w	800893e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a46:	4b0c      	ldr	r3, [pc, #48]	; (8008a78 <xQueueGenericSend+0x1f8>)
 8008a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	e772      	b.n	800893e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a5a:	f000 fc6e 	bl	800933a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a5e:	f000 ffdf 	bl	8009a20 <xTaskResumeAll>
 8008a62:	e76c      	b.n	800893e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a66:	f000 fc68 	bl	800933a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a6a:	f000 ffd9 	bl	8009a20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3738      	adds	r7, #56	; 0x38
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b090      	sub	sp, #64	; 0x40
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <xQueueGenericSendFromISR+0x3c>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <xQueueGenericSendFromISR+0x40>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <xQueueGenericSendFromISR+0x42>
 8008abc:	2300      	movs	r3, #0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d103      	bne.n	8008ae6 <xQueueGenericSendFromISR+0x6a>
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <xQueueGenericSendFromISR+0x6e>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <xQueueGenericSendFromISR+0x70>
 8008aea:	2300      	movs	r3, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	623b      	str	r3, [r7, #32]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b06:	f002 faa7 	bl	800b058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	61fa      	str	r2, [r7, #28]
 8008b20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d302      	bcc.n	8008b38 <xQueueGenericSendFromISR+0xbc>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d12f      	bne.n	8008b98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b4e:	f000 fb64 	bl	800921a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5a:	d112      	bne.n	8008b82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d016      	beq.n	8008b92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	3324      	adds	r3, #36	; 0x24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 f975 	bl	8009e58 <xTaskRemoveFromEventList>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00e      	beq.n	8008b92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e007      	b.n	8008b92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b86:	3301      	adds	r3, #1
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	b25a      	sxtb	r2, r3
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b92:	2301      	movs	r3, #1
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b96:	e001      	b.n	8008b9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ba6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3740      	adds	r7, #64	; 0x40
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b08e      	sub	sp, #56	; 0x38
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	623b      	str	r3, [r7, #32]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <xQueueGiveFromISR+0x48>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	61fb      	str	r3, [r7, #28]
}
 8008bf6:	bf00      	nop
 8008bf8:	e7fe      	b.n	8008bf8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d103      	bne.n	8008c0a <xQueueGiveFromISR+0x58>
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <xQueueGiveFromISR+0x5c>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <xQueueGiveFromISR+0x5e>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	61bb      	str	r3, [r7, #24]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c2a:	f002 fa15 	bl	800b058 <vPortValidateInterruptPriority>
	__asm volatile
 8008c2e:	f3ef 8211 	mrs	r2, BASEPRI
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	617a      	str	r2, [r7, #20]
 8008c44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d22b      	bcs.n	8008cb2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c74:	d112      	bne.n	8008c9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d016      	beq.n	8008cac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	3324      	adds	r3, #36	; 0x24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f8e8 	bl	8009e58 <xTaskRemoveFromEventList>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00e      	beq.n	8008cac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2201      	movs	r2, #1
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e007      	b.n	8008cac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	b25a      	sxtb	r2, r3
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cac:	2301      	movs	r3, #1
 8008cae:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb0:	e001      	b.n	8008cb6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f383 8811 	msr	BASEPRI, r3
}
 8008cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3738      	adds	r7, #56	; 0x38
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	; 0x30
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <xQueueReceive+0x30>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	623b      	str	r3, [r7, #32]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueReceive+0x3e>
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <xQueueReceive+0x42>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <xQueueReceive+0x44>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xQueueReceive+0x5e>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	61fb      	str	r3, [r7, #28]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d2a:	f001 fa57 	bl	800a1dc <xTaskGetSchedulerState>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d102      	bne.n	8008d3a <xQueueReceive+0x6e>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <xQueueReceive+0x72>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <xQueueReceive+0x74>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <xQueueReceive+0x8e>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	61bb      	str	r3, [r7, #24]
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d5a:	f002 f89b 	bl	800ae94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d01f      	beq.n	8008daa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d6e:	f000 fabe 	bl	80092ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1e5a      	subs	r2, r3, #1
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00f      	beq.n	8008da2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	3310      	adds	r3, #16
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 f866 	bl	8009e58 <xTaskRemoveFromEventList>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d92:	4b3d      	ldr	r3, [pc, #244]	; (8008e88 <xQueueReceive+0x1bc>)
 8008d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008da2:	f002 f8a7 	bl	800aef4 <vPortExitCritical>
				return pdPASS;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e069      	b.n	8008e7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008db0:	f002 f8a0 	bl	800aef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e062      	b.n	8008e7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d106      	bne.n	8008dcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dbe:	f107 0310 	add.w	r3, r7, #16
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 f8ac 	bl	8009f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dcc:	f002 f892 	bl	800aef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dd0:	f000 fe18 	bl	8009a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dd4:	f002 f85e 	bl	800ae94 <vPortEnterCritical>
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dde:	b25b      	sxtb	r3, r3
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de4:	d103      	bne.n	8008dee <xQueueReceive+0x122>
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008df4:	b25b      	sxtb	r3, r3
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d103      	bne.n	8008e04 <xQueueReceive+0x138>
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e04:	f002 f876 	bl	800aef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e08:	1d3a      	adds	r2, r7, #4
 8008e0a:	f107 0310 	add.w	r3, r7, #16
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 f89b 	bl	8009f4c <xTaskCheckForTimeOut>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d123      	bne.n	8008e64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e1e:	f000 fade 	bl	80093de <prvIsQueueEmpty>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d017      	beq.n	8008e58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	3324      	adds	r3, #36	; 0x24
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 ffc1 	bl	8009db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e38:	f000 fa7f 	bl	800933a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e3c:	f000 fdf0 	bl	8009a20 <xTaskResumeAll>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d189      	bne.n	8008d5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <xQueueReceive+0x1bc>)
 8008e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	e780      	b.n	8008d5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e5a:	f000 fa6e 	bl	800933a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e5e:	f000 fddf 	bl	8009a20 <xTaskResumeAll>
 8008e62:	e77a      	b.n	8008d5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e66:	f000 fa68 	bl	800933a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e6a:	f000 fdd9 	bl	8009a20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e70:	f000 fab5 	bl	80093de <prvIsQueueEmpty>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f43f af6f 	beq.w	8008d5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3730      	adds	r7, #48	; 0x30
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08e      	sub	sp, #56	; 0x38
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	623b      	str	r3, [r7, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	61fb      	str	r3, [r7, #28]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008edc:	f001 f97e 	bl	800a1dc <xTaskGetSchedulerState>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d102      	bne.n	8008eec <xQueueSemaphoreTake+0x60>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <xQueueSemaphoreTake+0x64>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e000      	b.n	8008ef2 <xQueueSemaphoreTake+0x66>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	61bb      	str	r3, [r7, #24]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f0c:	f001 ffc2 	bl	800ae94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d024      	beq.n	8008f66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	1e5a      	subs	r2, r3, #1
 8008f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f2c:	f001 facc 	bl	800a4c8 <pvTaskIncrementMutexHeldCount>
 8008f30:	4602      	mov	r2, r0
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00f      	beq.n	8008f5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	3310      	adds	r3, #16
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 ff88 	bl	8009e58 <xTaskRemoveFromEventList>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f4e:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <xQueueSemaphoreTake+0x214>)
 8008f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f5e:	f001 ffc9 	bl	800aef4 <vPortExitCritical>
				return pdPASS;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e097      	b.n	8009096 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d111      	bne.n	8008f90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00a      	beq.n	8008f88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	617b      	str	r3, [r7, #20]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f88:	f001 ffb4 	bl	800aef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e082      	b.n	8009096 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 ffc0 	bl	8009f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fa4:	f001 ffa6 	bl	800aef4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fa8:	f000 fd2c 	bl	8009a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fac:	f001 ff72 	bl	800ae94 <vPortEnterCritical>
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb6:	b25b      	sxtb	r3, r3
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbc:	d103      	bne.n	8008fc6 <xQueueSemaphoreTake+0x13a>
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fcc:	b25b      	sxtb	r3, r3
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd2:	d103      	bne.n	8008fdc <xQueueSemaphoreTake+0x150>
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fdc:	f001 ff8a 	bl	800aef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe0:	463a      	mov	r2, r7
 8008fe2:	f107 030c 	add.w	r3, r7, #12
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 ffaf 	bl	8009f4c <xTaskCheckForTimeOut>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d132      	bne.n	800905a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ff6:	f000 f9f2 	bl	80093de <prvIsQueueEmpty>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d026      	beq.n	800904e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009008:	f001 ff44 	bl	800ae94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f001 f901 	bl	800a218 <xTaskPriorityInherit>
 8009016:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009018:	f001 ff6c 	bl	800aef4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fec7 	bl	8009db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800902a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800902c:	f000 f985 	bl	800933a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009030:	f000 fcf6 	bl	8009a20 <xTaskResumeAll>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	f47f af68 	bne.w	8008f0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800903c:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <xQueueSemaphoreTake+0x214>)
 800903e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	e75e      	b.n	8008f0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800904e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009050:	f000 f973 	bl	800933a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009054:	f000 fce4 	bl	8009a20 <xTaskResumeAll>
 8009058:	e758      	b.n	8008f0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800905a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800905c:	f000 f96d 	bl	800933a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009060:	f000 fcde 	bl	8009a20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009066:	f000 f9ba 	bl	80093de <prvIsQueueEmpty>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	f43f af4d 	beq.w	8008f0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00d      	beq.n	8009094 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009078:	f001 ff0c 	bl	800ae94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800907c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800907e:	f000 f8b4 	bl	80091ea <prvGetDisinheritPriorityAfterTimeout>
 8009082:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800908a:	4618      	mov	r0, r3
 800908c:	f001 f99a 	bl	800a3c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009090:	f001 ff30 	bl	800aef4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009096:	4618      	mov	r0, r3
 8009098:	3738      	adds	r7, #56	; 0x38
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08e      	sub	sp, #56	; 0x38
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	623b      	str	r3, [r7, #32]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d103      	bne.n	80090de <xQueueReceiveFromISR+0x3a>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <xQueueReceiveFromISR+0x3e>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <xQueueReceiveFromISR+0x40>
 80090e2:	2300      	movs	r3, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	61fb      	str	r3, [r7, #28]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090fe:	f001 ffab 	bl	800b058 <vPortValidateInterruptPriority>
	__asm volatile
 8009102:	f3ef 8211 	mrs	r2, BASEPRI
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	61ba      	str	r2, [r7, #24]
 8009118:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800911a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800911c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d02f      	beq.n	800918a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009134:	68b9      	ldr	r1, [r7, #8]
 8009136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009138:	f000 f8d9 	bl	80092ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	1e5a      	subs	r2, r3, #1
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914c:	d112      	bne.n	8009174 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d016      	beq.n	8009184 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	3310      	adds	r3, #16
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fe7c 	bl	8009e58 <xTaskRemoveFromEventList>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00e      	beq.n	8009184 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	e007      	b.n	8009184 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009178:	3301      	adds	r3, #1
 800917a:	b2db      	uxtb	r3, r3
 800917c:	b25a      	sxtb	r2, r3
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009184:	2301      	movs	r3, #1
 8009186:	637b      	str	r3, [r7, #52]	; 0x34
 8009188:	e001      	b.n	800918e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800918a:	2300      	movs	r3, #0
 800918c:	637b      	str	r3, [r7, #52]	; 0x34
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f383 8811 	msr	BASEPRI, r3
}
 8009198:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800919c:	4618      	mov	r0, r3
 800919e:	3738      	adds	r7, #56	; 0x38
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <vQueueDelete+0x28>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	60bb      	str	r3, [r7, #8]
}
 80091c8:	bf00      	nop
 80091ca:	e7fe      	b.n	80091ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 f95f 	bl	8009490 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d102      	bne.n	80091e2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f002 f847 	bl	800b270 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091ea:	b480      	push	{r7}
 80091ec:	b085      	sub	sp, #20
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d006      	beq.n	8009208 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e001      	b.n	800920c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800920c:	68fb      	ldr	r3, [r7, #12]
	}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10d      	bne.n	8009254 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d14d      	bne.n	80092dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	4618      	mov	r0, r3
 8009246:	f001 f84f 	bl	800a2e8 <xTaskPriorityDisinherit>
 800924a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	609a      	str	r2, [r3, #8]
 8009252:	e043      	b.n	80092dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d119      	bne.n	800928e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6858      	ldr	r0, [r3, #4]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	461a      	mov	r2, r3
 8009264:	68b9      	ldr	r1, [r7, #8]
 8009266:	f002 f9a5 	bl	800b5b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009272:	441a      	add	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	429a      	cmp	r2, r3
 8009282:	d32b      	bcc.n	80092dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	605a      	str	r2, [r3, #4]
 800928c:	e026      	b.n	80092dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68d8      	ldr	r0, [r3, #12]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	461a      	mov	r2, r3
 8009298:	68b9      	ldr	r1, [r7, #8]
 800929a:	f002 f98b 	bl	800b5b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a6:	425b      	negs	r3, r3
 80092a8:	441a      	add	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d207      	bcs.n	80092ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	425b      	negs	r3, r3
 80092c4:	441a      	add	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d105      	bne.n	80092dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092e4:	697b      	ldr	r3, [r7, #20]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d018      	beq.n	8009332 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009308:	441a      	add	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	429a      	cmp	r2, r3
 8009318:	d303      	bcc.n	8009322 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68d9      	ldr	r1, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	461a      	mov	r2, r3
 800932c:	6838      	ldr	r0, [r7, #0]
 800932e:	f002 f941 	bl	800b5b4 <memcpy>
	}
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009342:	f001 fda7 	bl	800ae94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800934c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800934e:	e011      	b.n	8009374 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	d012      	beq.n	800937e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3324      	adds	r3, #36	; 0x24
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fd7b 	bl	8009e58 <xTaskRemoveFromEventList>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009368:	f000 fe52 	bl	800a010 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	3b01      	subs	r3, #1
 8009370:	b2db      	uxtb	r3, r3
 8009372:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dce9      	bgt.n	8009350 <prvUnlockQueue+0x16>
 800937c:	e000      	b.n	8009380 <prvUnlockQueue+0x46>
					break;
 800937e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	22ff      	movs	r2, #255	; 0xff
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009388:	f001 fdb4 	bl	800aef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800938c:	f001 fd82 	bl	800ae94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009396:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009398:	e011      	b.n	80093be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d012      	beq.n	80093c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3310      	adds	r3, #16
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fd56 	bl	8009e58 <xTaskRemoveFromEventList>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093b2:	f000 fe2d 	bl	800a010 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dce9      	bgt.n	800939a <prvUnlockQueue+0x60>
 80093c6:	e000      	b.n	80093ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	22ff      	movs	r2, #255	; 0xff
 80093ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093d2:	f001 fd8f 	bl	800aef4 <vPortExitCritical>
}
 80093d6:	bf00      	nop
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093e6:	f001 fd55 	bl	800ae94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093f2:	2301      	movs	r3, #1
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	e001      	b.n	80093fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093fc:	f001 fd7a 	bl	800aef4 <vPortExitCritical>

	return xReturn;
 8009400:	68fb      	ldr	r3, [r7, #12]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009412:	f001 fd3f 	bl	800ae94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941e:	429a      	cmp	r2, r3
 8009420:	d102      	bne.n	8009428 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009422:	2301      	movs	r3, #1
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	e001      	b.n	800942c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800942c:	f001 fd62 	bl	800aef4 <vPortExitCritical>

	return xReturn;
 8009430:	68fb      	ldr	r3, [r7, #12]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	e014      	b.n	8009476 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800944c:	4a0f      	ldr	r2, [pc, #60]	; (800948c <vQueueAddToRegistry+0x50>)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10b      	bne.n	8009470 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009458:	490c      	ldr	r1, [pc, #48]	; (800948c <vQueueAddToRegistry+0x50>)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009462:	4a0a      	ldr	r2, [pc, #40]	; (800948c <vQueueAddToRegistry+0x50>)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	4413      	add	r3, r2
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800946e:	e006      	b.n	800947e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b07      	cmp	r3, #7
 800947a:	d9e7      	bls.n	800944c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	200009d8 	.word	0x200009d8

08009490 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	e016      	b.n	80094cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800949e:	4a10      	ldr	r2, [pc, #64]	; (80094e0 <vQueueUnregisterQueue+0x50>)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d10b      	bne.n	80094c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094ae:	4a0c      	ldr	r2, [pc, #48]	; (80094e0 <vQueueUnregisterQueue+0x50>)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2100      	movs	r1, #0
 80094b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094b8:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <vQueueUnregisterQueue+0x50>)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	4413      	add	r3, r2
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
				break;
 80094c4:	e006      	b.n	80094d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b07      	cmp	r3, #7
 80094d0:	d9e5      	bls.n	800949e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	200009d8 	.word	0x200009d8

080094e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094f4:	f001 fcce 	bl	800ae94 <vPortEnterCritical>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094fe:	b25b      	sxtb	r3, r3
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d103      	bne.n	800950e <vQueueWaitForMessageRestricted+0x2a>
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009514:	b25b      	sxtb	r3, r3
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d103      	bne.n	8009524 <vQueueWaitForMessageRestricted+0x40>
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009524:	f001 fce6 	bl	800aef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	3324      	adds	r3, #36	; 0x24
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fc61 	bl	8009e00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f7ff fefb 	bl	800933a <prvUnlockQueue>
	}
 8009544:	bf00      	nop
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08e      	sub	sp, #56	; 0x38
 8009550:	af04      	add	r7, sp, #16
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800955a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	623b      	str	r3, [r7, #32]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <xTaskCreateStatic+0x46>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61fb      	str	r3, [r7, #28]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009592:	23a8      	movs	r3, #168	; 0xa8
 8009594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2ba8      	cmp	r3, #168	; 0xa8
 800959a:	d00a      	beq.n	80095b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	61bb      	str	r3, [r7, #24]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01e      	beq.n	80095f8 <xTaskCreateStatic+0xac>
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01b      	beq.n	80095f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	2202      	movs	r2, #2
 80095ce:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095d2:	2300      	movs	r3, #0
 80095d4:	9303      	str	r3, [sp, #12]
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	9302      	str	r3, [sp, #8]
 80095da:	f107 0314 	add.w	r3, r7, #20
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 f850 	bl	8009690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095f2:	f000 f8f3 	bl	80097dc <prvAddNewTaskToReadyList>
 80095f6:	e001      	b.n	80095fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095fc:	697b      	ldr	r3, [r7, #20]
	}
 80095fe:	4618      	mov	r0, r3
 8009600:	3728      	adds	r7, #40	; 0x28
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009606:	b580      	push	{r7, lr}
 8009608:	b08c      	sub	sp, #48	; 0x30
 800960a:	af04      	add	r7, sp, #16
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4618      	mov	r0, r3
 800961c:	f001 fd5c 	bl	800b0d8 <pvPortMalloc>
 8009620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00e      	beq.n	8009646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009628:	20a8      	movs	r0, #168	; 0xa8
 800962a:	f001 fd55 	bl	800b0d8 <pvPortMalloc>
 800962e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	631a      	str	r2, [r3, #48]	; 0x30
 800963c:	e005      	b.n	800964a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f001 fe16 	bl	800b270 <vPortFree>
 8009644:	e001      	b.n	800964a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d017      	beq.n	8009680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009658:	88fa      	ldrh	r2, [r7, #6]
 800965a:	2300      	movs	r3, #0
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f80e 	bl	8009690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009674:	69f8      	ldr	r0, [r7, #28]
 8009676:	f000 f8b1 	bl	80097dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800967a:	2301      	movs	r3, #1
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e002      	b.n	8009686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009680:	f04f 33ff 	mov.w	r3, #4294967295
 8009684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009686:	69bb      	ldr	r3, [r7, #24]
	}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	461a      	mov	r2, r3
 80096a8:	21a5      	movs	r1, #165	; 0xa5
 80096aa:	f001 feff 	bl	800b4ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096b8:	3b01      	subs	r3, #1
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f023 0307 	bic.w	r3, r3, #7
 80096c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	617b      	str	r3, [r7, #20]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d01f      	beq.n	800972e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096ee:	2300      	movs	r3, #0
 80096f0:	61fb      	str	r3, [r7, #28]
 80096f2:	e012      	b.n	800971a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	7819      	ldrb	r1, [r3, #0]
 80096fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	3334      	adds	r3, #52	; 0x34
 8009704:	460a      	mov	r2, r1
 8009706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d006      	beq.n	8009722 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	3301      	adds	r3, #1
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	2b0f      	cmp	r3, #15
 800971e:	d9e9      	bls.n	80096f4 <prvInitialiseNewTask+0x64>
 8009720:	e000      	b.n	8009724 <prvInitialiseNewTask+0x94>
			{
				break;
 8009722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800972c:	e003      	b.n	8009736 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	2b37      	cmp	r3, #55	; 0x37
 800973a:	d901      	bls.n	8009740 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800973c:	2337      	movs	r3, #55	; 0x37
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800974a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	2200      	movs	r2, #0
 8009750:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	3304      	adds	r3, #4
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe fe56 	bl	8008408 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	3318      	adds	r3, #24
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe fe51 	bl	8008408 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800977a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	2200      	movs	r2, #0
 8009780:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	2200      	movs	r2, #0
 8009788:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	3354      	adds	r3, #84	; 0x54
 8009790:	224c      	movs	r2, #76	; 0x4c
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f001 fe89 	bl	800b4ac <memset>
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	4a0c      	ldr	r2, [pc, #48]	; (80097d0 <prvInitialiseNewTask+0x140>)
 800979e:	659a      	str	r2, [r3, #88]	; 0x58
 80097a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a2:	4a0c      	ldr	r2, [pc, #48]	; (80097d4 <prvInitialiseNewTask+0x144>)
 80097a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	4a0b      	ldr	r2, [pc, #44]	; (80097d8 <prvInitialiseNewTask+0x148>)
 80097aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	68f9      	ldr	r1, [r7, #12]
 80097b0:	69b8      	ldr	r0, [r7, #24]
 80097b2:	f001 fa3f 	bl	800ac34 <pxPortInitialiseStack>
 80097b6:	4602      	mov	r2, r0
 80097b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097c8:	bf00      	nop
 80097ca:	3720      	adds	r7, #32
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	20002998 	.word	0x20002998
 80097d4:	20002a00 	.word	0x20002a00
 80097d8:	20002a68 	.word	0x20002a68

080097dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097e4:	f001 fb56 	bl	800ae94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097e8:	4b2d      	ldr	r3, [pc, #180]	; (80098a0 <prvAddNewTaskToReadyList+0xc4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	4a2c      	ldr	r2, [pc, #176]	; (80098a0 <prvAddNewTaskToReadyList+0xc4>)
 80097f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097f2:	4b2c      	ldr	r3, [pc, #176]	; (80098a4 <prvAddNewTaskToReadyList+0xc8>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d109      	bne.n	800980e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097fa:	4a2a      	ldr	r2, [pc, #168]	; (80098a4 <prvAddNewTaskToReadyList+0xc8>)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009800:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <prvAddNewTaskToReadyList+0xc4>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d110      	bne.n	800982a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009808:	f000 fc26 	bl	800a058 <prvInitialiseTaskLists>
 800980c:	e00d      	b.n	800982a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800980e:	4b26      	ldr	r3, [pc, #152]	; (80098a8 <prvAddNewTaskToReadyList+0xcc>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d109      	bne.n	800982a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009816:	4b23      	ldr	r3, [pc, #140]	; (80098a4 <prvAddNewTaskToReadyList+0xc8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	429a      	cmp	r2, r3
 8009822:	d802      	bhi.n	800982a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009824:	4a1f      	ldr	r2, [pc, #124]	; (80098a4 <prvAddNewTaskToReadyList+0xc8>)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800982a:	4b20      	ldr	r3, [pc, #128]	; (80098ac <prvAddNewTaskToReadyList+0xd0>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3301      	adds	r3, #1
 8009830:	4a1e      	ldr	r2, [pc, #120]	; (80098ac <prvAddNewTaskToReadyList+0xd0>)
 8009832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009834:	4b1d      	ldr	r3, [pc, #116]	; (80098ac <prvAddNewTaskToReadyList+0xd0>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009840:	4b1b      	ldr	r3, [pc, #108]	; (80098b0 <prvAddNewTaskToReadyList+0xd4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d903      	bls.n	8009850 <prvAddNewTaskToReadyList+0x74>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	4a18      	ldr	r2, [pc, #96]	; (80098b0 <prvAddNewTaskToReadyList+0xd4>)
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <prvAddNewTaskToReadyList+0xd8>)
 800985e:	441a      	add	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3304      	adds	r3, #4
 8009864:	4619      	mov	r1, r3
 8009866:	4610      	mov	r0, r2
 8009868:	f7fe fddb 	bl	8008422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800986c:	f001 fb42 	bl	800aef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009870:	4b0d      	ldr	r3, [pc, #52]	; (80098a8 <prvAddNewTaskToReadyList+0xcc>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00e      	beq.n	8009896 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <prvAddNewTaskToReadyList+0xc8>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	429a      	cmp	r2, r3
 8009884:	d207      	bcs.n	8009896 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <prvAddNewTaskToReadyList+0xdc>)
 8009888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20000eec 	.word	0x20000eec
 80098a4:	20000a18 	.word	0x20000a18
 80098a8:	20000ef8 	.word	0x20000ef8
 80098ac:	20000f08 	.word	0x20000f08
 80098b0:	20000ef4 	.word	0x20000ef4
 80098b4:	20000a1c 	.word	0x20000a1c
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d017      	beq.n	80098fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <vTaskDelay+0x60>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00a      	beq.n	80098ec <vTaskDelay+0x30>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	60bb      	str	r3, [r7, #8]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098ec:	f000 f88a 	bl	8009a04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098f0:	2100      	movs	r1, #0
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fdfc 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098f8:	f000 f892 	bl	8009a20 <xTaskResumeAll>
 80098fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d107      	bne.n	8009914 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009904:	4b06      	ldr	r3, [pc, #24]	; (8009920 <vTaskDelay+0x64>)
 8009906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009914:	bf00      	nop
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20000f14 	.word	0x20000f14
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	; 0x28
 8009928:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800992e:	2300      	movs	r3, #0
 8009930:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009932:	463a      	mov	r2, r7
 8009934:	1d39      	adds	r1, r7, #4
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fd10 	bl	8008360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	9202      	str	r2, [sp, #8]
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	2300      	movs	r3, #0
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	2300      	movs	r3, #0
 8009950:	460a      	mov	r2, r1
 8009952:	4924      	ldr	r1, [pc, #144]	; (80099e4 <vTaskStartScheduler+0xc0>)
 8009954:	4824      	ldr	r0, [pc, #144]	; (80099e8 <vTaskStartScheduler+0xc4>)
 8009956:	f7ff fdf9 	bl	800954c <xTaskCreateStatic>
 800995a:	4603      	mov	r3, r0
 800995c:	4a23      	ldr	r2, [pc, #140]	; (80099ec <vTaskStartScheduler+0xc8>)
 800995e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009960:	4b22      	ldr	r3, [pc, #136]	; (80099ec <vTaskStartScheduler+0xc8>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009968:	2301      	movs	r3, #1
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	e001      	b.n	8009972 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800996e:	2300      	movs	r3, #0
 8009970:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d102      	bne.n	800997e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009978:	f000 fe0e 	bl	800a598 <xTimerCreateTimerTask>
 800997c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d11b      	bne.n	80099bc <vTaskStartScheduler+0x98>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	613b      	str	r3, [r7, #16]
}
 8009996:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009998:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <vTaskStartScheduler+0xcc>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3354      	adds	r3, #84	; 0x54
 800999e:	4a15      	ldr	r2, [pc, #84]	; (80099f4 <vTaskStartScheduler+0xd0>)
 80099a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <vTaskStartScheduler+0xd4>)
 80099a4:	f04f 32ff 	mov.w	r2, #4294967295
 80099a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099aa:	4b14      	ldr	r3, [pc, #80]	; (80099fc <vTaskStartScheduler+0xd8>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099b0:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <vTaskStartScheduler+0xdc>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099b6:	f001 f9cb 	bl	800ad50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099ba:	e00e      	b.n	80099da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d10a      	bne.n	80099da <vTaskStartScheduler+0xb6>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	60fb      	str	r3, [r7, #12]
}
 80099d6:	bf00      	nop
 80099d8:	e7fe      	b.n	80099d8 <vTaskStartScheduler+0xb4>
}
 80099da:	bf00      	nop
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	0800b73c 	.word	0x0800b73c
 80099e8:	0800a029 	.word	0x0800a029
 80099ec:	20000f10 	.word	0x20000f10
 80099f0:	20000a18 	.word	0x20000a18
 80099f4:	2000005c 	.word	0x2000005c
 80099f8:	20000f0c 	.word	0x20000f0c
 80099fc:	20000ef8 	.word	0x20000ef8
 8009a00:	20000ef0 	.word	0x20000ef0

08009a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a08:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <vTaskSuspendAll+0x18>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	4a03      	ldr	r2, [pc, #12]	; (8009a1c <vTaskSuspendAll+0x18>)
 8009a10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a12:	bf00      	nop
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	20000f14 	.word	0x20000f14

08009a20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a2e:	4b42      	ldr	r3, [pc, #264]	; (8009b38 <xTaskResumeAll+0x118>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <xTaskResumeAll+0x2c>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	603b      	str	r3, [r7, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	e7fe      	b.n	8009a4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a4c:	f001 fa22 	bl	800ae94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a50:	4b39      	ldr	r3, [pc, #228]	; (8009b38 <xTaskResumeAll+0x118>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	4a38      	ldr	r2, [pc, #224]	; (8009b38 <xTaskResumeAll+0x118>)
 8009a58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a5a:	4b37      	ldr	r3, [pc, #220]	; (8009b38 <xTaskResumeAll+0x118>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d162      	bne.n	8009b28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a62:	4b36      	ldr	r3, [pc, #216]	; (8009b3c <xTaskResumeAll+0x11c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d05e      	beq.n	8009b28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a6a:	e02f      	b.n	8009acc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6c:	4b34      	ldr	r3, [pc, #208]	; (8009b40 <xTaskResumeAll+0x120>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3318      	adds	r3, #24
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe fd2f 	bl	80084dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fd2a 	bl	80084dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8c:	4b2d      	ldr	r3, [pc, #180]	; (8009b44 <xTaskResumeAll+0x124>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d903      	bls.n	8009a9c <xTaskResumeAll+0x7c>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	4a2a      	ldr	r2, [pc, #168]	; (8009b44 <xTaskResumeAll+0x124>)
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4a27      	ldr	r2, [pc, #156]	; (8009b48 <xTaskResumeAll+0x128>)
 8009aaa:	441a      	add	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	f7fe fcb5 	bl	8008422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abc:	4b23      	ldr	r3, [pc, #140]	; (8009b4c <xTaskResumeAll+0x12c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d302      	bcc.n	8009acc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ac6:	4b22      	ldr	r3, [pc, #136]	; (8009b50 <xTaskResumeAll+0x130>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009acc:	4b1c      	ldr	r3, [pc, #112]	; (8009b40 <xTaskResumeAll+0x120>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1cb      	bne.n	8009a6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ada:	f000 fb5f 	bl	800a19c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ade:	4b1d      	ldr	r3, [pc, #116]	; (8009b54 <xTaskResumeAll+0x134>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d010      	beq.n	8009b0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009aea:	f000 f847 	bl	8009b7c <xTaskIncrementTick>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009af4:	4b16      	ldr	r3, [pc, #88]	; (8009b50 <xTaskResumeAll+0x130>)
 8009af6:	2201      	movs	r2, #1
 8009af8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1f1      	bne.n	8009aea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b06:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <xTaskResumeAll+0x134>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b0c:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <xTaskResumeAll+0x130>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d009      	beq.n	8009b28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b14:	2301      	movs	r3, #1
 8009b16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b18:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <xTaskResumeAll+0x138>)
 8009b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b28:	f001 f9e4 	bl	800aef4 <vPortExitCritical>

	return xAlreadyYielded;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000f14 	.word	0x20000f14
 8009b3c:	20000eec 	.word	0x20000eec
 8009b40:	20000eac 	.word	0x20000eac
 8009b44:	20000ef4 	.word	0x20000ef4
 8009b48:	20000a1c 	.word	0x20000a1c
 8009b4c:	20000a18 	.word	0x20000a18
 8009b50:	20000f00 	.word	0x20000f00
 8009b54:	20000efc 	.word	0x20000efc
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <xTaskGetTickCount+0x1c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b68:	687b      	ldr	r3, [r7, #4]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000ef0 	.word	0x20000ef0

08009b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b86:	4b4f      	ldr	r3, [pc, #316]	; (8009cc4 <xTaskIncrementTick+0x148>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f040 808f 	bne.w	8009cae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b90:	4b4d      	ldr	r3, [pc, #308]	; (8009cc8 <xTaskIncrementTick+0x14c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3301      	adds	r3, #1
 8009b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b98:	4a4b      	ldr	r2, [pc, #300]	; (8009cc8 <xTaskIncrementTick+0x14c>)
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d120      	bne.n	8009be6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ba4:	4b49      	ldr	r3, [pc, #292]	; (8009ccc <xTaskIncrementTick+0x150>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	603b      	str	r3, [r7, #0]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <xTaskIncrementTick+0x46>
 8009bc4:	4b41      	ldr	r3, [pc, #260]	; (8009ccc <xTaskIncrementTick+0x150>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	4b41      	ldr	r3, [pc, #260]	; (8009cd0 <xTaskIncrementTick+0x154>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a3f      	ldr	r2, [pc, #252]	; (8009ccc <xTaskIncrementTick+0x150>)
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	4a3f      	ldr	r2, [pc, #252]	; (8009cd0 <xTaskIncrementTick+0x154>)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	4b3e      	ldr	r3, [pc, #248]	; (8009cd4 <xTaskIncrementTick+0x158>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	4a3d      	ldr	r2, [pc, #244]	; (8009cd4 <xTaskIncrementTick+0x158>)
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	f000 fadb 	bl	800a19c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009be6:	4b3c      	ldr	r3, [pc, #240]	; (8009cd8 <xTaskIncrementTick+0x15c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d349      	bcc.n	8009c84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bf0:	4b36      	ldr	r3, [pc, #216]	; (8009ccc <xTaskIncrementTick+0x150>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d104      	bne.n	8009c04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bfa:	4b37      	ldr	r3, [pc, #220]	; (8009cd8 <xTaskIncrementTick+0x15c>)
 8009bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009c00:	601a      	str	r2, [r3, #0]
					break;
 8009c02:	e03f      	b.n	8009c84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c04:	4b31      	ldr	r3, [pc, #196]	; (8009ccc <xTaskIncrementTick+0x150>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d203      	bcs.n	8009c24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c1c:	4a2e      	ldr	r2, [pc, #184]	; (8009cd8 <xTaskIncrementTick+0x15c>)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c22:	e02f      	b.n	8009c84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe fc57 	bl	80084dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d004      	beq.n	8009c40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	3318      	adds	r3, #24
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe fc4e 	bl	80084dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c44:	4b25      	ldr	r3, [pc, #148]	; (8009cdc <xTaskIncrementTick+0x160>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d903      	bls.n	8009c54 <xTaskIncrementTick+0xd8>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	4a22      	ldr	r2, [pc, #136]	; (8009cdc <xTaskIncrementTick+0x160>)
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4a1f      	ldr	r2, [pc, #124]	; (8009ce0 <xTaskIncrementTick+0x164>)
 8009c62:	441a      	add	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fe fbd9 	bl	8008422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	4b1b      	ldr	r3, [pc, #108]	; (8009ce4 <xTaskIncrementTick+0x168>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d3b8      	bcc.n	8009bf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c82:	e7b5      	b.n	8009bf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c84:	4b17      	ldr	r3, [pc, #92]	; (8009ce4 <xTaskIncrementTick+0x168>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8a:	4915      	ldr	r1, [pc, #84]	; (8009ce0 <xTaskIncrementTick+0x164>)
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	440b      	add	r3, r1
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d901      	bls.n	8009ca0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ca0:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <xTaskIncrementTick+0x16c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d007      	beq.n	8009cb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	e004      	b.n	8009cb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cae:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <xTaskIncrementTick+0x170>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	4a0d      	ldr	r2, [pc, #52]	; (8009cec <xTaskIncrementTick+0x170>)
 8009cb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cb8:	697b      	ldr	r3, [r7, #20]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000f14 	.word	0x20000f14
 8009cc8:	20000ef0 	.word	0x20000ef0
 8009ccc:	20000ea4 	.word	0x20000ea4
 8009cd0:	20000ea8 	.word	0x20000ea8
 8009cd4:	20000f04 	.word	0x20000f04
 8009cd8:	20000f0c 	.word	0x20000f0c
 8009cdc:	20000ef4 	.word	0x20000ef4
 8009ce0:	20000a1c 	.word	0x20000a1c
 8009ce4:	20000a18 	.word	0x20000a18
 8009ce8:	20000f00 	.word	0x20000f00
 8009cec:	20000efc 	.word	0x20000efc

08009cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cf6:	4b2a      	ldr	r3, [pc, #168]	; (8009da0 <vTaskSwitchContext+0xb0>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cfe:	4b29      	ldr	r3, [pc, #164]	; (8009da4 <vTaskSwitchContext+0xb4>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d04:	e046      	b.n	8009d94 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009d06:	4b27      	ldr	r3, [pc, #156]	; (8009da4 <vTaskSwitchContext+0xb4>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d0c:	4b26      	ldr	r3, [pc, #152]	; (8009da8 <vTaskSwitchContext+0xb8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60fb      	str	r3, [r7, #12]
 8009d12:	e010      	b.n	8009d36 <vTaskSwitchContext+0x46>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	607b      	str	r3, [r7, #4]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <vTaskSwitchContext+0x3e>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	491d      	ldr	r1, [pc, #116]	; (8009dac <vTaskSwitchContext+0xbc>)
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	440b      	add	r3, r1
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0e4      	beq.n	8009d14 <vTaskSwitchContext+0x24>
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4a15      	ldr	r2, [pc, #84]	; (8009dac <vTaskSwitchContext+0xbc>)
 8009d56:	4413      	add	r3, r2
 8009d58:	60bb      	str	r3, [r7, #8]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	605a      	str	r2, [r3, #4]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	3308      	adds	r3, #8
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d104      	bne.n	8009d7a <vTaskSwitchContext+0x8a>
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	605a      	str	r2, [r3, #4]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	4a0b      	ldr	r2, [pc, #44]	; (8009db0 <vTaskSwitchContext+0xc0>)
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	4a08      	ldr	r2, [pc, #32]	; (8009da8 <vTaskSwitchContext+0xb8>)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d8a:	4b09      	ldr	r3, [pc, #36]	; (8009db0 <vTaskSwitchContext+0xc0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3354      	adds	r3, #84	; 0x54
 8009d90:	4a08      	ldr	r2, [pc, #32]	; (8009db4 <vTaskSwitchContext+0xc4>)
 8009d92:	6013      	str	r3, [r2, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20000f14 	.word	0x20000f14
 8009da4:	20000f00 	.word	0x20000f00
 8009da8:	20000ef4 	.word	0x20000ef4
 8009dac:	20000a1c 	.word	0x20000a1c
 8009db0:	20000a18 	.word	0x20000a18
 8009db4:	2000005c 	.word	0x2000005c

08009db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	60fb      	str	r3, [r7, #12]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dde:	4b07      	ldr	r3, [pc, #28]	; (8009dfc <vTaskPlaceOnEventList+0x44>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3318      	adds	r3, #24
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fe fb3f 	bl	800846a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009dec:	2101      	movs	r1, #1
 8009dee:	6838      	ldr	r0, [r7, #0]
 8009df0:	f000 fb7e 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
}
 8009df4:	bf00      	nop
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20000a18 	.word	0x20000a18

08009e00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	617b      	str	r3, [r7, #20]
}
 8009e24:	bf00      	nop
 8009e26:	e7fe      	b.n	8009e26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e28:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3318      	adds	r3, #24
 8009e2e:	4619      	mov	r1, r3
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7fe faf6 	bl	8008422 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	68b8      	ldr	r0, [r7, #8]
 8009e46:	f000 fb53 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
	}
 8009e4a:	bf00      	nop
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000a18 	.word	0x20000a18

08009e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10a      	bne.n	8009e84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	60fb      	str	r3, [r7, #12]
}
 8009e80:	bf00      	nop
 8009e82:	e7fe      	b.n	8009e82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	3318      	adds	r3, #24
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe fb27 	bl	80084dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e8e:	4b1e      	ldr	r3, [pc, #120]	; (8009f08 <xTaskRemoveFromEventList+0xb0>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d11d      	bne.n	8009ed2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fb1e 	bl	80084dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4b19      	ldr	r3, [pc, #100]	; (8009f0c <xTaskRemoveFromEventList+0xb4>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d903      	bls.n	8009eb4 <xTaskRemoveFromEventList+0x5c>
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	4a16      	ldr	r2, [pc, #88]	; (8009f0c <xTaskRemoveFromEventList+0xb4>)
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4a13      	ldr	r2, [pc, #76]	; (8009f10 <xTaskRemoveFromEventList+0xb8>)
 8009ec2:	441a      	add	r2, r3
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	f7fe faa9 	bl	8008422 <vListInsertEnd>
 8009ed0:	e005      	b.n	8009ede <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	3318      	adds	r3, #24
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	480e      	ldr	r0, [pc, #56]	; (8009f14 <xTaskRemoveFromEventList+0xbc>)
 8009eda:	f7fe faa2 	bl	8008422 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee2:	4b0d      	ldr	r3, [pc, #52]	; (8009f18 <xTaskRemoveFromEventList+0xc0>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d905      	bls.n	8009ef8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009eec:	2301      	movs	r3, #1
 8009eee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ef0:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <xTaskRemoveFromEventList+0xc4>)
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	e001      	b.n	8009efc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009efc:	697b      	ldr	r3, [r7, #20]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20000f14 	.word	0x20000f14
 8009f0c:	20000ef4 	.word	0x20000ef4
 8009f10:	20000a1c 	.word	0x20000a1c
 8009f14:	20000eac 	.word	0x20000eac
 8009f18:	20000a18 	.word	0x20000a18
 8009f1c:	20000f00 	.word	0x20000f00

08009f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f28:	4b06      	ldr	r3, [pc, #24]	; (8009f44 <vTaskInternalSetTimeOutState+0x24>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f30:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <vTaskInternalSetTimeOutState+0x28>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	605a      	str	r2, [r3, #4]
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	20000f04 	.word	0x20000f04
 8009f48:	20000ef0 	.word	0x20000ef0

08009f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b088      	sub	sp, #32
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	613b      	str	r3, [r7, #16]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f8e:	f000 ff81 	bl	800ae94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f92:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <xTaskCheckForTimeOut+0xbc>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	69ba      	ldr	r2, [r7, #24]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009faa:	d102      	bne.n	8009fb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fac:	2300      	movs	r3, #0
 8009fae:	61fb      	str	r3, [r7, #28]
 8009fb0:	e023      	b.n	8009ffa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	4b15      	ldr	r3, [pc, #84]	; (800a00c <xTaskCheckForTimeOut+0xc0>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d007      	beq.n	8009fce <xTaskCheckForTimeOut+0x82>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d302      	bcc.n	8009fce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	61fb      	str	r3, [r7, #28]
 8009fcc:	e015      	b.n	8009ffa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d20b      	bcs.n	8009ff0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	1ad2      	subs	r2, r2, r3
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff ff9b 	bl	8009f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fea:	2300      	movs	r3, #0
 8009fec:	61fb      	str	r3, [r7, #28]
 8009fee:	e004      	b.n	8009ffa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ffa:	f000 ff7b 	bl	800aef4 <vPortExitCritical>

	return xReturn;
 8009ffe:	69fb      	ldr	r3, [r7, #28]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3720      	adds	r7, #32
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000ef0 	.word	0x20000ef0
 800a00c:	20000f04 	.word	0x20000f04

0800a010 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a010:	b480      	push	{r7}
 800a012:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a014:	4b03      	ldr	r3, [pc, #12]	; (800a024 <vTaskMissedYield+0x14>)
 800a016:	2201      	movs	r2, #1
 800a018:	601a      	str	r2, [r3, #0]
}
 800a01a:	bf00      	nop
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	20000f00 	.word	0x20000f00

0800a028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a030:	f000 f852 	bl	800a0d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a034:	4b06      	ldr	r3, [pc, #24]	; (800a050 <prvIdleTask+0x28>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d9f9      	bls.n	800a030 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a03c:	4b05      	ldr	r3, [pc, #20]	; (800a054 <prvIdleTask+0x2c>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a04c:	e7f0      	b.n	800a030 <prvIdleTask+0x8>
 800a04e:	bf00      	nop
 800a050:	20000a1c 	.word	0x20000a1c
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a05e:	2300      	movs	r3, #0
 800a060:	607b      	str	r3, [r7, #4]
 800a062:	e00c      	b.n	800a07e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	4613      	mov	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4a12      	ldr	r2, [pc, #72]	; (800a0b8 <prvInitialiseTaskLists+0x60>)
 800a070:	4413      	add	r3, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe f9a8 	bl	80083c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3301      	adds	r3, #1
 800a07c:	607b      	str	r3, [r7, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b37      	cmp	r3, #55	; 0x37
 800a082:	d9ef      	bls.n	800a064 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a084:	480d      	ldr	r0, [pc, #52]	; (800a0bc <prvInitialiseTaskLists+0x64>)
 800a086:	f7fe f99f 	bl	80083c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a08a:	480d      	ldr	r0, [pc, #52]	; (800a0c0 <prvInitialiseTaskLists+0x68>)
 800a08c:	f7fe f99c 	bl	80083c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a090:	480c      	ldr	r0, [pc, #48]	; (800a0c4 <prvInitialiseTaskLists+0x6c>)
 800a092:	f7fe f999 	bl	80083c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a096:	480c      	ldr	r0, [pc, #48]	; (800a0c8 <prvInitialiseTaskLists+0x70>)
 800a098:	f7fe f996 	bl	80083c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a09c:	480b      	ldr	r0, [pc, #44]	; (800a0cc <prvInitialiseTaskLists+0x74>)
 800a09e:	f7fe f993 	bl	80083c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0a2:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <prvInitialiseTaskLists+0x78>)
 800a0a4:	4a05      	ldr	r2, [pc, #20]	; (800a0bc <prvInitialiseTaskLists+0x64>)
 800a0a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0a8:	4b0a      	ldr	r3, [pc, #40]	; (800a0d4 <prvInitialiseTaskLists+0x7c>)
 800a0aa:	4a05      	ldr	r2, [pc, #20]	; (800a0c0 <prvInitialiseTaskLists+0x68>)
 800a0ac:	601a      	str	r2, [r3, #0]
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000a1c 	.word	0x20000a1c
 800a0bc:	20000e7c 	.word	0x20000e7c
 800a0c0:	20000e90 	.word	0x20000e90
 800a0c4:	20000eac 	.word	0x20000eac
 800a0c8:	20000ec0 	.word	0x20000ec0
 800a0cc:	20000ed8 	.word	0x20000ed8
 800a0d0:	20000ea4 	.word	0x20000ea4
 800a0d4:	20000ea8 	.word	0x20000ea8

0800a0d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0de:	e019      	b.n	800a114 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0e0:	f000 fed8 	bl	800ae94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e4:	4b10      	ldr	r3, [pc, #64]	; (800a128 <prvCheckTasksWaitingTermination+0x50>)
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe f9f3 	bl	80084dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <prvCheckTasksWaitingTermination+0x54>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	4a0b      	ldr	r2, [pc, #44]	; (800a12c <prvCheckTasksWaitingTermination+0x54>)
 800a0fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a100:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <prvCheckTasksWaitingTermination+0x58>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3b01      	subs	r3, #1
 800a106:	4a0a      	ldr	r2, [pc, #40]	; (800a130 <prvCheckTasksWaitingTermination+0x58>)
 800a108:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a10a:	f000 fef3 	bl	800aef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f810 	bl	800a134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a114:	4b06      	ldr	r3, [pc, #24]	; (800a130 <prvCheckTasksWaitingTermination+0x58>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1e1      	bne.n	800a0e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20000ec0 	.word	0x20000ec0
 800a12c:	20000eec 	.word	0x20000eec
 800a130:	20000ed4 	.word	0x20000ed4

0800a134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3354      	adds	r3, #84	; 0x54
 800a140:	4618      	mov	r0, r3
 800a142:	f001 f9bb 	bl	800b4bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d108      	bne.n	800a162 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a154:	4618      	mov	r0, r3
 800a156:	f001 f88b 	bl	800b270 <vPortFree>
				vPortFree( pxTCB );
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 f888 	bl	800b270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a160:	e018      	b.n	800a194 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d103      	bne.n	800a174 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 f87f 	bl	800b270 <vPortFree>
	}
 800a172:	e00f      	b.n	800a194 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d00a      	beq.n	800a194 <prvDeleteTCB+0x60>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	60fb      	str	r3, [r7, #12]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <prvDeleteTCB+0x5e>
	}
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <prvResetNextTaskUnblockTime+0x38>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d104      	bne.n	800a1b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1b4:	e008      	b.n	800a1c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b6:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <prvResetNextTaskUnblockTime+0x38>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	4a04      	ldr	r2, [pc, #16]	; (800a1d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1c6:	6013      	str	r3, [r2, #0]
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	20000ea4 	.word	0x20000ea4
 800a1d8:	20000f0c 	.word	0x20000f0c

0800a1dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1e2:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <xTaskGetSchedulerState+0x34>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	607b      	str	r3, [r7, #4]
 800a1ee:	e008      	b.n	800a202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f0:	4b08      	ldr	r3, [pc, #32]	; (800a214 <xTaskGetSchedulerState+0x38>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	607b      	str	r3, [r7, #4]
 800a1fc:	e001      	b.n	800a202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1fe:	2300      	movs	r3, #0
 800a200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a202:	687b      	ldr	r3, [r7, #4]
	}
 800a204:	4618      	mov	r0, r3
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	20000ef8 	.word	0x20000ef8
 800a214:	20000f14 	.word	0x20000f14

0800a218 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a224:	2300      	movs	r3, #0
 800a226:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d051      	beq.n	800a2d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	4b2a      	ldr	r3, [pc, #168]	; (800a2dc <xTaskPriorityInherit+0xc4>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	429a      	cmp	r2, r3
 800a23a:	d241      	bcs.n	800a2c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	db06      	blt.n	800a252 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a244:	4b25      	ldr	r3, [pc, #148]	; (800a2dc <xTaskPriorityInherit+0xc4>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	6959      	ldr	r1, [r3, #20]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25a:	4613      	mov	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4a1f      	ldr	r2, [pc, #124]	; (800a2e0 <xTaskPriorityInherit+0xc8>)
 800a264:	4413      	add	r3, r2
 800a266:	4299      	cmp	r1, r3
 800a268:	d122      	bne.n	800a2b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe f934 	bl	80084dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a274:	4b19      	ldr	r3, [pc, #100]	; (800a2dc <xTaskPriorityInherit+0xc4>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a282:	4b18      	ldr	r3, [pc, #96]	; (800a2e4 <xTaskPriorityInherit+0xcc>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d903      	bls.n	800a292 <xTaskPriorityInherit+0x7a>
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	4a15      	ldr	r2, [pc, #84]	; (800a2e4 <xTaskPriorityInherit+0xcc>)
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4a10      	ldr	r2, [pc, #64]	; (800a2e0 <xTaskPriorityInherit+0xc8>)
 800a2a0:	441a      	add	r2, r3
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	f7fe f8ba 	bl	8008422 <vListInsertEnd>
 800a2ae:	e004      	b.n	800a2ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2b0:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <xTaskPriorityInherit+0xc4>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	e008      	b.n	800a2d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2c4:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <xTaskPriorityInherit+0xc4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d201      	bcs.n	800a2d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
	}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20000a18 	.word	0x20000a18
 800a2e0:	20000a1c 	.word	0x20000a1c
 800a2e4:	20000ef4 	.word	0x20000ef4

0800a2e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d056      	beq.n	800a3ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2fe:	4b2e      	ldr	r3, [pc, #184]	; (800a3b8 <xTaskPriorityDisinherit+0xd0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	429a      	cmp	r2, r3
 800a306:	d00a      	beq.n	800a31e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	60fb      	str	r3, [r7, #12]
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10a      	bne.n	800a33c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	60bb      	str	r3, [r7, #8]
}
 800a338:	bf00      	nop
 800a33a:	e7fe      	b.n	800a33a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a340:	1e5a      	subs	r2, r3, #1
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34e:	429a      	cmp	r2, r3
 800a350:	d02c      	beq.n	800a3ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a356:	2b00      	cmp	r3, #0
 800a358:	d128      	bne.n	800a3ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	3304      	adds	r3, #4
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe f8bc 	bl	80084dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a37c:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <xTaskPriorityDisinherit+0xd4>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	429a      	cmp	r2, r3
 800a382:	d903      	bls.n	800a38c <xTaskPriorityDisinherit+0xa4>
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	4a0c      	ldr	r2, [pc, #48]	; (800a3bc <xTaskPriorityDisinherit+0xd4>)
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <xTaskPriorityDisinherit+0xd8>)
 800a39a:	441a      	add	r2, r3
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	f7fe f83d 	bl	8008422 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3ac:	697b      	ldr	r3, [r7, #20]
	}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20000a18 	.word	0x20000a18
 800a3bc:	20000ef4 	.word	0x20000ef4
 800a3c0:	20000a1c 	.word	0x20000a1c

0800a3c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d06a      	beq.n	800a4b2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10a      	bne.n	800a3fa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	60fb      	str	r3, [r7, #12]
}
 800a3f6:	bf00      	nop
 800a3f8:	e7fe      	b.n	800a3f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d902      	bls.n	800a40a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	61fb      	str	r3, [r7, #28]
 800a408:	e002      	b.n	800a410 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a40e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	69fa      	ldr	r2, [r7, #28]
 800a416:	429a      	cmp	r2, r3
 800a418:	d04b      	beq.n	800a4b2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	429a      	cmp	r2, r3
 800a422:	d146      	bne.n	800a4b2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a424:	4b25      	ldr	r3, [pc, #148]	; (800a4bc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d10a      	bne.n	800a444 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	60bb      	str	r3, [r7, #8]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a448:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	db04      	blt.n	800a462 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	6959      	ldr	r1, [r3, #20]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	4613      	mov	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4a13      	ldr	r2, [pc, #76]	; (800a4c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a472:	4413      	add	r3, r2
 800a474:	4299      	cmp	r1, r3
 800a476:	d11c      	bne.n	800a4b2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe f82d 	bl	80084dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a486:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d903      	bls.n	800a496 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a492:	4a0c      	ldr	r2, [pc, #48]	; (800a4c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4a07      	ldr	r2, [pc, #28]	; (800a4c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a4a4:	441a      	add	r2, r3
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	f7fd ffb8 	bl	8008422 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4b2:	bf00      	nop
 800a4b4:	3720      	adds	r7, #32
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000a18 	.word	0x20000a18
 800a4c0:	20000a1c 	.word	0x20000a1c
 800a4c4:	20000ef4 	.word	0x20000ef4

0800a4c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d004      	beq.n	800a4de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4da:	3201      	adds	r2, #1
 800a4dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a4de:	4b03      	ldr	r3, [pc, #12]	; (800a4ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
	}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	20000a18 	.word	0x20000a18

0800a4f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4fa:	4b21      	ldr	r3, [pc, #132]	; (800a580 <prvAddCurrentTaskToDelayedList+0x90>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a500:	4b20      	ldr	r3, [pc, #128]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3304      	adds	r3, #4
 800a506:	4618      	mov	r0, r3
 800a508:	f7fd ffe8 	bl	80084dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a512:	d10a      	bne.n	800a52a <prvAddCurrentTaskToDelayedList+0x3a>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a51a:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3304      	adds	r3, #4
 800a520:	4619      	mov	r1, r3
 800a522:	4819      	ldr	r0, [pc, #100]	; (800a588 <prvAddCurrentTaskToDelayedList+0x98>)
 800a524:	f7fd ff7d 	bl	8008422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a528:	e026      	b.n	800a578 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4413      	add	r3, r2
 800a530:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a532:	4b14      	ldr	r3, [pc, #80]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d209      	bcs.n	800a556 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f7fd ff8b 	bl	800846a <vListInsert>
}
 800a554:	e010      	b.n	800a578 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a556:	4b0e      	ldr	r3, [pc, #56]	; (800a590 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	4b0a      	ldr	r3, [pc, #40]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3304      	adds	r3, #4
 800a560:	4619      	mov	r1, r3
 800a562:	4610      	mov	r0, r2
 800a564:	f7fd ff81 	bl	800846a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d202      	bcs.n	800a578 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a572:	4a08      	ldr	r2, [pc, #32]	; (800a594 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	6013      	str	r3, [r2, #0]
}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000ef0 	.word	0x20000ef0
 800a584:	20000a18 	.word	0x20000a18
 800a588:	20000ed8 	.word	0x20000ed8
 800a58c:	20000ea8 	.word	0x20000ea8
 800a590:	20000ea4 	.word	0x20000ea4
 800a594:	20000f0c 	.word	0x20000f0c

0800a598 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08a      	sub	sp, #40	; 0x28
 800a59c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5a2:	f000 fb07 	bl	800abb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5a6:	4b1c      	ldr	r3, [pc, #112]	; (800a618 <xTimerCreateTimerTask+0x80>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d021      	beq.n	800a5f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5b6:	1d3a      	adds	r2, r7, #4
 800a5b8:	f107 0108 	add.w	r1, r7, #8
 800a5bc:	f107 030c 	add.w	r3, r7, #12
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fd fee7 	bl	8008394 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	9202      	str	r2, [sp, #8]
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	460a      	mov	r2, r1
 800a5d8:	4910      	ldr	r1, [pc, #64]	; (800a61c <xTimerCreateTimerTask+0x84>)
 800a5da:	4811      	ldr	r0, [pc, #68]	; (800a620 <xTimerCreateTimerTask+0x88>)
 800a5dc:	f7fe ffb6 	bl	800954c <xTaskCreateStatic>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	4a10      	ldr	r2, [pc, #64]	; (800a624 <xTimerCreateTimerTask+0x8c>)
 800a5e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5e6:	4b0f      	ldr	r3, [pc, #60]	; (800a624 <xTimerCreateTimerTask+0x8c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	613b      	str	r3, [r7, #16]
}
 800a60a:	bf00      	nop
 800a60c:	e7fe      	b.n	800a60c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a60e:	697b      	ldr	r3, [r7, #20]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000f48 	.word	0x20000f48
 800a61c:	0800b744 	.word	0x0800b744
 800a620:	0800a75d 	.word	0x0800a75d
 800a624:	20000f4c 	.word	0x20000f4c

0800a628 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08a      	sub	sp, #40	; 0x28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a636:	2300      	movs	r3, #0
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	623b      	str	r3, [r7, #32]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a656:	4b1a      	ldr	r3, [pc, #104]	; (800a6c0 <xTimerGenericCommand+0x98>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d02a      	beq.n	800a6b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b05      	cmp	r3, #5
 800a66e:	dc18      	bgt.n	800a6a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a670:	f7ff fdb4 	bl	800a1dc <xTaskGetSchedulerState>
 800a674:	4603      	mov	r3, r0
 800a676:	2b02      	cmp	r3, #2
 800a678:	d109      	bne.n	800a68e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <xTimerGenericCommand+0x98>)
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	f107 0110 	add.w	r1, r7, #16
 800a682:	2300      	movs	r3, #0
 800a684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a686:	f7fe f8fb 	bl	8008880 <xQueueGenericSend>
 800a68a:	6278      	str	r0, [r7, #36]	; 0x24
 800a68c:	e012      	b.n	800a6b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a68e:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <xTimerGenericCommand+0x98>)
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f107 0110 	add.w	r1, r7, #16
 800a696:	2300      	movs	r3, #0
 800a698:	2200      	movs	r2, #0
 800a69a:	f7fe f8f1 	bl	8008880 <xQueueGenericSend>
 800a69e:	6278      	str	r0, [r7, #36]	; 0x24
 800a6a0:	e008      	b.n	800a6b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6a2:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <xTimerGenericCommand+0x98>)
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	f107 0110 	add.w	r1, r7, #16
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	f7fe f9e5 	bl	8008a7c <xQueueGenericSendFromISR>
 800a6b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3728      	adds	r7, #40	; 0x28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20000f48 	.word	0x20000f48

0800a6c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b088      	sub	sp, #32
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ce:	4b22      	ldr	r3, [pc, #136]	; (800a758 <prvProcessExpiredTimer+0x94>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fd fefd 	bl	80084dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d022      	beq.n	800a736 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	699a      	ldr	r2, [r3, #24]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	18d1      	adds	r1, r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	6978      	ldr	r0, [r7, #20]
 800a6fe:	f000 f8d1 	bl	800a8a4 <prvInsertTimerInActiveList>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01f      	beq.n	800a748 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a708:	2300      	movs	r3, #0
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	2300      	movs	r3, #0
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	2100      	movs	r1, #0
 800a712:	6978      	ldr	r0, [r7, #20]
 800a714:	f7ff ff88 	bl	800a628 <xTimerGenericCommand>
 800a718:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d113      	bne.n	800a748 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	60fb      	str	r3, [r7, #12]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a73c:	f023 0301 	bic.w	r3, r3, #1
 800a740:	b2da      	uxtb	r2, r3
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	6978      	ldr	r0, [r7, #20]
 800a74e:	4798      	blx	r3
}
 800a750:	bf00      	nop
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000f40 	.word	0x20000f40

0800a75c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a764:	f107 0308 	add.w	r3, r7, #8
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f857 	bl	800a81c <prvGetNextExpireTime>
 800a76e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4619      	mov	r1, r3
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f803 	bl	800a780 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a77a:	f000 f8d5 	bl	800a928 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a77e:	e7f1      	b.n	800a764 <prvTimerTask+0x8>

0800a780 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a78a:	f7ff f93b 	bl	8009a04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a78e:	f107 0308 	add.w	r3, r7, #8
 800a792:	4618      	mov	r0, r3
 800a794:	f000 f866 	bl	800a864 <prvSampleTimeNow>
 800a798:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d130      	bne.n	800a802 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10a      	bne.n	800a7bc <prvProcessTimerOrBlockTask+0x3c>
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d806      	bhi.n	800a7bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7ae:	f7ff f937 	bl	8009a20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7b2:	68f9      	ldr	r1, [r7, #12]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff ff85 	bl	800a6c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7ba:	e024      	b.n	800a806 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d008      	beq.n	800a7d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7c2:	4b13      	ldr	r3, [pc, #76]	; (800a810 <prvProcessTimerOrBlockTask+0x90>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <prvProcessTimerOrBlockTask+0x50>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e000      	b.n	800a7d2 <prvProcessTimerOrBlockTask+0x52>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7d4:	4b0f      	ldr	r3, [pc, #60]	; (800a814 <prvProcessTimerOrBlockTask+0x94>)
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	f7fe fe7f 	bl	80094e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7e6:	f7ff f91b 	bl	8009a20 <xTaskResumeAll>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10a      	bne.n	800a806 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7f0:	4b09      	ldr	r3, [pc, #36]	; (800a818 <prvProcessTimerOrBlockTask+0x98>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
}
 800a800:	e001      	b.n	800a806 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a802:	f7ff f90d 	bl	8009a20 <xTaskResumeAll>
}
 800a806:	bf00      	nop
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000f44 	.word	0x20000f44
 800a814:	20000f48 	.word	0x20000f48
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a824:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <prvGetNextExpireTime+0x44>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <prvGetNextExpireTime+0x16>
 800a82e:	2201      	movs	r2, #1
 800a830:	e000      	b.n	800a834 <prvGetNextExpireTime+0x18>
 800a832:	2200      	movs	r2, #0
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d105      	bne.n	800a84c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a840:	4b07      	ldr	r3, [pc, #28]	; (800a860 <prvGetNextExpireTime+0x44>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	e001      	b.n	800a850 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a850:	68fb      	ldr	r3, [r7, #12]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	20000f40 	.word	0x20000f40

0800a864 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a86c:	f7ff f976 	bl	8009b5c <xTaskGetTickCount>
 800a870:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a872:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <prvSampleTimeNow+0x3c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d205      	bcs.n	800a888 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a87c:	f000 f936 	bl	800aaec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	e002      	b.n	800a88e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a88e:	4a04      	ldr	r2, [pc, #16]	; (800a8a0 <prvSampleTimeNow+0x3c>)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a894:	68fb      	ldr	r3, [r7, #12]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20000f50 	.word	0x20000f50

0800a8a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d812      	bhi.n	800a8f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	1ad2      	subs	r2, r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d302      	bcc.n	800a8de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	e01b      	b.n	800a916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8de:	4b10      	ldr	r3, [pc, #64]	; (800a920 <prvInsertTimerInActiveList+0x7c>)
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	f7fd fdbe 	bl	800846a <vListInsert>
 800a8ee:	e012      	b.n	800a916 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d206      	bcs.n	800a906 <prvInsertTimerInActiveList+0x62>
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d302      	bcc.n	800a906 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a900:	2301      	movs	r3, #1
 800a902:	617b      	str	r3, [r7, #20]
 800a904:	e007      	b.n	800a916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a906:	4b07      	ldr	r3, [pc, #28]	; (800a924 <prvInsertTimerInActiveList+0x80>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3304      	adds	r3, #4
 800a90e:	4619      	mov	r1, r3
 800a910:	4610      	mov	r0, r2
 800a912:	f7fd fdaa 	bl	800846a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a916:	697b      	ldr	r3, [r7, #20]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20000f44 	.word	0x20000f44
 800a924:	20000f40 	.word	0x20000f40

0800a928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08e      	sub	sp, #56	; 0x38
 800a92c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a92e:	e0ca      	b.n	800aac6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	da18      	bge.n	800a968 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a936:	1d3b      	adds	r3, r7, #4
 800a938:	3304      	adds	r3, #4
 800a93a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	61fb      	str	r3, [r7, #28]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a95e:	6850      	ldr	r0, [r2, #4]
 800a960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a962:	6892      	ldr	r2, [r2, #8]
 800a964:	4611      	mov	r1, r2
 800a966:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f2c0 80ab 	blt.w	800aac6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	3304      	adds	r3, #4
 800a980:	4618      	mov	r0, r3
 800a982:	f7fd fdab 	bl	80084dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a986:	463b      	mov	r3, r7
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff ff6b 	bl	800a864 <prvSampleTimeNow>
 800a98e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b09      	cmp	r3, #9
 800a994:	f200 8096 	bhi.w	800aac4 <prvProcessReceivedCommands+0x19c>
 800a998:	a201      	add	r2, pc, #4	; (adr r2, 800a9a0 <prvProcessReceivedCommands+0x78>)
 800a99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99e:	bf00      	nop
 800a9a0:	0800a9c9 	.word	0x0800a9c9
 800a9a4:	0800a9c9 	.word	0x0800a9c9
 800a9a8:	0800a9c9 	.word	0x0800a9c9
 800a9ac:	0800aa3d 	.word	0x0800aa3d
 800a9b0:	0800aa51 	.word	0x0800aa51
 800a9b4:	0800aa9b 	.word	0x0800aa9b
 800a9b8:	0800a9c9 	.word	0x0800a9c9
 800a9bc:	0800a9c9 	.word	0x0800a9c9
 800a9c0:	0800aa3d 	.word	0x0800aa3d
 800a9c4:	0800aa51 	.word	0x0800aa51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ce:	f043 0301 	orr.w	r3, r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	18d1      	adds	r1, r2, r3
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e8:	f7ff ff5c 	bl	800a8a4 <prvInsertTimerInActiveList>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d069      	beq.n	800aac6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d05e      	beq.n	800aac6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	441a      	add	r2, r3
 800aa10:	2300      	movs	r3, #0
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	2300      	movs	r3, #0
 800aa16:	2100      	movs	r1, #0
 800aa18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa1a:	f7ff fe05 	bl	800a628 <xTimerGenericCommand>
 800aa1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d14f      	bne.n	800aac6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	61bb      	str	r3, [r7, #24]
}
 800aa38:	bf00      	nop
 800aa3a:	e7fe      	b.n	800aa3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa42:	f023 0301 	bic.w	r3, r3, #1
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa4e:	e03a      	b.n	800aac6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa56:	f043 0301 	orr.w	r3, r3, #1
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10a      	bne.n	800aa86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	617b      	str	r3, [r7, #20]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa88:	699a      	ldr	r2, [r3, #24]
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	18d1      	adds	r1, r2, r3
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa94:	f7ff ff06 	bl	800a8a4 <prvInsertTimerInActiveList>
					break;
 800aa98:	e015      	b.n	800aac6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaa0:	f003 0302 	and.w	r3, r3, #2
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d103      	bne.n	800aab0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aaa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaaa:	f000 fbe1 	bl	800b270 <vPortFree>
 800aaae:	e00a      	b.n	800aac6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab6:	f023 0301 	bic.w	r3, r3, #1
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aac2:	e000      	b.n	800aac6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800aac4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aac6:	4b08      	ldr	r3, [pc, #32]	; (800aae8 <prvProcessReceivedCommands+0x1c0>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	1d39      	adds	r1, r7, #4
 800aacc:	2200      	movs	r2, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fe f8fc 	bl	8008ccc <xQueueReceive>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f47f af2a 	bne.w	800a930 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aadc:	bf00      	nop
 800aade:	bf00      	nop
 800aae0:	3730      	adds	r7, #48	; 0x30
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20000f48 	.word	0x20000f48

0800aaec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aaf2:	e048      	b.n	800ab86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaf4:	4b2d      	ldr	r3, [pc, #180]	; (800abac <prvSwitchTimerLists+0xc0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aafe:	4b2b      	ldr	r3, [pc, #172]	; (800abac <prvSwitchTimerLists+0xc0>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fd fce5 	bl	80084dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d02e      	beq.n	800ab86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	4413      	add	r3, r2
 800ab30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d90e      	bls.n	800ab58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab46:	4b19      	ldr	r3, [pc, #100]	; (800abac <prvSwitchTimerLists+0xc0>)
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4610      	mov	r0, r2
 800ab52:	f7fd fc8a 	bl	800846a <vListInsert>
 800ab56:	e016      	b.n	800ab86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab58:	2300      	movs	r3, #0
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	2100      	movs	r1, #0
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f7ff fd60 	bl	800a628 <xTimerGenericCommand>
 800ab68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	603b      	str	r3, [r7, #0]
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <prvSwitchTimerLists+0xc0>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1b1      	bne.n	800aaf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab90:	4b06      	ldr	r3, [pc, #24]	; (800abac <prvSwitchTimerLists+0xc0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab96:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <prvSwitchTimerLists+0xc4>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a04      	ldr	r2, [pc, #16]	; (800abac <prvSwitchTimerLists+0xc0>)
 800ab9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab9e:	4a04      	ldr	r2, [pc, #16]	; (800abb0 <prvSwitchTimerLists+0xc4>)
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	6013      	str	r3, [r2, #0]
}
 800aba4:	bf00      	nop
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	20000f40 	.word	0x20000f40
 800abb0:	20000f44 	.word	0x20000f44

0800abb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abba:	f000 f96b 	bl	800ae94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abbe:	4b15      	ldr	r3, [pc, #84]	; (800ac14 <prvCheckForValidListAndQueue+0x60>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d120      	bne.n	800ac08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abc6:	4814      	ldr	r0, [pc, #80]	; (800ac18 <prvCheckForValidListAndQueue+0x64>)
 800abc8:	f7fd fbfe 	bl	80083c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abcc:	4813      	ldr	r0, [pc, #76]	; (800ac1c <prvCheckForValidListAndQueue+0x68>)
 800abce:	f7fd fbfb 	bl	80083c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abd2:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <prvCheckForValidListAndQueue+0x6c>)
 800abd4:	4a10      	ldr	r2, [pc, #64]	; (800ac18 <prvCheckForValidListAndQueue+0x64>)
 800abd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abd8:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <prvCheckForValidListAndQueue+0x70>)
 800abda:	4a10      	ldr	r2, [pc, #64]	; (800ac1c <prvCheckForValidListAndQueue+0x68>)
 800abdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abde:	2300      	movs	r3, #0
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	4b11      	ldr	r3, [pc, #68]	; (800ac28 <prvCheckForValidListAndQueue+0x74>)
 800abe4:	4a11      	ldr	r2, [pc, #68]	; (800ac2c <prvCheckForValidListAndQueue+0x78>)
 800abe6:	2110      	movs	r1, #16
 800abe8:	200a      	movs	r0, #10
 800abea:	f7fd fd09 	bl	8008600 <xQueueGenericCreateStatic>
 800abee:	4603      	mov	r3, r0
 800abf0:	4a08      	ldr	r2, [pc, #32]	; (800ac14 <prvCheckForValidListAndQueue+0x60>)
 800abf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800abf4:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <prvCheckForValidListAndQueue+0x60>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d005      	beq.n	800ac08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <prvCheckForValidListAndQueue+0x60>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	490b      	ldr	r1, [pc, #44]	; (800ac30 <prvCheckForValidListAndQueue+0x7c>)
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe fc1a 	bl	800943c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac08:	f000 f974 	bl	800aef4 <vPortExitCritical>
}
 800ac0c:	bf00      	nop
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20000f48 	.word	0x20000f48
 800ac18:	20000f18 	.word	0x20000f18
 800ac1c:	20000f2c 	.word	0x20000f2c
 800ac20:	20000f40 	.word	0x20000f40
 800ac24:	20000f44 	.word	0x20000f44
 800ac28:	20000ff4 	.word	0x20000ff4
 800ac2c:	20000f54 	.word	0x20000f54
 800ac30:	0800b74c 	.word	0x0800b74c

0800ac34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3b04      	subs	r3, #4
 800ac44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3b04      	subs	r3, #4
 800ac52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	f023 0201 	bic.w	r2, r3, #1
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3b04      	subs	r3, #4
 800ac62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac64:	4a0c      	ldr	r2, [pc, #48]	; (800ac98 <pxPortInitialiseStack+0x64>)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3b14      	subs	r3, #20
 800ac6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3b04      	subs	r3, #4
 800ac7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f06f 0202 	mvn.w	r2, #2
 800ac82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3b20      	subs	r3, #32
 800ac88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	0800ac9d 	.word	0x0800ac9d

0800ac9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aca6:	4b12      	ldr	r3, [pc, #72]	; (800acf0 <prvTaskExitError+0x54>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acae:	d00a      	beq.n	800acc6 <prvTaskExitError+0x2a>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	60fb      	str	r3, [r7, #12]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <prvTaskExitError+0x28>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60bb      	str	r3, [r7, #8]
}
 800acd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acda:	bf00      	nop
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0fc      	beq.n	800acdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ace2:	bf00      	nop
 800ace4:	bf00      	nop
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	2000000c 	.word	0x2000000c
	...

0800ad00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <pxCurrentTCBConst2>)
 800ad02:	6819      	ldr	r1, [r3, #0]
 800ad04:	6808      	ldr	r0, [r1, #0]
 800ad06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0a:	f380 8809 	msr	PSP, r0
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f04f 0000 	mov.w	r0, #0
 800ad16:	f380 8811 	msr	BASEPRI, r0
 800ad1a:	4770      	bx	lr
 800ad1c:	f3af 8000 	nop.w

0800ad20 <pxCurrentTCBConst2>:
 800ad20:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop

0800ad28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad28:	4808      	ldr	r0, [pc, #32]	; (800ad4c <prvPortStartFirstTask+0x24>)
 800ad2a:	6800      	ldr	r0, [r0, #0]
 800ad2c:	6800      	ldr	r0, [r0, #0]
 800ad2e:	f380 8808 	msr	MSP, r0
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8814 	msr	CONTROL, r0
 800ad3a:	b662      	cpsie	i
 800ad3c:	b661      	cpsie	f
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	df00      	svc	0
 800ad48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad4a:	bf00      	nop
 800ad4c:	e000ed08 	.word	0xe000ed08

0800ad50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad56:	4b46      	ldr	r3, [pc, #280]	; (800ae70 <xPortStartScheduler+0x120>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a46      	ldr	r2, [pc, #280]	; (800ae74 <xPortStartScheduler+0x124>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d10a      	bne.n	800ad76 <xPortStartScheduler+0x26>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	613b      	str	r3, [r7, #16]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad76:	4b3e      	ldr	r3, [pc, #248]	; (800ae70 <xPortStartScheduler+0x120>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a3f      	ldr	r2, [pc, #252]	; (800ae78 <xPortStartScheduler+0x128>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d10a      	bne.n	800ad96 <xPortStartScheduler+0x46>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	60fb      	str	r3, [r7, #12]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad96:	4b39      	ldr	r3, [pc, #228]	; (800ae7c <xPortStartScheduler+0x12c>)
 800ad98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	4b31      	ldr	r3, [pc, #196]	; (800ae80 <xPortStartScheduler+0x130>)
 800adbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adbe:	4b31      	ldr	r3, [pc, #196]	; (800ae84 <xPortStartScheduler+0x134>)
 800adc0:	2207      	movs	r2, #7
 800adc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adc4:	e009      	b.n	800adda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800adc6:	4b2f      	ldr	r3, [pc, #188]	; (800ae84 <xPortStartScheduler+0x134>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3b01      	subs	r3, #1
 800adcc:	4a2d      	ldr	r2, [pc, #180]	; (800ae84 <xPortStartScheduler+0x134>)
 800adce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	b2db      	uxtb	r3, r3
 800add8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adda:	78fb      	ldrb	r3, [r7, #3]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade2:	2b80      	cmp	r3, #128	; 0x80
 800ade4:	d0ef      	beq.n	800adc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ade6:	4b27      	ldr	r3, [pc, #156]	; (800ae84 <xPortStartScheduler+0x134>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f1c3 0307 	rsb	r3, r3, #7
 800adee:	2b04      	cmp	r3, #4
 800adf0:	d00a      	beq.n	800ae08 <xPortStartScheduler+0xb8>
	__asm volatile
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	60bb      	str	r3, [r7, #8]
}
 800ae04:	bf00      	nop
 800ae06:	e7fe      	b.n	800ae06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae08:	4b1e      	ldr	r3, [pc, #120]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	4a1d      	ldr	r2, [pc, #116]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae1a:	4a1a      	ldr	r2, [pc, #104]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae26:	4b18      	ldr	r3, [pc, #96]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a17      	ldr	r2, [pc, #92]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae32:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a14      	ldr	r2, [pc, #80]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae3e:	f000 f8dd 	bl	800affc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae42:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <xPortStartScheduler+0x13c>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae48:	f000 f8fc 	bl	800b044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae4c:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <xPortStartScheduler+0x140>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a0f      	ldr	r2, [pc, #60]	; (800ae90 <xPortStartScheduler+0x140>)
 800ae52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae58:	f7ff ff66 	bl	800ad28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae5c:	f7fe ff48 	bl	8009cf0 <vTaskSwitchContext>
	prvTaskExitError();
 800ae60:	f7ff ff1c 	bl	800ac9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	e000ed00 	.word	0xe000ed00
 800ae74:	410fc271 	.word	0x410fc271
 800ae78:	410fc270 	.word	0x410fc270
 800ae7c:	e000e400 	.word	0xe000e400
 800ae80:	20001044 	.word	0x20001044
 800ae84:	20001048 	.word	0x20001048
 800ae88:	e000ed20 	.word	0xe000ed20
 800ae8c:	2000000c 	.word	0x2000000c
 800ae90:	e000ef34 	.word	0xe000ef34

0800ae94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	607b      	str	r3, [r7, #4]
}
 800aeac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <vPortEnterCritical+0x58>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	4a0d      	ldr	r2, [pc, #52]	; (800aeec <vPortEnterCritical+0x58>)
 800aeb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aeb8:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <vPortEnterCritical+0x58>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d10f      	bne.n	800aee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aec0:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <vPortEnterCritical+0x5c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	603b      	str	r3, [r7, #0]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <vPortEnterCritical+0x4a>
	}
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	2000000c 	.word	0x2000000c
 800aef0:	e000ed04 	.word	0xe000ed04

0800aef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aefa:	4b12      	ldr	r3, [pc, #72]	; (800af44 <vPortExitCritical+0x50>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10a      	bne.n	800af18 <vPortExitCritical+0x24>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	607b      	str	r3, [r7, #4]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af18:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <vPortExitCritical+0x50>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	4a09      	ldr	r2, [pc, #36]	; (800af44 <vPortExitCritical+0x50>)
 800af20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af22:	4b08      	ldr	r3, [pc, #32]	; (800af44 <vPortExitCritical+0x50>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <vPortExitCritical+0x42>
 800af2a:	2300      	movs	r3, #0
 800af2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	f383 8811 	msr	BASEPRI, r3
}
 800af34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af36:	bf00      	nop
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	2000000c 	.word	0x2000000c
	...

0800af50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af50:	f3ef 8009 	mrs	r0, PSP
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <pxCurrentTCBConst>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	f01e 0f10 	tst.w	lr, #16
 800af60:	bf08      	it	eq
 800af62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	6010      	str	r0, [r2, #0]
 800af6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af74:	f380 8811 	msr	BASEPRI, r0
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f7fe feb6 	bl	8009cf0 <vTaskSwitchContext>
 800af84:	f04f 0000 	mov.w	r0, #0
 800af88:	f380 8811 	msr	BASEPRI, r0
 800af8c:	bc09      	pop	{r0, r3}
 800af8e:	6819      	ldr	r1, [r3, #0]
 800af90:	6808      	ldr	r0, [r1, #0]
 800af92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af96:	f01e 0f10 	tst.w	lr, #16
 800af9a:	bf08      	it	eq
 800af9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afa0:	f380 8809 	msr	PSP, r0
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst>:
 800afb0:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afd2:	f7fe fdd3 	bl	8009b7c <xTaskIncrementTick>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <xPortSysTickHandler+0x40>)
 800afde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	2300      	movs	r3, #0
 800afe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f383 8811 	msr	BASEPRI, r3
}
 800afee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b000:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <vPortSetupTimerInterrupt+0x38>)
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b00c:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <vPortSetupTimerInterrupt+0x3c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a0a      	ldr	r2, [pc, #40]	; (800b03c <vPortSetupTimerInterrupt+0x40>)
 800b012:	fba2 2303 	umull	r2, r3, r2, r3
 800b016:	099b      	lsrs	r3, r3, #6
 800b018:	4a09      	ldr	r2, [pc, #36]	; (800b040 <vPortSetupTimerInterrupt+0x44>)
 800b01a:	3b01      	subs	r3, #1
 800b01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b01e:	4b04      	ldr	r3, [pc, #16]	; (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b020:	2207      	movs	r2, #7
 800b022:	601a      	str	r2, [r3, #0]
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	e000e010 	.word	0xe000e010
 800b034:	e000e018 	.word	0xe000e018
 800b038:	20000000 	.word	0x20000000
 800b03c:	10624dd3 	.word	0x10624dd3
 800b040:	e000e014 	.word	0xe000e014

0800b044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b054 <vPortEnableVFP+0x10>
 800b048:	6801      	ldr	r1, [r0, #0]
 800b04a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b04e:	6001      	str	r1, [r0, #0]
 800b050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b052:	bf00      	nop
 800b054:	e000ed88 	.word	0xe000ed88

0800b058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b05e:	f3ef 8305 	mrs	r3, IPSR
 800b062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b0f      	cmp	r3, #15
 800b068:	d914      	bls.n	800b094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b06a:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <vPortValidateInterruptPriority+0x70>)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4413      	add	r3, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b074:	4b15      	ldr	r3, [pc, #84]	; (800b0cc <vPortValidateInterruptPriority+0x74>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	7afa      	ldrb	r2, [r7, #11]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d20a      	bcs.n	800b094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	607b      	str	r3, [r7, #4]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b094:	4b0e      	ldr	r3, [pc, #56]	; (800b0d0 <vPortValidateInterruptPriority+0x78>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b09c:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <vPortValidateInterruptPriority+0x7c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d90a      	bls.n	800b0ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	603b      	str	r3, [r7, #0]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <vPortValidateInterruptPriority+0x60>
	}
 800b0ba:	bf00      	nop
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	e000e3f0 	.word	0xe000e3f0
 800b0cc:	20001044 	.word	0x20001044
 800b0d0:	e000ed0c 	.word	0xe000ed0c
 800b0d4:	20001048 	.word	0x20001048

0800b0d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08a      	sub	sp, #40	; 0x28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0e4:	f7fe fc8e 	bl	8009a04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0e8:	4b5b      	ldr	r3, [pc, #364]	; (800b258 <pvPortMalloc+0x180>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0f0:	f000 f920 	bl	800b334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0f4:	4b59      	ldr	r3, [pc, #356]	; (800b25c <pvPortMalloc+0x184>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f040 8093 	bne.w	800b228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01d      	beq.n	800b144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b108:	2208      	movs	r2, #8
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4413      	add	r3, r2
 800b10e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f003 0307 	and.w	r3, r3, #7
 800b116:	2b00      	cmp	r3, #0
 800b118:	d014      	beq.n	800b144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f023 0307 	bic.w	r3, r3, #7
 800b120:	3308      	adds	r3, #8
 800b122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <pvPortMalloc+0x6c>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	617b      	str	r3, [r7, #20]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d06e      	beq.n	800b228 <pvPortMalloc+0x150>
 800b14a:	4b45      	ldr	r3, [pc, #276]	; (800b260 <pvPortMalloc+0x188>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	429a      	cmp	r2, r3
 800b152:	d869      	bhi.n	800b228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b154:	4b43      	ldr	r3, [pc, #268]	; (800b264 <pvPortMalloc+0x18c>)
 800b156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b158:	4b42      	ldr	r3, [pc, #264]	; (800b264 <pvPortMalloc+0x18c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b15e:	e004      	b.n	800b16a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	429a      	cmp	r2, r3
 800b172:	d903      	bls.n	800b17c <pvPortMalloc+0xa4>
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1f1      	bne.n	800b160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b17c:	4b36      	ldr	r3, [pc, #216]	; (800b258 <pvPortMalloc+0x180>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b182:	429a      	cmp	r2, r3
 800b184:	d050      	beq.n	800b228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b186:	6a3b      	ldr	r3, [r7, #32]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2208      	movs	r2, #8
 800b18c:	4413      	add	r3, r2
 800b18e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	1ad2      	subs	r2, r2, r3
 800b1a0:	2308      	movs	r3, #8
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d91f      	bls.n	800b1e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	613b      	str	r3, [r7, #16]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	1ad2      	subs	r2, r2, r3
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1e2:	69b8      	ldr	r0, [r7, #24]
 800b1e4:	f000 f908 	bl	800b3f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1e8:	4b1d      	ldr	r3, [pc, #116]	; (800b260 <pvPortMalloc+0x188>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	4a1b      	ldr	r2, [pc, #108]	; (800b260 <pvPortMalloc+0x188>)
 800b1f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1f6:	4b1a      	ldr	r3, [pc, #104]	; (800b260 <pvPortMalloc+0x188>)
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	4b1b      	ldr	r3, [pc, #108]	; (800b268 <pvPortMalloc+0x190>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d203      	bcs.n	800b20a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b202:	4b17      	ldr	r3, [pc, #92]	; (800b260 <pvPortMalloc+0x188>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a18      	ldr	r2, [pc, #96]	; (800b268 <pvPortMalloc+0x190>)
 800b208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	4b13      	ldr	r3, [pc, #76]	; (800b25c <pvPortMalloc+0x184>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	431a      	orrs	r2, r3
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b21e:	4b13      	ldr	r3, [pc, #76]	; (800b26c <pvPortMalloc+0x194>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	4a11      	ldr	r2, [pc, #68]	; (800b26c <pvPortMalloc+0x194>)
 800b226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b228:	f7fe fbfa 	bl	8009a20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00a      	beq.n	800b24c <pvPortMalloc+0x174>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	60fb      	str	r3, [r7, #12]
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <pvPortMalloc+0x172>
	return pvReturn;
 800b24c:	69fb      	ldr	r3, [r7, #28]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3728      	adds	r7, #40	; 0x28
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20002980 	.word	0x20002980
 800b25c:	20002994 	.word	0x20002994
 800b260:	20002984 	.word	0x20002984
 800b264:	20002978 	.word	0x20002978
 800b268:	20002988 	.word	0x20002988
 800b26c:	2000298c 	.word	0x2000298c

0800b270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d04d      	beq.n	800b31e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b282:	2308      	movs	r3, #8
 800b284:	425b      	negs	r3, r3
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	4413      	add	r3, r2
 800b28a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	4b24      	ldr	r3, [pc, #144]	; (800b328 <vPortFree+0xb8>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4013      	ands	r3, r2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <vPortFree+0x44>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	60fb      	str	r3, [r7, #12]
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00a      	beq.n	800b2d2 <vPortFree+0x62>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	60bb      	str	r3, [r7, #8]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	4b14      	ldr	r3, [pc, #80]	; (800b328 <vPortFree+0xb8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d01e      	beq.n	800b31e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d11a      	bne.n	800b31e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	4b0e      	ldr	r3, [pc, #56]	; (800b328 <vPortFree+0xb8>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	43db      	mvns	r3, r3
 800b2f2:	401a      	ands	r2, r3
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2f8:	f7fe fb84 	bl	8009a04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <vPortFree+0xbc>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4413      	add	r3, r2
 800b306:	4a09      	ldr	r2, [pc, #36]	; (800b32c <vPortFree+0xbc>)
 800b308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b30a:	6938      	ldr	r0, [r7, #16]
 800b30c:	f000 f874 	bl	800b3f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b310:	4b07      	ldr	r3, [pc, #28]	; (800b330 <vPortFree+0xc0>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	3301      	adds	r3, #1
 800b316:	4a06      	ldr	r2, [pc, #24]	; (800b330 <vPortFree+0xc0>)
 800b318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b31a:	f7fe fb81 	bl	8009a20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b31e:	bf00      	nop
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	20002994 	.word	0x20002994
 800b32c:	20002984 	.word	0x20002984
 800b330:	20002990 	.word	0x20002990

0800b334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b33a:	f641 132c 	movw	r3, #6444	; 0x192c
 800b33e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b340:	4b27      	ldr	r3, [pc, #156]	; (800b3e0 <prvHeapInit+0xac>)
 800b342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f003 0307 	and.w	r3, r3, #7
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00c      	beq.n	800b368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3307      	adds	r3, #7
 800b352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0307 	bic.w	r3, r3, #7
 800b35a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	4a1f      	ldr	r2, [pc, #124]	; (800b3e0 <prvHeapInit+0xac>)
 800b364:	4413      	add	r3, r2
 800b366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b36c:	4a1d      	ldr	r2, [pc, #116]	; (800b3e4 <prvHeapInit+0xb0>)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b372:	4b1c      	ldr	r3, [pc, #112]	; (800b3e4 <prvHeapInit+0xb0>)
 800b374:	2200      	movs	r2, #0
 800b376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	4413      	add	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b380:	2208      	movs	r2, #8
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	1a9b      	subs	r3, r3, r2
 800b386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f023 0307 	bic.w	r3, r3, #7
 800b38e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4a15      	ldr	r2, [pc, #84]	; (800b3e8 <prvHeapInit+0xb4>)
 800b394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b396:	4b14      	ldr	r3, [pc, #80]	; (800b3e8 <prvHeapInit+0xb4>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2200      	movs	r2, #0
 800b39c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b39e:	4b12      	ldr	r3, [pc, #72]	; (800b3e8 <prvHeapInit+0xb4>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	1ad2      	subs	r2, r2, r3
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3b4:	4b0c      	ldr	r3, [pc, #48]	; (800b3e8 <prvHeapInit+0xb4>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4a0a      	ldr	r2, [pc, #40]	; (800b3ec <prvHeapInit+0xb8>)
 800b3c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	4a09      	ldr	r2, [pc, #36]	; (800b3f0 <prvHeapInit+0xbc>)
 800b3ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3cc:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <prvHeapInit+0xc0>)
 800b3ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3d2:	601a      	str	r2, [r3, #0]
}
 800b3d4:	bf00      	nop
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	2000104c 	.word	0x2000104c
 800b3e4:	20002978 	.word	0x20002978
 800b3e8:	20002980 	.word	0x20002980
 800b3ec:	20002988 	.word	0x20002988
 800b3f0:	20002984 	.word	0x20002984
 800b3f4:	20002994 	.word	0x20002994

0800b3f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b400:	4b28      	ldr	r3, [pc, #160]	; (800b4a4 <prvInsertBlockIntoFreeList+0xac>)
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	e002      	b.n	800b40c <prvInsertBlockIntoFreeList+0x14>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	429a      	cmp	r2, r3
 800b414:	d8f7      	bhi.n	800b406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	4413      	add	r3, r2
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	429a      	cmp	r2, r3
 800b426:	d108      	bne.n	800b43a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	441a      	add	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	441a      	add	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d118      	bne.n	800b480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	4b15      	ldr	r3, [pc, #84]	; (800b4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d00d      	beq.n	800b476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	441a      	add	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e008      	b.n	800b488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b476:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	e003      	b.n	800b488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d002      	beq.n	800b496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b496:	bf00      	nop
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	20002978 	.word	0x20002978
 800b4a8:	20002980 	.word	0x20002980

0800b4ac <memset>:
 800b4ac:	4402      	add	r2, r0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d100      	bne.n	800b4b6 <memset+0xa>
 800b4b4:	4770      	bx	lr
 800b4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4ba:	e7f9      	b.n	800b4b0 <memset+0x4>

0800b4bc <_reclaim_reent>:
 800b4bc:	4b29      	ldr	r3, [pc, #164]	; (800b564 <_reclaim_reent+0xa8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4283      	cmp	r3, r0
 800b4c2:	b570      	push	{r4, r5, r6, lr}
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	d04b      	beq.n	800b560 <_reclaim_reent+0xa4>
 800b4c8:	69c3      	ldr	r3, [r0, #28]
 800b4ca:	b143      	cbz	r3, 800b4de <_reclaim_reent+0x22>
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d144      	bne.n	800b55c <_reclaim_reent+0xa0>
 800b4d2:	69e3      	ldr	r3, [r4, #28]
 800b4d4:	6819      	ldr	r1, [r3, #0]
 800b4d6:	b111      	cbz	r1, 800b4de <_reclaim_reent+0x22>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 f879 	bl	800b5d0 <_free_r>
 800b4de:	6961      	ldr	r1, [r4, #20]
 800b4e0:	b111      	cbz	r1, 800b4e8 <_reclaim_reent+0x2c>
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f874 	bl	800b5d0 <_free_r>
 800b4e8:	69e1      	ldr	r1, [r4, #28]
 800b4ea:	b111      	cbz	r1, 800b4f2 <_reclaim_reent+0x36>
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 f86f 	bl	800b5d0 <_free_r>
 800b4f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b4f4:	b111      	cbz	r1, 800b4fc <_reclaim_reent+0x40>
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 f86a 	bl	800b5d0 <_free_r>
 800b4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4fe:	b111      	cbz	r1, 800b506 <_reclaim_reent+0x4a>
 800b500:	4620      	mov	r0, r4
 800b502:	f000 f865 	bl	800b5d0 <_free_r>
 800b506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b508:	b111      	cbz	r1, 800b510 <_reclaim_reent+0x54>
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 f860 	bl	800b5d0 <_free_r>
 800b510:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b512:	b111      	cbz	r1, 800b51a <_reclaim_reent+0x5e>
 800b514:	4620      	mov	r0, r4
 800b516:	f000 f85b 	bl	800b5d0 <_free_r>
 800b51a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b51c:	b111      	cbz	r1, 800b524 <_reclaim_reent+0x68>
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 f856 	bl	800b5d0 <_free_r>
 800b524:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b526:	b111      	cbz	r1, 800b52e <_reclaim_reent+0x72>
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 f851 	bl	800b5d0 <_free_r>
 800b52e:	6a23      	ldr	r3, [r4, #32]
 800b530:	b1b3      	cbz	r3, 800b560 <_reclaim_reent+0xa4>
 800b532:	4620      	mov	r0, r4
 800b534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b538:	4718      	bx	r3
 800b53a:	5949      	ldr	r1, [r1, r5]
 800b53c:	b941      	cbnz	r1, 800b550 <_reclaim_reent+0x94>
 800b53e:	3504      	adds	r5, #4
 800b540:	69e3      	ldr	r3, [r4, #28]
 800b542:	2d80      	cmp	r5, #128	; 0x80
 800b544:	68d9      	ldr	r1, [r3, #12]
 800b546:	d1f8      	bne.n	800b53a <_reclaim_reent+0x7e>
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 f841 	bl	800b5d0 <_free_r>
 800b54e:	e7c0      	b.n	800b4d2 <_reclaim_reent+0x16>
 800b550:	680e      	ldr	r6, [r1, #0]
 800b552:	4620      	mov	r0, r4
 800b554:	f000 f83c 	bl	800b5d0 <_free_r>
 800b558:	4631      	mov	r1, r6
 800b55a:	e7ef      	b.n	800b53c <_reclaim_reent+0x80>
 800b55c:	2500      	movs	r5, #0
 800b55e:	e7ef      	b.n	800b540 <_reclaim_reent+0x84>
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	bf00      	nop
 800b564:	2000005c 	.word	0x2000005c

0800b568 <__libc_init_array>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	4d0d      	ldr	r5, [pc, #52]	; (800b5a0 <__libc_init_array+0x38>)
 800b56c:	4c0d      	ldr	r4, [pc, #52]	; (800b5a4 <__libc_init_array+0x3c>)
 800b56e:	1b64      	subs	r4, r4, r5
 800b570:	10a4      	asrs	r4, r4, #2
 800b572:	2600      	movs	r6, #0
 800b574:	42a6      	cmp	r6, r4
 800b576:	d109      	bne.n	800b58c <__libc_init_array+0x24>
 800b578:	4d0b      	ldr	r5, [pc, #44]	; (800b5a8 <__libc_init_array+0x40>)
 800b57a:	4c0c      	ldr	r4, [pc, #48]	; (800b5ac <__libc_init_array+0x44>)
 800b57c:	f000 f880 	bl	800b680 <_init>
 800b580:	1b64      	subs	r4, r4, r5
 800b582:	10a4      	asrs	r4, r4, #2
 800b584:	2600      	movs	r6, #0
 800b586:	42a6      	cmp	r6, r4
 800b588:	d105      	bne.n	800b596 <__libc_init_array+0x2e>
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
 800b58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b590:	4798      	blx	r3
 800b592:	3601      	adds	r6, #1
 800b594:	e7ee      	b.n	800b574 <__libc_init_array+0xc>
 800b596:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59a:	4798      	blx	r3
 800b59c:	3601      	adds	r6, #1
 800b59e:	e7f2      	b.n	800b586 <__libc_init_array+0x1e>
 800b5a0:	0800b8f0 	.word	0x0800b8f0
 800b5a4:	0800b8f0 	.word	0x0800b8f0
 800b5a8:	0800b8f0 	.word	0x0800b8f0
 800b5ac:	0800b8f4 	.word	0x0800b8f4

0800b5b0 <__retarget_lock_acquire_recursive>:
 800b5b0:	4770      	bx	lr

0800b5b2 <__retarget_lock_release_recursive>:
 800b5b2:	4770      	bx	lr

0800b5b4 <memcpy>:
 800b5b4:	440a      	add	r2, r1
 800b5b6:	4291      	cmp	r1, r2
 800b5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5bc:	d100      	bne.n	800b5c0 <memcpy+0xc>
 800b5be:	4770      	bx	lr
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ca:	4291      	cmp	r1, r2
 800b5cc:	d1f9      	bne.n	800b5c2 <memcpy+0xe>
 800b5ce:	bd10      	pop	{r4, pc}

0800b5d0 <_free_r>:
 800b5d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	d044      	beq.n	800b660 <_free_r+0x90>
 800b5d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5da:	9001      	str	r0, [sp, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f1a1 0404 	sub.w	r4, r1, #4
 800b5e2:	bfb8      	it	lt
 800b5e4:	18e4      	addlt	r4, r4, r3
 800b5e6:	f000 f83f 	bl	800b668 <__malloc_lock>
 800b5ea:	4a1e      	ldr	r2, [pc, #120]	; (800b664 <_free_r+0x94>)
 800b5ec:	9801      	ldr	r0, [sp, #4]
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	b933      	cbnz	r3, 800b600 <_free_r+0x30>
 800b5f2:	6063      	str	r3, [r4, #4]
 800b5f4:	6014      	str	r4, [r2, #0]
 800b5f6:	b003      	add	sp, #12
 800b5f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5fc:	f000 b83a 	b.w	800b674 <__malloc_unlock>
 800b600:	42a3      	cmp	r3, r4
 800b602:	d908      	bls.n	800b616 <_free_r+0x46>
 800b604:	6825      	ldr	r5, [r4, #0]
 800b606:	1961      	adds	r1, r4, r5
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf01      	itttt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	1949      	addeq	r1, r1, r5
 800b612:	6021      	streq	r1, [r4, #0]
 800b614:	e7ed      	b.n	800b5f2 <_free_r+0x22>
 800b616:	461a      	mov	r2, r3
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	b10b      	cbz	r3, 800b620 <_free_r+0x50>
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	d9fa      	bls.n	800b616 <_free_r+0x46>
 800b620:	6811      	ldr	r1, [r2, #0]
 800b622:	1855      	adds	r5, r2, r1
 800b624:	42a5      	cmp	r5, r4
 800b626:	d10b      	bne.n	800b640 <_free_r+0x70>
 800b628:	6824      	ldr	r4, [r4, #0]
 800b62a:	4421      	add	r1, r4
 800b62c:	1854      	adds	r4, r2, r1
 800b62e:	42a3      	cmp	r3, r4
 800b630:	6011      	str	r1, [r2, #0]
 800b632:	d1e0      	bne.n	800b5f6 <_free_r+0x26>
 800b634:	681c      	ldr	r4, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	6053      	str	r3, [r2, #4]
 800b63a:	440c      	add	r4, r1
 800b63c:	6014      	str	r4, [r2, #0]
 800b63e:	e7da      	b.n	800b5f6 <_free_r+0x26>
 800b640:	d902      	bls.n	800b648 <_free_r+0x78>
 800b642:	230c      	movs	r3, #12
 800b644:	6003      	str	r3, [r0, #0]
 800b646:	e7d6      	b.n	800b5f6 <_free_r+0x26>
 800b648:	6825      	ldr	r5, [r4, #0]
 800b64a:	1961      	adds	r1, r4, r5
 800b64c:	428b      	cmp	r3, r1
 800b64e:	bf04      	itt	eq
 800b650:	6819      	ldreq	r1, [r3, #0]
 800b652:	685b      	ldreq	r3, [r3, #4]
 800b654:	6063      	str	r3, [r4, #4]
 800b656:	bf04      	itt	eq
 800b658:	1949      	addeq	r1, r1, r5
 800b65a:	6021      	streq	r1, [r4, #0]
 800b65c:	6054      	str	r4, [r2, #4]
 800b65e:	e7ca      	b.n	800b5f6 <_free_r+0x26>
 800b660:	b003      	add	sp, #12
 800b662:	bd30      	pop	{r4, r5, pc}
 800b664:	20002ad4 	.word	0x20002ad4

0800b668 <__malloc_lock>:
 800b668:	4801      	ldr	r0, [pc, #4]	; (800b670 <__malloc_lock+0x8>)
 800b66a:	f7ff bfa1 	b.w	800b5b0 <__retarget_lock_acquire_recursive>
 800b66e:	bf00      	nop
 800b670:	20002ad0 	.word	0x20002ad0

0800b674 <__malloc_unlock>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__malloc_unlock+0x8>)
 800b676:	f7ff bf9c 	b.w	800b5b2 <__retarget_lock_release_recursive>
 800b67a:	bf00      	nop
 800b67c:	20002ad0 	.word	0x20002ad0

0800b680 <_init>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	bf00      	nop
 800b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b686:	bc08      	pop	{r3}
 800b688:	469e      	mov	lr, r3
 800b68a:	4770      	bx	lr

0800b68c <_fini>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	bf00      	nop
 800b690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b692:	bc08      	pop	{r3}
 800b694:	469e      	mov	lr, r3
 800b696:	4770      	bx	lr
