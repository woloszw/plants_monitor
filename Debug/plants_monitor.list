
plants_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800a6c8  0800a6c8  0001a6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a820  0800a820  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a820  0800a820  0001a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a828  0800a828  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a828  0800a828  0001a828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a82c  0800a82c  0001a82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca0  20000060  0800a890  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  0800a890  00021d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002435f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047cc  00000000  00000000  00044432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d28  00000000  00000000  00048c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000168f  00000000  00000000  0004a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c7a  00000000  00000000  0004bfb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000223da  00000000  00000000  0006fc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edf1c  00000000  00000000  0009200b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081d0  00000000  00000000  0017ff28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001880f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a6b0 	.word	0x0800a6b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800a6b0 	.word	0x0800a6b0

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f009 fb33 	bl	800a4dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000ee2:	f002 fadd 	bl	80034a0 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000eec:	f000 f9fe 	bl	80012ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000efc:	f003 ff0c 	bl	8004d18 <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f06:	f000 f9f1 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_ADC1_Init+0xec>)
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0e:	2306      	movs	r3, #6
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_ADC1_Init+0xe8>)
 8000f28:	f003 f8c0 	bl	80040ac <HAL_ADC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f32:	f000 f9db 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000007c 	.word	0x2000007c
 8000f44:	04300002 	.word	0x04300002

08000f48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09e      	sub	sp, #120	; 0x78
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2250      	movs	r2, #80	; 0x50
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f009 fab7 	bl	800a4dc <memset>
  if(adcHandle->Instance==ADC1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f76:	d13c      	bne.n	8000ff2 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f82:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 f879 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f000 f9aa 	bl	80012ec <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_ADC_MspInit+0xb4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ANALOG_IN_Pin;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f004 f863 	bl	80050a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2012      	movs	r0, #18
 8000fe8:	f004 f836 	bl	8005058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fec:	2012      	movs	r0, #18
 8000fee:	f004 f84d 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3778      	adds	r7, #120	; 0x78
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <readADCData>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
uint32_t readADCData(ADC_HandleTypeDef _adcHandle)
{
 8001000:	b084      	sub	sp, #16
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	f107 0c10 	add.w	ip, r7, #16
 800100c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t analogReadValue;
//	if(osSemaphoreAcquire(ADCSemaphoreHandle, 100)==osOK)
//	{
	HAL_ADC_Start(&_adcHandle);
 8001010:	f107 0010 	add.w	r0, r7, #16
 8001014:	f002 fbf2 	bl	80037fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&_adcHandle, 1000);
 8001018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101c:	f107 0010 	add.w	r0, r7, #16
 8001020:	f002 fcea 	bl	80039f8 <HAL_ADC_PollForConversion>

	analogReadValue = (uint32_t) HAL_ADC_GetValue(&_adcHandle);
 8001024:	f107 0010 	add.w	r0, r7, #16
 8001028:	f002 fdda 	bl	8003be0 <HAL_ADC_GetValue>
 800102c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&_adcHandle);
 800102e:	f107 0010 	add.w	r0, r7, #16
 8001032:	f002 fcad 	bl	8003990 <HAL_ADC_Stop>
//	}
//	if(osSemaphoreRelease(ADCSemaphoreHandle) == osOK)
		return analogReadValue;
 8001036:	687b      	ldr	r3, [r7, #4]
//	else
//		return 0;
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001042:	b004      	add	sp, #16
 8001044:	4770      	bx	lr
	...

08001048 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensAnalog */
  sensAnalogHandle = osThreadNew(sensAnalogTask, NULL, &sensAnalog_attributes);
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <MX_FREERTOS_Init+0x38>)
 800104e:	2100      	movs	r1, #0
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_FREERTOS_Init+0x3c>)
 8001052:	f006 fd15 	bl	8007a80 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <MX_FREERTOS_Init+0x40>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of sensUART */
  sensUARTHandle = osThreadNew(sensUARTTask, NULL, &sensUART_attributes);
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <MX_FREERTOS_Init+0x44>)
 800105e:	2100      	movs	r1, #0
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <MX_FREERTOS_Init+0x48>)
 8001062:	f006 fd0d 	bl	8007a80 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <MX_FREERTOS_Init+0x4c>)
 800106a:	6013      	str	r3, [r2, #0]

  /* creation of sensI2C */
  sensI2CHandle = osThreadNew(sensI2CTask, NULL, &sensI2C_attributes);
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <MX_FREERTOS_Init+0x50>)
 800106e:	2100      	movs	r1, #0
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <MX_FREERTOS_Init+0x54>)
 8001072:	f006 fd05 	bl	8007a80 <osThreadNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <MX_FREERTOS_Init+0x58>)
 800107a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	0800a720 	.word	0x0800a720
 8001084:	080010a5 	.word	0x080010a5
 8001088:	200000e8 	.word	0x200000e8
 800108c:	0800a744 	.word	0x0800a744
 8001090:	080010b5 	.word	0x080010b5
 8001094:	200000ec 	.word	0x200000ec
 8001098:	0800a768 	.word	0x0800a768
 800109c:	080010f1 	.word	0x080010f1
 80010a0:	200000f0 	.word	0x200000f0

080010a4 <sensAnalogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sensAnalogTask */
void sensAnalogTask(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensAnalogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f006 fd79 	bl	8007ba4 <osDelay>
 80010b2:	e7fb      	b.n	80010ac <sensAnalogTask+0x8>

080010b4 <sensUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensUARTTask */
void sensUARTTask(void *argument)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b09d      	sub	sp, #116	; 0x74
 80010b8:	af18      	add	r7, sp, #96	; 0x60
 80010ba:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	 ddata = readADCData(hadc1);
 80010bc:	4c0a      	ldr	r4, [pc, #40]	; (80010e8 <sensUARTTask+0x34>)
 80010be:	4668      	mov	r0, sp
 80010c0:	f104 0310 	add.w	r3, r4, #16
 80010c4:	225c      	movs	r2, #92	; 0x5c
 80010c6:	4619      	mov	r1, r3
 80010c8:	f009 fa8c 	bl	800a5e4 <memcpy>
 80010cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010d0:	f7ff ff96 	bl	8001000 <readADCData>
 80010d4:	60f8      	str	r0, [r7, #12]
	 printf("%d \n \r", ddata);
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <sensUARTTask+0x38>)
 80010da:	f001 fd5b 	bl	8002b94 <printf_>


	  osDelay(1000);
 80010de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e2:	f006 fd5f 	bl	8007ba4 <osDelay>
	 ddata = readADCData(hadc1);
 80010e6:	e7e9      	b.n	80010bc <sensUARTTask+0x8>
 80010e8:	2000007c 	.word	0x2000007c
 80010ec:	0800a6e8 	.word	0x0800a6e8

080010f0 <sensI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensI2CTask */
void sensI2CTask(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensI2CTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010f8:	2120      	movs	r1, #32
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f004 f96d 	bl	80053dc <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001106:	f006 fd4d 	bl	8007ba4 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800110a:	e7f5      	b.n	80010f8 <sensI2CTask+0x8>

0800110c <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &character, 1, 1000);
 8001116:	1df9      	adds	r1, r7, #7
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	2201      	movs	r2, #1
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <_putchar+0x20>)
 8001120:	f005 fd74 	bl	8006c0c <HAL_UART_Transmit>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000140 	.word	0x20000140

08001130 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <MX_GPIO_Init+0xd4>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <MX_GPIO_Init+0xd4>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0xd4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0xd4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a28      	ldr	r2, [pc, #160]	; (8001204 <MX_GPIO_Init+0xd4>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <MX_GPIO_Init+0xd4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_GPIO_Init+0xd4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <MX_GPIO_Init+0xd4>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_GPIO_Init+0xd4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_GPIO_Init+0xd4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <MX_GPIO_Init+0xd4>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_GPIO_Init+0xd4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2120      	movs	r1, #32
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f004 f8fd 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	480f      	ldr	r0, [pc, #60]	; (8001208 <MX_GPIO_Init+0xd8>)
 80011ca:	f003 ff6d 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ce:	2320      	movs	r3, #32
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f003 ff5e 	bl	80050a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2105      	movs	r1, #5
 80011f0:	2028      	movs	r0, #40	; 0x28
 80011f2:	f003 ff31 	bl	8005058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011f6:	2028      	movs	r0, #40	; 0x28
 80011f8:	f003 ff48 	bl	800508c <HAL_NVIC_EnableIRQ>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	48000800 	.word	0x48000800

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f001 fe81 	bl	8002f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f80d 	bl	8001232 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f7ff ff8a 	bl	8001130 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800121c:	f001 fdb0 	bl	8002d80 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001220:	f7ff fe1a 	bl	8000e58 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001224:	f006 fbe2 	bl	80079ec <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001228:	f7ff ff0e 	bl	8001048 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800122c:	f006 fc02 	bl	8007a34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001230:	e7fe      	b.n	8001230 <main+0x24>

08001232 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b094      	sub	sp, #80	; 0x50
 8001236:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	2238      	movs	r2, #56	; 0x38
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f009 f94b 	bl	800a4dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001254:	2000      	movs	r0, #0
 8001256:	f004 f8ff 	bl	8005458 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001264:	2340      	movs	r3, #64	; 0x40
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001268:	2302      	movs	r3, #2
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001270:	2304      	movs	r3, #4
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001274:	2355      	movs	r3, #85	; 0x55
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	4618      	mov	r0, r3
 800128a:	f004 f999 	bl	80055c0 <HAL_RCC_OscConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001294:	f000 f82a 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001298:	230f      	movs	r3, #15
 800129a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129c:	2303      	movs	r3, #3
 800129e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2104      	movs	r1, #4
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fc97 	bl	8005be4 <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012bc:	f000 f816 	bl	80012ec <Error_Handler>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3750      	adds	r7, #80	; 0x50
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012da:	f001 fe35 	bl	8002f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40012c00 	.word	0x40012c00

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>

080012f6 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <_out_char+0x1e>
    _putchar(character);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff feee 	bl	800110c <_putchar>
  }
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e002      	b.n	800134e <_strnlen_s+0x16>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <_strnlen_s+0x28>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	603a      	str	r2, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f3      	bne.n	8001348 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	1ad3      	subs	r3, r2, r3
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	2b2f      	cmp	r3, #47	; 0x2f
 8001380:	d904      	bls.n	800138c <_is_digit+0x1a>
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b39      	cmp	r3, #57	; 0x39
 8001386:	d801      	bhi.n	800138c <_is_digit+0x1a>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <_is_digit+0x1c>
 800138c:	2300      	movs	r3, #0
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80013ac:	e00e      	b.n	80013cc <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4618      	mov	r0, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	1c59      	adds	r1, r3, #1
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6011      	str	r1, [r2, #0]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4403      	add	r3, r0
 80013c8:	3b30      	subs	r3, #48	; 0x30
 80013ca:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ffcd 	bl	8001372 <_is_digit>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e7      	bne.n	80013ae <_atoi+0xe>
  }
  return i;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d125      	bne.n	8001450 <_out_rev+0x68>
 8001404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d120      	bne.n	8001450 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e00a      	b.n	800142a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	1c53      	adds	r3, r2, #1
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	68fc      	ldr	r4, [r7, #12]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	2020      	movs	r0, #32
 8001422:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142e:	429a      	cmp	r2, r3
 8001430:	d3f0      	bcc.n	8001414 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001432:	e00d      	b.n	8001450 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001436:	3b01      	subs	r3, #1
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800143a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143e:	4413      	add	r3, r2
 8001440:	7818      	ldrb	r0, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	1c53      	adds	r3, r2, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	68fc      	ldr	r4, [r7, #12]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	47a0      	blx	r4
  while (len) {
 8001450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1ee      	bne.n	8001434 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00e      	beq.n	800147e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001460:	e007      	b.n	8001472 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	1c53      	adds	r3, r2, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	68fc      	ldr	r4, [r7, #12]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	2020      	movs	r0, #32
 8001470:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800147a:	429a      	cmp	r2, r3
 800147c:	d8f1      	bhi.n	8001462 <_out_rev+0x7a>
    }
  }

  return idx;
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	4618      	mov	r0, r3
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}

08001488 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af04      	add	r7, sp, #16
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d136      	bne.n	800150e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80014a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d018      	beq.n	80014d8 <_ntoa_format+0x50>
 80014a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <_ntoa_format+0x50>
 80014b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d104      	bne.n	80014c2 <_ntoa_format+0x3a>
 80014b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00a      	beq.n	80014d8 <_ntoa_format+0x50>
      width--;
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	3b01      	subs	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80014c8:	e006      	b.n	80014d8 <_ntoa_format+0x50>
      buf[len++] = '0';
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	61fa      	str	r2, [r7, #28]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4413      	add	r3, r2
 80014d4:	2230      	movs	r2, #48	; 0x30
 80014d6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	429a      	cmp	r2, r3
 80014de:	d20a      	bcs.n	80014f6 <_ntoa_format+0x6e>
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b1f      	cmp	r3, #31
 80014e4:	d9f1      	bls.n	80014ca <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80014e6:	e006      	b.n	80014f6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	61fa      	str	r2, [r7, #28]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4413      	add	r3, r2
 80014f2:	2230      	movs	r2, #48	; 0x30
 80014f4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80014f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <_ntoa_format+0x86>
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	429a      	cmp	r2, r3
 8001506:	d202      	bcs.n	800150e <_ntoa_format+0x86>
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b1f      	cmp	r3, #31
 800150c:	d9ec      	bls.n	80014e8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	2b00      	cmp	r3, #0
 8001516:	d058      	beq.n	80015ca <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	2b00      	cmp	r3, #0
 8001520:	d116      	bne.n	8001550 <_ntoa_format+0xc8>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <_ntoa_format+0xc8>
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152c:	429a      	cmp	r2, r3
 800152e:	d003      	beq.n	8001538 <_ntoa_format+0xb0>
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001534:	429a      	cmp	r2, r3
 8001536:	d10b      	bne.n	8001550 <_ntoa_format+0xc8>
      len--;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	3b01      	subs	r3, #1
 800153c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <_ntoa_format+0xc8>
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	2b10      	cmp	r3, #16
 8001548:	d102      	bne.n	8001550 <_ntoa_format+0xc8>
        len--;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b01      	subs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	2b10      	cmp	r3, #16
 8001554:	d10f      	bne.n	8001576 <_ntoa_format+0xee>
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	f003 0320 	and.w	r3, r3, #32
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10a      	bne.n	8001576 <_ntoa_format+0xee>
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b1f      	cmp	r3, #31
 8001564:	d807      	bhi.n	8001576 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	61fa      	str	r2, [r7, #28]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4413      	add	r3, r2
 8001570:	2278      	movs	r2, #120	; 0x78
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e01f      	b.n	80015b6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	2b10      	cmp	r3, #16
 800157a:	d10f      	bne.n	800159c <_ntoa_format+0x114>
 800157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00a      	beq.n	800159c <_ntoa_format+0x114>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	2b1f      	cmp	r3, #31
 800158a:	d807      	bhi.n	800159c <_ntoa_format+0x114>
      buf[len++] = 'X';
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	61fa      	str	r2, [r7, #28]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4413      	add	r3, r2
 8001596:	2258      	movs	r2, #88	; 0x58
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e00c      	b.n	80015b6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d109      	bne.n	80015b6 <_ntoa_format+0x12e>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b1f      	cmp	r3, #31
 80015a6:	d806      	bhi.n	80015b6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	61fa      	str	r2, [r7, #28]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4413      	add	r3, r2
 80015b2:	2262      	movs	r2, #98	; 0x62
 80015b4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	2b1f      	cmp	r3, #31
 80015ba:	d806      	bhi.n	80015ca <_ntoa_format+0x142>
      buf[len++] = '0';
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	61fa      	str	r2, [r7, #28]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4413      	add	r3, r2
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	2b1f      	cmp	r3, #31
 80015ce:	d824      	bhi.n	800161a <_ntoa_format+0x192>
    if (negative) {
 80015d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <_ntoa_format+0x160>
      buf[len++] = '-';
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	61fa      	str	r2, [r7, #28]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4413      	add	r3, r2
 80015e2:	222d      	movs	r2, #45	; 0x2d
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e018      	b.n	800161a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80015e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	61fa      	str	r2, [r7, #28]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4413      	add	r3, r2
 80015fc:	222b      	movs	r2, #43	; 0x2b
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e00b      	b.n	800161a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	61fa      	str	r2, [r7, #28]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4413      	add	r3, r2
 8001616:	2220      	movs	r2, #32
 8001618:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	9303      	str	r3, [sp, #12]
 800161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001620:	9302      	str	r3, [sp, #8]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff fed9 	bl	80013e8 <_out_rev>
 8001636:	4603      	mov	r3, r0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b096      	sub	sp, #88	; 0x58
 8001644:	af08      	add	r7, sp, #32
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d103      	bne.n	8001660 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800165a:	f023 0310 	bic.w	r3, r3, #16
 800165e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <_ntoa_long+0x30>
 800166a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d032      	beq.n	80016d6 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001674:	fbb3 f2f2 	udiv	r2, r3, r2
 8001678:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800167a:	fb01 f202 	mul.w	r2, r1, r2
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001684:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001688:	2b09      	cmp	r3, #9
 800168a:	d804      	bhi.n	8001696 <_ntoa_long+0x56>
 800168c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001690:	3330      	adds	r3, #48	; 0x30
 8001692:	b2da      	uxtb	r2, r3
 8001694:	e00d      	b.n	80016b2 <_ntoa_long+0x72>
 8001696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <_ntoa_long+0x64>
 80016a0:	2241      	movs	r2, #65	; 0x41
 80016a2:	e000      	b.n	80016a6 <_ntoa_long+0x66>
 80016a4:	2261      	movs	r2, #97	; 0x61
 80016a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016aa:	4413      	add	r3, r2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3b0a      	subs	r3, #10
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	1c59      	adds	r1, r3, #1
 80016b6:	6379      	str	r1, [r7, #52]	; 0x34
 80016b8:	3338      	adds	r3, #56	; 0x38
 80016ba:	443b      	add	r3, r7
 80016bc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80016c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80016ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <_ntoa_long+0x96>
 80016d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d2:	2b1f      	cmp	r3, #31
 80016d4:	d9cc      	bls.n	8001670 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80016d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d8:	9306      	str	r3, [sp, #24]
 80016da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016dc:	9305      	str	r3, [sp, #20]
 80016de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e0:	9304      	str	r3, [sp, #16]
 80016e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e4:	9303      	str	r3, [sp, #12]
 80016e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fec3 	bl	8001488 <_ntoa_format>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3738      	adds	r7, #56	; 0x38
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b096      	sub	sp, #88	; 0x58
 8001710:	af08      	add	r7, sp, #32
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800171e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001722:	4313      	orrs	r3, r2
 8001724:	d103      	bne.n	800172e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001728:	f023 0310 	bic.w	r3, r3, #16
 800172c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800172e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <_ntoa_long_long+0x34>
 8001738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800173c:	4313      	orrs	r3, r2
 800173e:	d037      	beq.n	80017b0 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8001740:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001744:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001748:	f7ff fa08 	bl	8000b5c <__aeabi_uldivmod>
 800174c:	4613      	mov	r3, r2
 800174e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001756:	2b09      	cmp	r3, #9
 8001758:	d804      	bhi.n	8001764 <_ntoa_long_long+0x58>
 800175a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800175e:	3330      	adds	r3, #48	; 0x30
 8001760:	b2da      	uxtb	r2, r3
 8001762:	e00d      	b.n	8001780 <_ntoa_long_long+0x74>
 8001764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <_ntoa_long_long+0x66>
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	e000      	b.n	8001774 <_ntoa_long_long+0x68>
 8001772:	2261      	movs	r2, #97	; 0x61
 8001774:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001778:	4413      	add	r3, r2
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3b0a      	subs	r3, #10
 800177e:	b2da      	uxtb	r2, r3
 8001780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	6379      	str	r1, [r7, #52]	; 0x34
 8001786:	3338      	adds	r3, #56	; 0x38
 8001788:	443b      	add	r3, r7
 800178a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800178e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001792:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001796:	f7ff f9e1 	bl	8000b5c <__aeabi_uldivmod>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80017a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017a6:	4313      	orrs	r3, r2
 80017a8:	d002      	beq.n	80017b0 <_ntoa_long_long+0xa4>
 80017aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ac:	2b1f      	cmp	r3, #31
 80017ae:	d9c7      	bls.n	8001740 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80017b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017b4:	9206      	str	r2, [sp, #24]
 80017b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017b8:	9205      	str	r2, [sp, #20]
 80017ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017bc:	9204      	str	r2, [sp, #16]
 80017be:	9303      	str	r3, [sp, #12]
 80017c0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff fe56 	bl	8001488 <_ntoa_format>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3738      	adds	r7, #56	; 0x38
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b09d      	sub	sp, #116	; 0x74
 80017ec:	af04      	add	r7, sp, #16
 80017ee:	6178      	str	r0, [r7, #20]
 80017f0:	6139      	str	r1, [r7, #16]
 80017f2:	60fa      	str	r2, [r7, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800180a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800180e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001812:	f7ff f929 	bl	8000a68 <__aeabi_dcmpeq>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10f      	bne.n	800183c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800181c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800181e:	9303      	str	r3, [sp, #12]
 8001820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	2303      	movs	r3, #3
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	4ba7      	ldr	r3, [pc, #668]	; (8001ac8 <_ftoa+0x2e0>)
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	6939      	ldr	r1, [r7, #16]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff fdd8 	bl	80013e8 <_out_rev>
 8001838:	4603      	mov	r3, r0
 800183a:	e222      	b.n	8001c82 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800183c:	f04f 32ff 	mov.w	r2, #4294967295
 8001840:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001848:	f7ff f918 	bl	8000a7c <__aeabi_dcmplt>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00f      	beq.n	8001872 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001854:	9303      	str	r3, [sp, #12]
 8001856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001858:	9302      	str	r3, [sp, #8]
 800185a:	2304      	movs	r3, #4
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	4b9b      	ldr	r3, [pc, #620]	; (8001acc <_ftoa+0x2e4>)
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	6939      	ldr	r1, [r7, #16]
 8001868:	6978      	ldr	r0, [r7, #20]
 800186a:	f7ff fdbd 	bl	80013e8 <_out_rev>
 800186e:	4603      	mov	r3, r0
 8001870:	e207      	b.n	8001c82 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001872:	f04f 32ff 	mov.w	r2, #4294967295
 8001876:	4b96      	ldr	r3, [pc, #600]	; (8001ad0 <_ftoa+0x2e8>)
 8001878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800187c:	f7ff f91c 	bl	8000ab8 <__aeabi_dcmpgt>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01d      	beq.n	80018c2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <_ftoa+0xac>
 8001890:	4b90      	ldr	r3, [pc, #576]	; (8001ad4 <_ftoa+0x2ec>)
 8001892:	e000      	b.n	8001896 <_ftoa+0xae>
 8001894:	4b90      	ldr	r3, [pc, #576]	; (8001ad8 <_ftoa+0x2f0>)
 8001896:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001898:	f002 0204 	and.w	r2, r2, #4
 800189c:	2a00      	cmp	r2, #0
 800189e:	d001      	beq.n	80018a4 <_ftoa+0xbc>
 80018a0:	2204      	movs	r2, #4
 80018a2:	e000      	b.n	80018a6 <_ftoa+0xbe>
 80018a4:	2203      	movs	r2, #3
 80018a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018a8:	9103      	str	r1, [sp, #12]
 80018aa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80018ac:	9102      	str	r1, [sp, #8]
 80018ae:	9201      	str	r2, [sp, #4]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	6939      	ldr	r1, [r7, #16]
 80018b8:	6978      	ldr	r0, [r7, #20]
 80018ba:	f7ff fd95 	bl	80013e8 <_out_rev>
 80018be:	4603      	mov	r3, r0
 80018c0:	e1df      	b.n	8001c82 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80018c2:	a37d      	add	r3, pc, #500	; (adr r3, 8001ab8 <_ftoa+0x2d0>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018cc:	f7ff f8f4 	bl	8000ab8 <__aeabi_dcmpgt>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <_ftoa+0x102>
 80018d6:	a37a      	add	r3, pc, #488	; (adr r3, 8001ac0 <_ftoa+0x2d8>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018e0:	f7ff f8cc 	bl	8000a7c <__aeabi_dcmplt>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00f      	beq.n	800190a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80018ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	ed97 0b00 	vldr	d0, [r7]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	6939      	ldr	r1, [r7, #16]
 8001900:	6978      	ldr	r0, [r7, #20]
 8001902:	f000 f9c9 	bl	8001c98 <_etoa>
 8001906:	4603      	mov	r3, r0
 8001908:	e1bb      	b.n	8001c82 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800191c:	f7ff f8ae 	bl	8000a7c <__aeabi_dcmplt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00e      	beq.n	8001944 <_ftoa+0x15c>
    negative = true;
 8001926:	2301      	movs	r3, #1
 8001928:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800192c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	f04f 0100 	mov.w	r1, #0
 8001938:	f7fe fc76 	bl	8000228 <__aeabi_dsub>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10d      	bne.n	800196a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800194e:	2306      	movs	r3, #6
 8001950:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001952:	e00a      	b.n	800196a <_ftoa+0x182>
    buf[len++] = '0';
 8001954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	65fa      	str	r2, [r7, #92]	; 0x5c
 800195a:	3360      	adds	r3, #96	; 0x60
 800195c:	443b      	add	r3, r7
 800195e:	2230      	movs	r2, #48	; 0x30
 8001960:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001966:	3b01      	subs	r3, #1
 8001968:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800196a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196c:	2b1f      	cmp	r3, #31
 800196e:	d802      	bhi.n	8001976 <_ftoa+0x18e>
 8001970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001972:	2b09      	cmp	r3, #9
 8001974:	d8ee      	bhi.n	8001954 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800197a:	f7ff f8a7 	bl	8000acc <__aeabi_d2iz>
 800197e:	4603      	mov	r3, r0
 8001980:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001982:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001984:	f7fe fd9e 	bl	80004c4 <__aeabi_i2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001990:	f7fe fc4a 	bl	8000228 <__aeabi_dsub>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	4a4f      	ldr	r2, [pc, #316]	; (8001adc <_ftoa+0x2f4>)
 800199e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fdf6 	bl	8000598 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80019b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80019b8:	f7ff f8b0 	bl	8000b1c <__aeabi_d2uiz>
 80019bc:	4603      	mov	r3, r0
 80019be:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80019c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80019c2:	f7fe fd6f 	bl	80004a4 <__aeabi_ui2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80019ce:	f7fe fc2b 	bl	8000228 <__aeabi_dsub>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <_ftoa+0x2f8>)
 80019e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80019e4:	f7ff f868 	bl	8000ab8 <__aeabi_dcmpgt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d016      	beq.n	8001a1c <_ftoa+0x234>
    ++frac;
 80019ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019f0:	3301      	adds	r3, #1
 80019f2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80019f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80019f6:	f7fe fd55 	bl	80004a4 <__aeabi_ui2d>
 80019fa:	4a38      	ldr	r2, [pc, #224]	; (8001adc <_ftoa+0x2f4>)
 80019fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7ff f84d 	bl	8000aa4 <__aeabi_dcmpge>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01a      	beq.n	8001a46 <_ftoa+0x25e>
      frac = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a16:	3301      	adds	r3, #1
 8001a18:	657b      	str	r3, [r7, #84]	; 0x54
 8001a1a:	e014      	b.n	8001a46 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <_ftoa+0x2f8>)
 8001a22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a26:	f7ff f829 	bl	8000a7c <__aeabi_dcmplt>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <_ftoa+0x258>
 8001a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a42:	3301      	adds	r3, #1
 8001a44:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d14b      	bne.n	8001ae4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8001a4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a4e:	f7fe fd39 	bl	80004c4 <__aeabi_i2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a5a:	f7fe fbe5 	bl	8000228 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001a66:	2301      	movs	r3, #1
 8001a68:	461c      	mov	r4, r3
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <_ftoa+0x2f8>)
 8001a70:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a74:	f7ff f802 	bl	8000a7c <__aeabi_dcmplt>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <_ftoa+0x29a>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	461c      	mov	r4, r3
 8001a82:	b2e3      	uxtb	r3, r4
 8001a84:	f083 0301 	eor.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <_ftoa+0x2ba>
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <_ftoa+0x2f8>)
 8001a94:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a98:	f7ff f80e 	bl	8000ab8 <__aeabi_dcmpgt>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d064      	beq.n	8001b6c <_ftoa+0x384>
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8081 	beq.w	8001bb0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab4:	e07c      	b.n	8001bb0 <_ftoa+0x3c8>
 8001ab6:	bf00      	nop
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	41cdcd65 	.word	0x41cdcd65
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	c1cdcd65 	.word	0xc1cdcd65
 8001ac8:	0800a6f0 	.word	0x0800a6f0
 8001acc:	0800a6f4 	.word	0x0800a6f4
 8001ad0:	7fefffff 	.word	0x7fefffff
 8001ad4:	0800a6fc 	.word	0x0800a6fc
 8001ad8:	0800a704 	.word	0x0800a704
 8001adc:	0800a790 	.word	0x0800a790
 8001ae0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8001ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001ae8:	e01f      	b.n	8001b2a <_ftoa+0x342>
      --count;
 8001aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aec:	3b01      	subs	r3, #1
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001af0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001af2:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <_ftoa+0x4a4>)
 8001af4:	fba3 2301 	umull	r2, r3, r3, r1
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	1aca      	subs	r2, r1, r3
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001b0c:	3230      	adds	r2, #48	; 0x30
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	3360      	adds	r3, #96	; 0x60
 8001b12:	443b      	add	r3, r7
 8001b14:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b1a:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <_ftoa+0x4a4>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	653b      	str	r3, [r7, #80]	; 0x50
 8001b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2c:	2b1f      	cmp	r3, #31
 8001b2e:	d9dc      	bls.n	8001aea <_ftoa+0x302>
 8001b30:	e009      	b.n	8001b46 <_ftoa+0x35e>
        break;
 8001b32:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001b34:	e007      	b.n	8001b46 <_ftoa+0x35e>
      buf[len++] = '0';
 8001b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b3c:	3360      	adds	r3, #96	; 0x60
 8001b3e:	443b      	add	r3, r7
 8001b40:	2230      	movs	r2, #48	; 0x30
 8001b42:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b48:	2b1f      	cmp	r3, #31
 8001b4a:	d804      	bhi.n	8001b56 <_ftoa+0x36e>
 8001b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ef      	bne.n	8001b36 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	2b1f      	cmp	r3, #31
 8001b5a:	d829      	bhi.n	8001bb0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8001b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b62:	3360      	adds	r3, #96	; 0x60
 8001b64:	443b      	add	r3, r7
 8001b66:	222e      	movs	r2, #46	; 0x2e
 8001b68:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001b6c:	e020      	b.n	8001bb0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8001b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b70:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <_ftoa+0x4a8>)
 8001b72:	fb83 1302 	smull	r1, r3, r3, r2
 8001b76:	1099      	asrs	r1, r3, #2
 8001b78:	17d3      	asrs	r3, r2, #31
 8001b7a:	1ac9      	subs	r1, r1, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	1ad1      	subs	r1, r2, r3
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8a:	1c59      	adds	r1, r3, #1
 8001b8c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001b8e:	3230      	adds	r2, #48	; 0x30
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	3360      	adds	r3, #96	; 0x60
 8001b94:	443b      	add	r3, r7
 8001b96:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9c:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <_ftoa+0x4a8>)
 8001b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba2:	1092      	asrs	r2, r2, #2
 8001ba4:	17db      	asrs	r3, r3, #31
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8001baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb2:	2b1f      	cmp	r3, #31
 8001bb4:	d9db      	bls.n	8001b6e <_ftoa+0x386>
 8001bb6:	e000      	b.n	8001bba <_ftoa+0x3d2>
      break;
 8001bb8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d123      	bne.n	8001c0c <_ftoa+0x424>
 8001bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01e      	beq.n	8001c0c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d014      	beq.n	8001bfe <_ftoa+0x416>
 8001bd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d104      	bne.n	8001be6 <_ftoa+0x3fe>
 8001bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <_ftoa+0x416>
      width--;
 8001be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be8:	3b01      	subs	r3, #1
 8001bea:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001bec:	e007      	b.n	8001bfe <_ftoa+0x416>
      buf[len++] = '0';
 8001bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bf4:	3360      	adds	r3, #96	; 0x60
 8001bf6:	443b      	add	r3, r7
 8001bf8:	2230      	movs	r2, #48	; 0x30
 8001bfa:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001bfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d202      	bcs.n	8001c0c <_ftoa+0x424>
 8001c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c08:	2b1f      	cmp	r3, #31
 8001c0a:	d9f0      	bls.n	8001bee <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0e:	2b1f      	cmp	r3, #31
 8001c10:	d827      	bhi.n	8001c62 <_ftoa+0x47a>
    if (negative) {
 8001c12:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <_ftoa+0x444>
      buf[len++] = '-';
 8001c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c20:	3360      	adds	r3, #96	; 0x60
 8001c22:	443b      	add	r3, r7
 8001c24:	222d      	movs	r2, #45	; 0x2d
 8001c26:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001c2a:	e01a      	b.n	8001c62 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8001c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c3c:	3360      	adds	r3, #96	; 0x60
 8001c3e:	443b      	add	r3, r7
 8001c40:	222b      	movs	r2, #43	; 0x2b
 8001c42:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001c46:	e00c      	b.n	8001c62 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8001c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <_ftoa+0x47a>
      buf[len++] = ' ';
 8001c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c58:	3360      	adds	r3, #96	; 0x60
 8001c5a:	443b      	add	r3, r7
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c64:	9303      	str	r3, [sp, #12]
 8001c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	6939      	ldr	r1, [r7, #16]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff fbb4 	bl	80013e8 <_out_rev>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3764      	adds	r7, #100	; 0x64
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	cccccccd 	.word	0xcccccccd
 8001c90:	66666667 	.word	0x66666667
 8001c94:	00000000 	.word	0x00000000

08001c98 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c9c:	b09f      	sub	sp, #124	; 0x7c
 8001c9e:	af06      	add	r7, sp, #24
 8001ca0:	6278      	str	r0, [r7, #36]	; 0x24
 8001ca2:	6239      	str	r1, [r7, #32]
 8001ca4:	61fa      	str	r2, [r7, #28]
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001cac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cb4:	f7fe fed8 	bl	8000a68 <__aeabi_dcmpeq>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d014      	beq.n	8001ce8 <_etoa+0x50>
 8001cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc2:	4bc1      	ldr	r3, [pc, #772]	; (8001fc8 <_etoa+0x330>)
 8001cc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc8:	f7fe fef6 	bl	8000ab8 <__aeabi_dcmpgt>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10a      	bne.n	8001ce8 <_etoa+0x50>
 8001cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001cda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cde:	f7fe fecd 	bl	8000a7c <__aeabi_dcmplt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d012      	beq.n	8001d0e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	ed97 0b04 	vldr	d0, [r7, #16]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	6a39      	ldr	r1, [r7, #32]
 8001d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d06:	f7ff fd6f 	bl	80017e8 <_ftoa>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	e23f      	b.n	800218e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	461e      	mov	r6, r3
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d1e:	f7fe fead 	bl	8000a7c <__aeabi_dcmplt>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <_etoa+0x94>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	461e      	mov	r6, r3
 8001d2c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8001d30:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <_etoa+0xb4>
    value = -value;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	ed97 7b00 	vldr	d7, [r7]
 8001d48:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8001d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001d58:	2306      	movs	r3, #6
 8001d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001d5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	0d0a      	lsrs	r2, r1, #20
 8001d74:	2300      	movs	r3, #0
 8001d76:	4613      	mov	r3, r2
 8001d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d86:	4690      	mov	r8, r2
 8001d88:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8001d8c:	4644      	mov	r4, r8
 8001d8e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8001d92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8001d96:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001d9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d9c:	f7fe fb92 	bl	80004c4 <__aeabi_i2d>
 8001da0:	a37d      	add	r3, pc, #500	; (adr r3, 8001f98 <_etoa+0x300>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fbf7 	bl	8000598 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	a37b      	add	r3, pc, #492	; (adr r3, 8001fa0 <_etoa+0x308>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe fa38 	bl	800022c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4614      	mov	r4, r2
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b7f      	ldr	r3, [pc, #508]	; (8001fcc <_etoa+0x334>)
 8001dce:	f7fe fa2b 	bl	8000228 <__aeabi_dsub>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	a373      	add	r3, pc, #460	; (adr r3, 8001fa8 <_etoa+0x310>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fbda 	bl	8000598 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4620      	mov	r0, r4
 8001dea:	4629      	mov	r1, r5
 8001dec:	f7fe fa1e 	bl	800022c <__adddf3>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fe68 	bl	8000acc <__aeabi_d2iz>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8001e00:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e02:	f7fe fb5f 	bl	80004c4 <__aeabi_i2d>
 8001e06:	a36a      	add	r3, pc, #424	; (adr r3, 8001fb0 <_etoa+0x318>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fbc4 	bl	8000598 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b6c      	ldr	r3, [pc, #432]	; (8001fd0 <_etoa+0x338>)
 8001e1e:	f7fe fa05 	bl	800022c <__adddf3>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe fe4f 	bl	8000acc <__aeabi_d2iz>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001e32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e34:	f7fe fb46 	bl	80004c4 <__aeabi_i2d>
 8001e38:	a35f      	add	r3, pc, #380	; (adr r3, 8001fb8 <_etoa+0x320>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fbab 	bl	8000598 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4614      	mov	r4, r2
 8001e48:	461d      	mov	r5, r3
 8001e4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e4c:	f7fe fb3a 	bl	80004c4 <__aeabi_i2d>
 8001e50:	a35b      	add	r3, pc, #364	; (adr r3, 8001fc0 <_etoa+0x328>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fb9f 	bl	8000598 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4620      	mov	r0, r4
 8001e60:	4629      	mov	r1, r5
 8001e62:	f7fe f9e1 	bl	8000228 <__aeabi_dsub>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8001e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001e76:	f7fe fb8f 	bl	8000598 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8001e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e84:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001e88:	17da      	asrs	r2, r3, #31
 8001e8a:	469a      	mov	sl, r3
 8001e8c:	4693      	mov	fp, r2
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001ea0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001ea4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	f7fe f9be 	bl	800022c <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4690      	mov	r8, r2
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ec4:	f7fe f9b0 	bl	8000228 <__aeabi_dsub>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4692      	mov	sl, r2
 8001ece:	469b      	mov	fp, r3
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <_etoa+0x33c>)
 8001ed6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001eda:	f7fe fc87 	bl	80007ec <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <_etoa+0x340>)
 8001eec:	f7fe f99e 	bl	800022c <__adddf3>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ef8:	f7fe fc78 	bl	80007ec <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <_etoa+0x344>)
 8001f0a:	f7fe f98f 	bl	800022c <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f16:	f7fe fc69 	bl	80007ec <__aeabi_ddiv>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4650      	mov	r0, sl
 8001f20:	4659      	mov	r1, fp
 8001f22:	f7fe f983 	bl	800022c <__adddf3>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4640      	mov	r0, r8
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	f7fe fc5d 	bl	80007ec <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <_etoa+0x348>)
 8001f40:	f7fe f974 	bl	800022c <__adddf3>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4620      	mov	r0, r4
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	f7fe fb24 	bl	8000598 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8001f58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f60:	f7fe fd8c 	bl	8000a7c <__aeabi_dcmplt>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00d      	beq.n	8001f86 <_etoa+0x2ee>
    expval--;
 8001f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8001f70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <_etoa+0x340>)
 8001f7a:	f7fe fc37 	bl	80007ec <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8001f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f88:	2b63      	cmp	r3, #99	; 0x63
 8001f8a:	dc2b      	bgt.n	8001fe4 <_etoa+0x34c>
 8001f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001f92:	db27      	blt.n	8001fe4 <_etoa+0x34c>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e026      	b.n	8001fe6 <_etoa+0x34e>
 8001f98:	509f79fb 	.word	0x509f79fb
 8001f9c:	3fd34413 	.word	0x3fd34413
 8001fa0:	8b60c8b3 	.word	0x8b60c8b3
 8001fa4:	3fc68a28 	.word	0x3fc68a28
 8001fa8:	636f4361 	.word	0x636f4361
 8001fac:	3fd287a7 	.word	0x3fd287a7
 8001fb0:	0979a371 	.word	0x0979a371
 8001fb4:	400a934f 	.word	0x400a934f
 8001fb8:	bbb55516 	.word	0xbbb55516
 8001fbc:	40026bb1 	.word	0x40026bb1
 8001fc0:	fefa39ef 	.word	0xfefa39ef
 8001fc4:	3fe62e42 	.word	0x3fe62e42
 8001fc8:	7fefffff 	.word	0x7fefffff
 8001fcc:	3ff80000 	.word	0x3ff80000
 8001fd0:	3fe00000 	.word	0x3fe00000
 8001fd4:	402c0000 	.word	0x402c0000
 8001fd8:	40240000 	.word	0x40240000
 8001fdc:	40180000 	.word	0x40180000
 8001fe0:	3ff00000 	.word	0x3ff00000
 8001fe4:	2305      	movs	r3, #5
 8001fe6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8001fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d03d      	beq.n	8002070 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8001ff4:	a368      	add	r3, pc, #416	; (adr r3, 8002198 <_etoa+0x500>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ffe:	f7fe fd51 	bl	8000aa4 <__aeabi_dcmpge>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d024      	beq.n	8002052 <_etoa+0x3ba>
 8002008:	a365      	add	r3, pc, #404	; (adr r3, 80021a0 <_etoa+0x508>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002012:	f7fe fd33 	bl	8000a7c <__aeabi_dcmplt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01a      	beq.n	8002052 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800201c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002022:	429a      	cmp	r2, r3
 8002024:	da07      	bge.n	8002036 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002026:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800202a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002034:	e002      	b.n	800203c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800203c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002050:	e00e      	b.n	8002070 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <_etoa+0x3d8>
 800205a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <_etoa+0x3d8>
        --prec;
 8002066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800206a:	3b01      	subs	r3, #1
 800206c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002074:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002076:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800207a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800207c:	429a      	cmp	r2, r3
 800207e:	d904      	bls.n	800208a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	657b      	str	r3, [r7, #84]	; 0x54
 8002088:	e001      	b.n	800208e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800208e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <_etoa+0x40c>
 800209a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80020a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <_etoa+0x426>
    value /= conv.F;
 80020aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020b2:	f7fe fb9b 	bl	80007ec <__aeabi_ddiv>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80020c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <_etoa+0x440>
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e003      	b.n	80020e0 <_etoa+0x448>
 80020d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80020dc:	ed87 7b02 	vstr	d7, [r7, #8]
 80020e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	6a39      	ldr	r1, [r7, #32]
 80020fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002100:	f7ff fb72 	bl	80017e8 <_ftoa>
 8002104:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03f      	beq.n	800218c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800210c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <_etoa+0x484>
 8002118:	2045      	movs	r0, #69	; 0x45
 800211a:	e000      	b.n	800211e <_etoa+0x486>
 800211c:	2065      	movs	r0, #101	; 0x65
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	1c53      	adds	r3, r2, #1
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212e:	2b00      	cmp	r3, #0
 8002130:	bfb8      	it	lt
 8002132:	425b      	neglt	r3, r3
 8002134:	4618      	mov	r0, r3
 8002136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002138:	0fdb      	lsrs	r3, r3, #31
 800213a:	b2db      	uxtb	r3, r3
 800213c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800213e:	3a01      	subs	r2, #1
 8002140:	2105      	movs	r1, #5
 8002142:	9105      	str	r1, [sp, #20]
 8002144:	9204      	str	r2, [sp, #16]
 8002146:	2200      	movs	r2, #0
 8002148:	9203      	str	r2, [sp, #12]
 800214a:	220a      	movs	r2, #10
 800214c:	9202      	str	r2, [sp, #8]
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	9000      	str	r0, [sp, #0]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	6a39      	ldr	r1, [r7, #32]
 8002158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800215a:	f7ff fa71 	bl	8001640 <_ntoa_long>
 800215e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00f      	beq.n	800218c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800216c:	e007      	b.n	800217e <_etoa+0x4e6>
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	1c53      	adds	r3, r2, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	2020      	movs	r0, #32
 800217c:	47a0      	blx	r4
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f0      	bhi.n	800216e <_etoa+0x4d6>
    }
  }
  return idx;
 800218c:	69fb      	ldr	r3, [r7, #28]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3764      	adds	r7, #100	; 0x64
 8002192:	46bd      	mov	sp, r7
 8002194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002198:	eb1c432d 	.word	0xeb1c432d
 800219c:	3f1a36e2 	.word	0x3f1a36e2
 80021a0:	00000000 	.word	0x00000000
 80021a4:	412e8480 	.word	0x412e8480

080021a8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80021a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ac:	b0a3      	sub	sp, #140	; 0x8c
 80021ae:	af0a      	add	r7, sp, #40	; 0x28
 80021b0:	6178      	str	r0, [r7, #20]
 80021b2:	6139      	str	r1, [r7, #16]
 80021b4:	60fa      	str	r2, [r7, #12]
 80021b6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 84cf 	bne.w	8002b62 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 80021c4:	4ba8      	ldr	r3, [pc, #672]	; (8002468 <_vsnprintf+0x2c0>)
 80021c6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80021c8:	f000 bccb 	b.w	8002b62 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b25      	cmp	r3, #37	; 0x25
 80021d2:	d00d      	beq.n	80021f0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	7818      	ldrb	r0, [r3, #0]
 80021d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021da:	1c53      	adds	r3, r2, #1
 80021dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021de:	697c      	ldr	r4, [r7, #20]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6939      	ldr	r1, [r7, #16]
 80021e4:	47a0      	blx	r4
      format++;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	3301      	adds	r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
      continue;
 80021ec:	f000 bcb9 	b.w	8002b62 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	3301      	adds	r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	3b20      	subs	r3, #32
 8002200:	2b10      	cmp	r3, #16
 8002202:	d857      	bhi.n	80022b4 <_vsnprintf+0x10c>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <_vsnprintf+0x64>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	0800228d 	.word	0x0800228d
 8002210:	080022b5 	.word	0x080022b5
 8002214:	080022b5 	.word	0x080022b5
 8002218:	080022a1 	.word	0x080022a1
 800221c:	080022b5 	.word	0x080022b5
 8002220:	080022b5 	.word	0x080022b5
 8002224:	080022b5 	.word	0x080022b5
 8002228:	080022b5 	.word	0x080022b5
 800222c:	080022b5 	.word	0x080022b5
 8002230:	080022b5 	.word	0x080022b5
 8002234:	080022b5 	.word	0x080022b5
 8002238:	08002279 	.word	0x08002279
 800223c:	080022b5 	.word	0x080022b5
 8002240:	08002265 	.word	0x08002265
 8002244:	080022b5 	.word	0x080022b5
 8002248:	080022b5 	.word	0x080022b5
 800224c:	08002251 	.word	0x08002251
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3301      	adds	r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	2301      	movs	r3, #1
 8002260:	653b      	str	r3, [r7, #80]	; 0x50
 8002262:	e02a      	b.n	80022ba <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3301      	adds	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	2301      	movs	r3, #1
 8002274:	653b      	str	r3, [r7, #80]	; 0x50
 8002276:	e020      	b.n	80022ba <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	3301      	adds	r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	2301      	movs	r3, #1
 8002288:	653b      	str	r3, [r7, #80]	; 0x50
 800228a:	e016      	b.n	80022ba <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800228c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3301      	adds	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	2301      	movs	r3, #1
 800229c:	653b      	str	r3, [r7, #80]	; 0x50
 800229e:	e00c      	b.n	80022ba <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80022a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a2:	f043 0310 	orr.w	r3, r3, #16
 80022a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3301      	adds	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	2301      	movs	r3, #1
 80022b0:	653b      	str	r3, [r7, #80]	; 0x50
 80022b2:	e002      	b.n	80022ba <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80022b4:	2300      	movs	r3, #0
 80022b6:	653b      	str	r3, [r7, #80]	; 0x50
 80022b8:	bf00      	nop
      }
    } while (n);
 80022ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d19c      	bne.n	80021fa <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f852 	bl	8001372 <_is_digit>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 80022d4:	f107 0308 	add.w	r3, r7, #8
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff f861 	bl	80013a0 <_atoi>
 80022de:	65b8      	str	r0, [r7, #88]	; 0x58
 80022e0:	e01a      	b.n	8002318 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b2a      	cmp	r3, #42	; 0x2a
 80022e8:	d116      	bne.n	8002318 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80022ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ee:	1d1a      	adds	r2, r3, #4
 80022f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da07      	bge.n	800230e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80022fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	425b      	negs	r3, r3
 800230a:	65bb      	str	r3, [r7, #88]	; 0x58
 800230c:	e001      	b.n	8002312 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3301      	adds	r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b2e      	cmp	r3, #46	; 0x2e
 8002322:	d127      	bne.n	8002374 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8002324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	3301      	adds	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f81b 	bl	8001372 <_is_digit>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f82a 	bl	80013a0 <_atoi>
 800234c:	6578      	str	r0, [r7, #84]	; 0x54
 800234e:	e011      	b.n	8002374 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b2a      	cmp	r3, #42	; 0x2a
 8002356:	d10d      	bne.n	8002374 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002358:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800235c:	1d1a      	adds	r2, r3, #4
 800235e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800236c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3301      	adds	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	3b68      	subs	r3, #104	; 0x68
 800237a:	2b12      	cmp	r3, #18
 800237c:	d866      	bhi.n	800244c <_vsnprintf+0x2a4>
 800237e:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <_vsnprintf+0x1dc>)
 8002380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002384:	080023f7 	.word	0x080023f7
 8002388:	0800244d 	.word	0x0800244d
 800238c:	0800242d 	.word	0x0800242d
 8002390:	0800244d 	.word	0x0800244d
 8002394:	080023d1 	.word	0x080023d1
 8002398:	0800244d 	.word	0x0800244d
 800239c:	0800244d 	.word	0x0800244d
 80023a0:	0800244d 	.word	0x0800244d
 80023a4:	0800244d 	.word	0x0800244d
 80023a8:	0800244d 	.word	0x0800244d
 80023ac:	0800244d 	.word	0x0800244d
 80023b0:	0800244d 	.word	0x0800244d
 80023b4:	0800241d 	.word	0x0800241d
 80023b8:	0800244d 	.word	0x0800244d
 80023bc:	0800244d 	.word	0x0800244d
 80023c0:	0800244d 	.word	0x0800244d
 80023c4:	0800244d 	.word	0x0800244d
 80023c8:	0800244d 	.word	0x0800244d
 80023cc:	0800243d 	.word	0x0800243d
      case 'l' :
        flags |= FLAGS_LONG;
 80023d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	3301      	adds	r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b6c      	cmp	r3, #108	; 0x6c
 80023e4:	d134      	bne.n	8002450 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80023e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ec:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3301      	adds	r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
        }
        break;
 80023f4:	e02c      	b.n	8002450 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80023f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3301      	adds	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b68      	cmp	r3, #104	; 0x68
 800240a:	d123      	bne.n	8002454 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 800240c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002412:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3301      	adds	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
        }
        break;
 800241a:	e01b      	b.n	8002454 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800241c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3301      	adds	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
        break;
 800242a:	e014      	b.n	8002456 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800242c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002432:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3301      	adds	r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
        break;
 800243a:	e00c      	b.n	8002456 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800243c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002442:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
        break;
 800244a:	e004      	b.n	8002456 <_vsnprintf+0x2ae>
      default :
        break;
 800244c:	bf00      	nop
 800244e:	e002      	b.n	8002456 <_vsnprintf+0x2ae>
        break;
 8002450:	bf00      	nop
 8002452:	e000      	b.n	8002456 <_vsnprintf+0x2ae>
        break;
 8002454:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b67      	cmp	r3, #103	; 0x67
 800245c:	f300 80b8 	bgt.w	80025d0 <_vsnprintf+0x428>
 8002460:	2b25      	cmp	r3, #37	; 0x25
 8002462:	da27      	bge.n	80024b4 <_vsnprintf+0x30c>
 8002464:	e370      	b.n	8002b48 <_vsnprintf+0x9a0>
 8002466:	bf00      	nop
 8002468:	080012f7 	.word	0x080012f7
 800246c:	3b69      	subs	r3, #105	; 0x69
 800246e:	2201      	movs	r2, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	f249 0241 	movw	r2, #36929	; 0x9041
 8002478:	401a      	ands	r2, r3
 800247a:	2a00      	cmp	r2, #0
 800247c:	bf14      	ite	ne
 800247e:	2201      	movne	r2, #1
 8002480:	2200      	moveq	r2, #0
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	2a00      	cmp	r2, #0
 8002486:	f040 80aa 	bne.w	80025de <_vsnprintf+0x436>
 800248a:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800248e:	2a00      	cmp	r2, #0
 8002490:	bf14      	ite	ne
 8002492:	2201      	movne	r2, #1
 8002494:	2200      	moveq	r2, #0
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	2a00      	cmp	r2, #0
 800249a:	f040 82fb 	bne.w	8002a94 <_vsnprintf+0x8ec>
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 828d 	bne.w	80029cc <_vsnprintf+0x824>
 80024b2:	e349      	b.n	8002b48 <_vsnprintf+0x9a0>
 80024b4:	3b25      	subs	r3, #37	; 0x25
 80024b6:	2b42      	cmp	r3, #66	; 0x42
 80024b8:	f200 8346 	bhi.w	8002b48 <_vsnprintf+0x9a0>
 80024bc:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <_vsnprintf+0x31c>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	08002b31 	.word	0x08002b31
 80024c8:	08002b49 	.word	0x08002b49
 80024cc:	08002b49 	.word	0x08002b49
 80024d0:	08002b49 	.word	0x08002b49
 80024d4:	08002b49 	.word	0x08002b49
 80024d8:	08002b49 	.word	0x08002b49
 80024dc:	08002b49 	.word	0x08002b49
 80024e0:	08002b49 	.word	0x08002b49
 80024e4:	08002b49 	.word	0x08002b49
 80024e8:	08002b49 	.word	0x08002b49
 80024ec:	08002b49 	.word	0x08002b49
 80024f0:	08002b49 	.word	0x08002b49
 80024f4:	08002b49 	.word	0x08002b49
 80024f8:	08002b49 	.word	0x08002b49
 80024fc:	08002b49 	.word	0x08002b49
 8002500:	08002b49 	.word	0x08002b49
 8002504:	08002b49 	.word	0x08002b49
 8002508:	08002b49 	.word	0x08002b49
 800250c:	08002b49 	.word	0x08002b49
 8002510:	08002b49 	.word	0x08002b49
 8002514:	08002b49 	.word	0x08002b49
 8002518:	08002b49 	.word	0x08002b49
 800251c:	08002b49 	.word	0x08002b49
 8002520:	08002b49 	.word	0x08002b49
 8002524:	08002b49 	.word	0x08002b49
 8002528:	08002b49 	.word	0x08002b49
 800252c:	08002b49 	.word	0x08002b49
 8002530:	08002b49 	.word	0x08002b49
 8002534:	08002b49 	.word	0x08002b49
 8002538:	08002b49 	.word	0x08002b49
 800253c:	08002b49 	.word	0x08002b49
 8002540:	08002b49 	.word	0x08002b49
 8002544:	080028e5 	.word	0x080028e5
 8002548:	08002895 	.word	0x08002895
 800254c:	080028e5 	.word	0x080028e5
 8002550:	08002b49 	.word	0x08002b49
 8002554:	08002b49 	.word	0x08002b49
 8002558:	08002b49 	.word	0x08002b49
 800255c:	08002b49 	.word	0x08002b49
 8002560:	08002b49 	.word	0x08002b49
 8002564:	08002b49 	.word	0x08002b49
 8002568:	08002b49 	.word	0x08002b49
 800256c:	08002b49 	.word	0x08002b49
 8002570:	08002b49 	.word	0x08002b49
 8002574:	08002b49 	.word	0x08002b49
 8002578:	08002b49 	.word	0x08002b49
 800257c:	08002b49 	.word	0x08002b49
 8002580:	08002b49 	.word	0x08002b49
 8002584:	08002b49 	.word	0x08002b49
 8002588:	08002b49 	.word	0x08002b49
 800258c:	08002b49 	.word	0x08002b49
 8002590:	080025df 	.word	0x080025df
 8002594:	08002b49 	.word	0x08002b49
 8002598:	08002b49 	.word	0x08002b49
 800259c:	08002b49 	.word	0x08002b49
 80025a0:	08002b49 	.word	0x08002b49
 80025a4:	08002b49 	.word	0x08002b49
 80025a8:	08002b49 	.word	0x08002b49
 80025ac:	08002b49 	.word	0x08002b49
 80025b0:	08002b49 	.word	0x08002b49
 80025b4:	08002b49 	.word	0x08002b49
 80025b8:	080025df 	.word	0x080025df
 80025bc:	08002955 	.word	0x08002955
 80025c0:	080025df 	.word	0x080025df
 80025c4:	080028e5 	.word	0x080028e5
 80025c8:	08002895 	.word	0x08002895
 80025cc:	080028e5 	.word	0x080028e5
 80025d0:	2b78      	cmp	r3, #120	; 0x78
 80025d2:	f300 82b9 	bgt.w	8002b48 <_vsnprintf+0x9a0>
 80025d6:	2b69      	cmp	r3, #105	; 0x69
 80025d8:	f6bf af48 	bge.w	800246c <_vsnprintf+0x2c4>
 80025dc:	e2b4      	b.n	8002b48 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b78      	cmp	r3, #120	; 0x78
 80025e4:	d003      	beq.n	80025ee <_vsnprintf+0x446>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b58      	cmp	r3, #88	; 0x58
 80025ec:	d102      	bne.n	80025f4 <_vsnprintf+0x44c>
          base = 16U;
 80025ee:	2310      	movs	r3, #16
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f2:	e013      	b.n	800261c <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b6f      	cmp	r3, #111	; 0x6f
 80025fa:	d102      	bne.n	8002602 <_vsnprintf+0x45a>
          base =  8U;
 80025fc:	2308      	movs	r3, #8
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002600:	e00c      	b.n	800261c <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b62      	cmp	r3, #98	; 0x62
 8002608:	d102      	bne.n	8002610 <_vsnprintf+0x468>
          base =  2U;
 800260a:	2302      	movs	r3, #2
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
 800260e:	e005      	b.n	800261c <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8002610:	230a      	movs	r3, #10
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002616:	f023 0310 	bic.w	r3, r3, #16
 800261a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b58      	cmp	r3, #88	; 0x58
 8002622:	d103      	bne.n	800262c <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8002624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002626:	f043 0320 	orr.w	r3, r3, #32
 800262a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b69      	cmp	r3, #105	; 0x69
 8002632:	d007      	beq.n	8002644 <_vsnprintf+0x49c>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b64      	cmp	r3, #100	; 0x64
 800263a:	d003      	beq.n	8002644 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800263c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263e:	f023 030c 	bic.w	r3, r3, #12
 8002642:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 800264e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b69      	cmp	r3, #105	; 0x69
 800265c:	d004      	beq.n	8002668 <_vsnprintf+0x4c0>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	f040 8098 	bne.w	8002798 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d031      	beq.n	80026d6 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002676:	3307      	adds	r3, #7
 8002678:	f023 0307 	bic.w	r3, r3, #7
 800267c:	f103 0208 	add.w	r2, r3, #8
 8002680:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800268c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	da06      	bge.n	80026a2 <_vsnprintf+0x4fa>
 8002694:	2100      	movs	r1, #0
 8002696:	f1d2 0800 	rsbs	r8, r2, #0
 800269a:	eb61 0903 	sbc.w	r9, r1, r3
 800269e:	4642      	mov	r2, r8
 80026a0:	464b      	mov	r3, r9
 80026a2:	69f9      	ldr	r1, [r7, #28]
 80026a4:	0fc9      	lsrs	r1, r1, #31
 80026a6:	b2c9      	uxtb	r1, r1
 80026a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026aa:	2400      	movs	r4, #0
 80026ac:	4682      	mov	sl, r0
 80026ae:	46a3      	mov	fp, r4
 80026b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026b2:	9008      	str	r0, [sp, #32]
 80026b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80026b6:	9007      	str	r0, [sp, #28]
 80026b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026ba:	9006      	str	r0, [sp, #24]
 80026bc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80026c0:	9102      	str	r1, [sp, #8]
 80026c2:	e9cd 2300 	strd	r2, r3, [sp]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ca:	6939      	ldr	r1, [r7, #16]
 80026cc:	6978      	ldr	r0, [r7, #20]
 80026ce:	f7ff f81d 	bl	800170c <_ntoa_long_long>
 80026d2:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80026d4:	e0da      	b.n	800288c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80026d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 80026e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026e4:	1d1a      	adds	r2, r3, #4
 80026e6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bfb8      	it	lt
 80026f4:	425b      	neglt	r3, r3
 80026f6:	4619      	mov	r1, r3
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	0fdb      	lsrs	r3, r3, #31
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002700:	9205      	str	r2, [sp, #20]
 8002702:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002704:	9204      	str	r2, [sp, #16]
 8002706:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002708:	9203      	str	r2, [sp, #12]
 800270a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800270c:	9202      	str	r2, [sp, #8]
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	9100      	str	r1, [sp, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002716:	6939      	ldr	r1, [r7, #16]
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f7fe ff91 	bl	8001640 <_ntoa_long>
 800271e:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002720:	e0b4      	b.n	800288c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <_vsnprintf+0x594>
 800272c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002730:	1d1a      	adds	r2, r3, #4
 8002732:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e012      	b.n	8002762 <_vsnprintf+0x5ba>
 800273c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <_vsnprintf+0x5ae>
 8002746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800274a:	1d1a      	adds	r2, r3, #4
 800274c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b21b      	sxth	r3, r3
 8002754:	e005      	b.n	8002762 <_vsnprintf+0x5ba>
 8002756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800275a:	1d1a      	adds	r2, r3, #4
 800275c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	bfb8      	it	lt
 800276a:	425b      	neglt	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	0fdb      	lsrs	r3, r3, #31
 8002772:	b2db      	uxtb	r3, r3
 8002774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002776:	9205      	str	r2, [sp, #20]
 8002778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800277a:	9204      	str	r2, [sp, #16]
 800277c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800277e:	9203      	str	r2, [sp, #12]
 8002780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002782:	9202      	str	r2, [sp, #8]
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	9100      	str	r1, [sp, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800278c:	6939      	ldr	r1, [r7, #16]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7fe ff56 	bl	8001640 <_ntoa_long>
 8002794:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002796:	e079      	b.n	800288c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d022      	beq.n	80027e8 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80027a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a6:	3307      	adds	r3, #7
 80027a8:	f023 0307 	bic.w	r3, r3, #7
 80027ac:	f103 0208 	add.w	r2, r3, #8
 80027b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80027ba:	2000      	movs	r0, #0
 80027bc:	460d      	mov	r5, r1
 80027be:	4606      	mov	r6, r0
 80027c0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80027c2:	9108      	str	r1, [sp, #32]
 80027c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80027c6:	9107      	str	r1, [sp, #28]
 80027c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027ca:	9106      	str	r1, [sp, #24]
 80027cc:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80027d0:	2100      	movs	r1, #0
 80027d2:	9102      	str	r1, [sp, #8]
 80027d4:	e9cd 2300 	strd	r2, r3, [sp]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027dc:	6939      	ldr	r1, [r7, #16]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7fe ff94 	bl	800170c <_ntoa_long_long>
 80027e4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80027e6:	e051      	b.n	800288c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80027e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80027f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f6:	1d1a      	adds	r2, r3, #4
 80027f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002800:	9205      	str	r2, [sp, #20]
 8002802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002804:	9204      	str	r2, [sp, #16]
 8002806:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002808:	9203      	str	r2, [sp, #12]
 800280a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800280c:	9202      	str	r2, [sp, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	9201      	str	r2, [sp, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002818:	6939      	ldr	r1, [r7, #16]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7fe ff10 	bl	8001640 <_ntoa_long>
 8002820:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002822:	e033      	b.n	800288c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <_vsnprintf+0x696>
 800282e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002832:	1d1a      	adds	r2, r3, #4
 8002834:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	e012      	b.n	8002864 <_vsnprintf+0x6bc>
 800283e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <_vsnprintf+0x6b0>
 8002848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800284c:	1d1a      	adds	r2, r3, #4
 800284e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	e005      	b.n	8002864 <_vsnprintf+0x6bc>
 8002858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800285c:	1d1a      	adds	r2, r3, #4
 800285e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002868:	9305      	str	r3, [sp, #20]
 800286a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002870:	9303      	str	r3, [sp, #12]
 8002872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002874:	9302      	str	r3, [sp, #8]
 8002876:	2300      	movs	r3, #0
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002882:	6939      	ldr	r1, [r7, #16]
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f7fe fedb 	bl	8001640 <_ntoa_long>
 800288a:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
        break;
 8002892:	e166      	b.n	8002b62 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b46      	cmp	r3, #70	; 0x46
 800289a:	d103      	bne.n	80028a4 <_vsnprintf+0x6fc>
 800289c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289e:	f043 0320 	orr.w	r3, r3, #32
 80028a2:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80028a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028a8:	3307      	adds	r3, #7
 80028aa:	f023 0307 	bic.w	r3, r3, #7
 80028ae:	f103 0208 	add.w	r2, r3, #8
 80028b2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028b6:	ed93 7b00 	vldr	d7, [r3]
 80028ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ca:	eef0 0a67 	vmov.f32	s1, s15
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d2:	6939      	ldr	r1, [r7, #16]
 80028d4:	6978      	ldr	r0, [r7, #20]
 80028d6:	f7fe ff87 	bl	80017e8 <_ftoa>
 80028da:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	3301      	adds	r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
        break;
 80028e2:	e13e      	b.n	8002b62 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b67      	cmp	r3, #103	; 0x67
 80028ea:	d003      	beq.n	80028f4 <_vsnprintf+0x74c>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b47      	cmp	r3, #71	; 0x47
 80028f2:	d103      	bne.n	80028fc <_vsnprintf+0x754>
 80028f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b45      	cmp	r3, #69	; 0x45
 8002902:	d003      	beq.n	800290c <_vsnprintf+0x764>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b47      	cmp	r3, #71	; 0x47
 800290a:	d103      	bne.n	8002914 <_vsnprintf+0x76c>
 800290c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002918:	3307      	adds	r3, #7
 800291a:	f023 0307 	bic.w	r3, r3, #7
 800291e:	f103 0208 	add.w	r2, r3, #8
 8002922:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002926:	ed93 7b00 	vldr	d7, [r3]
 800292a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	eeb0 0a47 	vmov.f32	s0, s14
 800293a:	eef0 0a67 	vmov.f32	s1, s15
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002942:	6939      	ldr	r1, [r7, #16]
 8002944:	6978      	ldr	r0, [r7, #20]
 8002946:	f7ff f9a7 	bl	8001c98 <_etoa>
 800294a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	3301      	adds	r3, #1
 8002950:	60bb      	str	r3, [r7, #8]
        break;
 8002952:	e106      	b.n	8002b62 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002954:	2301      	movs	r3, #1
 8002956:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10e      	bne.n	8002980 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8002962:	e007      	b.n	8002974 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8002964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002966:	1c53      	adds	r3, r2, #1
 8002968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800296a:	697c      	ldr	r4, [r7, #20]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6939      	ldr	r1, [r7, #16]
 8002970:	2020      	movs	r0, #32
 8002972:	47a0      	blx	r4
          while (l++ < width) {
 8002974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	647a      	str	r2, [r7, #68]	; 0x44
 800297a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800297c:	429a      	cmp	r2, r3
 800297e:	d8f1      	bhi.n	8002964 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002980:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002984:	1d1a      	adds	r2, r3, #4
 8002986:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002990:	1c53      	adds	r3, r2, #1
 8002992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002994:	697c      	ldr	r4, [r7, #20]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6939      	ldr	r1, [r7, #16]
 800299a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00e      	beq.n	80029c4 <_vsnprintf+0x81c>
          while (l++ < width) {
 80029a6:	e007      	b.n	80029b8 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 80029a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029aa:	1c53      	adds	r3, r2, #1
 80029ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ae:	697c      	ldr	r4, [r7, #20]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6939      	ldr	r1, [r7, #16]
 80029b4:	2020      	movs	r0, #32
 80029b6:	47a0      	blx	r4
          while (l++ < width) {
 80029b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	647a      	str	r2, [r7, #68]	; 0x44
 80029be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8f1      	bhi.n	80029a8 <_vsnprintf+0x800>
          }
        }
        format++;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3301      	adds	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
        break;
 80029ca:	e0ca      	b.n	8002b62 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80029cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d0:	1d1a      	adds	r2, r3, #4
 80029d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <_vsnprintf+0x83c>
 80029e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e2:	e001      	b.n	80029e8 <_vsnprintf+0x840>
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	4619      	mov	r1, r3
 80029ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80029ec:	f7fe fca4 	bl	8001338 <_strnlen_s>
 80029f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80029f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80029fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf28      	it	cs
 8002a04:	4613      	movcs	r3, r2
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8002a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d11a      	bne.n	8002a48 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8002a12:	e007      	b.n	8002a24 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8002a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a16:	1c53      	adds	r3, r2, #1
 8002a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a1a:	697c      	ldr	r4, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6939      	ldr	r1, [r7, #16]
 8002a20:	2020      	movs	r0, #32
 8002a22:	47a0      	blx	r4
          while (l++ < width) {
 8002a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f1      	bhi.n	8002a14 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002a30:	e00a      	b.n	8002a48 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8002a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	643a      	str	r2, [r7, #64]	; 0x40
 8002a38:	7818      	ldrb	r0, [r3, #0]
 8002a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a3c:	1c53      	adds	r3, r2, #1
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a40:	697c      	ldr	r4, [r7, #20]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d009      	beq.n	8002a64 <_vsnprintf+0x8bc>
 8002a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0eb      	beq.n	8002a32 <_vsnprintf+0x88a>
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	657a      	str	r2, [r7, #84]	; 0x54
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e6      	bne.n	8002a32 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00e      	beq.n	8002a8c <_vsnprintf+0x8e4>
          while (l++ < width) {
 8002a6e:	e007      	b.n	8002a80 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8002a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a72:	1c53      	adds	r3, r2, #1
 8002a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a76:	697c      	ldr	r4, [r7, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6939      	ldr	r1, [r7, #16]
 8002a7c:	2020      	movs	r0, #32
 8002a7e:	47a0      	blx	r4
          while (l++ < width) {
 8002a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d8f1      	bhi.n	8002a70 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
        break;
 8002a92:	e066      	b.n	8002b62 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002a94:	2308      	movs	r3, #8
 8002a96:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8002aa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d023      	beq.n	8002af6 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ab2:	1d1a      	adds	r2, r3, #4
 8002ab4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	603a      	str	r2, [r7, #0]
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	9308      	str	r3, [sp, #32]
 8002ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac8:	9307      	str	r3, [sp, #28]
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	9306      	str	r3, [sp, #24]
 8002ace:	f04f 0210 	mov.w	r2, #16
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ae2:	e9cd 3400 	strd	r3, r4, [sp]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aea:	6939      	ldr	r1, [r7, #16]
 8002aec:	6978      	ldr	r0, [r7, #20]
 8002aee:	f7fe fe0d 	bl	800170c <_ntoa_long_long>
 8002af2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002af4:	e018      	b.n	8002b28 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002afa:	1d1a      	adds	r2, r3, #4
 8002afc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b06:	9305      	str	r3, [sp, #20]
 8002b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b0a:	9304      	str	r3, [sp, #16]
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	9303      	str	r3, [sp, #12]
 8002b10:	2310      	movs	r3, #16
 8002b12:	9302      	str	r3, [sp, #8]
 8002b14:	2300      	movs	r3, #0
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	9200      	str	r2, [sp, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b1e:	6939      	ldr	r1, [r7, #16]
 8002b20:	6978      	ldr	r0, [r7, #20]
 8002b22:	f7fe fd8d 	bl	8001640 <_ntoa_long>
 8002b26:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
        break;
 8002b2e:	e018      	b.n	8002b62 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b32:	1c53      	adds	r3, r2, #1
 8002b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b36:	697c      	ldr	r4, [r7, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6939      	ldr	r1, [r7, #16]
 8002b3c:	2025      	movs	r0, #37	; 0x25
 8002b3e:	47a0      	blx	r4
        format++;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]
        break;
 8002b46:	e00c      	b.n	8002b62 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	7818      	ldrb	r0, [r3, #0]
 8002b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b4e:	1c53      	adds	r3, r2, #1
 8002b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b52:	697c      	ldr	r4, [r7, #20]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6939      	ldr	r1, [r7, #16]
 8002b58:	47a0      	blx	r4
        format++;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
        break;
 8002b60:	bf00      	nop
  while (*format)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f47f ab30 	bne.w	80021cc <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <_vsnprintf+0x9d2>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	e000      	b.n	8002b7c <_vsnprintf+0x9d4>
 8002b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b7c:	697c      	ldr	r4, [r7, #20]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6939      	ldr	r1, [r7, #16]
 8002b82:	2000      	movs	r0, #0
 8002b84:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3764      	adds	r7, #100	; 0x64
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b92:	bf00      	nop

08002b94 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002b94:	b40f      	push	{r0, r1, r2, r3}
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002ba2:	1d39      	adds	r1, r7, #4
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <printf_+0x34>)
 8002bb0:	f7ff fafa 	bl	80021a8 <_vsnprintf>
 8002bb4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bc2:	b004      	add	sp, #16
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	08001313 	.word	0x08001313

08002bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_MspInit+0x50>)
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd6:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_MspInit+0x50>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_MspInit+0x50>)
 8002be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_MspInit+0x50>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <HAL_MspInit+0x50>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_MspInit+0x50>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	210f      	movs	r1, #15
 8002c06:	f06f 0001 	mvn.w	r0, #1
 8002c0a:	f002 fa25 	bl	8005058 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002c0e:	f002 fcc7 	bl	80055a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c30:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_InitTick+0xc4>)
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_InitTick+0xc4>)
 8002c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c3a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c3c:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <HAL_InitTick+0xc4>)
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c48:	f107 020c 	add.w	r2, r7, #12
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 f99c 	bl	8005f90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c58:	f003 f984 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <HAL_InitTick+0xc8>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0c9b      	lsrs	r3, r3, #18
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_InitTick+0xcc>)
 8002c6e:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <HAL_InitTick+0xd0>)
 8002c70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_InitTick+0xcc>)
 8002c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_InitTick+0xcc>)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <HAL_InitTick+0xcc>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_InitTick+0xcc>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002c8c:	4817      	ldr	r0, [pc, #92]	; (8002cec <HAL_InitTick+0xcc>)
 8002c8e:	f003 fc33 	bl	80064f8 <HAL_TIM_Base_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002ca0:	4812      	ldr	r0, [pc, #72]	; (8002cec <HAL_InitTick+0xcc>)
 8002ca2:	f003 fc8b 	bl	80065bc <HAL_TIM_Base_Start_IT>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d111      	bne.n	8002cd8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002cb4:	2019      	movs	r0, #25
 8002cb6:	f002 f9e9 	bl	800508c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b0f      	cmp	r3, #15
 8002cbe:	d808      	bhi.n	8002cd2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	2019      	movs	r0, #25
 8002cc6:	f002 f9c7 	bl	8005058 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_InitTick+0xd4>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	e002      	b.n	8002cd8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3730      	adds	r7, #48	; 0x30
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	200000f4 	.word	0x200000f4
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	20000004 	.word	0x20000004

08002cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cfc:	e7fe      	b.n	8002cfc <NMI_Handler+0x4>

08002cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <HardFault_Handler+0x4>

08002d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <MemManage_Handler+0x4>

08002d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <ADC1_2_IRQHandler+0x10>)
 8002d2a:	f000 ff67 	bl	8003bfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2000007c 	.word	0x2000007c

08002d38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d3c:	4802      	ldr	r0, [pc, #8]	; (8002d48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002d3e:	f003 fcad 	bl	800669c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200000f4 	.word	0x200000f4

08002d4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002d50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d54:	f002 fb5c 	bl	8005410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <SystemInit+0x20>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <SystemInit+0x20>)
 8002d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002d84:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002d86:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <MX_LPUART1_UART_Init+0x90>)
 8002d88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002d98:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002da6:	220c      	movs	r2, #12
 8002da8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002dc2:	4812      	ldr	r0, [pc, #72]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002dc4:	f003 fed2 	bl	8006b6c <HAL_UART_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002dce:	f7fe fa8d 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002dd6:	f004 fcfb 	bl	80077d0 <HAL_UARTEx_SetTxFifoThreshold>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002de0:	f7fe fa84 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002de4:	2100      	movs	r1, #0
 8002de6:	4809      	ldr	r0, [pc, #36]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002de8:	f004 fd30 	bl	800784c <HAL_UARTEx_SetRxFifoThreshold>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002df2:	f7fe fa7b 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002df6:	4805      	ldr	r0, [pc, #20]	; (8002e0c <MX_LPUART1_UART_Init+0x8c>)
 8002df8:	f004 fcb1 	bl	800775e <HAL_UARTEx_DisableFifoMode>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002e02:	f7fe fa73 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000140 	.word	0x20000140
 8002e10:	40008000 	.word	0x40008000

08002e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b09e      	sub	sp, #120	; 0x78
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	2250      	movs	r2, #80	; 0x50
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f007 fb51 	bl	800a4dc <memset>
  if(uartHandle->Instance==LPUART1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_UART_MspInit+0xa8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d136      	bne.n	8002eb2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e44:	2320      	movs	r3, #32
 8002e46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 f915 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e5c:	f7fe fa46 	bl	80012ec <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_UART_MspInit+0xac>)
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_UART_MspInit+0xac>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_UART_MspInit+0xac>)
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_UART_MspInit+0xac>)
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_UART_MspInit+0xac>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_UART_MspInit+0xac>)
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002e90:	230c      	movs	r3, #12
 8002e92:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002ea0:	230c      	movs	r3, #12
 8002ea2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eae:	f002 f8fb 	bl	80050a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	3778      	adds	r7, #120	; 0x78
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40008000 	.word	0x40008000
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ec4:	480d      	ldr	r0, [pc, #52]	; (8002efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ec6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ec8:	f7ff ff48 	bl	8002d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	; (8002f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <LoopForever+0xe>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	; (8002f10 <LoopForever+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f007 fb51 	bl	800a598 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef6:	f7fe f989 	bl	800120c <main>

08002efa <LoopForever>:

LoopForever:
    b LoopForever
 8002efa:	e7fe      	b.n	8002efa <LoopForever>
  ldr   r0, =_estack
 8002efc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002f08:	0800a830 	.word	0x0800a830
  ldr r2, =_sbss
 8002f0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002f10:	20001d00 	.word	0x20001d00

08002f14 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC3_IRQHandler>

08002f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f20:	2003      	movs	r0, #3
 8002f22:	f002 f88e 	bl	8005042 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f26:	200f      	movs	r0, #15
 8002f28:	f7ff fe7a 	bl	8002c20 <HAL_InitTick>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	71fb      	strb	r3, [r7, #7]
 8002f36:	e001      	b.n	8002f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f38:	f7ff fe48 	bl	8002bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f3c:	79fb      	ldrb	r3, [r7, #7]

}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_IncTick+0x1c>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_IncTick+0x20>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	4a03      	ldr	r2, [pc, #12]	; (8002f64 <HAL_IncTick+0x1c>)
 8002f58:	6013      	str	r3, [r2, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	200001d4 	.word	0x200001d4
 8002f68:	20000008 	.word	0x20000008

08002f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_GetTick+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	200001d4 	.word	0x200001d4

08002f84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3360      	adds	r3, #96	; 0x60
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <LL_ADC_SetOffset+0x44>)
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	4313      	orrs	r3, r2
 800301c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	03fff000 	.word	0x03fff000

08003034 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3360      	adds	r3, #96	; 0x60
 8003042:	461a      	mov	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3360      	adds	r3, #96	; 0x60
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	431a      	orrs	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3360      	adds	r3, #96	; 0x60
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3360      	adds	r3, #96	; 0x60
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	615a      	str	r2, [r3, #20]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3330      	adds	r3, #48	; 0x30
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	4413      	add	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	211f      	movs	r1, #31
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	401a      	ands	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	f003 011f 	and.w	r1, r3, #31
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	431a      	orrs	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3314      	adds	r3, #20
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	0e5b      	lsrs	r3, r3, #25
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	4413      	add	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	0d1b      	lsrs	r3, r3, #20
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2107      	movs	r1, #7
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	401a      	ands	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	0d1b      	lsrs	r3, r3, #20
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323c:	43db      	mvns	r3, r3
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0318 	and.w	r3, r3, #24
 8003246:	4908      	ldr	r1, [pc, #32]	; (8003268 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003248:	40d9      	lsrs	r1, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	400b      	ands	r3, r1
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	0007ffff 	.word	0x0007ffff

0800326c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 031f 	and.w	r3, r3, #31
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80032b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6093      	str	r3, [r2, #8]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003300:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003304:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800332c:	d101      	bne.n	8003332 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800337c:	f043 0202 	orr.w	r2, r3, #2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <LL_ADC_IsEnabled+0x18>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <LL_ADC_IsEnabled+0x1a>
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d101      	bne.n	80033ce <LL_ADC_IsDisableOngoing+0x18>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <LL_ADC_IsDisableOngoing+0x1a>
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033f0:	f043 0204 	orr.w	r2, r3, #4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003418:	f043 0210 	orr.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b04      	cmp	r3, #4
 800343e:	d101      	bne.n	8003444 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003462:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b08      	cmp	r3, #8
 800348c:	d101      	bne.n	8003492 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e19b      	b.n	80037f2 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fd fd3d 	bl	8000f48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fef1 	bl	80032c8 <LL_ADC_IsDeepPowerDownEnabled>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fed7 	bl	80032a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff0c 	bl	8003318 <LL_ADC_IsInternalRegulatorEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fef0 	bl	80032f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003510:	4b97      	ldr	r3, [pc, #604]	; (8003770 <HAL_ADC_Init+0x2d0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	4a97      	ldr	r2, [pc, #604]	; (8003774 <HAL_ADC_Init+0x2d4>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	3301      	adds	r3, #1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003524:	e002      	b.n	800352c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3b01      	subs	r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f9      	bne.n	8003526 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff feee 	bl	8003318 <LL_ADC_IsInternalRegulatorEnabled>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	f043 0210 	orr.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff62 	bl	800342c <LL_ADC_REG_IsConversionOngoing>
 8003568:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8134 	bne.w	80037e0 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 8130 	bne.w	80037e0 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003588:	f043 0202 	orr.w	r2, r3, #2
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fefb 	bl	8003390 <LL_ADC_IsEnabled>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d137      	bne.n	8003610 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035a8:	d004      	beq.n	80035b4 <HAL_ADC_Init+0x114>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a72      	ldr	r2, [pc, #456]	; (8003778 <HAL_ADC_Init+0x2d8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10f      	bne.n	80035d4 <HAL_ADC_Init+0x134>
 80035b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80035b8:	f7ff feea 	bl	8003390 <LL_ADC_IsEnabled>
 80035bc:	4604      	mov	r4, r0
 80035be:	486e      	ldr	r0, [pc, #440]	; (8003778 <HAL_ADC_Init+0x2d8>)
 80035c0:	f7ff fee6 	bl	8003390 <LL_ADC_IsEnabled>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4323      	orrs	r3, r4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e008      	b.n	80035e6 <HAL_ADC_Init+0x146>
 80035d4:	4869      	ldr	r0, [pc, #420]	; (800377c <HAL_ADC_Init+0x2dc>)
 80035d6:	f7ff fedb 	bl	8003390 <LL_ADC_IsEnabled>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f2:	d004      	beq.n	80035fe <HAL_ADC_Init+0x15e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a5f      	ldr	r2, [pc, #380]	; (8003778 <HAL_ADC_Init+0x2d8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Init+0x162>
 80035fe:	4a60      	ldr	r2, [pc, #384]	; (8003780 <HAL_ADC_Init+0x2e0>)
 8003600:	e000      	b.n	8003604 <HAL_ADC_Init+0x164>
 8003602:	4a60      	ldr	r2, [pc, #384]	; (8003784 <HAL_ADC_Init+0x2e4>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4619      	mov	r1, r3
 800360a:	4610      	mov	r0, r2
 800360c:	f7ff fcba 	bl	8002f84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7f5b      	ldrb	r3, [r3, #29]
 8003614:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800361a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003620:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003626:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800362e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800363a:	2b01      	cmp	r3, #1
 800363c:	d106      	bne.n	800364c <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	3b01      	subs	r3, #1
 8003644:	045b      	lsls	r3, r3, #17
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b46      	ldr	r3, [pc, #280]	; (8003788 <HAL_ADC_Init+0x2e8>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	69b9      	ldr	r1, [r7, #24]
 8003678:	430b      	orrs	r3, r1
 800367a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff feef 	bl	800347a <LL_ADC_INJ_IsConversionOngoing>
 800369c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d17b      	bne.n	800379c <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d178      	bne.n	800379c <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036ae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036b6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c6:	f023 0302 	bic.w	r3, r3, #2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	69b9      	ldr	r1, [r7, #24]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6911      	ldr	r1, [r2, #16]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	430b      	orrs	r3, r1
 8003706:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800370a:	e013      	b.n	8003734 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800371a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800372c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003730:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373a:	2b01      	cmp	r3, #1
 800373c:	d126      	bne.n	800378c <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003754:	4311      	orrs	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003760:	430a      	orrs	r2, r1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	611a      	str	r2, [r3, #16]
 800376e:	e015      	b.n	800379c <HAL_ADC_Init+0x2fc>
 8003770:	20000000 	.word	0x20000000
 8003774:	053e2d63 	.word	0x053e2d63
 8003778:	50000100 	.word	0x50000100
 800377c:	50000400 	.word	0x50000400
 8003780:	50000300 	.word	0x50000300
 8003784:	50000700 	.word	0x50000700
 8003788:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10c      	bne.n	80037be <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f023 010f 	bic.w	r1, r3, #15
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
 80037bc:	e007      	b.n	80037ce <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 020f 	bic.w	r2, r2, #15
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80037de:	e007      	b.n	80037f0 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	f043 0210 	orr.w	r2, r3, #16
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3724      	adds	r7, #36	; 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	bf00      	nop

080037fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800380c:	d004      	beq.n	8003818 <HAL_ADC_Start+0x1c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a5c      	ldr	r2, [pc, #368]	; (8003984 <HAL_ADC_Start+0x188>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_ADC_Start+0x20>
 8003818:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <HAL_ADC_Start+0x18c>)
 800381a:	e000      	b.n	800381e <HAL_ADC_Start+0x22>
 800381c:	4b5b      	ldr	r3, [pc, #364]	; (800398c <HAL_ADC_Start+0x190>)
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fd24 	bl	800326c <LL_ADC_GetMultimode>
 8003824:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fdfe 	bl	800342c <LL_ADC_REG_IsConversionOngoing>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 809f 	bne.w	8003976 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Start+0x4a>
 8003842:	2302      	movs	r3, #2
 8003844:	e09a      	b.n	800397c <HAL_ADC_Start+0x180>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f001 f914 	bl	8004a7c <ADC_Enable>
 8003854:	4603      	mov	r3, r0
 8003856:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 8086 	bne.w	800396c <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <HAL_ADC_Start+0x188>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d002      	beq.n	8003884 <HAL_ADC_Start+0x88>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	e001      	b.n	8003888 <HAL_ADC_Start+0x8c>
 8003884:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	4293      	cmp	r3, r2
 800388e:	d002      	beq.n	8003896 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d105      	bne.n	80038a2 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ae:	d106      	bne.n	80038be <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f023 0206 	bic.w	r2, r3, #6
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	661a      	str	r2, [r3, #96]	; 0x60
 80038bc:	e002      	b.n	80038c4 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	221c      	movs	r2, #28
 80038ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <HAL_ADC_Start+0x188>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d002      	beq.n	80038e4 <HAL_ADC_Start+0xe8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	e001      	b.n	80038e8 <HAL_ADC_Start+0xec>
 80038e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d008      	beq.n	8003902 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d002      	beq.n	8003902 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b09      	cmp	r3, #9
 8003900:	d114      	bne.n	800392c <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003918:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fd59 	bl	80033dc <LL_ADC_REG_StartConversion>
 800392a:	e026      	b.n	800397a <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a11      	ldr	r2, [pc, #68]	; (8003984 <HAL_ADC_Start+0x188>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d002      	beq.n	8003948 <HAL_ADC_Start+0x14c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	e001      	b.n	800394c <HAL_ADC_Start+0x150>
 8003948:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800394c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00f      	beq.n	800397a <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003962:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	65da      	str	r2, [r3, #92]	; 0x5c
 800396a:	e006      	b.n	800397a <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003974:	e001      	b.n	800397a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003976:	2302      	movs	r3, #2
 8003978:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	50000100 	.word	0x50000100
 8003988:	50000300 	.word	0x50000300
 800398c:	50000700 	.word	0x50000700

08003990 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Stop+0x16>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e023      	b.n	80039ee <HAL_ADC_Stop+0x5e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039ae:	2103      	movs	r1, #3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 ffa7 	bl	8004904 <ADC_ConversionStop>
 80039b6:	4603      	mov	r3, r0
 80039b8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f001 f8f1 	bl	8004ba8 <ADC_Disable>
 80039c6:	4603      	mov	r3, r0
 80039c8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a0a:	d004      	beq.n	8003a16 <HAL_ADC_PollForConversion+0x1e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a70      	ldr	r2, [pc, #448]	; (8003bd4 <HAL_ADC_PollForConversion+0x1dc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_PollForConversion+0x22>
 8003a16:	4b70      	ldr	r3, [pc, #448]	; (8003bd8 <HAL_ADC_PollForConversion+0x1e0>)
 8003a18:	e000      	b.n	8003a1c <HAL_ADC_PollForConversion+0x24>
 8003a1a:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <HAL_ADC_PollForConversion+0x1e4>)
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fc25 	bl	800326c <LL_ADC_GetMultimode>
 8003a22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d102      	bne.n	8003a32 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e037      	b.n	8003aa2 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d002      	beq.n	8003a44 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	d111      	bne.n	8003a68 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f043 0220 	orr.w	r2, r3, #32
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0b3      	b.n	8003bca <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a62:	2304      	movs	r3, #4
 8003a64:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a66:	e01c      	b.n	8003aa2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_PollForConversion+0x84>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a57      	ldr	r2, [pc, #348]	; (8003bd4 <HAL_ADC_PollForConversion+0x1dc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_PollForConversion+0x88>
 8003a7c:	4b56      	ldr	r3, [pc, #344]	; (8003bd8 <HAL_ADC_PollForConversion+0x1e0>)
 8003a7e:	e000      	b.n	8003a82 <HAL_ADC_PollForConversion+0x8a>
 8003a80:	4b56      	ldr	r3, [pc, #344]	; (8003bdc <HAL_ADC_PollForConversion+0x1e4>)
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fc00 	bl	8003288 <LL_ADC_GetMultiDMATransfer>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e095      	b.n	8003bca <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003aa2:	f7ff fa63 	bl	8002f6c <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aa8:	e021      	b.n	8003aee <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d01d      	beq.n	8003aee <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ab2:	f7ff fa5b 	bl	8002f6c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <HAL_ADC_PollForConversion+0xd0>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d112      	bne.n	8003aee <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	f043 0204 	orr.w	r2, r3, #4
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e06d      	b.n	8003bca <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0d6      	beq.n	8003aaa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fb0b 	bl	8003128 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01c      	beq.n	8003b52 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7f5b      	ldrb	r3, [r3, #29]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d118      	bne.n	8003b52 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d111      	bne.n	8003b52 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <HAL_ADC_PollForConversion+0x1dc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d002      	beq.n	8003b62 <HAL_ADC_PollForConversion+0x16a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	e001      	b.n	8003b66 <HAL_ADC_PollForConversion+0x16e>
 8003b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d008      	beq.n	8003b80 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d002      	beq.n	8003b80 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b09      	cmp	r3, #9
 8003b7e:	d104      	bne.n	8003b8a <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e00d      	b.n	8003ba6 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a11      	ldr	r2, [pc, #68]	; (8003bd4 <HAL_ADC_PollForConversion+0x1dc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d002      	beq.n	8003b9a <HAL_ADC_PollForConversion+0x1a2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	e001      	b.n	8003b9e <HAL_ADC_PollForConversion+0x1a6>
 8003b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b9e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d104      	bne.n	8003bb6 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e008      	b.n	8003bc8 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	220c      	movs	r2, #12
 8003bc6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	50000100 	.word	0x50000100
 8003bd8:	50000300 	.word	0x50000300
 8003bdc:	50000700 	.word	0x50000700

08003be0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c04:	2300      	movs	r3, #0
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c20:	d004      	beq.n	8003c2c <HAL_ADC_IRQHandler+0x30>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a87      	ldr	r2, [pc, #540]	; (8003e44 <HAL_ADC_IRQHandler+0x248>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_IRQHandler+0x34>
 8003c2c:	4b86      	ldr	r3, [pc, #536]	; (8003e48 <HAL_ADC_IRQHandler+0x24c>)
 8003c2e:	e000      	b.n	8003c32 <HAL_ADC_IRQHandler+0x36>
 8003c30:	4b86      	ldr	r3, [pc, #536]	; (8003e4c <HAL_ADC_IRQHandler+0x250>)
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fb1a 	bl	800326c <LL_ADC_GetMultimode>
 8003c38:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_ADC_IRQHandler+0x78>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 f84b 	bl	8004d02 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2202      	movs	r2, #2
 8003c72:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_ADC_IRQHandler+0x8c>
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8085 	beq.w	8003d9e <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d07f      	beq.n	8003d9e <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fa34 	bl	8003128 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d064      	beq.n	8003d90 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a5e      	ldr	r2, [pc, #376]	; (8003e44 <HAL_ADC_IRQHandler+0x248>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d002      	beq.n	8003cd6 <HAL_ADC_IRQHandler+0xda>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	e001      	b.n	8003cda <HAL_ADC_IRQHandler+0xde>
 8003cd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d008      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d002      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d104      	bne.n	8003cfe <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	e00d      	b.n	8003d1a <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a50      	ldr	r2, [pc, #320]	; (8003e44 <HAL_ADC_IRQHandler+0x248>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d002      	beq.n	8003d0e <HAL_ADC_IRQHandler+0x112>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	e001      	b.n	8003d12 <HAL_ADC_IRQHandler+0x116>
 8003d0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d12:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d135      	bne.n	8003d90 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d12e      	bne.n	8003d90 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fb78 	bl	800342c <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d11a      	bne.n	8003d78 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 020c 	bic.w	r2, r2, #12
 8003d50:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d112      	bne.n	8003d90 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d76:	e00b      	b.n	8003d90 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	f043 0210 	orr.w	r2, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	f043 0201 	orr.w	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f96d 	bl	8004070 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <HAL_ADC_IRQHandler+0x1b6>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80a1 	beq.w	8003f00 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 809b 	beq.w	8003f00 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f9dd 	bl	80031a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003dec:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff f998 	bl	8003128 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003df8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <HAL_ADC_IRQHandler+0x248>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d002      	beq.n	8003e0a <HAL_ADC_IRQHandler+0x20e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	e001      	b.n	8003e0e <HAL_ADC_IRQHandler+0x212>
 8003e0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d008      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d002      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b07      	cmp	r3, #7
 8003e26:	d104      	bne.n	8003e32 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	e014      	b.n	8003e5c <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a03      	ldr	r2, [pc, #12]	; (8003e44 <HAL_ADC_IRQHandler+0x248>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_ADC_IRQHandler+0x254>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	e008      	b.n	8003e54 <HAL_ADC_IRQHandler+0x258>
 8003e42:	bf00      	nop
 8003e44:	50000100 	.word	0x50000100
 8003e48:	50000300 	.word	0x50000300
 8003e4c:	50000700 	.word	0x50000700
 8003e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e54:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d047      	beq.n	8003ef2 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_ADC_IRQHandler+0x280>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03f      	beq.n	8003ef2 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d13a      	bne.n	8003ef2 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d133      	bne.n	8003ef2 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d12e      	bne.n	8003ef2 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff faee 	bl	800347a <LL_ADC_INJ_IsConversionOngoing>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d11a      	bne.n	8003eda <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eb2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d112      	bne.n	8003ef2 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	f043 0201 	orr.w	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ed8:	e00b      	b.n	8003ef2 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	f043 0210 	orr.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fedd 	bl	8004cb2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2260      	movs	r2, #96	; 0x60
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d011      	beq.n	8003f2e <HAL_ADC_IRQHandler+0x332>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8af 	bl	8004084 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <HAL_ADC_IRQHandler+0x362>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fec3 	bl	8004cda <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d012      	beq.n	8003f8e <HAL_ADC_IRQHandler+0x392>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 feb5 	bl	8004cee <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d043      	beq.n	8004020 <HAL_ADC_IRQHandler+0x424>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d03e      	beq.n	8004020 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8003faa:	2301      	movs	r3, #1
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	e021      	b.n	8003ff4 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fbe:	d004      	beq.n	8003fca <HAL_ADC_IRQHandler+0x3ce>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <HAL_ADC_IRQHandler+0x468>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_IRQHandler+0x3d2>
 8003fca:	4b27      	ldr	r3, [pc, #156]	; (8004068 <HAL_ADC_IRQHandler+0x46c>)
 8003fcc:	e000      	b.n	8003fd0 <HAL_ADC_IRQHandler+0x3d4>
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <HAL_ADC_IRQHandler+0x470>)
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f959 	bl	8003288 <LL_ADC_GetMultiDMATransfer>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00b      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	e008      	b.n	8003ff4 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10e      	bne.n	8004018 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400a:	f043 0202 	orr.w	r2, r3, #2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f840 	bl	8004098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2210      	movs	r2, #16
 800401e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004026:	2b00      	cmp	r3, #0
 8004028:	d018      	beq.n	800405c <HAL_ADC_IRQHandler+0x460>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d013      	beq.n	800405c <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004044:	f043 0208 	orr.w	r2, r3, #8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004054:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fe35 	bl	8004cc6 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800405c:	bf00      	nop
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	50000100 	.word	0x50000100
 8004068:	50000300 	.word	0x50000300
 800406c:	50000700 	.word	0x50000700

08004070 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b0b6      	sub	sp, #216	; 0xd8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d102      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x24>
 80040ca:	2302      	movs	r3, #2
 80040cc:	f000 bc04 	b.w	80048d8 <HAL_ADC_ConfigChannel+0x82c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f9a5 	bl	800342c <LL_ADC_REG_IsConversionOngoing>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 83e8 	bne.w	80048ba <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7ff f829 	bl	800314e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff f993 	bl	800342c <LL_ADC_REG_IsConversionOngoing>
 8004106:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff f9b3 	bl	800347a <LL_ADC_INJ_IsConversionOngoing>
 8004114:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004118:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 81d9 	bne.w	80044d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 81d4 	bne.w	80044d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004134:	d10f      	bne.n	8004156 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	4619      	mov	r1, r3
 8004142:	f7ff f843 	bl	80031cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe ffd7 	bl	8003102 <LL_ADC_SetSamplingTimeCommonConfig>
 8004154:	e00e      	b.n	8004174 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	461a      	mov	r2, r3
 8004164:	f7ff f832 	bl	80031cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe ffc7 	bl	8003102 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	08db      	lsrs	r3, r3, #3
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b04      	cmp	r3, #4
 8004194:	d022      	beq.n	80041dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6919      	ldr	r1, [r3, #16]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041a6:	f7fe ff21 	bl	8002fec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6919      	ldr	r1, [r3, #16]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f7fe ff6d 	bl	8003096 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d102      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x126>
 80041cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d0:	e000      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x128>
 80041d2:	2300      	movs	r3, #0
 80041d4:	461a      	mov	r2, r3
 80041d6:	f7fe ff79 	bl	80030cc <LL_ADC_SetOffsetSaturation>
 80041da:	e17b      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe ff26 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x15c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe ff1b 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80041fe:	4603      	mov	r3, r0
 8004200:	0e9b      	lsrs	r3, r3, #26
 8004202:	f003 021f 	and.w	r2, r3, #31
 8004206:	e01e      	b.n	8004246 <HAL_ADC_ConfigChannel+0x19a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe ff10 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8004214:	4603      	mov	r3, r0
 8004216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800422a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800422e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004236:	2320      	movs	r3, #32
 8004238:	e004      	b.n	8004244 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800423a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_ADC_ConfigChannel+0x1b2>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0e9b      	lsrs	r3, r3, #26
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	e018      	b.n	8004290 <HAL_ADC_ConfigChannel+0x1e4>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004276:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800427a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004282:	2320      	movs	r3, #32
 8004284:	e004      	b.n	8004290 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004290:	429a      	cmp	r2, r3
 8004292:	d106      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2200      	movs	r2, #0
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe fedf 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2101      	movs	r1, #1
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe fec3 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x222>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe feb8 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80042c4:	4603      	mov	r3, r0
 80042c6:	0e9b      	lsrs	r3, r3, #26
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	e01e      	b.n	800430c <HAL_ADC_ConfigChannel+0x260>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe fead 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80042da:	4603      	mov	r3, r0
 80042dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80042ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80042f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80042fc:	2320      	movs	r3, #32
 80042fe:	e004      	b.n	800430a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x278>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	e018      	b.n	8004356 <HAL_ADC_ConfigChannel+0x2aa>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800433c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004348:	2320      	movs	r3, #32
 800434a:	e004      	b.n	8004356 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800434c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004350:	fab3 f383 	clz	r3, r3
 8004354:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004356:	429a      	cmp	r2, r3
 8004358:	d106      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2200      	movs	r2, #0
 8004360:	2101      	movs	r1, #1
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fe7c 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2102      	movs	r1, #2
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fe60 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8004374:	4603      	mov	r3, r0
 8004376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x2e8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2102      	movs	r1, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fe55 	bl	8003034 <LL_ADC_GetOffsetChannel>
 800438a:	4603      	mov	r3, r0
 800438c:	0e9b      	lsrs	r3, r3, #26
 800438e:	f003 021f 	and.w	r2, r3, #31
 8004392:	e01e      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x326>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2102      	movs	r1, #2
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fe4a 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80043b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80043ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80043c2:	2320      	movs	r3, #32
 80043c4:	e004      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80043c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d105      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x33e>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0e9b      	lsrs	r3, r3, #26
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	e016      	b.n	8004418 <HAL_ADC_ConfigChannel+0x36c>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80043fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004402:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800440a:	2320      	movs	r3, #32
 800440c:	e004      	b.n	8004418 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800440e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004418:	429a      	cmp	r2, r3
 800441a:	d106      	bne.n	800442a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fe1b 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2103      	movs	r1, #3
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe fdff 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8004436:	4603      	mov	r3, r0
 8004438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x3aa>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2103      	movs	r1, #3
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fdf4 	bl	8003034 <LL_ADC_GetOffsetChannel>
 800444c:	4603      	mov	r3, r0
 800444e:	0e9b      	lsrs	r3, r3, #26
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	e017      	b.n	8004486 <HAL_ADC_ConfigChannel+0x3da>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2103      	movs	r1, #3
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fde9 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8004462:	4603      	mov	r3, r0
 8004464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800446e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004470:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004478:	2320      	movs	r3, #32
 800447a:	e003      	b.n	8004484 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800447c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800447e:	fab3 f383 	clz	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <HAL_ADC_ConfigChannel+0x3f2>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0e9b      	lsrs	r3, r3, #26
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	e011      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x416>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80044ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80044b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80044b6:	2320      	movs	r3, #32
 80044b8:	e003      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d106      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	2103      	movs	r1, #3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fdc6 	bl	8003060 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe ff59 	bl	8003390 <LL_ADC_IsEnabled>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f040 813d 	bne.w	8004760 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f7fe fe96 	bl	8003224 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4aa2      	ldr	r2, [pc, #648]	; (8004788 <HAL_ADC_ConfigChannel+0x6dc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	f040 812e 	bne.w	8004760 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <HAL_ADC_ConfigChannel+0x480>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0e9b      	lsrs	r3, r3, #26
 800451a:	3301      	adds	r3, #1
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2b09      	cmp	r3, #9
 8004522:	bf94      	ite	ls
 8004524:	2301      	movls	r3, #1
 8004526:	2300      	movhi	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e019      	b.n	8004560 <HAL_ADC_ConfigChannel+0x4b4>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800453a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800453c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800453e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004544:	2320      	movs	r3, #32
 8004546:	e003      	b.n	8004550 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3301      	adds	r3, #1
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2b09      	cmp	r3, #9
 8004558:	bf94      	ite	ls
 800455a:	2301      	movls	r3, #1
 800455c:	2300      	movhi	r3, #0
 800455e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004560:	2b00      	cmp	r3, #0
 8004562:	d079      	beq.n	8004658 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x4d4>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	0e9b      	lsrs	r3, r3, #26
 8004576:	3301      	adds	r3, #1
 8004578:	069b      	lsls	r3, r3, #26
 800457a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457e:	e015      	b.n	80045ac <HAL_ADC_ConfigChannel+0x500>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800458e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004590:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004598:	2320      	movs	r3, #32
 800459a:	e003      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800459c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	3301      	adds	r3, #1
 80045a6:	069b      	lsls	r3, r3, #26
 80045a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x520>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	0e9b      	lsrs	r3, r3, #26
 80045be:	3301      	adds	r3, #1
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	e017      	b.n	80045fc <HAL_ADC_ConfigChannel+0x550>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80045da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80045de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80045e4:	2320      	movs	r3, #32
 80045e6:	e003      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80045e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2101      	movs	r1, #1
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	ea42 0103 	orr.w	r1, r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x576>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0e9b      	lsrs	r3, r3, #26
 8004612:	3301      	adds	r3, #1
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	4613      	mov	r3, r2
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4413      	add	r3, r2
 800461e:	051b      	lsls	r3, r3, #20
 8004620:	e018      	b.n	8004654 <HAL_ADC_ConfigChannel+0x5a8>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e003      	b.n	8004646 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800463e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	3301      	adds	r3, #1
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004654:	430b      	orrs	r3, r1
 8004656:	e07e      	b.n	8004756 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x5c8>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	0e9b      	lsrs	r3, r3, #26
 800466a:	3301      	adds	r3, #1
 800466c:	069b      	lsls	r3, r3, #26
 800466e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004672:	e015      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x5f4>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	fa93 f3a3 	rbit	r3, r3
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800468c:	2320      	movs	r3, #32
 800468e:	e003      	b.n	8004698 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	3301      	adds	r3, #1
 800469a:	069b      	lsls	r3, r3, #26
 800469c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x614>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0e9b      	lsrs	r3, r3, #26
 80046b2:	3301      	adds	r3, #1
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	2101      	movs	r1, #1
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	e017      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x644>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	61fb      	str	r3, [r7, #28]
  return result;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80046d8:	2320      	movs	r3, #32
 80046da:	e003      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	3301      	adds	r3, #1
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f303 	lsl.w	r3, r1, r3
 80046f0:	ea42 0103 	orr.w	r1, r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10d      	bne.n	800471c <HAL_ADC_ConfigChannel+0x670>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	0e9b      	lsrs	r3, r3, #26
 8004706:	3301      	adds	r3, #1
 8004708:	f003 021f 	and.w	r2, r3, #31
 800470c:	4613      	mov	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4413      	add	r3, r2
 8004712:	3b1e      	subs	r3, #30
 8004714:	051b      	lsls	r3, r3, #20
 8004716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800471a:	e01b      	b.n	8004754 <HAL_ADC_ConfigChannel+0x6a8>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	613b      	str	r3, [r7, #16]
  return result;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004734:	2320      	movs	r3, #32
 8004736:	e003      	b.n	8004740 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	3301      	adds	r3, #1
 8004742:	f003 021f 	and.w	r2, r3, #31
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	3b1e      	subs	r3, #30
 800474e:	051b      	lsls	r3, r3, #20
 8004750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004754:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800475a:	4619      	mov	r1, r3
 800475c:	f7fe fd36 	bl	80031cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_ADC_ConfigChannel+0x6e0>)
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80af 	beq.w	80048cc <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004776:	d004      	beq.n	8004782 <HAL_ADC_ConfigChannel+0x6d6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_ADC_ConfigChannel+0x6e4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10a      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x6ec>
 8004782:	4b04      	ldr	r3, [pc, #16]	; (8004794 <HAL_ADC_ConfigChannel+0x6e8>)
 8004784:	e009      	b.n	800479a <HAL_ADC_ConfigChannel+0x6ee>
 8004786:	bf00      	nop
 8004788:	407f0000 	.word	0x407f0000
 800478c:	80080000 	.word	0x80080000
 8004790:	50000100 	.word	0x50000100
 8004794:	50000300 	.word	0x50000300
 8004798:	4b51      	ldr	r3, [pc, #324]	; (80048e0 <HAL_ADC_ConfigChannel+0x834>)
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe fc18 	bl	8002fd0 <LL_ADC_GetCommonPathInternalCh>
 80047a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a4e      	ldr	r2, [pc, #312]	; (80048e4 <HAL_ADC_ConfigChannel+0x838>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_ADC_ConfigChannel+0x70c>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a4d      	ldr	r2, [pc, #308]	; (80048e8 <HAL_ADC_ConfigChannel+0x83c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d134      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d12e      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047cc:	d17e      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d6:	d004      	beq.n	80047e2 <HAL_ADC_ConfigChannel+0x736>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a43      	ldr	r2, [pc, #268]	; (80048ec <HAL_ADC_ConfigChannel+0x840>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x73a>
 80047e2:	4a43      	ldr	r2, [pc, #268]	; (80048f0 <HAL_ADC_ConfigChannel+0x844>)
 80047e4:	e000      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x73c>
 80047e6:	4a3e      	ldr	r2, [pc, #248]	; (80048e0 <HAL_ADC_ConfigChannel+0x834>)
 80047e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f7fe fbd9 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047f8:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <HAL_ADC_ConfigChannel+0x848>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	099b      	lsrs	r3, r3, #6
 80047fe:	4a3e      	ldr	r2, [pc, #248]	; (80048f8 <HAL_ADC_ConfigChannel+0x84c>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	4613      	mov	r3, r2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004812:	e002      	b.n	800481a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f9      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004820:	e054      	b.n	80048cc <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a35      	ldr	r2, [pc, #212]	; (80048fc <HAL_ADC_ConfigChannel+0x850>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d120      	bne.n	800486e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800482c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11a      	bne.n	800486e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004840:	d144      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800484a:	d004      	beq.n	8004856 <HAL_ADC_ConfigChannel+0x7aa>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a26      	ldr	r2, [pc, #152]	; (80048ec <HAL_ADC_ConfigChannel+0x840>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_ADC_ConfigChannel+0x7ae>
 8004856:	4a26      	ldr	r2, [pc, #152]	; (80048f0 <HAL_ADC_ConfigChannel+0x844>)
 8004858:	e000      	b.n	800485c <HAL_ADC_ConfigChannel+0x7b0>
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <HAL_ADC_ConfigChannel+0x834>)
 800485c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f7fe fb9f 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800486c:	e02e      	b.n	80048cc <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <HAL_ADC_ConfigChannel+0x854>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d129      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800487c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d123      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <HAL_ADC_ConfigChannel+0x840>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01e      	beq.n	80048cc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004896:	d004      	beq.n	80048a2 <HAL_ADC_ConfigChannel+0x7f6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_ADC_ConfigChannel+0x840>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d101      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x7fa>
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <HAL_ADC_ConfigChannel+0x844>)
 80048a4:	e000      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x7fc>
 80048a6:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <HAL_ADC_ConfigChannel+0x834>)
 80048a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7fe fb79 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
 80048b8:	e008      	b.n	80048cc <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80048d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80048d8:	4618      	mov	r0, r3
 80048da:	37d8      	adds	r7, #216	; 0xd8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	50000700 	.word	0x50000700
 80048e4:	c3210000 	.word	0xc3210000
 80048e8:	90c00010 	.word	0x90c00010
 80048ec:	50000100 	.word	0x50000100
 80048f0:	50000300 	.word	0x50000300
 80048f4:	20000000 	.word	0x20000000
 80048f8:	053e2d63 	.word	0x053e2d63
 80048fc:	c7520000 	.word	0xc7520000
 8004900:	cb840000 	.word	0xcb840000

08004904 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fd86 	bl	800342c <LL_ADC_REG_IsConversionOngoing>
 8004920:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fda7 	bl	800347a <LL_ADC_INJ_IsConversionOngoing>
 800492c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8098 	beq.w	8004a6c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d02a      	beq.n	80049a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	7f5b      	ldrb	r3, [r3, #29]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d126      	bne.n	80049a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7f1b      	ldrb	r3, [r3, #28]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d122      	bne.n	80049a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800495e:	e014      	b.n	800498a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4a45      	ldr	r2, [pc, #276]	; (8004a78 <ADC_ConversionStop+0x174>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d90d      	bls.n	8004984 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	f043 0210 	orr.w	r2, r3, #16
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004978:	f043 0201 	orr.w	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e074      	b.n	8004a6e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	3301      	adds	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d1e3      	bne.n	8004960 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2240      	movs	r2, #64	; 0x40
 800499e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d014      	beq.n	80049d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fd3e 	bl	800342c <LL_ADC_REG_IsConversionOngoing>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00c      	beq.n	80049d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fcfb 	bl	80033b6 <LL_ADC_IsDisableOngoing>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fe fd1a 	bl	8003404 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d014      	beq.n	8004a00 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fd4d 	bl	800347a <LL_ADC_INJ_IsConversionOngoing>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe fce3 	bl	80033b6 <LL_ADC_IsDisableOngoing>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fd29 	bl	8003452 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d005      	beq.n	8004a12 <ADC_ConversionStop+0x10e>
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d105      	bne.n	8004a18 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	617b      	str	r3, [r7, #20]
        break;
 8004a10:	e005      	b.n	8004a1e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004a12:	2308      	movs	r3, #8
 8004a14:	617b      	str	r3, [r7, #20]
        break;
 8004a16:	e002      	b.n	8004a1e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004a18:	2304      	movs	r3, #4
 8004a1a:	617b      	str	r3, [r7, #20]
        break;
 8004a1c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004a1e:	f7fe faa5 	bl	8002f6c <HAL_GetTick>
 8004a22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a24:	e01b      	b.n	8004a5e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004a26:	f7fe faa1 	bl	8002f6c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d914      	bls.n	8004a5e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	f043 0210 	orr.w	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	f043 0201 	orr.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e007      	b.n	8004a6e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1dc      	bne.n	8004a26 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	a33fffff 	.word	0xa33fffff

08004a7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe fc7f 	bl	8003390 <LL_ADC_IsEnabled>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d176      	bne.n	8004b86 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <ADC_Enable+0x114>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aaa:	f043 0210 	orr.w	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab6:	f043 0201 	orr.w	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e062      	b.n	8004b88 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fc3a 	bl	8003340 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad4:	d004      	beq.n	8004ae0 <ADC_Enable+0x64>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2e      	ldr	r2, [pc, #184]	; (8004b94 <ADC_Enable+0x118>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d101      	bne.n	8004ae4 <ADC_Enable+0x68>
 8004ae0:	4b2d      	ldr	r3, [pc, #180]	; (8004b98 <ADC_Enable+0x11c>)
 8004ae2:	e000      	b.n	8004ae6 <ADC_Enable+0x6a>
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	; (8004b9c <ADC_Enable+0x120>)
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fa72 	bl	8002fd0 <LL_ADC_GetCommonPathInternalCh>
 8004aec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d013      	beq.n	8004b1e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004af6:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <ADC_Enable+0x124>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	4a29      	ldr	r2, [pc, #164]	; (8004ba4 <ADC_Enable+0x128>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b10:	e002      	b.n	8004b18 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f9      	bne.n	8004b12 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b1e:	f7fe fa25 	bl	8002f6c <HAL_GetTick>
 8004b22:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b24:	e028      	b.n	8004b78 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fc30 	bl	8003390 <LL_ADC_IsEnabled>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fc00 	bl	8003340 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b40:	f7fe fa14 	bl	8002f6c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d914      	bls.n	8004b78 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d00d      	beq.n	8004b78 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	f043 0210 	orr.w	r2, r3, #16
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e007      	b.n	8004b88 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d1cf      	bne.n	8004b26 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	8000003f 	.word	0x8000003f
 8004b94:	50000100 	.word	0x50000100
 8004b98:	50000300 	.word	0x50000300
 8004b9c:	50000700 	.word	0x50000700
 8004ba0:	20000000 	.word	0x20000000
 8004ba4:	053e2d63 	.word	0x053e2d63

08004ba8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe fbfe 	bl	80033b6 <LL_ADC_IsDisableOngoing>
 8004bba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fbe5 	bl	8003390 <LL_ADC_IsEnabled>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d047      	beq.n	8004c5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d144      	bne.n	8004c5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030d 	and.w	r3, r3, #13
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10c      	bne.n	8004bfa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe fbbf 	bl	8003368 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2203      	movs	r2, #3
 8004bf0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bf2:	f7fe f9bb 	bl	8002f6c <HAL_GetTick>
 8004bf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bf8:	e029      	b.n	8004c4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfe:	f043 0210 	orr.w	r2, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e023      	b.n	8004c5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c16:	f7fe f9a9 	bl	8002f6c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d914      	bls.n	8004c4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	f043 0210 	orr.w	r2, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c42:	f043 0201 	orr.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e007      	b.n	8004c5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1dc      	bne.n	8004c16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <LL_ADC_IsEnabled>:
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <LL_ADC_IsEnabled+0x18>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <LL_ADC_IsEnabled+0x1a>
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_ADC_REG_IsConversionOngoing>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d101      	bne.n	8004ca4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b0a1      	sub	sp, #132	; 0x84
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e0cb      	b.n	8004ece <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004d42:	2300      	movs	r3, #0
 8004d44:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d4e:	d102      	bne.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d50:	4b61      	ldr	r3, [pc, #388]	; (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	e001      	b.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0aa      	b.n	8004ece <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff86 	bl	8004c8c <LL_ADC_REG_IsConversionOngoing>
 8004d80:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff ff80 	bl	8004c8c <LL_ADC_REG_IsConversionOngoing>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f040 808c 	bne.w	8004eac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f040 8088 	bne.w	8004eac <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004da4:	d004      	beq.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8004db0:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8004db2:	e000      	b.n	8004db6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004db4:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8004db6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d041      	beq.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dd2:	035b      	lsls	r3, r3, #13
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de4:	d004      	beq.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3b      	ldr	r2, [pc, #236]	; (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10f      	bne.n	8004e10 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8004df0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004df4:	f7ff ff37 	bl	8004c66 <LL_ADC_IsEnabled>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	4837      	ldr	r0, [pc, #220]	; (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004dfc:	f7ff ff33 	bl	8004c66 <LL_ADC_IsEnabled>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4323      	orrs	r3, r4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e008      	b.n	8004e22 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8004e10:	4834      	ldr	r0, [pc, #208]	; (8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004e12:	f7ff ff28 	bl	8004c66 <LL_ADC_IsEnabled>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d04c      	beq.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e2e:	f023 030f 	bic.w	r3, r3, #15
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	6811      	ldr	r1, [r2, #0]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	6892      	ldr	r2, [r2, #8]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e40:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e42:	e03d      	b.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e58:	d004      	beq.n	8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10f      	bne.n	8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8004e64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004e68:	f7ff fefd 	bl	8004c66 <LL_ADC_IsEnabled>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	481a      	ldr	r0, [pc, #104]	; (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e70:	f7ff fef9 	bl	8004c66 <LL_ADC_IsEnabled>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4323      	orrs	r3, r4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e008      	b.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8004e84:	4817      	ldr	r0, [pc, #92]	; (8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004e86:	f7ff feee 	bl	8004c66 <LL_ADC_IsEnabled>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d012      	beq.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ea2:	f023 030f 	bic.w	r3, r3, #15
 8004ea6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ea8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004eaa:	e009      	b.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	f043 0220 	orr.w	r2, r3, #32
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ebe:	e000      	b.n	8004ec2 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ec0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004eca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3784      	adds	r7, #132	; 0x84
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd90      	pop	{r4, r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	50000100 	.word	0x50000100
 8004edc:	50000300 	.word	0x50000300
 8004ee0:	50000700 	.word	0x50000700
 8004ee4:	50000400 	.word	0x50000400

08004ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <__NVIC_SetPriorityGrouping+0x44>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f04:	4013      	ands	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <__NVIC_SetPriorityGrouping+0x44>)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	60d3      	str	r3, [r2, #12]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f34:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <__NVIC_GetPriorityGrouping+0x18>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	f003 0307 	and.w	r3, r3, #7
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	db0b      	blt.n	8004f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	f003 021f 	and.w	r2, r3, #31
 8004f64:	4907      	ldr	r1, [pc, #28]	; (8004f84 <__NVIC_EnableIRQ+0x38>)
 8004f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	e000e100 	.word	0xe000e100

08004f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	6039      	str	r1, [r7, #0]
 8004f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	db0a      	blt.n	8004fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	490c      	ldr	r1, [pc, #48]	; (8004fd4 <__NVIC_SetPriority+0x4c>)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	0112      	lsls	r2, r2, #4
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	440b      	add	r3, r1
 8004fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fb0:	e00a      	b.n	8004fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	4908      	ldr	r1, [pc, #32]	; (8004fd8 <__NVIC_SetPriority+0x50>)
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	3b04      	subs	r3, #4
 8004fc0:	0112      	lsls	r2, r2, #4
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	761a      	strb	r2, [r3, #24]
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	e000e100 	.word	0xe000e100
 8004fd8:	e000ed00 	.word	0xe000ed00

08004fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b089      	sub	sp, #36	; 0x24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f1c3 0307 	rsb	r3, r3, #7
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	bf28      	it	cs
 8004ffa:	2304      	movcs	r3, #4
 8004ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3304      	adds	r3, #4
 8005002:	2b06      	cmp	r3, #6
 8005004:	d902      	bls.n	800500c <NVIC_EncodePriority+0x30>
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3b03      	subs	r3, #3
 800500a:	e000      	b.n	800500e <NVIC_EncodePriority+0x32>
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005010:	f04f 32ff 	mov.w	r2, #4294967295
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43da      	mvns	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	401a      	ands	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005024:	f04f 31ff 	mov.w	r1, #4294967295
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	fa01 f303 	lsl.w	r3, r1, r3
 800502e:	43d9      	mvns	r1, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005034:	4313      	orrs	r3, r2
         );
}
 8005036:	4618      	mov	r0, r3
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff ff4c 	bl	8004ee8 <__NVIC_SetPriorityGrouping>
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005066:	f7ff ff63 	bl	8004f30 <__NVIC_GetPriorityGrouping>
 800506a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	6978      	ldr	r0, [r7, #20]
 8005072:	f7ff ffb3 	bl	8004fdc <NVIC_EncodePriority>
 8005076:	4602      	mov	r2, r0
 8005078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507c:	4611      	mov	r1, r2
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff82 	bl	8004f88 <__NVIC_SetPriority>
}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ff56 	bl	8004f4c <__NVIC_EnableIRQ>
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050b6:	e15a      	b.n	800536e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	2101      	movs	r1, #1
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	4013      	ands	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 814c 	beq.w	8005368 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d005      	beq.n	80050e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d130      	bne.n	800514a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	2203      	movs	r2, #3
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4013      	ands	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800511e:	2201      	movs	r2, #1
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	f003 0201 	and.w	r2, r3, #1
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d017      	beq.n	8005186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	2203      	movs	r2, #3
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4013      	ands	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d123      	bne.n	80051da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	08da      	lsrs	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3208      	adds	r2, #8
 800519a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	220f      	movs	r2, #15
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4013      	ands	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	08da      	lsrs	r2, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3208      	adds	r2, #8
 80051d4:	6939      	ldr	r1, [r7, #16]
 80051d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	2203      	movs	r2, #3
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0203 	and.w	r2, r3, #3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80a6 	beq.w	8005368 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521c:	4b5b      	ldr	r3, [pc, #364]	; (800538c <HAL_GPIO_Init+0x2e4>)
 800521e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005220:	4a5a      	ldr	r2, [pc, #360]	; (800538c <HAL_GPIO_Init+0x2e4>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6613      	str	r3, [r2, #96]	; 0x60
 8005228:	4b58      	ldr	r3, [pc, #352]	; (800538c <HAL_GPIO_Init+0x2e4>)
 800522a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005234:	4a56      	ldr	r2, [pc, #344]	; (8005390 <HAL_GPIO_Init+0x2e8>)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	3302      	adds	r3, #2
 800523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	220f      	movs	r2, #15
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4013      	ands	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800525e:	d01f      	beq.n	80052a0 <HAL_GPIO_Init+0x1f8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a4c      	ldr	r2, [pc, #304]	; (8005394 <HAL_GPIO_Init+0x2ec>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d019      	beq.n	800529c <HAL_GPIO_Init+0x1f4>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a4b      	ldr	r2, [pc, #300]	; (8005398 <HAL_GPIO_Init+0x2f0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_GPIO_Init+0x1f0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a4a      	ldr	r2, [pc, #296]	; (800539c <HAL_GPIO_Init+0x2f4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00d      	beq.n	8005294 <HAL_GPIO_Init+0x1ec>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a49      	ldr	r2, [pc, #292]	; (80053a0 <HAL_GPIO_Init+0x2f8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <HAL_GPIO_Init+0x1e8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a48      	ldr	r2, [pc, #288]	; (80053a4 <HAL_GPIO_Init+0x2fc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d101      	bne.n	800528c <HAL_GPIO_Init+0x1e4>
 8005288:	2305      	movs	r3, #5
 800528a:	e00a      	b.n	80052a2 <HAL_GPIO_Init+0x1fa>
 800528c:	2306      	movs	r3, #6
 800528e:	e008      	b.n	80052a2 <HAL_GPIO_Init+0x1fa>
 8005290:	2304      	movs	r3, #4
 8005292:	e006      	b.n	80052a2 <HAL_GPIO_Init+0x1fa>
 8005294:	2303      	movs	r3, #3
 8005296:	e004      	b.n	80052a2 <HAL_GPIO_Init+0x1fa>
 8005298:	2302      	movs	r3, #2
 800529a:	e002      	b.n	80052a2 <HAL_GPIO_Init+0x1fa>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_GPIO_Init+0x1fa>
 80052a0:	2300      	movs	r3, #0
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	f002 0203 	and.w	r2, r2, #3
 80052a8:	0092      	lsls	r2, r2, #2
 80052aa:	4093      	lsls	r3, r2
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052b2:	4937      	ldr	r1, [pc, #220]	; (8005390 <HAL_GPIO_Init+0x2e8>)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	3302      	adds	r3, #2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052c0:	4b39      	ldr	r3, [pc, #228]	; (80053a8 <HAL_GPIO_Init+0x300>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4013      	ands	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052e4:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <HAL_GPIO_Init+0x300>)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052ea:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <HAL_GPIO_Init+0x300>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4013      	ands	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800530e:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <HAL_GPIO_Init+0x300>)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_GPIO_Init+0x300>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	43db      	mvns	r3, r3
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <HAL_GPIO_Init+0x300>)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800533e:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <HAL_GPIO_Init+0x300>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	43db      	mvns	r3, r3
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005362:	4a11      	ldr	r2, [pc, #68]	; (80053a8 <HAL_GPIO_Init+0x300>)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	3301      	adds	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	f47f ae9d 	bne.w	80050b8 <HAL_GPIO_Init+0x10>
  }
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	40021000 	.word	0x40021000
 8005390:	40010000 	.word	0x40010000
 8005394:	48000400 	.word	0x48000400
 8005398:	48000800 	.word	0x48000800
 800539c:	48000c00 	.word	0x48000c00
 80053a0:	48001000 	.word	0x48001000
 80053a4:	48001400 	.word	0x48001400
 80053a8:	40010400 	.word	0x40010400

080053ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	807b      	strh	r3, [r7, #2]
 80053b8:	4613      	mov	r3, r2
 80053ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053bc:	787b      	ldrb	r3, [r7, #1]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053c8:	e002      	b.n	80053d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053ca:	887a      	ldrh	r2, [r7, #2]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053ee:	887a      	ldrh	r2, [r7, #2]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4013      	ands	r3, r2
 80053f4:	041a      	lsls	r2, r3, #16
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	43d9      	mvns	r1, r3
 80053fa:	887b      	ldrh	r3, [r7, #2]
 80053fc:	400b      	ands	r3, r1
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	619a      	str	r2, [r3, #24]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800541a:	4b08      	ldr	r3, [pc, #32]	; (800543c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d006      	beq.n	8005434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f806 	bl	8005440 <HAL_GPIO_EXTI_Callback>
  }
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40010400 	.word	0x40010400

08005440 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d141      	bne.n	80054ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005466:	4b4b      	ldr	r3, [pc, #300]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005472:	d131      	bne.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005474:	4b47      	ldr	r3, [pc, #284]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547a:	4a46      	ldr	r2, [pc, #280]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005484:	4b43      	ldr	r3, [pc, #268]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800548c:	4a41      	ldr	r2, [pc, #260]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005494:	4b40      	ldr	r3, [pc, #256]	; (8005598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2232      	movs	r2, #50	; 0x32
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	4a3f      	ldr	r2, [pc, #252]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	0c9b      	lsrs	r3, r3, #18
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054aa:	e002      	b.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054b2:	4b38      	ldr	r3, [pc, #224]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d102      	bne.n	80054c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f2      	bne.n	80054ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054c6:	4b33      	ldr	r3, [pc, #204]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d2:	d158      	bne.n	8005586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e057      	b.n	8005588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054d8:	4b2e      	ldr	r3, [pc, #184]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054de:	4a2d      	ldr	r2, [pc, #180]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054e8:	e04d      	b.n	8005586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f0:	d141      	bne.n	8005576 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054f2:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fe:	d131      	bne.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005500:	4b24      	ldr	r3, [pc, #144]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005506:	4a23      	ldr	r2, [pc, #140]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005510:	4b20      	ldr	r3, [pc, #128]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005518:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800551e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005520:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2232      	movs	r2, #50	; 0x32
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	0c9b      	lsrs	r3, r3, #18
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005536:	e002      	b.n	800553e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3b01      	subs	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554a:	d102      	bne.n	8005552 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f2      	bne.n	8005538 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555e:	d112      	bne.n	8005586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e011      	b.n	8005588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800556a:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005574:	e007      	b.n	8005586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800557e:	4a05      	ldr	r2, [pc, #20]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005584:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40007000 	.word	0x40007000
 8005598:	20000000 	.word	0x20000000
 800559c:	431bde83 	.word	0x431bde83

080055a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055ae:	6093      	str	r3, [r2, #8]
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40007000 	.word	0x40007000

080055c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e2fe      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d075      	beq.n	80056ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055de:	4b97      	ldr	r3, [pc, #604]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055e8:	4b94      	ldr	r3, [pc, #592]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d102      	bne.n	80055fe <HAL_RCC_OscConfig+0x3e>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d002      	beq.n	8005604 <HAL_RCC_OscConfig+0x44>
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b08      	cmp	r3, #8
 8005602:	d10b      	bne.n	800561c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005604:	4b8d      	ldr	r3, [pc, #564]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05b      	beq.n	80056c8 <HAL_RCC_OscConfig+0x108>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d157      	bne.n	80056c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e2d9      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005624:	d106      	bne.n	8005634 <HAL_RCC_OscConfig+0x74>
 8005626:	4b85      	ldr	r3, [pc, #532]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a84      	ldr	r2, [pc, #528]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 800562c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e01d      	b.n	8005670 <HAL_RCC_OscConfig+0xb0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800563c:	d10c      	bne.n	8005658 <HAL_RCC_OscConfig+0x98>
 800563e:	4b7f      	ldr	r3, [pc, #508]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a7e      	ldr	r2, [pc, #504]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	4b7c      	ldr	r3, [pc, #496]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7b      	ldr	r2, [pc, #492]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e00b      	b.n	8005670 <HAL_RCC_OscConfig+0xb0>
 8005658:	4b78      	ldr	r3, [pc, #480]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a77      	ldr	r2, [pc, #476]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 800565e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	4b75      	ldr	r3, [pc, #468]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a74      	ldr	r2, [pc, #464]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 800566a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800566e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d013      	beq.n	80056a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fd fc78 	bl	8002f6c <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005680:	f7fd fc74 	bl	8002f6c <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b64      	cmp	r3, #100	; 0x64
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e29e      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005692:	4b6a      	ldr	r3, [pc, #424]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0xc0>
 800569e:	e014      	b.n	80056ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fd fc64 	bl	8002f6c <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a8:	f7fd fc60 	bl	8002f6c <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b64      	cmp	r3, #100	; 0x64
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e28a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ba:	4b60      	ldr	r3, [pc, #384]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0xe8>
 80056c6:	e000      	b.n	80056ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d075      	beq.n	80057c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d6:	4b59      	ldr	r3, [pc, #356]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e0:	4b56      	ldr	r3, [pc, #344]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b0c      	cmp	r3, #12
 80056ee:	d102      	bne.n	80056f6 <HAL_RCC_OscConfig+0x136>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d002      	beq.n	80056fc <HAL_RCC_OscConfig+0x13c>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d11f      	bne.n	800573c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056fc:	4b4f      	ldr	r3, [pc, #316]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_RCC_OscConfig+0x154>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e25d      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005714:	4b49      	ldr	r3, [pc, #292]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	4946      	ldr	r1, [pc, #280]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005724:	4313      	orrs	r3, r2
 8005726:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005728:	4b45      	ldr	r3, [pc, #276]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f7fd fa77 	bl	8002c20 <HAL_InitTick>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d043      	beq.n	80057c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e249      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d023      	beq.n	800578c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005744:	4b3d      	ldr	r3, [pc, #244]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a3c      	ldr	r2, [pc, #240]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 800574a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fd fc0c 	bl	8002f6c <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005758:	f7fd fc08 	bl	8002f6c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e232      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800576a:	4b34      	ldr	r3, [pc, #208]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005776:	4b31      	ldr	r3, [pc, #196]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	492d      	ldr	r1, [pc, #180]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005786:	4313      	orrs	r3, r2
 8005788:	604b      	str	r3, [r1, #4]
 800578a:	e01a      	b.n	80057c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800578c:	4b2b      	ldr	r3, [pc, #172]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2a      	ldr	r2, [pc, #168]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fd fbe8 	bl	8002f6c <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a0:	f7fd fbe4 	bl	8002f6c <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e20e      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057b2:	4b22      	ldr	r3, [pc, #136]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x1e0>
 80057be:	e000      	b.n	80057c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d041      	beq.n	8005852 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01c      	beq.n	8005810 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d6:	4b19      	ldr	r3, [pc, #100]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80057d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057dc:	4a17      	ldr	r2, [pc, #92]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fd fbc1 	bl	8002f6c <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ee:	f7fd fbbd 	bl	8002f6c <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e1e7      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005800:	4b0e      	ldr	r3, [pc, #56]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <HAL_RCC_OscConfig+0x22e>
 800580e:	e020      	b.n	8005852 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005816:	4a09      	ldr	r2, [pc, #36]	; (800583c <HAL_RCC_OscConfig+0x27c>)
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fd fba4 	bl	8002f6c <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005826:	e00d      	b.n	8005844 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005828:	f7fd fba0 	bl	8002f6c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d906      	bls.n	8005844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e1ca      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000
 8005840:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005844:	4b8c      	ldr	r3, [pc, #560]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ea      	bne.n	8005828 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80a6 	beq.w	80059ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005860:	2300      	movs	r3, #0
 8005862:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005864:	4b84      	ldr	r3, [pc, #528]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_OscConfig+0x2b4>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x2b6>
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800587a:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 800587c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587e:	4a7e      	ldr	r2, [pc, #504]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005884:	6593      	str	r3, [r2, #88]	; 0x58
 8005886:	4b7c      	ldr	r3, [pc, #496]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005892:	2301      	movs	r3, #1
 8005894:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005896:	4b79      	ldr	r3, [pc, #484]	; (8005a7c <HAL_RCC_OscConfig+0x4bc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d118      	bne.n	80058d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058a2:	4b76      	ldr	r3, [pc, #472]	; (8005a7c <HAL_RCC_OscConfig+0x4bc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a75      	ldr	r2, [pc, #468]	; (8005a7c <HAL_RCC_OscConfig+0x4bc>)
 80058a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ae:	f7fd fb5d 	bl	8002f6c <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b6:	f7fd fb59 	bl	8002f6c <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e183      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c8:	4b6c      	ldr	r3, [pc, #432]	; (8005a7c <HAL_RCC_OscConfig+0x4bc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d108      	bne.n	80058ee <HAL_RCC_OscConfig+0x32e>
 80058dc:	4b66      	ldr	r3, [pc, #408]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	4a65      	ldr	r2, [pc, #404]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ec:	e024      	b.n	8005938 <HAL_RCC_OscConfig+0x378>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d110      	bne.n	8005918 <HAL_RCC_OscConfig+0x358>
 80058f6:	4b60      	ldr	r3, [pc, #384]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	4a5e      	ldr	r2, [pc, #376]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005906:	4b5c      	ldr	r3, [pc, #368]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	4a5a      	ldr	r2, [pc, #360]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005916:	e00f      	b.n	8005938 <HAL_RCC_OscConfig+0x378>
 8005918:	4b57      	ldr	r3, [pc, #348]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	4a56      	ldr	r2, [pc, #344]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005928:	4b53      	ldr	r3, [pc, #332]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	4a52      	ldr	r2, [pc, #328]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d016      	beq.n	800596e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fd fb14 	bl	8002f6c <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005946:	e00a      	b.n	800595e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7fd fb10 	bl	8002f6c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e138      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800595e:	4b46      	ldr	r3, [pc, #280]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ed      	beq.n	8005948 <HAL_RCC_OscConfig+0x388>
 800596c:	e015      	b.n	800599a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596e:	f7fd fafd 	bl	8002f6c <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fd faf9 	bl	8002f6c <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e121      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800598c:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ed      	bne.n	8005976 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800599a:	7ffb      	ldrb	r3, [r7, #31]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d105      	bne.n	80059ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a0:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	4a34      	ldr	r2, [pc, #208]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80059a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d03c      	beq.n	8005a32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01c      	beq.n	80059fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059c0:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80059c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059c6:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fd facc 	bl	8002f6c <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059d8:	f7fd fac8 	bl	8002f6c <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e0f2      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059ea:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80059ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ef      	beq.n	80059d8 <HAL_RCC_OscConfig+0x418>
 80059f8:	e01b      	b.n	8005a32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059fa:	4b1f      	ldr	r3, [pc, #124]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 80059fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a00:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fd faaf 	bl	8002f6c <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a12:	f7fd faab 	bl	8002f6c <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e0d5      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a24:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ef      	bne.n	8005a12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80c9 	beq.w	8005bce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 030c 	and.w	r3, r3, #12
 8005a44:	2b0c      	cmp	r3, #12
 8005a46:	f000 8083 	beq.w	8005b50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d15e      	bne.n	8005b10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <HAL_RCC_OscConfig+0x4b8>)
 8005a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5e:	f7fd fa85 	bl	8002f6c <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a64:	e00c      	b.n	8005a80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fd fa81 	bl	8002f6c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d905      	bls.n	8005a80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0ab      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a80:	4b55      	ldr	r3, [pc, #340]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1ec      	bne.n	8005a66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a8c:	4b52      	ldr	r3, [pc, #328]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	4b52      	ldr	r3, [pc, #328]	; (8005bdc <HAL_RCC_OscConfig+0x61c>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6a11      	ldr	r1, [r2, #32]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a9c:	3a01      	subs	r2, #1
 8005a9e:	0112      	lsls	r2, r2, #4
 8005aa0:	4311      	orrs	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005aa6:	0212      	lsls	r2, r2, #8
 8005aa8:	4311      	orrs	r1, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005aae:	0852      	lsrs	r2, r2, #1
 8005ab0:	3a01      	subs	r2, #1
 8005ab2:	0552      	lsls	r2, r2, #21
 8005ab4:	4311      	orrs	r1, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aba:	0852      	lsrs	r2, r2, #1
 8005abc:	3a01      	subs	r2, #1
 8005abe:	0652      	lsls	r2, r2, #25
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ac6:	06d2      	lsls	r2, r2, #27
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	4943      	ldr	r1, [pc, #268]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad0:	4b41      	ldr	r3, [pc, #260]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a40      	ldr	r2, [pc, #256]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ada:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005adc:	4b3e      	ldr	r3, [pc, #248]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a3d      	ldr	r2, [pc, #244]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ae6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fd fa40 	bl	8002f6c <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af0:	f7fd fa3c 	bl	8002f6c <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e066      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b02:	4b35      	ldr	r3, [pc, #212]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCC_OscConfig+0x530>
 8005b0e:	e05e      	b.n	8005bce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b10:	4b31      	ldr	r3, [pc, #196]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1c:	f7fd fa26 	bl	8002f6c <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b24:	f7fd fa22 	bl	8002f6c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e04c      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b36:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b42:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	4924      	ldr	r1, [pc, #144]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005b48:	4b25      	ldr	r3, [pc, #148]	; (8005be0 <HAL_RCC_OscConfig+0x620>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	60cb      	str	r3, [r1, #12]
 8005b4e:	e03e      	b.n	8005bce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e039      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b5c:	4b1e      	ldr	r3, [pc, #120]	; (8005bd8 <HAL_RCC_OscConfig+0x618>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 0203 	and.w	r2, r3, #3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d12c      	bne.n	8005bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d123      	bne.n	8005bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d11b      	bne.n	8005bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d113      	bne.n	8005bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d109      	bne.n	8005bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d001      	beq.n	8005bce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3720      	adds	r7, #32
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	019f800c 	.word	0x019f800c
 8005be0:	feeefffc 	.word	0xfeeefffc

08005be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e11e      	b.n	8005e3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b91      	ldr	r3, [pc, #580]	; (8005e44 <HAL_RCC_ClockConfig+0x260>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d910      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b8e      	ldr	r3, [pc, #568]	; (8005e44 <HAL_RCC_ClockConfig+0x260>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 020f 	bic.w	r2, r3, #15
 8005c12:	498c      	ldr	r1, [pc, #560]	; (8005e44 <HAL_RCC_ClockConfig+0x260>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b8a      	ldr	r3, [pc, #552]	; (8005e44 <HAL_RCC_ClockConfig+0x260>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e106      	b.n	8005e3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d073      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d129      	bne.n	8005c94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c40:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0f4      	b.n	8005e3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c50:	f000 f9d0 	bl	8005ff4 <RCC_GetSysClockFreqFromPLLSource>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4a7c      	ldr	r2, [pc, #496]	; (8005e4c <HAL_RCC_ClockConfig+0x268>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d93f      	bls.n	8005cde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c5e:	4b7a      	ldr	r3, [pc, #488]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d033      	beq.n	8005cde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d12f      	bne.n	8005cde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c7e:	4b72      	ldr	r3, [pc, #456]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c86:	4a70      	ldr	r2, [pc, #448]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	e024      	b.n	8005cde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d107      	bne.n	8005cac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c9c:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0c6      	b.n	8005e3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cac:	4b66      	ldr	r3, [pc, #408]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0be      	b.n	8005e3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005cbc:	f000 f8ce 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4a61      	ldr	r2, [pc, #388]	; (8005e4c <HAL_RCC_ClockConfig+0x268>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d909      	bls.n	8005cde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cca:	4b5f      	ldr	r3, [pc, #380]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd2:	4a5d      	ldr	r2, [pc, #372]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cde:	4b5a      	ldr	r3, [pc, #360]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f023 0203 	bic.w	r2, r3, #3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4957      	ldr	r1, [pc, #348]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf0:	f7fd f93c 	bl	8002f6c <HAL_GetTick>
 8005cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf8:	f7fd f938 	bl	8002f6c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e095      	b.n	8005e3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0e:	4b4e      	ldr	r3, [pc, #312]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 020c 	and.w	r2, r3, #12
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d1eb      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d023      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d38:	4b43      	ldr	r3, [pc, #268]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	4a42      	ldr	r2, [pc, #264]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d50:	4b3d      	ldr	r3, [pc, #244]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d58:	4a3b      	ldr	r2, [pc, #236]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d60:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	4936      	ldr	r1, [pc, #216]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	608b      	str	r3, [r1, #8]
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	d105      	bne.n	8005d86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d7a:	4b33      	ldr	r3, [pc, #204]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	4a32      	ldr	r2, [pc, #200]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HAL_RCC_ClockConfig+0x260>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d21d      	bcs.n	8005dd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d94:	4b2b      	ldr	r3, [pc, #172]	; (8005e44 <HAL_RCC_ClockConfig+0x260>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f023 020f 	bic.w	r2, r3, #15
 8005d9c:	4929      	ldr	r1, [pc, #164]	; (8005e44 <HAL_RCC_ClockConfig+0x260>)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005da4:	f7fd f8e2 	bl	8002f6c <HAL_GetTick>
 8005da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	e00a      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dac:	f7fd f8de 	bl	8002f6c <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e03b      	b.n	8005e3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc2:	4b20      	ldr	r3, [pc, #128]	; (8005e44 <HAL_RCC_ClockConfig+0x260>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d1ed      	bne.n	8005dac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ddc:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	4917      	ldr	r1, [pc, #92]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	490f      	ldr	r1, [pc, #60]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e0e:	f000 f825 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8005e12:	4602      	mov	r2, r0
 8005e14:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <HAL_RCC_ClockConfig+0x264>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	490c      	ldr	r1, [pc, #48]	; (8005e50 <HAL_RCC_ClockConfig+0x26c>)
 8005e20:	5ccb      	ldrb	r3, [r1, r3]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <HAL_RCC_ClockConfig+0x270>)
 8005e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <HAL_RCC_ClockConfig+0x274>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fc fef4 	bl	8002c20 <HAL_InitTick>
 8005e38:	4603      	mov	r3, r0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40022000 	.word	0x40022000
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	04c4b400 	.word	0x04c4b400
 8005e50:	0800a7e0 	.word	0x0800a7e0
 8005e54:	20000000 	.word	0x20000000
 8005e58:	20000004 	.word	0x20000004

08005e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e62:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d102      	bne.n	8005e74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e6e:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	e047      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e74:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 030c 	and.w	r3, r3, #12
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e80:	4b26      	ldr	r3, [pc, #152]	; (8005f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	e03e      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e86:	4b23      	ldr	r3, [pc, #140]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	d136      	bne.n	8005f00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e92:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e9c:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d10c      	bne.n	8005eca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eb0:	4a1a      	ldr	r2, [pc, #104]	; (8005f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	4a16      	ldr	r2, [pc, #88]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eba:	68d2      	ldr	r2, [r2, #12]
 8005ebc:	0a12      	lsrs	r2, r2, #8
 8005ebe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ec2:	fb02 f303 	mul.w	r3, r2, r3
 8005ec6:	617b      	str	r3, [r7, #20]
      break;
 8005ec8:	e00c      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eca:	4a13      	ldr	r2, [pc, #76]	; (8005f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed2:	4a10      	ldr	r2, [pc, #64]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ed4:	68d2      	ldr	r2, [r2, #12]
 8005ed6:	0a12      	lsrs	r2, r2, #8
 8005ed8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005edc:	fb02 f303 	mul.w	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]
      break;
 8005ee2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	0e5b      	lsrs	r3, r3, #25
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	e001      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f04:	693b      	ldr	r3, [r7, #16]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40021000 	.word	0x40021000
 8005f18:	00f42400 	.word	0x00f42400
 8005f1c:	016e3600 	.word	0x016e3600

08005f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000000 	.word	0x20000000

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f3c:	f7ff fff0 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4904      	ldr	r1, [pc, #16]	; (8005f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	0800a7f0 	.word	0x0800a7f0

08005f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f68:	f7ff ffda 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	0adb      	lsrs	r3, r3, #11
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	4904      	ldr	r1, [pc, #16]	; (8005f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f7a:	5ccb      	ldrb	r3, [r1, r3]
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	0800a7f0 	.word	0x0800a7f0

08005f90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	220f      	movs	r2, #15
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fa0:	4b12      	ldr	r3, [pc, #72]	; (8005fec <HAL_RCC_GetClockConfig+0x5c>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0203 	and.w	r2, r3, #3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <HAL_RCC_GetClockConfig+0x5c>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <HAL_RCC_GetClockConfig+0x5c>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <HAL_RCC_GetClockConfig+0x5c>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	08db      	lsrs	r3, r3, #3
 8005fca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <HAL_RCC_GetClockConfig+0x60>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 020f 	and.w	r2, r3, #15
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	601a      	str	r2, [r3, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40022000 	.word	0x40022000

08005ff4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006004:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	3301      	adds	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d10c      	bne.n	8006032 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006018:	4a17      	ldr	r2, [pc, #92]	; (8006078 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	4a14      	ldr	r2, [pc, #80]	; (8006074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006022:	68d2      	ldr	r2, [r2, #12]
 8006024:	0a12      	lsrs	r2, r2, #8
 8006026:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	617b      	str	r3, [r7, #20]
    break;
 8006030:	e00c      	b.n	800604c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006032:	4a12      	ldr	r2, [pc, #72]	; (800607c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	fbb2 f3f3 	udiv	r3, r2, r3
 800603a:	4a0e      	ldr	r2, [pc, #56]	; (8006074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800603c:	68d2      	ldr	r2, [r2, #12]
 800603e:	0a12      	lsrs	r2, r2, #8
 8006040:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006044:	fb02 f303 	mul.w	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]
    break;
 800604a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	0e5b      	lsrs	r3, r3, #25
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	3301      	adds	r3, #1
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006066:	687b      	ldr	r3, [r7, #4]
}
 8006068:	4618      	mov	r0, r3
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40021000 	.word	0x40021000
 8006078:	016e3600 	.word	0x016e3600
 800607c:	00f42400 	.word	0x00f42400

08006080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006088:	2300      	movs	r3, #0
 800608a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800608c:	2300      	movs	r3, #0
 800608e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8098 	beq.w	80061ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800609e:	2300      	movs	r3, #0
 80060a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060a2:	4b43      	ldr	r3, [pc, #268]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10d      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ae:	4b40      	ldr	r3, [pc, #256]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	4a3f      	ldr	r2, [pc, #252]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b8:	6593      	str	r3, [r2, #88]	; 0x58
 80060ba:	4b3d      	ldr	r3, [pc, #244]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c2:	60bb      	str	r3, [r7, #8]
 80060c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060c6:	2301      	movs	r3, #1
 80060c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060ca:	4b3a      	ldr	r3, [pc, #232]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a39      	ldr	r2, [pc, #228]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060d6:	f7fc ff49 	bl	8002f6c <HAL_GetTick>
 80060da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060dc:	e009      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060de:	f7fc ff45 	bl	8002f6c <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d902      	bls.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	74fb      	strb	r3, [r7, #19]
        break;
 80060f0:	e005      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060f2:	4b30      	ldr	r3, [pc, #192]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0ef      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80060fe:	7cfb      	ldrb	r3, [r7, #19]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d159      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006104:	4b2a      	ldr	r3, [pc, #168]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01e      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	d019      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006120:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800612c:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	4a1f      	ldr	r2, [pc, #124]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800613c:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800613e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006142:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800614c:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fc ff05 	bl	8002f6c <HAL_GetTick>
 8006162:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006164:	e00b      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006166:	f7fc ff01 	bl	8002f6c <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	f241 3288 	movw	r2, #5000	; 0x1388
 8006174:	4293      	cmp	r3, r2
 8006176:	d902      	bls.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	74fb      	strb	r3, [r7, #19]
            break;
 800617c:	e006      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0ec      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800618c:	7cfb      	ldrb	r3, [r7, #19]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10b      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006192:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a0:	4903      	ldr	r1, [pc, #12]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061a8:	e008      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061aa:	7cfb      	ldrb	r3, [r7, #19]
 80061ac:	74bb      	strb	r3, [r7, #18]
 80061ae:	e005      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80061b0:	40021000 	.word	0x40021000
 80061b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b8:	7cfb      	ldrb	r3, [r7, #19]
 80061ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061bc:	7c7b      	ldrb	r3, [r7, #17]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d105      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c2:	4ba7      	ldr	r3, [pc, #668]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c6:	4aa6      	ldr	r2, [pc, #664]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061da:	4ba1      	ldr	r3, [pc, #644]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f023 0203 	bic.w	r2, r3, #3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	499d      	ldr	r1, [pc, #628]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061fc:	4b98      	ldr	r3, [pc, #608]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006202:	f023 020c 	bic.w	r2, r3, #12
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	4995      	ldr	r1, [pc, #596]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800621e:	4b90      	ldr	r3, [pc, #576]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	498c      	ldr	r1, [pc, #560]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006240:	4b87      	ldr	r3, [pc, #540]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	4984      	ldr	r1, [pc, #528]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006262:	4b7f      	ldr	r3, [pc, #508]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	497b      	ldr	r1, [pc, #492]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006284:	4b76      	ldr	r3, [pc, #472]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	4973      	ldr	r1, [pc, #460]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062a6:	4b6e      	ldr	r3, [pc, #440]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	496a      	ldr	r1, [pc, #424]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062c8:	4b65      	ldr	r3, [pc, #404]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4962      	ldr	r1, [pc, #392]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062ea:	4b5d      	ldr	r3, [pc, #372]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	4959      	ldr	r1, [pc, #356]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800630c:	4b54      	ldr	r3, [pc, #336]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006312:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	4951      	ldr	r1, [pc, #324]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632a:	2b00      	cmp	r3, #0
 800632c:	d015      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800632e:	4b4c      	ldr	r3, [pc, #304]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4948      	ldr	r1, [pc, #288]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634c:	d105      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800634e:	4b44      	ldr	r3, [pc, #272]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	4a43      	ldr	r2, [pc, #268]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006358:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006362:	2b00      	cmp	r3, #0
 8006364:	d015      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006366:	4b3e      	ldr	r3, [pc, #248]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	493a      	ldr	r1, [pc, #232]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006384:	d105      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006386:	4b36      	ldr	r3, [pc, #216]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4a35      	ldr	r2, [pc, #212]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006390:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d015      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800639e:	4b30      	ldr	r3, [pc, #192]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ac:	492c      	ldr	r1, [pc, #176]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063bc:	d105      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063be:	4b28      	ldr	r3, [pc, #160]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	4a27      	ldr	r2, [pc, #156]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063c8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d015      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063d6:	4b22      	ldr	r3, [pc, #136]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	491e      	ldr	r1, [pc, #120]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f4:	d105      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	4a19      	ldr	r2, [pc, #100]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006400:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d015      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641c:	4910      	ldr	r1, [pc, #64]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642c:	d105      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642e:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	4a0b      	ldr	r2, [pc, #44]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006438:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d018      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	4902      	ldr	r1, [pc, #8]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	e001      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006460:	40021000 	.word	0x40021000
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800646a:	d105      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800646c:	4b21      	ldr	r3, [pc, #132]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006476:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006484:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	4918      	ldr	r1, [pc, #96]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a2:	d105      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064a4:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a12      	ldr	r2, [pc, #72]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80064aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d015      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80064be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ca:	490a      	ldr	r1, [pc, #40]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064da:	d105      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80064e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80064e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40021000 	.word	0x40021000

080064f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e049      	b.n	800659e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f841 	bl	80065a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f000 fa28 	bl	800698c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d001      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e04f      	b.n	8006674 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a23      	ldr	r2, [pc, #140]	; (8006680 <HAL_TIM_Base_Start_IT+0xc4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01d      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fe:	d018      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1f      	ldr	r2, [pc, #124]	; (8006684 <HAL_TIM_Base_Start_IT+0xc8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1e      	ldr	r2, [pc, #120]	; (8006688 <HAL_TIM_Base_Start_IT+0xcc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1c      	ldr	r2, [pc, #112]	; (800668c <HAL_TIM_Base_Start_IT+0xd0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <HAL_TIM_Base_Start_IT+0xd4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a19      	ldr	r2, [pc, #100]	; (8006694 <HAL_TIM_Base_Start_IT+0xd8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d115      	bne.n	800665e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	4b17      	ldr	r3, [pc, #92]	; (8006698 <HAL_TIM_Base_Start_IT+0xdc>)
 800663a:	4013      	ands	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b06      	cmp	r3, #6
 8006642:	d015      	beq.n	8006670 <HAL_TIM_Base_Start_IT+0xb4>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664a:	d011      	beq.n	8006670 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665c:	e008      	b.n	8006670 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0201 	orr.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e000      	b.n	8006672 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006670:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40000400 	.word	0x40000400
 8006688:	40000800 	.word	0x40000800
 800668c:	40013400 	.word	0x40013400
 8006690:	40014000 	.word	0x40014000
 8006694:	40015000 	.word	0x40015000
 8006698:	00010007 	.word	0x00010007

0800669c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d020      	beq.n	8006700 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0202 	mvn.w	r2, #2
 80066d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f931 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f923 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f934 	bl	8006962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d020      	beq.n	800674c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01b      	beq.n	800674c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0204 	mvn.w	r2, #4
 800671c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f90b 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 8006738:	e005      	b.n	8006746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8fd 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f90e 	bl	8006962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d020      	beq.n	8006798 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01b      	beq.n	8006798 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0208 	mvn.w	r2, #8
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2204      	movs	r2, #4
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f8e5 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f8d7 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8e8 	bl	8006962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d020      	beq.n	80067e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01b      	beq.n	80067e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0210 	mvn.w	r2, #16
 80067b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2208      	movs	r2, #8
 80067ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f8bf 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 80067d0:	e005      	b.n	80067de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f8b1 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f8c2 	bl	8006962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00c      	beq.n	8006808 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0201 	mvn.w	r2, #1
 8006800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fa fd60 	bl	80012c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00c      	beq.n	8006836 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800682e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f95f 	bl	8006af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00c      	beq.n	800685a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f957 	bl	8006b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00c      	beq.n	800687e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f87c 	bl	8006976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00c      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d007      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f06f 0220 	mvn.w	r2, #32
 800689a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f91f 	bl	8006ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00c      	beq.n	80068c6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f92b 	bl	8006b1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00c      	beq.n	80068ea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80068e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f923 	bl	8006b30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00c      	beq.n	800690e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f91b 	bl	8006b44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00c      	beq.n	8006932 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d007      	beq.n	8006932 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800692a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f913 	bl	8006b58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a48      	ldr	r2, [pc, #288]	; (8006ac0 <TIM_Base_SetConfig+0x134>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d013      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d00f      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a45      	ldr	r2, [pc, #276]	; (8006ac4 <TIM_Base_SetConfig+0x138>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00b      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a44      	ldr	r2, [pc, #272]	; (8006ac8 <TIM_Base_SetConfig+0x13c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d007      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a43      	ldr	r2, [pc, #268]	; (8006acc <TIM_Base_SetConfig+0x140>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a42      	ldr	r2, [pc, #264]	; (8006ad0 <TIM_Base_SetConfig+0x144>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d108      	bne.n	80069de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a37      	ldr	r2, [pc, #220]	; (8006ac0 <TIM_Base_SetConfig+0x134>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01f      	beq.n	8006a26 <TIM_Base_SetConfig+0x9a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ec:	d01b      	beq.n	8006a26 <TIM_Base_SetConfig+0x9a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <TIM_Base_SetConfig+0x138>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d017      	beq.n	8006a26 <TIM_Base_SetConfig+0x9a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a33      	ldr	r2, [pc, #204]	; (8006ac8 <TIM_Base_SetConfig+0x13c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d013      	beq.n	8006a26 <TIM_Base_SetConfig+0x9a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a32      	ldr	r2, [pc, #200]	; (8006acc <TIM_Base_SetConfig+0x140>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00f      	beq.n	8006a26 <TIM_Base_SetConfig+0x9a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a32      	ldr	r2, [pc, #200]	; (8006ad4 <TIM_Base_SetConfig+0x148>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_Base_SetConfig+0x9a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a31      	ldr	r2, [pc, #196]	; (8006ad8 <TIM_Base_SetConfig+0x14c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d007      	beq.n	8006a26 <TIM_Base_SetConfig+0x9a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a30      	ldr	r2, [pc, #192]	; (8006adc <TIM_Base_SetConfig+0x150>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_Base_SetConfig+0x9a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2b      	ldr	r2, [pc, #172]	; (8006ad0 <TIM_Base_SetConfig+0x144>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d108      	bne.n	8006a38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a18      	ldr	r2, [pc, #96]	; (8006ac0 <TIM_Base_SetConfig+0x134>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d013      	beq.n	8006a8c <TIM_Base_SetConfig+0x100>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a19      	ldr	r2, [pc, #100]	; (8006acc <TIM_Base_SetConfig+0x140>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00f      	beq.n	8006a8c <TIM_Base_SetConfig+0x100>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <TIM_Base_SetConfig+0x148>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_Base_SetConfig+0x100>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <TIM_Base_SetConfig+0x14c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <TIM_Base_SetConfig+0x100>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a17      	ldr	r2, [pc, #92]	; (8006adc <TIM_Base_SetConfig+0x150>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0x100>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a12      	ldr	r2, [pc, #72]	; (8006ad0 <TIM_Base_SetConfig+0x144>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d103      	bne.n	8006a94 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d105      	bne.n	8006ab2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f023 0201 	bic.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40013400 	.word	0x40013400
 8006ad0:	40015000 	.word	0x40015000
 8006ad4:	40014000 	.word	0x40014000
 8006ad8:	40014400 	.word	0x40014400
 8006adc:	40014800 	.word	0x40014800

08006ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e042      	b.n	8006c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d106      	bne.n	8006b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fc f93f 	bl	8002e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2224      	movs	r2, #36	; 0x24
 8006b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fbb2 	bl	8007320 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f8b3 	bl	8006d28 <UART_SetConfig>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e01b      	b.n	8006c04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fc31 	bl	8007464 <UART_CheckIdleState>
 8006c02:	4603      	mov	r3, r0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d17b      	bne.n	8006d1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_UART_Transmit+0x26>
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e074      	b.n	8006d20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2221      	movs	r2, #33	; 0x21
 8006c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c46:	f7fc f991 	bl	8002f6c <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d108      	bne.n	8006c78 <HAL_UART_Transmit+0x6c>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	e003      	b.n	8006c80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c80:	e030      	b.n	8006ce4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2180      	movs	r1, #128	; 0x80
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 fc93 	bl	80075b8 <UART_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e03d      	b.n	8006d20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10b      	bne.n	8006cc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	e007      	b.n	8006cd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1c8      	bne.n	8006c82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2140      	movs	r1, #64	; 0x40
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fc5c 	bl	80075b8 <UART_WaitOnFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e006      	b.n	8006d20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e000      	b.n	8006d20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d2c:	b08c      	sub	sp, #48	; 0x30
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	431a      	orrs	r2, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4baa      	ldr	r3, [pc, #680]	; (8007000 <UART_SetConfig+0x2d8>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a9f      	ldr	r2, [pc, #636]	; (8007004 <UART_SetConfig+0x2dc>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d004      	beq.n	8006d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d90:	4313      	orrs	r3, r2
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	f023 010f 	bic.w	r1, r3, #15
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a90      	ldr	r2, [pc, #576]	; (8007008 <UART_SetConfig+0x2e0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d125      	bne.n	8006e18 <UART_SetConfig+0xf0>
 8006dcc:	4b8f      	ldr	r3, [pc, #572]	; (800700c <UART_SetConfig+0x2e4>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d81a      	bhi.n	8006e10 <UART_SetConfig+0xe8>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <UART_SetConfig+0xb8>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006df1 	.word	0x08006df1
 8006de4:	08006e01 	.word	0x08006e01
 8006de8:	08006df9 	.word	0x08006df9
 8006dec:	08006e09 	.word	0x08006e09
 8006df0:	2301      	movs	r3, #1
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df6:	e116      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfe:	e112      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e00:	2304      	movs	r3, #4
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e06:	e10e      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e08:	2308      	movs	r3, #8
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0e:	e10a      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e10:	2310      	movs	r3, #16
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e16:	e106      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a7c      	ldr	r2, [pc, #496]	; (8007010 <UART_SetConfig+0x2e8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d138      	bne.n	8006e94 <UART_SetConfig+0x16c>
 8006e22:	4b7a      	ldr	r3, [pc, #488]	; (800700c <UART_SetConfig+0x2e4>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e28:	f003 030c 	and.w	r3, r3, #12
 8006e2c:	2b0c      	cmp	r3, #12
 8006e2e:	d82d      	bhi.n	8006e8c <UART_SetConfig+0x164>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <UART_SetConfig+0x110>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e6d 	.word	0x08006e6d
 8006e3c:	08006e8d 	.word	0x08006e8d
 8006e40:	08006e8d 	.word	0x08006e8d
 8006e44:	08006e8d 	.word	0x08006e8d
 8006e48:	08006e7d 	.word	0x08006e7d
 8006e4c:	08006e8d 	.word	0x08006e8d
 8006e50:	08006e8d 	.word	0x08006e8d
 8006e54:	08006e8d 	.word	0x08006e8d
 8006e58:	08006e75 	.word	0x08006e75
 8006e5c:	08006e8d 	.word	0x08006e8d
 8006e60:	08006e8d 	.word	0x08006e8d
 8006e64:	08006e8d 	.word	0x08006e8d
 8006e68:	08006e85 	.word	0x08006e85
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e0d8      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e74:	2302      	movs	r3, #2
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7a:	e0d4      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e82:	e0d0      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e84:	2308      	movs	r3, #8
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8a:	e0cc      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e92:	e0c8      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a5e      	ldr	r2, [pc, #376]	; (8007014 <UART_SetConfig+0x2ec>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d125      	bne.n	8006eea <UART_SetConfig+0x1c2>
 8006e9e:	4b5b      	ldr	r3, [pc, #364]	; (800700c <UART_SetConfig+0x2e4>)
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ea8:	2b30      	cmp	r3, #48	; 0x30
 8006eaa:	d016      	beq.n	8006eda <UART_SetConfig+0x1b2>
 8006eac:	2b30      	cmp	r3, #48	; 0x30
 8006eae:	d818      	bhi.n	8006ee2 <UART_SetConfig+0x1ba>
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d00a      	beq.n	8006eca <UART_SetConfig+0x1a2>
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d814      	bhi.n	8006ee2 <UART_SetConfig+0x1ba>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <UART_SetConfig+0x19a>
 8006ebc:	2b10      	cmp	r3, #16
 8006ebe:	d008      	beq.n	8006ed2 <UART_SetConfig+0x1aa>
 8006ec0:	e00f      	b.n	8006ee2 <UART_SetConfig+0x1ba>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec8:	e0ad      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed0:	e0a9      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006ed2:	2304      	movs	r3, #4
 8006ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed8:	e0a5      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006eda:	2308      	movs	r3, #8
 8006edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee0:	e0a1      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee8:	e09d      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a4a      	ldr	r2, [pc, #296]	; (8007018 <UART_SetConfig+0x2f0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d125      	bne.n	8006f40 <UART_SetConfig+0x218>
 8006ef4:	4b45      	ldr	r3, [pc, #276]	; (800700c <UART_SetConfig+0x2e4>)
 8006ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006efe:	2bc0      	cmp	r3, #192	; 0xc0
 8006f00:	d016      	beq.n	8006f30 <UART_SetConfig+0x208>
 8006f02:	2bc0      	cmp	r3, #192	; 0xc0
 8006f04:	d818      	bhi.n	8006f38 <UART_SetConfig+0x210>
 8006f06:	2b80      	cmp	r3, #128	; 0x80
 8006f08:	d00a      	beq.n	8006f20 <UART_SetConfig+0x1f8>
 8006f0a:	2b80      	cmp	r3, #128	; 0x80
 8006f0c:	d814      	bhi.n	8006f38 <UART_SetConfig+0x210>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <UART_SetConfig+0x1f0>
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	d008      	beq.n	8006f28 <UART_SetConfig+0x200>
 8006f16:	e00f      	b.n	8006f38 <UART_SetConfig+0x210>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1e:	e082      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f20:	2302      	movs	r3, #2
 8006f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f26:	e07e      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f28:	2304      	movs	r3, #4
 8006f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f2e:	e07a      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f30:	2308      	movs	r3, #8
 8006f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f36:	e076      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3e:	e072      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a35      	ldr	r2, [pc, #212]	; (800701c <UART_SetConfig+0x2f4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d12a      	bne.n	8006fa0 <UART_SetConfig+0x278>
 8006f4a:	4b30      	ldr	r3, [pc, #192]	; (800700c <UART_SetConfig+0x2e4>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f58:	d01a      	beq.n	8006f90 <UART_SetConfig+0x268>
 8006f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f5e:	d81b      	bhi.n	8006f98 <UART_SetConfig+0x270>
 8006f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f64:	d00c      	beq.n	8006f80 <UART_SetConfig+0x258>
 8006f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f6a:	d815      	bhi.n	8006f98 <UART_SetConfig+0x270>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <UART_SetConfig+0x250>
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f74:	d008      	beq.n	8006f88 <UART_SetConfig+0x260>
 8006f76:	e00f      	b.n	8006f98 <UART_SetConfig+0x270>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7e:	e052      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f80:	2302      	movs	r3, #2
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f86:	e04e      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f8e:	e04a      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f96:	e046      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9e:	e042      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a17      	ldr	r2, [pc, #92]	; (8007004 <UART_SetConfig+0x2dc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d13a      	bne.n	8007020 <UART_SetConfig+0x2f8>
 8006faa:	4b18      	ldr	r3, [pc, #96]	; (800700c <UART_SetConfig+0x2e4>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fb8:	d01a      	beq.n	8006ff0 <UART_SetConfig+0x2c8>
 8006fba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fbe:	d81b      	bhi.n	8006ff8 <UART_SetConfig+0x2d0>
 8006fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc4:	d00c      	beq.n	8006fe0 <UART_SetConfig+0x2b8>
 8006fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fca:	d815      	bhi.n	8006ff8 <UART_SetConfig+0x2d0>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <UART_SetConfig+0x2b0>
 8006fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd4:	d008      	beq.n	8006fe8 <UART_SetConfig+0x2c0>
 8006fd6:	e00f      	b.n	8006ff8 <UART_SetConfig+0x2d0>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fde:	e022      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fe6:	e01e      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fee:	e01a      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ff6:	e016      	b.n	8007026 <UART_SetConfig+0x2fe>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ffe:	e012      	b.n	8007026 <UART_SetConfig+0x2fe>
 8007000:	cfff69f3 	.word	0xcfff69f3
 8007004:	40008000 	.word	0x40008000
 8007008:	40013800 	.word	0x40013800
 800700c:	40021000 	.word	0x40021000
 8007010:	40004400 	.word	0x40004400
 8007014:	40004800 	.word	0x40004800
 8007018:	40004c00 	.word	0x40004c00
 800701c:	40005000 	.word	0x40005000
 8007020:	2310      	movs	r3, #16
 8007022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4aae      	ldr	r2, [pc, #696]	; (80072e4 <UART_SetConfig+0x5bc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	f040 8097 	bne.w	8007160 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007036:	2b08      	cmp	r3, #8
 8007038:	d823      	bhi.n	8007082 <UART_SetConfig+0x35a>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x318>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007065 	.word	0x08007065
 8007044:	08007083 	.word	0x08007083
 8007048:	0800706d 	.word	0x0800706d
 800704c:	08007083 	.word	0x08007083
 8007050:	08007073 	.word	0x08007073
 8007054:	08007083 	.word	0x08007083
 8007058:	08007083 	.word	0x08007083
 800705c:	08007083 	.word	0x08007083
 8007060:	0800707b 	.word	0x0800707b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fe ff68 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8007068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800706a:	e010      	b.n	800708e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800706c:	4b9e      	ldr	r3, [pc, #632]	; (80072e8 <UART_SetConfig+0x5c0>)
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007070:	e00d      	b.n	800708e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007072:	f7fe fef3 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8007076:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007078:	e009      	b.n	800708e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007080:	e005      	b.n	800708e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800708c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8130 	beq.w	80072f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	4a94      	ldr	r2, [pc, #592]	; (80072ec <UART_SetConfig+0x5c4>)
 800709c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	4413      	add	r3, r2
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d305      	bcc.n	80070c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d903      	bls.n	80070ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070cc:	e113      	b.n	80072f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	2200      	movs	r2, #0
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	60fa      	str	r2, [r7, #12]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	4a84      	ldr	r2, [pc, #528]	; (80072ec <UART_SetConfig+0x5c4>)
 80070dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2200      	movs	r2, #0
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070f0:	f7f9 fd34 	bl	8000b5c <__aeabi_uldivmod>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4610      	mov	r0, r2
 80070fa:	4619      	mov	r1, r3
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	020b      	lsls	r3, r1, #8
 8007106:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800710a:	0202      	lsls	r2, r0, #8
 800710c:	6979      	ldr	r1, [r7, #20]
 800710e:	6849      	ldr	r1, [r1, #4]
 8007110:	0849      	lsrs	r1, r1, #1
 8007112:	2000      	movs	r0, #0
 8007114:	460c      	mov	r4, r1
 8007116:	4605      	mov	r5, r0
 8007118:	eb12 0804 	adds.w	r8, r2, r4
 800711c:	eb43 0905 	adc.w	r9, r3, r5
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	469a      	mov	sl, r3
 8007128:	4693      	mov	fp, r2
 800712a:	4652      	mov	r2, sl
 800712c:	465b      	mov	r3, fp
 800712e:	4640      	mov	r0, r8
 8007130:	4649      	mov	r1, r9
 8007132:	f7f9 fd13 	bl	8000b5c <__aeabi_uldivmod>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4613      	mov	r3, r2
 800713c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007144:	d308      	bcc.n	8007158 <UART_SetConfig+0x430>
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800714c:	d204      	bcs.n	8007158 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6a3a      	ldr	r2, [r7, #32]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	e0ce      	b.n	80072f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800715e:	e0ca      	b.n	80072f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007168:	d166      	bne.n	8007238 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800716a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800716e:	2b08      	cmp	r3, #8
 8007170:	d827      	bhi.n	80071c2 <UART_SetConfig+0x49a>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <UART_SetConfig+0x450>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	0800719d 	.word	0x0800719d
 800717c:	080071a5 	.word	0x080071a5
 8007180:	080071ad 	.word	0x080071ad
 8007184:	080071c3 	.word	0x080071c3
 8007188:	080071b3 	.word	0x080071b3
 800718c:	080071c3 	.word	0x080071c3
 8007190:	080071c3 	.word	0x080071c3
 8007194:	080071c3 	.word	0x080071c3
 8007198:	080071bb 	.word	0x080071bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800719c:	f7fe fecc 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 80071a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071a2:	e014      	b.n	80071ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a4:	f7fe fede 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 80071a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071aa:	e010      	b.n	80071ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071ac:	4b4e      	ldr	r3, [pc, #312]	; (80072e8 <UART_SetConfig+0x5c0>)
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071b0:	e00d      	b.n	80071ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b2:	f7fe fe53 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 80071b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071b8:	e009      	b.n	80071ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c0:	e005      	b.n	80071ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8090 	beq.w	80072f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	4a44      	ldr	r2, [pc, #272]	; (80072ec <UART_SetConfig+0x5c4>)
 80071dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071e8:	005a      	lsls	r2, r3, #1
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	441a      	add	r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	2b0f      	cmp	r3, #15
 8007200:	d916      	bls.n	8007230 <UART_SetConfig+0x508>
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d212      	bcs.n	8007230 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f023 030f 	bic.w	r3, r3, #15
 8007212:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	085b      	lsrs	r3, r3, #1
 8007218:	b29b      	uxth	r3, r3
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	b29a      	uxth	r2, r3
 8007220:	8bfb      	ldrh	r3, [r7, #30]
 8007222:	4313      	orrs	r3, r2
 8007224:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	8bfa      	ldrh	r2, [r7, #30]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	e062      	b.n	80072f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007236:	e05e      	b.n	80072f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800723c:	2b08      	cmp	r3, #8
 800723e:	d828      	bhi.n	8007292 <UART_SetConfig+0x56a>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <UART_SetConfig+0x520>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	0800726d 	.word	0x0800726d
 800724c:	08007275 	.word	0x08007275
 8007250:	0800727d 	.word	0x0800727d
 8007254:	08007293 	.word	0x08007293
 8007258:	08007283 	.word	0x08007283
 800725c:	08007293 	.word	0x08007293
 8007260:	08007293 	.word	0x08007293
 8007264:	08007293 	.word	0x08007293
 8007268:	0800728b 	.word	0x0800728b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800726c:	f7fe fe64 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8007270:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007272:	e014      	b.n	800729e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007274:	f7fe fe76 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 8007278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800727a:	e010      	b.n	800729e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800727c:	4b1a      	ldr	r3, [pc, #104]	; (80072e8 <UART_SetConfig+0x5c0>)
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007280:	e00d      	b.n	800729e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007282:	f7fe fdeb 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007288:	e009      	b.n	800729e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800728a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007290:	e005      	b.n	800729e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800729c:	bf00      	nop
    }

    if (pclk != 0U)
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d028      	beq.n	80072f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	4a10      	ldr	r2, [pc, #64]	; (80072ec <UART_SetConfig+0x5c4>)
 80072aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	441a      	add	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	2b0f      	cmp	r3, #15
 80072cc:	d910      	bls.n	80072f0 <UART_SetConfig+0x5c8>
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d4:	d20c      	bcs.n	80072f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60da      	str	r2, [r3, #12]
 80072e0:	e009      	b.n	80072f6 <UART_SetConfig+0x5ce>
 80072e2:	bf00      	nop
 80072e4:	40008000 	.word	0x40008000
 80072e8:	00f42400 	.word	0x00f42400
 80072ec:	0800a7f8 	.word	0x0800a7f8
      }
      else
      {
        ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2201      	movs	r2, #1
 8007302:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2200      	movs	r2, #0
 800730a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2200      	movs	r2, #0
 8007310:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007312:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007316:	4618      	mov	r0, r3
 8007318:	3730      	adds	r7, #48	; 0x30
 800731a:	46bd      	mov	sp, r7
 800731c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01a      	beq.n	8007436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741e:	d10a      	bne.n	8007436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b098      	sub	sp, #96	; 0x60
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007474:	f7fb fd7a 	bl	8002f6c <HAL_GetTick>
 8007478:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b08      	cmp	r3, #8
 8007486:	d12f      	bne.n	80074e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007490:	2200      	movs	r2, #0
 8007492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f88e 	bl	80075b8 <UART_WaitOnFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d022      	beq.n	80074e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b6:	653b      	str	r3, [r7, #80]	; 0x50
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c0:	647b      	str	r3, [r7, #68]	; 0x44
 80074c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e063      	b.n	80075b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d149      	bne.n	800758a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fe:	2200      	movs	r2, #0
 8007500:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f857 	bl	80075b8 <UART_WaitOnFlagUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d03c      	beq.n	800758a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	623b      	str	r3, [r7, #32]
   return(result);
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752e:	633b      	str	r3, [r7, #48]	; 0x30
 8007530:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e6      	bne.n	8007510 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	60fb      	str	r3, [r7, #12]
   return(result);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	64bb      	str	r3, [r7, #72]	; 0x48
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007562:	61fa      	str	r2, [r7, #28]
 8007564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	69b9      	ldr	r1, [r7, #24]
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	617b      	str	r3, [r7, #20]
   return(result);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e5      	bne.n	8007542 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e012      	b.n	80075b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3758      	adds	r7, #88	; 0x58
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	4613      	mov	r3, r2
 80075c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c8:	e04f      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d04b      	beq.n	800766a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d2:	f7fb fccb 	bl	8002f6c <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d302      	bcc.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e04e      	b.n	800768a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d037      	beq.n	800766a <UART_WaitOnFlagUntilTimeout+0xb2>
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b80      	cmp	r3, #128	; 0x80
 80075fe:	d034      	beq.n	800766a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d031      	beq.n	800766a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	2b08      	cmp	r3, #8
 8007612:	d110      	bne.n	8007636 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2208      	movs	r2, #8
 800761a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f838 	bl	8007692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2208      	movs	r2, #8
 8007626:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e029      	b.n	800768a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007644:	d111      	bne.n	800766a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800764e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f81e 	bl	8007692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e00f      	b.n	800768a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69da      	ldr	r2, [r3, #28]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4013      	ands	r3, r2
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	429a      	cmp	r2, r3
 8007678:	bf0c      	ite	eq
 800767a:	2301      	moveq	r3, #1
 800767c:	2300      	movne	r3, #0
 800767e:	b2db      	uxtb	r3, r3
 8007680:	461a      	mov	r2, r3
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	429a      	cmp	r2, r3
 8007686:	d0a0      	beq.n	80075ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007692:	b480      	push	{r7}
 8007694:	b095      	sub	sp, #84	; 0x54
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e6      	bne.n	800769a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	61fb      	str	r3, [r7, #28]
   return(result);
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e3      	bne.n	80076cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d118      	bne.n	800773e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	60bb      	str	r3, [r7, #8]
   return(result);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f023 0310 	bic.w	r3, r3, #16
 8007720:	647b      	str	r3, [r7, #68]	; 0x44
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6979      	ldr	r1, [r7, #20]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	613b      	str	r3, [r7, #16]
   return(result);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e6      	bne.n	800770c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007752:	bf00      	nop
 8007754:	3754      	adds	r7, #84	; 0x54
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_UARTEx_DisableFifoMode+0x16>
 8007770:	2302      	movs	r3, #2
 8007772:	e027      	b.n	80077c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2224      	movs	r2, #36	; 0x24
 8007780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0201 	bic.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e02d      	b.n	8007844 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2224      	movs	r2, #36	; 0x24
 80077f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f84f 	bl	80078c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007860:	2302      	movs	r3, #2
 8007862:	e02d      	b.n	80078c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0201 	bic.w	r2, r2, #1
 800788a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f811 	bl	80078c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d108      	bne.n	80078ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078e8:	e031      	b.n	800794e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078ea:	2308      	movs	r3, #8
 80078ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ee:	2308      	movs	r3, #8
 80078f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	0e5b      	lsrs	r3, r3, #25
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	0f5b      	lsrs	r3, r3, #29
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	7b3a      	ldrb	r2, [r7, #12]
 8007916:	4911      	ldr	r1, [pc, #68]	; (800795c <UARTEx_SetNbDataToProcess+0x94>)
 8007918:	5c8a      	ldrb	r2, [r1, r2]
 800791a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800791e:	7b3a      	ldrb	r2, [r7, #12]
 8007920:	490f      	ldr	r1, [pc, #60]	; (8007960 <UARTEx_SetNbDataToProcess+0x98>)
 8007922:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007924:	fb93 f3f2 	sdiv	r3, r3, r2
 8007928:	b29a      	uxth	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	7b7a      	ldrb	r2, [r7, #13]
 8007934:	4909      	ldr	r1, [pc, #36]	; (800795c <UARTEx_SetNbDataToProcess+0x94>)
 8007936:	5c8a      	ldrb	r2, [r1, r2]
 8007938:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800793c:	7b7a      	ldrb	r2, [r7, #13]
 800793e:	4908      	ldr	r1, [pc, #32]	; (8007960 <UARTEx_SetNbDataToProcess+0x98>)
 8007940:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007942:	fb93 f3f2 	sdiv	r3, r3, r2
 8007946:	b29a      	uxth	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	0800a810 	.word	0x0800a810
 8007960:	0800a818 	.word	0x0800a818

08007964 <__NVIC_SetPriority>:
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007974:	2b00      	cmp	r3, #0
 8007976:	db0a      	blt.n	800798e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	b2da      	uxtb	r2, r3
 800797c:	490c      	ldr	r1, [pc, #48]	; (80079b0 <__NVIC_SetPriority+0x4c>)
 800797e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007982:	0112      	lsls	r2, r2, #4
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	440b      	add	r3, r1
 8007988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800798c:	e00a      	b.n	80079a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	b2da      	uxtb	r2, r3
 8007992:	4908      	ldr	r1, [pc, #32]	; (80079b4 <__NVIC_SetPriority+0x50>)
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	3b04      	subs	r3, #4
 800799c:	0112      	lsls	r2, r2, #4
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	440b      	add	r3, r1
 80079a2:	761a      	strb	r2, [r3, #24]
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	e000e100 	.word	0xe000e100
 80079b4:	e000ed00 	.word	0xe000ed00

080079b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <SysTick_Handler+0x1c>)
 80079be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80079c0:	f001 fd28 	bl	8009414 <xTaskGetSchedulerState>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d001      	beq.n	80079ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079ca:	f002 fb0d 	bl	8009fe8 <xPortSysTickHandler>
  }
}
 80079ce:	bf00      	nop
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	e000e010 	.word	0xe000e010

080079d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80079dc:	2100      	movs	r1, #0
 80079de:	f06f 0004 	mvn.w	r0, #4
 80079e2:	f7ff ffbf 	bl	8007964 <__NVIC_SetPriority>
#endif
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079f2:	f3ef 8305 	mrs	r3, IPSR
 80079f6:	603b      	str	r3, [r7, #0]
  return(result);
 80079f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079fe:	f06f 0305 	mvn.w	r3, #5
 8007a02:	607b      	str	r3, [r7, #4]
 8007a04:	e00c      	b.n	8007a20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a06:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <osKernelInitialize+0x44>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d105      	bne.n	8007a1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a0e:	4b08      	ldr	r3, [pc, #32]	; (8007a30 <osKernelInitialize+0x44>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	607b      	str	r3, [r7, #4]
 8007a18:	e002      	b.n	8007a20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a20:	687b      	ldr	r3, [r7, #4]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	200001d8 	.word	0x200001d8

08007a34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a3a:	f3ef 8305 	mrs	r3, IPSR
 8007a3e:	603b      	str	r3, [r7, #0]
  return(result);
 8007a40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a46:	f06f 0305 	mvn.w	r3, #5
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	e010      	b.n	8007a70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a4e:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <osKernelStart+0x48>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d109      	bne.n	8007a6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a56:	f7ff ffbf 	bl	80079d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a5a:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <osKernelStart+0x48>)
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a60:	f001 f87c 	bl	8008b5c <vTaskStartScheduler>
      stat = osOK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	607b      	str	r3, [r7, #4]
 8007a68:	e002      	b.n	8007a70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a70:	687b      	ldr	r3, [r7, #4]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	200001d8 	.word	0x200001d8

08007a80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08e      	sub	sp, #56	; 0x38
 8007a84:	af04      	add	r7, sp, #16
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a90:	f3ef 8305 	mrs	r3, IPSR
 8007a94:	617b      	str	r3, [r7, #20]
  return(result);
 8007a96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d17e      	bne.n	8007b9a <osThreadNew+0x11a>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d07b      	beq.n	8007b9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007aa2:	2380      	movs	r3, #128	; 0x80
 8007aa4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007aa6:	2318      	movs	r3, #24
 8007aa8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007aae:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d045      	beq.n	8007b46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <osThreadNew+0x48>
        name = attr->name;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d008      	beq.n	8007aee <osThreadNew+0x6e>
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	2b38      	cmp	r3, #56	; 0x38
 8007ae0:	d805      	bhi.n	8007aee <osThreadNew+0x6e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <osThreadNew+0x72>
        return (NULL);
 8007aee:	2300      	movs	r3, #0
 8007af0:	e054      	b.n	8007b9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	089b      	lsrs	r3, r3, #2
 8007b00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00e      	beq.n	8007b28 <osThreadNew+0xa8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	2ba7      	cmp	r3, #167	; 0xa7
 8007b10:	d90a      	bls.n	8007b28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d006      	beq.n	8007b28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <osThreadNew+0xa8>
        mem = 1;
 8007b22:	2301      	movs	r3, #1
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	e010      	b.n	8007b4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10c      	bne.n	8007b4a <osThreadNew+0xca>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d108      	bne.n	8007b4a <osThreadNew+0xca>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <osThreadNew+0xca>
          mem = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	e001      	b.n	8007b4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d110      	bne.n	8007b72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b58:	9202      	str	r2, [sp, #8]
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6a3a      	ldr	r2, [r7, #32]
 8007b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fe0c 	bl	8008784 <xTaskCreateStatic>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	e013      	b.n	8007b9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d110      	bne.n	8007b9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	f107 0310 	add.w	r3, r7, #16
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 fe57 	bl	800883e <xTaskCreate>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d001      	beq.n	8007b9a <osThreadNew+0x11a>
            hTask = NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b9a:	693b      	ldr	r3, [r7, #16]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3728      	adds	r7, #40	; 0x28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bac:	f3ef 8305 	mrs	r3, IPSR
 8007bb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <osDelay+0x1c>
    stat = osErrorISR;
 8007bb8:	f06f 0305 	mvn.w	r3, #5
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e007      	b.n	8007bd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 ff92 	bl	8008af4 <vTaskDelay>
    }
  }

  return (stat);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a07      	ldr	r2, [pc, #28]	; (8007c08 <vApplicationGetIdleTaskMemory+0x2c>)
 8007bec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4a06      	ldr	r2, [pc, #24]	; (8007c0c <vApplicationGetIdleTaskMemory+0x30>)
 8007bf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2280      	movs	r2, #128	; 0x80
 8007bf8:	601a      	str	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	200001dc 	.word	0x200001dc
 8007c0c:	20000284 	.word	0x20000284

08007c10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <vApplicationGetTimerTaskMemory+0x2c>)
 8007c20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a06      	ldr	r2, [pc, #24]	; (8007c40 <vApplicationGetTimerTaskMemory+0x30>)
 8007c26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c2e:	601a      	str	r2, [r3, #0]
}
 8007c30:	bf00      	nop
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	20000484 	.word	0x20000484
 8007c40:	2000052c 	.word	0x2000052c

08007c44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f103 0208 	add.w	r2, r3, #8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f103 0208 	add.w	r2, r3, #8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f103 0208 	add.w	r2, r3, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
}
 8007cda:	bf00      	nop
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d103      	bne.n	8007d06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e00c      	b.n	8007d20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	e002      	b.n	8007d14 <vListInsert+0x2e>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d2f6      	bcs.n	8007d0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	601a      	str	r2, [r3, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6892      	ldr	r2, [r2, #8]
 8007d6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6852      	ldr	r2, [r2, #4]
 8007d78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d103      	bne.n	8007d8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	1e5a      	subs	r2, r3, #1
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007dd6:	f002 f875 	bl	8009ec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de2:	68f9      	ldr	r1, [r7, #12]
 8007de4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007de6:	fb01 f303 	mul.w	r3, r1, r3
 8007dea:	441a      	add	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	3b01      	subs	r3, #1
 8007e08:	68f9      	ldr	r1, [r7, #12]
 8007e0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e0c:	fb01 f303 	mul.w	r3, r1, r3
 8007e10:	441a      	add	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	22ff      	movs	r2, #255	; 0xff
 8007e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	22ff      	movs	r2, #255	; 0xff
 8007e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d114      	bne.n	8007e56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01a      	beq.n	8007e6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3310      	adds	r3, #16
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 f929 	bl	8009090 <xTaskRemoveFromEventList>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d012      	beq.n	8007e6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <xQueueGenericReset+0xcc>)
 8007e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	e009      	b.n	8007e6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3310      	adds	r3, #16
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fef2 	bl	8007c44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3324      	adds	r3, #36	; 0x24
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff feed 	bl	8007c44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e6a:	f002 f85b 	bl	8009f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e6e:	2301      	movs	r3, #1
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08e      	sub	sp, #56	; 0x38
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <xQueueGenericCreateStatic+0x52>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <xQueueGenericCreateStatic+0x56>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueGenericCreateStatic+0x58>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	623b      	str	r3, [r7, #32]
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <xQueueGenericCreateStatic+0x7e>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <xQueueGenericCreateStatic+0x82>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <xQueueGenericCreateStatic+0x84>
 8007efe:	2300      	movs	r3, #0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	61fb      	str	r3, [r7, #28]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f1a:	2350      	movs	r3, #80	; 0x50
 8007f1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b50      	cmp	r3, #80	; 0x50
 8007f22:	d00a      	beq.n	8007f3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	61bb      	str	r3, [r7, #24]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00d      	beq.n	8007f62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	4613      	mov	r3, r2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f805 	bl	8007f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3730      	adds	r7, #48	; 0x30
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	e002      	b.n	8007f8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	69b8      	ldr	r0, [r7, #24]
 8007f9e:	f7ff ff05 	bl	8007dac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	78fa      	ldrb	r2, [r7, #3]
 8007fa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08e      	sub	sp, #56	; 0x38
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <xQueueGenericSend+0x32>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <xQueueGenericSend+0x40>
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <xQueueGenericSend+0x44>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <xQueueGenericSend+0x46>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <xQueueGenericSend+0x60>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d103      	bne.n	8008022 <xQueueGenericSend+0x6e>
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <xQueueGenericSend+0x72>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <xQueueGenericSend+0x74>
 8008026:	2300      	movs	r3, #0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xQueueGenericSend+0x8e>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	623b      	str	r3, [r7, #32]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008042:	f001 f9e7 	bl	8009414 <xTaskGetSchedulerState>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <xQueueGenericSend+0x9e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <xQueueGenericSend+0xa2>
 8008052:	2301      	movs	r3, #1
 8008054:	e000      	b.n	8008058 <xQueueGenericSend+0xa4>
 8008056:	2300      	movs	r3, #0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <xQueueGenericSend+0xbe>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	61fb      	str	r3, [r7, #28]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008072:	f001 ff27 	bl	8009ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807e:	429a      	cmp	r2, r3
 8008080:	d302      	bcc.n	8008088 <xQueueGenericSend+0xd4>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b02      	cmp	r3, #2
 8008086:	d129      	bne.n	80080dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808e:	f000 fa0b 	bl	80084a8 <prvCopyDataToQueue>
 8008092:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b00      	cmp	r3, #0
 800809a:	d010      	beq.n	80080be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	3324      	adds	r3, #36	; 0x24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fff5 	bl	8009090 <xTaskRemoveFromEventList>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d013      	beq.n	80080d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080ac:	4b3f      	ldr	r3, [pc, #252]	; (80081ac <xQueueGenericSend+0x1f8>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	e00a      	b.n	80080d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080c4:	4b39      	ldr	r3, [pc, #228]	; (80081ac <xQueueGenericSend+0x1f8>)
 80080c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080d4:	f001 ff26 	bl	8009f24 <vPortExitCritical>
				return pdPASS;
 80080d8:	2301      	movs	r3, #1
 80080da:	e063      	b.n	80081a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080e2:	f001 ff1f 	bl	8009f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	e05c      	b.n	80081a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d106      	bne.n	80080fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 f82f 	bl	8009158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080fa:	2301      	movs	r3, #1
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080fe:	f001 ff11 	bl	8009f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008102:	f000 fd9b 	bl	8008c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008106:	f001 fedd 	bl	8009ec4 <vPortEnterCritical>
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008110:	b25b      	sxtb	r3, r3
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008116:	d103      	bne.n	8008120 <xQueueGenericSend+0x16c>
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008126:	b25b      	sxtb	r3, r3
 8008128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812c:	d103      	bne.n	8008136 <xQueueGenericSend+0x182>
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008136:	f001 fef5 	bl	8009f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800813a:	1d3a      	adds	r2, r7, #4
 800813c:	f107 0314 	add.w	r3, r7, #20
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f001 f81e 	bl	8009184 <xTaskCheckForTimeOut>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d124      	bne.n	8008198 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800814e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008150:	f000 faa2 	bl	8008698 <prvIsQueueFull>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d018      	beq.n	800818c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	3310      	adds	r3, #16
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f000 ff44 	bl	8008ff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800816a:	f000 fa2d 	bl	80085c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800816e:	f000 fd73 	bl	8008c58 <xTaskResumeAll>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	f47f af7c 	bne.w	8008072 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800817a:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <xQueueGenericSend+0x1f8>)
 800817c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	e772      	b.n	8008072 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800818c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800818e:	f000 fa1b 	bl	80085c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008192:	f000 fd61 	bl	8008c58 <xTaskResumeAll>
 8008196:	e76c      	b.n	8008072 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800819a:	f000 fa15 	bl	80085c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800819e:	f000 fd5b 	bl	8008c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3738      	adds	r7, #56	; 0x38
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	e000ed04 	.word	0xe000ed04

080081b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b090      	sub	sp, #64	; 0x40
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d103      	bne.n	80081ec <xQueueGenericSendFromISR+0x3c>
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <xQueueGenericSendFromISR+0x40>
 80081ec:	2301      	movs	r3, #1
 80081ee:	e000      	b.n	80081f2 <xQueueGenericSendFromISR+0x42>
 80081f0:	2300      	movs	r3, #0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d103      	bne.n	800821a <xQueueGenericSendFromISR+0x6a>
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	2b01      	cmp	r3, #1
 8008218:	d101      	bne.n	800821e <xQueueGenericSendFromISR+0x6e>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <xQueueGenericSendFromISR+0x70>
 800821e:	2300      	movs	r3, #0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	623b      	str	r3, [r7, #32]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800823a:	f001 ff25 	bl	800a088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800823e:	f3ef 8211 	mrs	r2, BASEPRI
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	61fa      	str	r2, [r7, #28]
 8008254:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008256:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008258:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008262:	429a      	cmp	r2, r3
 8008264:	d302      	bcc.n	800826c <xQueueGenericSendFromISR+0xbc>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b02      	cmp	r3, #2
 800826a:	d12f      	bne.n	80082cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008282:	f000 f911 	bl	80084a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008286:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d112      	bne.n	80082b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	2b00      	cmp	r3, #0
 8008296:	d016      	beq.n	80082c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	3324      	adds	r3, #36	; 0x24
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fef7 	bl	8009090 <xTaskRemoveFromEventList>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00e      	beq.n	80082c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	e007      	b.n	80082c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082ba:	3301      	adds	r3, #1
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	b25a      	sxtb	r2, r3
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082c6:	2301      	movs	r3, #1
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80082ca:	e001      	b.n	80082d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3740      	adds	r7, #64	; 0x40
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <xQueueReceive+0x30>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	623b      	str	r3, [r7, #32]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d103      	bne.n	8008326 <xQueueReceive+0x3e>
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <xQueueReceive+0x42>
 8008326:	2301      	movs	r3, #1
 8008328:	e000      	b.n	800832c <xQueueReceive+0x44>
 800832a:	2300      	movs	r3, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xQueueReceive+0x5e>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	61fb      	str	r3, [r7, #28]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008346:	f001 f865 	bl	8009414 <xTaskGetSchedulerState>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d102      	bne.n	8008356 <xQueueReceive+0x6e>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <xQueueReceive+0x72>
 8008356:	2301      	movs	r3, #1
 8008358:	e000      	b.n	800835c <xQueueReceive+0x74>
 800835a:	2300      	movs	r3, #0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <xQueueReceive+0x8e>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	61bb      	str	r3, [r7, #24]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008376:	f001 fda5 	bl	8009ec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	2b00      	cmp	r3, #0
 8008384:	d01f      	beq.n	80083c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008386:	68b9      	ldr	r1, [r7, #8]
 8008388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838a:	f000 f8f7 	bl	800857c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	1e5a      	subs	r2, r3, #1
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00f      	beq.n	80083be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	3310      	adds	r3, #16
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fe74 	bl	8009090 <xTaskRemoveFromEventList>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d007      	beq.n	80083be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083ae:	4b3d      	ldr	r3, [pc, #244]	; (80084a4 <xQueueReceive+0x1bc>)
 80083b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083be:	f001 fdb1 	bl	8009f24 <vPortExitCritical>
				return pdPASS;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e069      	b.n	800849a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083cc:	f001 fdaa 	bl	8009f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e062      	b.n	800849a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083da:	f107 0310 	add.w	r3, r7, #16
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 feba 	bl	8009158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083e8:	f001 fd9c 	bl	8009f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083ec:	f000 fc26 	bl	8008c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083f0:	f001 fd68 	bl	8009ec4 <vPortEnterCritical>
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083fa:	b25b      	sxtb	r3, r3
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d103      	bne.n	800840a <xQueueReceive+0x122>
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008410:	b25b      	sxtb	r3, r3
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d103      	bne.n	8008420 <xQueueReceive+0x138>
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008420:	f001 fd80 	bl	8009f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008424:	1d3a      	adds	r2, r7, #4
 8008426:	f107 0310 	add.w	r3, r7, #16
 800842a:	4611      	mov	r1, r2
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fea9 	bl	8009184 <xTaskCheckForTimeOut>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d123      	bne.n	8008480 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800843a:	f000 f917 	bl	800866c <prvIsQueueEmpty>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d017      	beq.n	8008474 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	3324      	adds	r3, #36	; 0x24
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fdcf 	bl	8008ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008454:	f000 f8b8 	bl	80085c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008458:	f000 fbfe 	bl	8008c58 <xTaskResumeAll>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d189      	bne.n	8008376 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008462:	4b10      	ldr	r3, [pc, #64]	; (80084a4 <xQueueReceive+0x1bc>)
 8008464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	e780      	b.n	8008376 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008476:	f000 f8a7 	bl	80085c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800847a:	f000 fbed 	bl	8008c58 <xTaskResumeAll>
 800847e:	e77a      	b.n	8008376 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008482:	f000 f8a1 	bl	80085c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008486:	f000 fbe7 	bl	8008c58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800848a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848c:	f000 f8ee 	bl	800866c <prvIsQueueEmpty>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	f43f af6f 	beq.w	8008376 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800849a:	4618      	mov	r0, r3
 800849c:	3730      	adds	r7, #48	; 0x30
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	e000ed04 	.word	0xe000ed04

080084a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10d      	bne.n	80084e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d14d      	bne.n	800856a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 ffbc 	bl	8009450 <xTaskPriorityDisinherit>
 80084d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	e043      	b.n	800856a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d119      	bne.n	800851c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6858      	ldr	r0, [r3, #4]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	461a      	mov	r2, r3
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	f002 f876 	bl	800a5e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	441a      	add	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	d32b      	bcc.n	800856a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	605a      	str	r2, [r3, #4]
 800851a:	e026      	b.n	800856a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	68d8      	ldr	r0, [r3, #12]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008524:	461a      	mov	r2, r3
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	f002 f85c 	bl	800a5e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	425b      	negs	r3, r3
 8008536:	441a      	add	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d207      	bcs.n	8008558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008550:	425b      	negs	r3, r3
 8008552:	441a      	add	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d105      	bne.n	800856a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	3b01      	subs	r3, #1
 8008568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008572:	697b      	ldr	r3, [r7, #20]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	d018      	beq.n	80085c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	441a      	add	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d303      	bcc.n	80085b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68d9      	ldr	r1, [r3, #12]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	461a      	mov	r2, r3
 80085ba:	6838      	ldr	r0, [r7, #0]
 80085bc:	f002 f812 	bl	800a5e4 <memcpy>
	}
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085d0:	f001 fc78 	bl	8009ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085dc:	e011      	b.n	8008602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d012      	beq.n	800860c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3324      	adds	r3, #36	; 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fd50 	bl	8009090 <xTaskRemoveFromEventList>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085f6:	f000 fe27 	bl	8009248 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dce9      	bgt.n	80085de <prvUnlockQueue+0x16>
 800860a:	e000      	b.n	800860e <prvUnlockQueue+0x46>
					break;
 800860c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	22ff      	movs	r2, #255	; 0xff
 8008612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008616:	f001 fc85 	bl	8009f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800861a:	f001 fc53 	bl	8009ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008626:	e011      	b.n	800864c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d012      	beq.n	8008656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3310      	adds	r3, #16
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fd2b 	bl	8009090 <xTaskRemoveFromEventList>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008640:	f000 fe02 	bl	8009248 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	3b01      	subs	r3, #1
 8008648:	b2db      	uxtb	r3, r3
 800864a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800864c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008650:	2b00      	cmp	r3, #0
 8008652:	dce9      	bgt.n	8008628 <prvUnlockQueue+0x60>
 8008654:	e000      	b.n	8008658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	22ff      	movs	r2, #255	; 0xff
 800865c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008660:	f001 fc60 	bl	8009f24 <vPortExitCritical>
}
 8008664:	bf00      	nop
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008674:	f001 fc26 	bl	8009ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008680:	2301      	movs	r3, #1
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	e001      	b.n	800868a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800868a:	f001 fc4b 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 800868e:	68fb      	ldr	r3, [r7, #12]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086a0:	f001 fc10 	bl	8009ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d102      	bne.n	80086b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e001      	b.n	80086ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086ba:	f001 fc33 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 80086be:	68fb      	ldr	r3, [r7, #12]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e014      	b.n	8008702 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086d8:	4a0f      	ldr	r2, [pc, #60]	; (8008718 <vQueueAddToRegistry+0x50>)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10b      	bne.n	80086fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086e4:	490c      	ldr	r1, [pc, #48]	; (8008718 <vQueueAddToRegistry+0x50>)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086ee:	4a0a      	ldr	r2, [pc, #40]	; (8008718 <vQueueAddToRegistry+0x50>)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	4413      	add	r3, r2
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086fa:	e006      	b.n	800870a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3301      	adds	r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b07      	cmp	r3, #7
 8008706:	d9e7      	bls.n	80086d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	2000092c 	.word	0x2000092c

0800871c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800872c:	f001 fbca 	bl	8009ec4 <vPortEnterCritical>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008736:	b25b      	sxtb	r3, r3
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873c:	d103      	bne.n	8008746 <vQueueWaitForMessageRestricted+0x2a>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800874c:	b25b      	sxtb	r3, r3
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d103      	bne.n	800875c <vQueueWaitForMessageRestricted+0x40>
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800875c:	f001 fbe2 	bl	8009f24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	2b00      	cmp	r3, #0
 8008766:	d106      	bne.n	8008776 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	3324      	adds	r3, #36	; 0x24
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	68b9      	ldr	r1, [r7, #8]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fc61 	bl	8009038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008776:	6978      	ldr	r0, [r7, #20]
 8008778:	f7ff ff26 	bl	80085c8 <prvUnlockQueue>
	}
 800877c:	bf00      	nop
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08e      	sub	sp, #56	; 0x38
 8008788:	af04      	add	r7, sp, #16
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	623b      	str	r3, [r7, #32]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xTaskCreateStatic+0x46>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	61fb      	str	r3, [r7, #28]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087ca:	23a8      	movs	r3, #168	; 0xa8
 80087cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2ba8      	cmp	r3, #168	; 0xa8
 80087d2:	d00a      	beq.n	80087ea <xTaskCreateStatic+0x66>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	61bb      	str	r3, [r7, #24]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01e      	beq.n	8008830 <xTaskCreateStatic+0xac>
 80087f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01b      	beq.n	8008830 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008800:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	2202      	movs	r2, #2
 8008806:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800880a:	2300      	movs	r3, #0
 800880c:	9303      	str	r3, [sp, #12]
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	9302      	str	r3, [sp, #8]
 8008812:	f107 0314 	add.w	r3, r7, #20
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f850 	bl	80088c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800882a:	f000 f8f3 	bl	8008a14 <prvAddNewTaskToReadyList>
 800882e:	e001      	b.n	8008834 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008830:	2300      	movs	r3, #0
 8008832:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008834:	697b      	ldr	r3, [r7, #20]
	}
 8008836:	4618      	mov	r0, r3
 8008838:	3728      	adds	r7, #40	; 0x28
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800883e:	b580      	push	{r7, lr}
 8008840:	b08c      	sub	sp, #48	; 0x30
 8008842:	af04      	add	r7, sp, #16
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	603b      	str	r3, [r7, #0]
 800884a:	4613      	mov	r3, r2
 800884c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4618      	mov	r0, r3
 8008854:	f001 fc58 	bl	800a108 <pvPortMalloc>
 8008858:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00e      	beq.n	800887e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008860:	20a8      	movs	r0, #168	; 0xa8
 8008862:	f001 fc51 	bl	800a108 <pvPortMalloc>
 8008866:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	631a      	str	r2, [r3, #48]	; 0x30
 8008874:	e005      	b.n	8008882 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008876:	6978      	ldr	r0, [r7, #20]
 8008878:	f001 fd12 	bl	800a2a0 <vPortFree>
 800887c:	e001      	b.n	8008882 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d017      	beq.n	80088b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008890:	88fa      	ldrh	r2, [r7, #6]
 8008892:	2300      	movs	r3, #0
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	9302      	str	r3, [sp, #8]
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 f80e 	bl	80088c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088ac:	69f8      	ldr	r0, [r7, #28]
 80088ae:	f000 f8b1 	bl	8008a14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088b2:	2301      	movs	r3, #1
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	e002      	b.n	80088be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088be:	69bb      	ldr	r3, [r7, #24]
	}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3720      	adds	r7, #32
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	461a      	mov	r2, r3
 80088e0:	21a5      	movs	r1, #165	; 0xa5
 80088e2:	f001 fdfb 	bl	800a4dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088f0:	3b01      	subs	r3, #1
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f023 0307 	bic.w	r3, r3, #7
 80088fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <prvInitialiseNewTask+0x58>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	617b      	str	r3, [r7, #20]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01f      	beq.n	8008966 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008926:	2300      	movs	r3, #0
 8008928:	61fb      	str	r3, [r7, #28]
 800892a:	e012      	b.n	8008952 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	4413      	add	r3, r2
 8008932:	7819      	ldrb	r1, [r3, #0]
 8008934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	4413      	add	r3, r2
 800893a:	3334      	adds	r3, #52	; 0x34
 800893c:	460a      	mov	r2, r1
 800893e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	4413      	add	r3, r2
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d006      	beq.n	800895a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	3301      	adds	r3, #1
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b0f      	cmp	r3, #15
 8008956:	d9e9      	bls.n	800892c <prvInitialiseNewTask+0x64>
 8008958:	e000      	b.n	800895c <prvInitialiseNewTask+0x94>
			{
				break;
 800895a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008964:	e003      	b.n	800896e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	2b37      	cmp	r3, #55	; 0x37
 8008972:	d901      	bls.n	8008978 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008974:	2337      	movs	r3, #55	; 0x37
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800897c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008982:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	2200      	movs	r2, #0
 8008988:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800898a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898c:	3304      	adds	r3, #4
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff f978 	bl	8007c84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	3318      	adds	r3, #24
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff f973 	bl	8007c84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	3354      	adds	r3, #84	; 0x54
 80089c8:	224c      	movs	r2, #76	; 0x4c
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fd85 	bl	800a4dc <memset>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	4a0c      	ldr	r2, [pc, #48]	; (8008a08 <prvInitialiseNewTask+0x140>)
 80089d6:	659a      	str	r2, [r3, #88]	; 0x58
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	4a0c      	ldr	r2, [pc, #48]	; (8008a0c <prvInitialiseNewTask+0x144>)
 80089dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	4a0b      	ldr	r2, [pc, #44]	; (8008a10 <prvInitialiseNewTask+0x148>)
 80089e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	69b8      	ldr	r0, [r7, #24]
 80089ea:	f001 f941 	bl	8009c70 <pxPortInitialiseStack>
 80089ee:	4602      	mov	r2, r0
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a00:	bf00      	nop
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20001bc0 	.word	0x20001bc0
 8008a0c:	20001c28 	.word	0x20001c28
 8008a10:	20001c90 	.word	0x20001c90

08008a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a1c:	f001 fa52 	bl	8009ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a20:	4b2d      	ldr	r3, [pc, #180]	; (8008ad8 <prvAddNewTaskToReadyList+0xc4>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	4a2c      	ldr	r2, [pc, #176]	; (8008ad8 <prvAddNewTaskToReadyList+0xc4>)
 8008a28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a2a:	4b2c      	ldr	r3, [pc, #176]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a32:	4a2a      	ldr	r2, [pc, #168]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a38:	4b27      	ldr	r3, [pc, #156]	; (8008ad8 <prvAddNewTaskToReadyList+0xc4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d110      	bne.n	8008a62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a40:	f000 fc26 	bl	8009290 <prvInitialiseTaskLists>
 8008a44:	e00d      	b.n	8008a62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a46:	4b26      	ldr	r3, [pc, #152]	; (8008ae0 <prvAddNewTaskToReadyList+0xcc>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d109      	bne.n	8008a62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a4e:	4b23      	ldr	r3, [pc, #140]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d802      	bhi.n	8008a62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a5c:	4a1f      	ldr	r2, [pc, #124]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a62:	4b20      	ldr	r3, [pc, #128]	; (8008ae4 <prvAddNewTaskToReadyList+0xd0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a1e      	ldr	r2, [pc, #120]	; (8008ae4 <prvAddNewTaskToReadyList+0xd0>)
 8008a6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ae4 <prvAddNewTaskToReadyList+0xd0>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a78:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <prvAddNewTaskToReadyList+0xd4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d903      	bls.n	8008a88 <prvAddNewTaskToReadyList+0x74>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	4a18      	ldr	r2, [pc, #96]	; (8008ae8 <prvAddNewTaskToReadyList+0xd4>)
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4a15      	ldr	r2, [pc, #84]	; (8008aec <prvAddNewTaskToReadyList+0xd8>)
 8008a96:	441a      	add	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7ff f8fd 	bl	8007c9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008aa4:	f001 fa3e 	bl	8009f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <prvAddNewTaskToReadyList+0xcc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ab0:	4b0a      	ldr	r3, [pc, #40]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d207      	bcs.n	8008ace <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <prvAddNewTaskToReadyList+0xdc>)
 8008ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000e40 	.word	0x20000e40
 8008adc:	2000096c 	.word	0x2000096c
 8008ae0:	20000e4c 	.word	0x20000e4c
 8008ae4:	20000e5c 	.word	0x20000e5c
 8008ae8:	20000e48 	.word	0x20000e48
 8008aec:	20000970 	.word	0x20000970
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d017      	beq.n	8008b36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b06:	4b13      	ldr	r3, [pc, #76]	; (8008b54 <vTaskDelay+0x60>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <vTaskDelay+0x30>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60bb      	str	r3, [r7, #8]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b24:	f000 f88a 	bl	8008c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b28:	2100      	movs	r1, #0
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fcfe 	bl	800952c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b30:	f000 f892 	bl	8008c58 <xTaskResumeAll>
 8008b34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d107      	bne.n	8008b4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b3c:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <vTaskDelay+0x64>)
 8008b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b4c:	bf00      	nop
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20000e68 	.word	0x20000e68
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	; 0x28
 8008b60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	1d39      	adds	r1, r7, #4
 8008b6e:	f107 0308 	add.w	r3, r7, #8
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff f832 	bl	8007bdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	9202      	str	r2, [sp, #8]
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	2300      	movs	r3, #0
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	2300      	movs	r3, #0
 8008b88:	460a      	mov	r2, r1
 8008b8a:	4924      	ldr	r1, [pc, #144]	; (8008c1c <vTaskStartScheduler+0xc0>)
 8008b8c:	4824      	ldr	r0, [pc, #144]	; (8008c20 <vTaskStartScheduler+0xc4>)
 8008b8e:	f7ff fdf9 	bl	8008784 <xTaskCreateStatic>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4a23      	ldr	r2, [pc, #140]	; (8008c24 <vTaskStartScheduler+0xc8>)
 8008b96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b98:	4b22      	ldr	r3, [pc, #136]	; (8008c24 <vTaskStartScheduler+0xc8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e001      	b.n	8008baa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d102      	bne.n	8008bb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bb0:	f000 fd10 	bl	80095d4 <xTimerCreateTimerTask>
 8008bb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d11b      	bne.n	8008bf4 <vTaskStartScheduler+0x98>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	613b      	str	r3, [r7, #16]
}
 8008bce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bd0:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <vTaskStartScheduler+0xcc>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3354      	adds	r3, #84	; 0x54
 8008bd6:	4a15      	ldr	r2, [pc, #84]	; (8008c2c <vTaskStartScheduler+0xd0>)
 8008bd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <vTaskStartScheduler+0xd4>)
 8008bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008be2:	4b14      	ldr	r3, [pc, #80]	; (8008c34 <vTaskStartScheduler+0xd8>)
 8008be4:	2201      	movs	r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008be8:	4b13      	ldr	r3, [pc, #76]	; (8008c38 <vTaskStartScheduler+0xdc>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bee:	f001 f8c7 	bl	8009d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bf2:	e00e      	b.n	8008c12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfa:	d10a      	bne.n	8008c12 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	60fb      	str	r3, [r7, #12]
}
 8008c0e:	bf00      	nop
 8008c10:	e7fe      	b.n	8008c10 <vTaskStartScheduler+0xb4>
}
 8008c12:	bf00      	nop
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	0800a708 	.word	0x0800a708
 8008c20:	08009261 	.word	0x08009261
 8008c24:	20000e64 	.word	0x20000e64
 8008c28:	2000096c 	.word	0x2000096c
 8008c2c:	2000005c 	.word	0x2000005c
 8008c30:	20000e60 	.word	0x20000e60
 8008c34:	20000e4c 	.word	0x20000e4c
 8008c38:	20000e44 	.word	0x20000e44

08008c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <vTaskSuspendAll+0x18>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3301      	adds	r3, #1
 8008c46:	4a03      	ldr	r2, [pc, #12]	; (8008c54 <vTaskSuspendAll+0x18>)
 8008c48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c4a:	bf00      	nop
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	20000e68 	.word	0x20000e68

08008c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c66:	4b42      	ldr	r3, [pc, #264]	; (8008d70 <xTaskResumeAll+0x118>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10a      	bne.n	8008c84 <xTaskResumeAll+0x2c>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	603b      	str	r3, [r7, #0]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c84:	f001 f91e 	bl	8009ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c88:	4b39      	ldr	r3, [pc, #228]	; (8008d70 <xTaskResumeAll+0x118>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	4a38      	ldr	r2, [pc, #224]	; (8008d70 <xTaskResumeAll+0x118>)
 8008c90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c92:	4b37      	ldr	r3, [pc, #220]	; (8008d70 <xTaskResumeAll+0x118>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d162      	bne.n	8008d60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c9a:	4b36      	ldr	r3, [pc, #216]	; (8008d74 <xTaskResumeAll+0x11c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d05e      	beq.n	8008d60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ca2:	e02f      	b.n	8008d04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca4:	4b34      	ldr	r3, [pc, #208]	; (8008d78 <xTaskResumeAll+0x120>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3318      	adds	r3, #24
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff f851 	bl	8007d58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff f84c 	bl	8007d58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc4:	4b2d      	ldr	r3, [pc, #180]	; (8008d7c <xTaskResumeAll+0x124>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d903      	bls.n	8008cd4 <xTaskResumeAll+0x7c>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd0:	4a2a      	ldr	r2, [pc, #168]	; (8008d7c <xTaskResumeAll+0x124>)
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4a27      	ldr	r2, [pc, #156]	; (8008d80 <xTaskResumeAll+0x128>)
 8008ce2:	441a      	add	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f7fe ffd7 	bl	8007c9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	4b23      	ldr	r3, [pc, #140]	; (8008d84 <xTaskResumeAll+0x12c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d302      	bcc.n	8008d04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008cfe:	4b22      	ldr	r3, [pc, #136]	; (8008d88 <xTaskResumeAll+0x130>)
 8008d00:	2201      	movs	r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d04:	4b1c      	ldr	r3, [pc, #112]	; (8008d78 <xTaskResumeAll+0x120>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1cb      	bne.n	8008ca4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d12:	f000 fb5f 	bl	80093d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d16:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <xTaskResumeAll+0x134>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d010      	beq.n	8008d44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d22:	f000 f847 	bl	8008db4 <xTaskIncrementTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d2c:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <xTaskResumeAll+0x130>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1f1      	bne.n	8008d22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <xTaskResumeAll+0x134>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d44:	4b10      	ldr	r3, [pc, #64]	; (8008d88 <xTaskResumeAll+0x130>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <xTaskResumeAll+0x138>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d60:	f001 f8e0 	bl	8009f24 <vPortExitCritical>

	return xAlreadyYielded;
 8008d64:	68bb      	ldr	r3, [r7, #8]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000e68 	.word	0x20000e68
 8008d74:	20000e40 	.word	0x20000e40
 8008d78:	20000e00 	.word	0x20000e00
 8008d7c:	20000e48 	.word	0x20000e48
 8008d80:	20000970 	.word	0x20000970
 8008d84:	2000096c 	.word	0x2000096c
 8008d88:	20000e54 	.word	0x20000e54
 8008d8c:	20000e50 	.word	0x20000e50
 8008d90:	e000ed04 	.word	0xe000ed04

08008d94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d9a:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <xTaskGetTickCount+0x1c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008da0:	687b      	ldr	r3, [r7, #4]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	20000e44 	.word	0x20000e44

08008db4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dbe:	4b4f      	ldr	r3, [pc, #316]	; (8008efc <xTaskIncrementTick+0x148>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f040 808f 	bne.w	8008ee6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008dc8:	4b4d      	ldr	r3, [pc, #308]	; (8008f00 <xTaskIncrementTick+0x14c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dd0:	4a4b      	ldr	r2, [pc, #300]	; (8008f00 <xTaskIncrementTick+0x14c>)
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d120      	bne.n	8008e1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ddc:	4b49      	ldr	r3, [pc, #292]	; (8008f04 <xTaskIncrementTick+0x150>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <xTaskIncrementTick+0x48>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	603b      	str	r3, [r7, #0]
}
 8008df8:	bf00      	nop
 8008dfa:	e7fe      	b.n	8008dfa <xTaskIncrementTick+0x46>
 8008dfc:	4b41      	ldr	r3, [pc, #260]	; (8008f04 <xTaskIncrementTick+0x150>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	60fb      	str	r3, [r7, #12]
 8008e02:	4b41      	ldr	r3, [pc, #260]	; (8008f08 <xTaskIncrementTick+0x154>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a3f      	ldr	r2, [pc, #252]	; (8008f04 <xTaskIncrementTick+0x150>)
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	4a3f      	ldr	r2, [pc, #252]	; (8008f08 <xTaskIncrementTick+0x154>)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	4b3e      	ldr	r3, [pc, #248]	; (8008f0c <xTaskIncrementTick+0x158>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3301      	adds	r3, #1
 8008e16:	4a3d      	ldr	r2, [pc, #244]	; (8008f0c <xTaskIncrementTick+0x158>)
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	f000 fadb 	bl	80093d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e1e:	4b3c      	ldr	r3, [pc, #240]	; (8008f10 <xTaskIncrementTick+0x15c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d349      	bcc.n	8008ebc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e28:	4b36      	ldr	r3, [pc, #216]	; (8008f04 <xTaskIncrementTick+0x150>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d104      	bne.n	8008e3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e32:	4b37      	ldr	r3, [pc, #220]	; (8008f10 <xTaskIncrementTick+0x15c>)
 8008e34:	f04f 32ff 	mov.w	r2, #4294967295
 8008e38:	601a      	str	r2, [r3, #0]
					break;
 8008e3a:	e03f      	b.n	8008ebc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3c:	4b31      	ldr	r3, [pc, #196]	; (8008f04 <xTaskIncrementTick+0x150>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d203      	bcs.n	8008e5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e54:	4a2e      	ldr	r2, [pc, #184]	; (8008f10 <xTaskIncrementTick+0x15c>)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e5a:	e02f      	b.n	8008ebc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	3304      	adds	r3, #4
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe ff79 	bl	8007d58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d004      	beq.n	8008e78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	3318      	adds	r3, #24
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe ff70 	bl	8007d58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7c:	4b25      	ldr	r3, [pc, #148]	; (8008f14 <xTaskIncrementTick+0x160>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d903      	bls.n	8008e8c <xTaskIncrementTick+0xd8>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e88:	4a22      	ldr	r2, [pc, #136]	; (8008f14 <xTaskIncrementTick+0x160>)
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4a1f      	ldr	r2, [pc, #124]	; (8008f18 <xTaskIncrementTick+0x164>)
 8008e9a:	441a      	add	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	f7fe fefb 	bl	8007c9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eac:	4b1b      	ldr	r3, [pc, #108]	; (8008f1c <xTaskIncrementTick+0x168>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d3b8      	bcc.n	8008e28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eba:	e7b5      	b.n	8008e28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ebc:	4b17      	ldr	r3, [pc, #92]	; (8008f1c <xTaskIncrementTick+0x168>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec2:	4915      	ldr	r1, [pc, #84]	; (8008f18 <xTaskIncrementTick+0x164>)
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d901      	bls.n	8008ed8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ed8:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <xTaskIncrementTick+0x16c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	e004      	b.n	8008ef0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ee6:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <xTaskIncrementTick+0x170>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	4a0d      	ldr	r2, [pc, #52]	; (8008f24 <xTaskIncrementTick+0x170>)
 8008eee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ef0:	697b      	ldr	r3, [r7, #20]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000e68 	.word	0x20000e68
 8008f00:	20000e44 	.word	0x20000e44
 8008f04:	20000df8 	.word	0x20000df8
 8008f08:	20000dfc 	.word	0x20000dfc
 8008f0c:	20000e58 	.word	0x20000e58
 8008f10:	20000e60 	.word	0x20000e60
 8008f14:	20000e48 	.word	0x20000e48
 8008f18:	20000970 	.word	0x20000970
 8008f1c:	2000096c 	.word	0x2000096c
 8008f20:	20000e54 	.word	0x20000e54
 8008f24:	20000e50 	.word	0x20000e50

08008f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f2e:	4b2a      	ldr	r3, [pc, #168]	; (8008fd8 <vTaskSwitchContext+0xb0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f36:	4b29      	ldr	r3, [pc, #164]	; (8008fdc <vTaskSwitchContext+0xb4>)
 8008f38:	2201      	movs	r2, #1
 8008f3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f3c:	e046      	b.n	8008fcc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008f3e:	4b27      	ldr	r3, [pc, #156]	; (8008fdc <vTaskSwitchContext+0xb4>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f44:	4b26      	ldr	r3, [pc, #152]	; (8008fe0 <vTaskSwitchContext+0xb8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	e010      	b.n	8008f6e <vTaskSwitchContext+0x46>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10a      	bne.n	8008f68 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	607b      	str	r3, [r7, #4]
}
 8008f64:	bf00      	nop
 8008f66:	e7fe      	b.n	8008f66 <vTaskSwitchContext+0x3e>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	491d      	ldr	r1, [pc, #116]	; (8008fe4 <vTaskSwitchContext+0xbc>)
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	440b      	add	r3, r1
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0e4      	beq.n	8008f4c <vTaskSwitchContext+0x24>
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4a15      	ldr	r2, [pc, #84]	; (8008fe4 <vTaskSwitchContext+0xbc>)
 8008f8e:	4413      	add	r3, r2
 8008f90:	60bb      	str	r3, [r7, #8]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	605a      	str	r2, [r3, #4]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d104      	bne.n	8008fb2 <vTaskSwitchContext+0x8a>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	4a0b      	ldr	r2, [pc, #44]	; (8008fe8 <vTaskSwitchContext+0xc0>)
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4a08      	ldr	r2, [pc, #32]	; (8008fe0 <vTaskSwitchContext+0xb8>)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fc2:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <vTaskSwitchContext+0xc0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3354      	adds	r3, #84	; 0x54
 8008fc8:	4a08      	ldr	r2, [pc, #32]	; (8008fec <vTaskSwitchContext+0xc4>)
 8008fca:	6013      	str	r3, [r2, #0]
}
 8008fcc:	bf00      	nop
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	20000e68 	.word	0x20000e68
 8008fdc:	20000e54 	.word	0x20000e54
 8008fe0:	20000e48 	.word	0x20000e48
 8008fe4:	20000970 	.word	0x20000970
 8008fe8:	2000096c 	.word	0x2000096c
 8008fec:	2000005c 	.word	0x2000005c

08008ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60fb      	str	r3, [r7, #12]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009016:	4b07      	ldr	r3, [pc, #28]	; (8009034 <vTaskPlaceOnEventList+0x44>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3318      	adds	r3, #24
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7fe fe61 	bl	8007ce6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009024:	2101      	movs	r1, #1
 8009026:	6838      	ldr	r0, [r7, #0]
 8009028:	f000 fa80 	bl	800952c <prvAddCurrentTaskToDelayedList>
}
 800902c:	bf00      	nop
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	2000096c 	.word	0x2000096c

08009038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10a      	bne.n	8009060 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	617b      	str	r3, [r7, #20]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <vTaskPlaceOnEventListRestricted+0x54>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3318      	adds	r3, #24
 8009066:	4619      	mov	r1, r3
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f7fe fe18 	bl	8007c9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009074:	f04f 33ff 	mov.w	r3, #4294967295
 8009078:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	68b8      	ldr	r0, [r7, #8]
 800907e:	f000 fa55 	bl	800952c <prvAddCurrentTaskToDelayedList>
	}
 8009082:	bf00      	nop
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	2000096c 	.word	0x2000096c

08009090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	60fb      	str	r3, [r7, #12]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	3318      	adds	r3, #24
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe fe49 	bl	8007d58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c6:	4b1e      	ldr	r3, [pc, #120]	; (8009140 <xTaskRemoveFromEventList+0xb0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d11d      	bne.n	800910a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fe40 	bl	8007d58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4b19      	ldr	r3, [pc, #100]	; (8009144 <xTaskRemoveFromEventList+0xb4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <xTaskRemoveFromEventList+0x5c>
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4a16      	ldr	r2, [pc, #88]	; (8009144 <xTaskRemoveFromEventList+0xb4>)
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4a13      	ldr	r2, [pc, #76]	; (8009148 <xTaskRemoveFromEventList+0xb8>)
 80090fa:	441a      	add	r2, r3
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	3304      	adds	r3, #4
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f7fe fdcb 	bl	8007c9e <vListInsertEnd>
 8009108:	e005      	b.n	8009116 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3318      	adds	r3, #24
 800910e:	4619      	mov	r1, r3
 8009110:	480e      	ldr	r0, [pc, #56]	; (800914c <xTaskRemoveFromEventList+0xbc>)
 8009112:	f7fe fdc4 	bl	8007c9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911a:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <xTaskRemoveFromEventList+0xc0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	429a      	cmp	r2, r3
 8009122:	d905      	bls.n	8009130 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009128:	4b0a      	ldr	r3, [pc, #40]	; (8009154 <xTaskRemoveFromEventList+0xc4>)
 800912a:	2201      	movs	r2, #1
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	e001      	b.n	8009134 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009134:	697b      	ldr	r3, [r7, #20]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20000e68 	.word	0x20000e68
 8009144:	20000e48 	.word	0x20000e48
 8009148:	20000970 	.word	0x20000970
 800914c:	20000e00 	.word	0x20000e00
 8009150:	2000096c 	.word	0x2000096c
 8009154:	20000e54 	.word	0x20000e54

08009158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <vTaskInternalSetTimeOutState+0x24>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <vTaskInternalSetTimeOutState+0x28>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	20000e58 	.word	0x20000e58
 8009180:	20000e44 	.word	0x20000e44

08009184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10a      	bne.n	80091aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	613b      	str	r3, [r7, #16]
}
 80091a6:	bf00      	nop
 80091a8:	e7fe      	b.n	80091a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	60fb      	str	r3, [r7, #12]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091c6:	f000 fe7d 	bl	8009ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091ca:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <xTaskCheckForTimeOut+0xbc>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e2:	d102      	bne.n	80091ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	61fb      	str	r3, [r7, #28]
 80091e8:	e023      	b.n	8009232 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <xTaskCheckForTimeOut+0xc0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d007      	beq.n	8009206 <xTaskCheckForTimeOut+0x82>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d302      	bcc.n	8009206 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	e015      	b.n	8009232 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	429a      	cmp	r2, r3
 800920e:	d20b      	bcs.n	8009228 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	1ad2      	subs	r2, r2, r3
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff ff9b 	bl	8009158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009222:	2300      	movs	r3, #0
 8009224:	61fb      	str	r3, [r7, #28]
 8009226:	e004      	b.n	8009232 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800922e:	2301      	movs	r3, #1
 8009230:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009232:	f000 fe77 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 8009236:	69fb      	ldr	r3, [r7, #28]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3720      	adds	r7, #32
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	20000e44 	.word	0x20000e44
 8009244:	20000e58 	.word	0x20000e58

08009248 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800924c:	4b03      	ldr	r3, [pc, #12]	; (800925c <vTaskMissedYield+0x14>)
 800924e:	2201      	movs	r2, #1
 8009250:	601a      	str	r2, [r3, #0]
}
 8009252:	bf00      	nop
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	20000e54 	.word	0x20000e54

08009260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009268:	f000 f852 	bl	8009310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800926c:	4b06      	ldr	r3, [pc, #24]	; (8009288 <prvIdleTask+0x28>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d9f9      	bls.n	8009268 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009274:	4b05      	ldr	r3, [pc, #20]	; (800928c <prvIdleTask+0x2c>)
 8009276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009284:	e7f0      	b.n	8009268 <prvIdleTask+0x8>
 8009286:	bf00      	nop
 8009288:	20000970 	.word	0x20000970
 800928c:	e000ed04 	.word	0xe000ed04

08009290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009296:	2300      	movs	r3, #0
 8009298:	607b      	str	r3, [r7, #4]
 800929a:	e00c      	b.n	80092b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	4613      	mov	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4a12      	ldr	r2, [pc, #72]	; (80092f0 <prvInitialiseTaskLists+0x60>)
 80092a8:	4413      	add	r3, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fcca 	bl	8007c44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3301      	adds	r3, #1
 80092b4:	607b      	str	r3, [r7, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b37      	cmp	r3, #55	; 0x37
 80092ba:	d9ef      	bls.n	800929c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092bc:	480d      	ldr	r0, [pc, #52]	; (80092f4 <prvInitialiseTaskLists+0x64>)
 80092be:	f7fe fcc1 	bl	8007c44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092c2:	480d      	ldr	r0, [pc, #52]	; (80092f8 <prvInitialiseTaskLists+0x68>)
 80092c4:	f7fe fcbe 	bl	8007c44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092c8:	480c      	ldr	r0, [pc, #48]	; (80092fc <prvInitialiseTaskLists+0x6c>)
 80092ca:	f7fe fcbb 	bl	8007c44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092ce:	480c      	ldr	r0, [pc, #48]	; (8009300 <prvInitialiseTaskLists+0x70>)
 80092d0:	f7fe fcb8 	bl	8007c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092d4:	480b      	ldr	r0, [pc, #44]	; (8009304 <prvInitialiseTaskLists+0x74>)
 80092d6:	f7fe fcb5 	bl	8007c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092da:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <prvInitialiseTaskLists+0x78>)
 80092dc:	4a05      	ldr	r2, [pc, #20]	; (80092f4 <prvInitialiseTaskLists+0x64>)
 80092de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092e0:	4b0a      	ldr	r3, [pc, #40]	; (800930c <prvInitialiseTaskLists+0x7c>)
 80092e2:	4a05      	ldr	r2, [pc, #20]	; (80092f8 <prvInitialiseTaskLists+0x68>)
 80092e4:	601a      	str	r2, [r3, #0]
}
 80092e6:	bf00      	nop
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000970 	.word	0x20000970
 80092f4:	20000dd0 	.word	0x20000dd0
 80092f8:	20000de4 	.word	0x20000de4
 80092fc:	20000e00 	.word	0x20000e00
 8009300:	20000e14 	.word	0x20000e14
 8009304:	20000e2c 	.word	0x20000e2c
 8009308:	20000df8 	.word	0x20000df8
 800930c:	20000dfc 	.word	0x20000dfc

08009310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009316:	e019      	b.n	800934c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009318:	f000 fdd4 	bl	8009ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931c:	4b10      	ldr	r3, [pc, #64]	; (8009360 <prvCheckTasksWaitingTermination+0x50>)
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3304      	adds	r3, #4
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe fd15 	bl	8007d58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800932e:	4b0d      	ldr	r3, [pc, #52]	; (8009364 <prvCheckTasksWaitingTermination+0x54>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3b01      	subs	r3, #1
 8009334:	4a0b      	ldr	r2, [pc, #44]	; (8009364 <prvCheckTasksWaitingTermination+0x54>)
 8009336:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009338:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <prvCheckTasksWaitingTermination+0x58>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3b01      	subs	r3, #1
 800933e:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <prvCheckTasksWaitingTermination+0x58>)
 8009340:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009342:	f000 fdef 	bl	8009f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f810 	bl	800936c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <prvCheckTasksWaitingTermination+0x58>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1e1      	bne.n	8009318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009354:	bf00      	nop
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000e14 	.word	0x20000e14
 8009364:	20000e40 	.word	0x20000e40
 8009368:	20000e28 	.word	0x20000e28

0800936c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3354      	adds	r3, #84	; 0x54
 8009378:	4618      	mov	r0, r3
 800937a:	f001 f8b7 	bl	800a4ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009384:	2b00      	cmp	r3, #0
 8009386:	d108      	bne.n	800939a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	4618      	mov	r0, r3
 800938e:	f000 ff87 	bl	800a2a0 <vPortFree>
				vPortFree( pxTCB );
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 ff84 	bl	800a2a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009398:	e018      	b.n	80093cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d103      	bne.n	80093ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 ff7b 	bl	800a2a0 <vPortFree>
	}
 80093aa:	e00f      	b.n	80093cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d00a      	beq.n	80093cc <prvDeleteTCB+0x60>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	60fb      	str	r3, [r7, #12]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <prvDeleteTCB+0x5e>
	}
 80093cc:	bf00      	nop
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <prvResetNextTaskUnblockTime+0x38>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d104      	bne.n	80093ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <prvResetNextTaskUnblockTime+0x3c>)
 80093e6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093ec:	e008      	b.n	8009400 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ee:	4b07      	ldr	r3, [pc, #28]	; (800940c <prvResetNextTaskUnblockTime+0x38>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	4a04      	ldr	r2, [pc, #16]	; (8009410 <prvResetNextTaskUnblockTime+0x3c>)
 80093fe:	6013      	str	r3, [r2, #0]
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	20000df8 	.word	0x20000df8
 8009410:	20000e60 	.word	0x20000e60

08009414 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800941a:	4b0b      	ldr	r3, [pc, #44]	; (8009448 <xTaskGetSchedulerState+0x34>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d102      	bne.n	8009428 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009422:	2301      	movs	r3, #1
 8009424:	607b      	str	r3, [r7, #4]
 8009426:	e008      	b.n	800943a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009428:	4b08      	ldr	r3, [pc, #32]	; (800944c <xTaskGetSchedulerState+0x38>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009430:	2302      	movs	r3, #2
 8009432:	607b      	str	r3, [r7, #4]
 8009434:	e001      	b.n	800943a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009436:	2300      	movs	r3, #0
 8009438:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800943a:	687b      	ldr	r3, [r7, #4]
	}
 800943c:	4618      	mov	r0, r3
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	20000e4c 	.word	0x20000e4c
 800944c:	20000e68 	.word	0x20000e68

08009450 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800945c:	2300      	movs	r3, #0
 800945e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d056      	beq.n	8009514 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009466:	4b2e      	ldr	r3, [pc, #184]	; (8009520 <xTaskPriorityDisinherit+0xd0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	429a      	cmp	r2, r3
 800946e:	d00a      	beq.n	8009486 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	60fb      	str	r3, [r7, #12]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	60bb      	str	r3, [r7, #8]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a8:	1e5a      	subs	r2, r3, #1
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d02c      	beq.n	8009514 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d128      	bne.n	8009514 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	3304      	adds	r3, #4
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fc46 	bl	8007d58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e4:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <xTaskPriorityDisinherit+0xd4>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d903      	bls.n	80094f4 <xTaskPriorityDisinherit+0xa4>
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	4a0c      	ldr	r2, [pc, #48]	; (8009524 <xTaskPriorityDisinherit+0xd4>)
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4a09      	ldr	r2, [pc, #36]	; (8009528 <xTaskPriorityDisinherit+0xd8>)
 8009502:	441a      	add	r2, r3
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	3304      	adds	r3, #4
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7fe fbc7 	bl	8007c9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009510:	2301      	movs	r3, #1
 8009512:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009514:	697b      	ldr	r3, [r7, #20]
	}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	2000096c 	.word	0x2000096c
 8009524:	20000e48 	.word	0x20000e48
 8009528:	20000970 	.word	0x20000970

0800952c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009536:	4b21      	ldr	r3, [pc, #132]	; (80095bc <prvAddCurrentTaskToDelayedList+0x90>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800953c:	4b20      	ldr	r3, [pc, #128]	; (80095c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3304      	adds	r3, #4
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe fc08 	bl	8007d58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954e:	d10a      	bne.n	8009566 <prvAddCurrentTaskToDelayedList+0x3a>
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d007      	beq.n	8009566 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009556:	4b1a      	ldr	r3, [pc, #104]	; (80095c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4819      	ldr	r0, [pc, #100]	; (80095c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009560:	f7fe fb9d 	bl	8007c9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009564:	e026      	b.n	80095b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4413      	add	r3, r2
 800956c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800956e:	4b14      	ldr	r3, [pc, #80]	; (80095c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	429a      	cmp	r2, r3
 800957c:	d209      	bcs.n	8009592 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800957e:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe fbab 	bl	8007ce6 <vListInsert>
}
 8009590:	e010      	b.n	80095b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009592:	4b0e      	ldr	r3, [pc, #56]	; (80095cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3304      	adds	r3, #4
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f7fe fba1 	bl	8007ce6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095a4:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d202      	bcs.n	80095b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095ae:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	6013      	str	r3, [r2, #0]
}
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20000e44 	.word	0x20000e44
 80095c0:	2000096c 	.word	0x2000096c
 80095c4:	20000e2c 	.word	0x20000e2c
 80095c8:	20000dfc 	.word	0x20000dfc
 80095cc:	20000df8 	.word	0x20000df8
 80095d0:	20000e60 	.word	0x20000e60

080095d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	; 0x28
 80095d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095de:	f000 fb07 	bl	8009bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095e2:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <xTimerCreateTimerTask+0x80>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d021      	beq.n	800962e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095f2:	1d3a      	adds	r2, r7, #4
 80095f4:	f107 0108 	add.w	r1, r7, #8
 80095f8:	f107 030c 	add.w	r3, r7, #12
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fb07 	bl	8007c10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	9202      	str	r2, [sp, #8]
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	2302      	movs	r3, #2
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	2300      	movs	r3, #0
 8009612:	460a      	mov	r2, r1
 8009614:	4910      	ldr	r1, [pc, #64]	; (8009658 <xTimerCreateTimerTask+0x84>)
 8009616:	4811      	ldr	r0, [pc, #68]	; (800965c <xTimerCreateTimerTask+0x88>)
 8009618:	f7ff f8b4 	bl	8008784 <xTaskCreateStatic>
 800961c:	4603      	mov	r3, r0
 800961e:	4a10      	ldr	r2, [pc, #64]	; (8009660 <xTimerCreateTimerTask+0x8c>)
 8009620:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <xTimerCreateTimerTask+0x8c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800962a:	2301      	movs	r3, #1
 800962c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10a      	bne.n	800964a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	613b      	str	r3, [r7, #16]
}
 8009646:	bf00      	nop
 8009648:	e7fe      	b.n	8009648 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800964a:	697b      	ldr	r3, [r7, #20]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	20000e9c 	.word	0x20000e9c
 8009658:	0800a710 	.word	0x0800a710
 800965c:	08009799 	.word	0x08009799
 8009660:	20000ea0 	.word	0x20000ea0

08009664 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009672:	2300      	movs	r3, #0
 8009674:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10a      	bne.n	8009692 <xTimerGenericCommand+0x2e>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	623b      	str	r3, [r7, #32]
}
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009692:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <xTimerGenericCommand+0x98>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d02a      	beq.n	80096f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b05      	cmp	r3, #5
 80096aa:	dc18      	bgt.n	80096de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096ac:	f7ff feb2 	bl	8009414 <xTaskGetSchedulerState>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d109      	bne.n	80096ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096b6:	4b11      	ldr	r3, [pc, #68]	; (80096fc <xTimerGenericCommand+0x98>)
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	f107 0110 	add.w	r1, r7, #16
 80096be:	2300      	movs	r3, #0
 80096c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096c2:	f7fe fc77 	bl	8007fb4 <xQueueGenericSend>
 80096c6:	6278      	str	r0, [r7, #36]	; 0x24
 80096c8:	e012      	b.n	80096f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096ca:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <xTimerGenericCommand+0x98>)
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	f107 0110 	add.w	r1, r7, #16
 80096d2:	2300      	movs	r3, #0
 80096d4:	2200      	movs	r2, #0
 80096d6:	f7fe fc6d 	bl	8007fb4 <xQueueGenericSend>
 80096da:	6278      	str	r0, [r7, #36]	; 0x24
 80096dc:	e008      	b.n	80096f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096de:	4b07      	ldr	r3, [pc, #28]	; (80096fc <xTimerGenericCommand+0x98>)
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	f107 0110 	add.w	r1, r7, #16
 80096e6:	2300      	movs	r3, #0
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	f7fe fd61 	bl	80081b0 <xQueueGenericSendFromISR>
 80096ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3728      	adds	r7, #40	; 0x28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20000e9c 	.word	0x20000e9c

08009700 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af02      	add	r7, sp, #8
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970a:	4b22      	ldr	r3, [pc, #136]	; (8009794 <prvProcessExpiredTimer+0x94>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	3304      	adds	r3, #4
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fb1d 	bl	8007d58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	d022      	beq.n	8009772 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	699a      	ldr	r2, [r3, #24]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	18d1      	adds	r1, r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	6978      	ldr	r0, [r7, #20]
 800973a:	f000 f8d1 	bl	80098e0 <prvInsertTimerInActiveList>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01f      	beq.n	8009784 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009744:	2300      	movs	r3, #0
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	2300      	movs	r3, #0
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	2100      	movs	r1, #0
 800974e:	6978      	ldr	r0, [r7, #20]
 8009750:	f7ff ff88 	bl	8009664 <xTimerGenericCommand>
 8009754:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d113      	bne.n	8009784 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009778:	f023 0301 	bic.w	r3, r3, #1
 800977c:	b2da      	uxtb	r2, r3
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	6978      	ldr	r0, [r7, #20]
 800978a:	4798      	blx	r3
}
 800978c:	bf00      	nop
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000e94 	.word	0x20000e94

08009798 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f857 	bl	8009858 <prvGetNextExpireTime>
 80097aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4619      	mov	r1, r3
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f803 	bl	80097bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097b6:	f000 f8d5 	bl	8009964 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097ba:	e7f1      	b.n	80097a0 <prvTimerTask+0x8>

080097bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097c6:	f7ff fa39 	bl	8008c3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 f866 	bl	80098a0 <prvSampleTimeNow>
 80097d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d130      	bne.n	800983e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <prvProcessTimerOrBlockTask+0x3c>
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d806      	bhi.n	80097f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097ea:	f7ff fa35 	bl	8008c58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff ff85 	bl	8009700 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097f6:	e024      	b.n	8009842 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d008      	beq.n	8009810 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097fe:	4b13      	ldr	r3, [pc, #76]	; (800984c <prvProcessTimerOrBlockTask+0x90>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <prvProcessTimerOrBlockTask+0x50>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <prvProcessTimerOrBlockTask+0x52>
 800980c:	2300      	movs	r3, #0
 800980e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009810:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <prvProcessTimerOrBlockTask+0x94>)
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4619      	mov	r1, r3
 800981e:	f7fe ff7d 	bl	800871c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009822:	f7ff fa19 	bl	8008c58 <xTaskResumeAll>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10a      	bne.n	8009842 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800982c:	4b09      	ldr	r3, [pc, #36]	; (8009854 <prvProcessTimerOrBlockTask+0x98>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	f3bf 8f6f 	isb	sy
}
 800983c:	e001      	b.n	8009842 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800983e:	f7ff fa0b 	bl	8008c58 <xTaskResumeAll>
}
 8009842:	bf00      	nop
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000e98 	.word	0x20000e98
 8009850:	20000e9c 	.word	0x20000e9c
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009860:	4b0e      	ldr	r3, [pc, #56]	; (800989c <prvGetNextExpireTime+0x44>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <prvGetNextExpireTime+0x16>
 800986a:	2201      	movs	r2, #1
 800986c:	e000      	b.n	8009870 <prvGetNextExpireTime+0x18>
 800986e:	2200      	movs	r2, #0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d105      	bne.n	8009888 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800987c:	4b07      	ldr	r3, [pc, #28]	; (800989c <prvGetNextExpireTime+0x44>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	e001      	b.n	800988c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009888:	2300      	movs	r3, #0
 800988a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800988c:	68fb      	ldr	r3, [r7, #12]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	20000e94 	.word	0x20000e94

080098a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098a8:	f7ff fa74 	bl	8008d94 <xTaskGetTickCount>
 80098ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098ae:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <prvSampleTimeNow+0x3c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d205      	bcs.n	80098c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098b8:	f000 f936 	bl	8009b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e002      	b.n	80098ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098ca:	4a04      	ldr	r2, [pc, #16]	; (80098dc <prvSampleTimeNow+0x3c>)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098d0:	68fb      	ldr	r3, [r7, #12]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000ea4 	.word	0x20000ea4

080098e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098ee:	2300      	movs	r3, #0
 80098f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	429a      	cmp	r2, r3
 8009904:	d812      	bhi.n	800992c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009914:	2301      	movs	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	e01b      	b.n	8009952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800991a:	4b10      	ldr	r3, [pc, #64]	; (800995c <prvInsertTimerInActiveList+0x7c>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3304      	adds	r3, #4
 8009922:	4619      	mov	r1, r3
 8009924:	4610      	mov	r0, r2
 8009926:	f7fe f9de 	bl	8007ce6 <vListInsert>
 800992a:	e012      	b.n	8009952 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d206      	bcs.n	8009942 <prvInsertTimerInActiveList+0x62>
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d302      	bcc.n	8009942 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	e007      	b.n	8009952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <prvInsertTimerInActiveList+0x80>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3304      	adds	r3, #4
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f7fe f9ca 	bl	8007ce6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009952:	697b      	ldr	r3, [r7, #20]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20000e98 	.word	0x20000e98
 8009960:	20000e94 	.word	0x20000e94

08009964 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08e      	sub	sp, #56	; 0x38
 8009968:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800996a:	e0ca      	b.n	8009b02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	da18      	bge.n	80099a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009972:	1d3b      	adds	r3, r7, #4
 8009974:	3304      	adds	r3, #4
 8009976:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	61fb      	str	r3, [r7, #28]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999a:	6850      	ldr	r0, [r2, #4]
 800999c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999e:	6892      	ldr	r2, [r2, #8]
 80099a0:	4611      	mov	r1, r2
 80099a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f2c0 80ab 	blt.w	8009b02 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	3304      	adds	r3, #4
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe f9cb 	bl	8007d58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099c2:	463b      	mov	r3, r7
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff ff6b 	bl	80098a0 <prvSampleTimeNow>
 80099ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b09      	cmp	r3, #9
 80099d0:	f200 8096 	bhi.w	8009b00 <prvProcessReceivedCommands+0x19c>
 80099d4:	a201      	add	r2, pc, #4	; (adr r2, 80099dc <prvProcessReceivedCommands+0x78>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	08009a05 	.word	0x08009a05
 80099e0:	08009a05 	.word	0x08009a05
 80099e4:	08009a05 	.word	0x08009a05
 80099e8:	08009a79 	.word	0x08009a79
 80099ec:	08009a8d 	.word	0x08009a8d
 80099f0:	08009ad7 	.word	0x08009ad7
 80099f4:	08009a05 	.word	0x08009a05
 80099f8:	08009a05 	.word	0x08009a05
 80099fc:	08009a79 	.word	0x08009a79
 8009a00:	08009a8d 	.word	0x08009a8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0a:	f043 0301 	orr.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	18d1      	adds	r1, r2, r3
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a24:	f7ff ff5c 	bl	80098e0 <prvInsertTimerInActiveList>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d069      	beq.n	8009b02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d05e      	beq.n	8009b02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	441a      	add	r2, r3
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	2300      	movs	r3, #0
 8009a52:	2100      	movs	r1, #0
 8009a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a56:	f7ff fe05 	bl	8009664 <xTimerGenericCommand>
 8009a5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d14f      	bne.n	8009b02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	61bb      	str	r3, [r7, #24]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a7e:	f023 0301 	bic.w	r3, r3, #1
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a8a:	e03a      	b.n	8009b02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a92:	f043 0301 	orr.w	r3, r3, #1
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	617b      	str	r3, [r7, #20]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	18d1      	adds	r1, r2, r3
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad0:	f7ff ff06 	bl	80098e0 <prvInsertTimerInActiveList>
					break;
 8009ad4:	e015      	b.n	8009b02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d103      	bne.n	8009aec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae6:	f000 fbdb 	bl	800a2a0 <vPortFree>
 8009aea:	e00a      	b.n	8009b02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af2:	f023 0301 	bic.w	r3, r3, #1
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009afe:	e000      	b.n	8009b02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009b00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <prvProcessReceivedCommands+0x1c0>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	1d39      	adds	r1, r7, #4
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fbec 	bl	80082e8 <xQueueReceive>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f47f af2a 	bne.w	800996c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	3730      	adds	r7, #48	; 0x30
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20000e9c 	.word	0x20000e9c

08009b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b2e:	e048      	b.n	8009bc2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b30:	4b2d      	ldr	r3, [pc, #180]	; (8009be8 <prvSwitchTimerLists+0xc0>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b3a:	4b2b      	ldr	r3, [pc, #172]	; (8009be8 <prvSwitchTimerLists+0xc0>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe f905 	bl	8007d58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d02e      	beq.n	8009bc2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d90e      	bls.n	8009b94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b82:	4b19      	ldr	r3, [pc, #100]	; (8009be8 <prvSwitchTimerLists+0xc0>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7fe f8aa 	bl	8007ce6 <vListInsert>
 8009b92:	e016      	b.n	8009bc2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b94:	2300      	movs	r3, #0
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7ff fd60 	bl	8009664 <xTimerGenericCommand>
 8009ba4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10a      	bne.n	8009bc2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	603b      	str	r3, [r7, #0]
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bc2:	4b09      	ldr	r3, [pc, #36]	; (8009be8 <prvSwitchTimerLists+0xc0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1b1      	bne.n	8009b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bcc:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <prvSwitchTimerLists+0xc0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bd2:	4b06      	ldr	r3, [pc, #24]	; (8009bec <prvSwitchTimerLists+0xc4>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a04      	ldr	r2, [pc, #16]	; (8009be8 <prvSwitchTimerLists+0xc0>)
 8009bd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bda:	4a04      	ldr	r2, [pc, #16]	; (8009bec <prvSwitchTimerLists+0xc4>)
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	6013      	str	r3, [r2, #0]
}
 8009be0:	bf00      	nop
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	20000e94 	.word	0x20000e94
 8009bec:	20000e98 	.word	0x20000e98

08009bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bf6:	f000 f965 	bl	8009ec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bfa:	4b15      	ldr	r3, [pc, #84]	; (8009c50 <prvCheckForValidListAndQueue+0x60>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d120      	bne.n	8009c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c02:	4814      	ldr	r0, [pc, #80]	; (8009c54 <prvCheckForValidListAndQueue+0x64>)
 8009c04:	f7fe f81e 	bl	8007c44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c08:	4813      	ldr	r0, [pc, #76]	; (8009c58 <prvCheckForValidListAndQueue+0x68>)
 8009c0a:	f7fe f81b 	bl	8007c44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <prvCheckForValidListAndQueue+0x6c>)
 8009c10:	4a10      	ldr	r2, [pc, #64]	; (8009c54 <prvCheckForValidListAndQueue+0x64>)
 8009c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c14:	4b12      	ldr	r3, [pc, #72]	; (8009c60 <prvCheckForValidListAndQueue+0x70>)
 8009c16:	4a10      	ldr	r2, [pc, #64]	; (8009c58 <prvCheckForValidListAndQueue+0x68>)
 8009c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <prvCheckForValidListAndQueue+0x74>)
 8009c20:	4a11      	ldr	r2, [pc, #68]	; (8009c68 <prvCheckForValidListAndQueue+0x78>)
 8009c22:	2110      	movs	r1, #16
 8009c24:	200a      	movs	r0, #10
 8009c26:	f7fe f929 	bl	8007e7c <xQueueGenericCreateStatic>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	4a08      	ldr	r2, [pc, #32]	; (8009c50 <prvCheckForValidListAndQueue+0x60>)
 8009c2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <prvCheckForValidListAndQueue+0x60>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c38:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <prvCheckForValidListAndQueue+0x60>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	490b      	ldr	r1, [pc, #44]	; (8009c6c <prvCheckForValidListAndQueue+0x7c>)
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fd42 	bl	80086c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c44:	f000 f96e 	bl	8009f24 <vPortExitCritical>
}
 8009c48:	bf00      	nop
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000e9c 	.word	0x20000e9c
 8009c54:	20000e6c 	.word	0x20000e6c
 8009c58:	20000e80 	.word	0x20000e80
 8009c5c:	20000e94 	.word	0x20000e94
 8009c60:	20000e98 	.word	0x20000e98
 8009c64:	20000f48 	.word	0x20000f48
 8009c68:	20000ea8 	.word	0x20000ea8
 8009c6c:	0800a718 	.word	0x0800a718

08009c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3b04      	subs	r3, #4
 8009c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3b04      	subs	r3, #4
 8009c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f023 0201 	bic.w	r2, r3, #1
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3b04      	subs	r3, #4
 8009c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ca0:	4a0c      	ldr	r2, [pc, #48]	; (8009cd4 <pxPortInitialiseStack+0x64>)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3b14      	subs	r3, #20
 8009caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3b04      	subs	r3, #4
 8009cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f06f 0202 	mvn.w	r2, #2
 8009cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3b20      	subs	r3, #32
 8009cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	08009cd9 	.word	0x08009cd9

08009cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ce2:	4b12      	ldr	r3, [pc, #72]	; (8009d2c <prvTaskExitError+0x54>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cea:	d00a      	beq.n	8009d02 <prvTaskExitError+0x2a>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	60fb      	str	r3, [r7, #12]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <prvTaskExitError+0x28>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	60bb      	str	r3, [r7, #8]
}
 8009d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d16:	bf00      	nop
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0fc      	beq.n	8009d18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d1e:	bf00      	nop
 8009d20:	bf00      	nop
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	2000000c 	.word	0x2000000c

08009d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <pxCurrentTCBConst2>)
 8009d32:	6819      	ldr	r1, [r3, #0]
 8009d34:	6808      	ldr	r0, [r1, #0]
 8009d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3a:	f380 8809 	msr	PSP, r0
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f04f 0000 	mov.w	r0, #0
 8009d46:	f380 8811 	msr	BASEPRI, r0
 8009d4a:	4770      	bx	lr
 8009d4c:	f3af 8000 	nop.w

08009d50 <pxCurrentTCBConst2>:
 8009d50:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop

08009d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d58:	4808      	ldr	r0, [pc, #32]	; (8009d7c <prvPortStartFirstTask+0x24>)
 8009d5a:	6800      	ldr	r0, [r0, #0]
 8009d5c:	6800      	ldr	r0, [r0, #0]
 8009d5e:	f380 8808 	msr	MSP, r0
 8009d62:	f04f 0000 	mov.w	r0, #0
 8009d66:	f380 8814 	msr	CONTROL, r0
 8009d6a:	b662      	cpsie	i
 8009d6c:	b661      	cpsie	f
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	df00      	svc	0
 8009d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d7a:	bf00      	nop
 8009d7c:	e000ed08 	.word	0xe000ed08

08009d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d86:	4b46      	ldr	r3, [pc, #280]	; (8009ea0 <xPortStartScheduler+0x120>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a46      	ldr	r2, [pc, #280]	; (8009ea4 <xPortStartScheduler+0x124>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d10a      	bne.n	8009da6 <xPortStartScheduler+0x26>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	613b      	str	r3, [r7, #16]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009da6:	4b3e      	ldr	r3, [pc, #248]	; (8009ea0 <xPortStartScheduler+0x120>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a3f      	ldr	r2, [pc, #252]	; (8009ea8 <xPortStartScheduler+0x128>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d10a      	bne.n	8009dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60fb      	str	r3, [r7, #12]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dc6:	4b39      	ldr	r3, [pc, #228]	; (8009eac <xPortStartScheduler+0x12c>)
 8009dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	22ff      	movs	r2, #255	; 0xff
 8009dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	4b31      	ldr	r3, [pc, #196]	; (8009eb0 <xPortStartScheduler+0x130>)
 8009dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dee:	4b31      	ldr	r3, [pc, #196]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009df0:	2207      	movs	r2, #7
 8009df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009df4:	e009      	b.n	8009e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009df6:	4b2f      	ldr	r3, [pc, #188]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	4a2d      	ldr	r2, [pc, #180]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e12:	2b80      	cmp	r3, #128	; 0x80
 8009e14:	d0ef      	beq.n	8009df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e16:	4b27      	ldr	r3, [pc, #156]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f1c3 0307 	rsb	r3, r3, #7
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d00a      	beq.n	8009e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	60bb      	str	r3, [r7, #8]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e38:	4b1e      	ldr	r3, [pc, #120]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	4a1d      	ldr	r2, [pc, #116]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e42:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e4a:	4a1a      	ldr	r2, [pc, #104]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e56:	4b18      	ldr	r3, [pc, #96]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a17      	ldr	r2, [pc, #92]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e62:	4b15      	ldr	r3, [pc, #84]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a14      	ldr	r2, [pc, #80]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e6e:	f000 f8dd 	bl	800a02c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e72:	4b12      	ldr	r3, [pc, #72]	; (8009ebc <xPortStartScheduler+0x13c>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e78:	f000 f8fc 	bl	800a074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e7c:	4b10      	ldr	r3, [pc, #64]	; (8009ec0 <xPortStartScheduler+0x140>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a0f      	ldr	r2, [pc, #60]	; (8009ec0 <xPortStartScheduler+0x140>)
 8009e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e88:	f7ff ff66 	bl	8009d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e8c:	f7ff f84c 	bl	8008f28 <vTaskSwitchContext>
	prvTaskExitError();
 8009e90:	f7ff ff22 	bl	8009cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	e000ed00 	.word	0xe000ed00
 8009ea4:	410fc271 	.word	0x410fc271
 8009ea8:	410fc270 	.word	0x410fc270
 8009eac:	e000e400 	.word	0xe000e400
 8009eb0:	20000f98 	.word	0x20000f98
 8009eb4:	20000f9c 	.word	0x20000f9c
 8009eb8:	e000ed20 	.word	0xe000ed20
 8009ebc:	2000000c 	.word	0x2000000c
 8009ec0:	e000ef34 	.word	0xe000ef34

08009ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	607b      	str	r3, [r7, #4]
}
 8009edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <vPortEnterCritical+0x58>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4a0d      	ldr	r2, [pc, #52]	; (8009f1c <vPortEnterCritical+0x58>)
 8009ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ee8:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <vPortEnterCritical+0x58>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d10f      	bne.n	8009f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ef0:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <vPortEnterCritical+0x5c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	603b      	str	r3, [r7, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <vPortEnterCritical+0x4a>
	}
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	2000000c 	.word	0x2000000c
 8009f20:	e000ed04 	.word	0xe000ed04

08009f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f2a:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <vPortExitCritical+0x50>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <vPortExitCritical+0x24>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	607b      	str	r3, [r7, #4]
}
 8009f44:	bf00      	nop
 8009f46:	e7fe      	b.n	8009f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <vPortExitCritical+0x50>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <vPortExitCritical+0x50>)
 8009f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f52:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <vPortExitCritical+0x50>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <vPortExitCritical+0x42>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	f383 8811 	msr	BASEPRI, r3
}
 8009f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	2000000c 	.word	0x2000000c
	...

08009f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f80:	f3ef 8009 	mrs	r0, PSP
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <pxCurrentTCBConst>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	f01e 0f10 	tst.w	lr, #16
 8009f90:	bf08      	it	eq
 8009f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fa4:	f380 8811 	msr	BASEPRI, r0
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f7fe ffba 	bl	8008f28 <vTaskSwitchContext>
 8009fb4:	f04f 0000 	mov.w	r0, #0
 8009fb8:	f380 8811 	msr	BASEPRI, r0
 8009fbc:	bc09      	pop	{r0, r3}
 8009fbe:	6819      	ldr	r1, [r3, #0]
 8009fc0:	6808      	ldr	r0, [r1, #0]
 8009fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc6:	f01e 0f10 	tst.w	lr, #16
 8009fca:	bf08      	it	eq
 8009fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fd0:	f380 8809 	msr	PSP, r0
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst>:
 8009fe0:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	607b      	str	r3, [r7, #4]
}
 800a000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a002:	f7fe fed7 	bl	8008db4 <xTaskIncrementTick>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a00c:	4b06      	ldr	r3, [pc, #24]	; (800a028 <xPortSysTickHandler+0x40>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	2300      	movs	r3, #0
 800a016:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	f383 8811 	msr	BASEPRI, r3
}
 800a01e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <vPortSetupTimerInterrupt+0x34>)
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a036:	4b0b      	ldr	r3, [pc, #44]	; (800a064 <vPortSetupTimerInterrupt+0x38>)
 800a038:	2200      	movs	r2, #0
 800a03a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <vPortSetupTimerInterrupt+0x3c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <vPortSetupTimerInterrupt+0x40>)
 800a042:	fba2 2303 	umull	r2, r3, r2, r3
 800a046:	099b      	lsrs	r3, r3, #6
 800a048:	4a09      	ldr	r2, [pc, #36]	; (800a070 <vPortSetupTimerInterrupt+0x44>)
 800a04a:	3b01      	subs	r3, #1
 800a04c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a04e:	4b04      	ldr	r3, [pc, #16]	; (800a060 <vPortSetupTimerInterrupt+0x34>)
 800a050:	2207      	movs	r2, #7
 800a052:	601a      	str	r2, [r3, #0]
}
 800a054:	bf00      	nop
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	e000e010 	.word	0xe000e010
 800a064:	e000e018 	.word	0xe000e018
 800a068:	20000000 	.word	0x20000000
 800a06c:	10624dd3 	.word	0x10624dd3
 800a070:	e000e014 	.word	0xe000e014

0800a074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a084 <vPortEnableVFP+0x10>
 800a078:	6801      	ldr	r1, [r0, #0]
 800a07a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a07e:	6001      	str	r1, [r0, #0]
 800a080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a082:	bf00      	nop
 800a084:	e000ed88 	.word	0xe000ed88

0800a088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a08e:	f3ef 8305 	mrs	r3, IPSR
 800a092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b0f      	cmp	r3, #15
 800a098:	d914      	bls.n	800a0c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a09a:	4a17      	ldr	r2, [pc, #92]	; (800a0f8 <vPortValidateInterruptPriority+0x70>)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0a4:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <vPortValidateInterruptPriority+0x74>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	7afa      	ldrb	r2, [r7, #11]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d20a      	bcs.n	800a0c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	607b      	str	r3, [r7, #4]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <vPortValidateInterruptPriority+0x78>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <vPortValidateInterruptPriority+0x7c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d90a      	bls.n	800a0ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	603b      	str	r3, [r7, #0]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <vPortValidateInterruptPriority+0x60>
	}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	e000e3f0 	.word	0xe000e3f0
 800a0fc:	20000f98 	.word	0x20000f98
 800a100:	e000ed0c 	.word	0xe000ed0c
 800a104:	20000f9c 	.word	0x20000f9c

0800a108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	; 0x28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a114:	f7fe fd92 	bl	8008c3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a118:	4b5b      	ldr	r3, [pc, #364]	; (800a288 <pvPortMalloc+0x180>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a120:	f000 f920 	bl	800a364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a124:	4b59      	ldr	r3, [pc, #356]	; (800a28c <pvPortMalloc+0x184>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4013      	ands	r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f040 8093 	bne.w	800a258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01d      	beq.n	800a174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a138:	2208      	movs	r2, #8
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	2b00      	cmp	r3, #0
 800a148:	d014      	beq.n	800a174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f023 0307 	bic.w	r3, r3, #7
 800a150:	3308      	adds	r3, #8
 800a152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00a      	beq.n	800a174 <pvPortMalloc+0x6c>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	617b      	str	r3, [r7, #20]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d06e      	beq.n	800a258 <pvPortMalloc+0x150>
 800a17a:	4b45      	ldr	r3, [pc, #276]	; (800a290 <pvPortMalloc+0x188>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d869      	bhi.n	800a258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a184:	4b43      	ldr	r3, [pc, #268]	; (800a294 <pvPortMalloc+0x18c>)
 800a186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a188:	4b42      	ldr	r3, [pc, #264]	; (800a294 <pvPortMalloc+0x18c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a18e:	e004      	b.n	800a19a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d903      	bls.n	800a1ac <pvPortMalloc+0xa4>
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1f1      	bne.n	800a190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1ac:	4b36      	ldr	r3, [pc, #216]	; (800a288 <pvPortMalloc+0x180>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d050      	beq.n	800a258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2208      	movs	r2, #8
 800a1bc:	4413      	add	r3, r2
 800a1be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d91f      	bls.n	800a218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4413      	add	r3, r2
 800a1de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <pvPortMalloc+0xf8>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	613b      	str	r3, [r7, #16]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a212:	69b8      	ldr	r0, [r7, #24]
 800a214:	f000 f908 	bl	800a428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a218:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <pvPortMalloc+0x188>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	4a1b      	ldr	r2, [pc, #108]	; (800a290 <pvPortMalloc+0x188>)
 800a224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a226:	4b1a      	ldr	r3, [pc, #104]	; (800a290 <pvPortMalloc+0x188>)
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <pvPortMalloc+0x190>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d203      	bcs.n	800a23a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a232:	4b17      	ldr	r3, [pc, #92]	; (800a290 <pvPortMalloc+0x188>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a18      	ldr	r2, [pc, #96]	; (800a298 <pvPortMalloc+0x190>)
 800a238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <pvPortMalloc+0x184>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	431a      	orrs	r2, r3
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a24e:	4b13      	ldr	r3, [pc, #76]	; (800a29c <pvPortMalloc+0x194>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3301      	adds	r3, #1
 800a254:	4a11      	ldr	r2, [pc, #68]	; (800a29c <pvPortMalloc+0x194>)
 800a256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a258:	f7fe fcfe 	bl	8008c58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <pvPortMalloc+0x174>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	60fb      	str	r3, [r7, #12]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <pvPortMalloc+0x172>
	return pvReturn;
 800a27c:	69fb      	ldr	r3, [r7, #28]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3728      	adds	r7, #40	; 0x28
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20001ba8 	.word	0x20001ba8
 800a28c:	20001bbc 	.word	0x20001bbc
 800a290:	20001bac 	.word	0x20001bac
 800a294:	20001ba0 	.word	0x20001ba0
 800a298:	20001bb0 	.word	0x20001bb0
 800a29c:	20001bb4 	.word	0x20001bb4

0800a2a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d04d      	beq.n	800a34e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	425b      	negs	r3, r3
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	4b24      	ldr	r3, [pc, #144]	; (800a358 <vPortFree+0xb8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <vPortFree+0x44>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	60fb      	str	r3, [r7, #12]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <vPortFree+0x62>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	60bb      	str	r3, [r7, #8]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	4b14      	ldr	r3, [pc, #80]	; (800a358 <vPortFree+0xb8>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d01e      	beq.n	800a34e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d11a      	bne.n	800a34e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	4b0e      	ldr	r3, [pc, #56]	; (800a358 <vPortFree+0xb8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	43db      	mvns	r3, r3
 800a322:	401a      	ands	r2, r3
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a328:	f7fe fc88 	bl	8008c3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <vPortFree+0xbc>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4413      	add	r3, r2
 800a336:	4a09      	ldr	r2, [pc, #36]	; (800a35c <vPortFree+0xbc>)
 800a338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a33a:	6938      	ldr	r0, [r7, #16]
 800a33c:	f000 f874 	bl	800a428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a340:	4b07      	ldr	r3, [pc, #28]	; (800a360 <vPortFree+0xc0>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3301      	adds	r3, #1
 800a346:	4a06      	ldr	r2, [pc, #24]	; (800a360 <vPortFree+0xc0>)
 800a348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a34a:	f7fe fc85 	bl	8008c58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a34e:	bf00      	nop
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20001bbc 	.word	0x20001bbc
 800a35c:	20001bac 	.word	0x20001bac
 800a360:	20001bb8 	.word	0x20001bb8

0800a364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a36a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <prvHeapInit+0xac>)
 800a372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00c      	beq.n	800a398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 0307 	bic.w	r3, r3, #7
 800a38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	4a1f      	ldr	r2, [pc, #124]	; (800a410 <prvHeapInit+0xac>)
 800a394:	4413      	add	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a39c:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <prvHeapInit+0xb0>)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3a2:	4b1c      	ldr	r3, [pc, #112]	; (800a414 <prvHeapInit+0xb0>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0307 	bic.w	r3, r3, #7
 800a3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4a15      	ldr	r2, [pc, #84]	; (800a418 <prvHeapInit+0xb4>)
 800a3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <prvHeapInit+0xb4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3ce:	4b12      	ldr	r3, [pc, #72]	; (800a418 <prvHeapInit+0xb4>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <prvHeapInit+0xb4>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <prvHeapInit+0xb8>)
 800a3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	4a09      	ldr	r2, [pc, #36]	; (800a420 <prvHeapInit+0xbc>)
 800a3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <prvHeapInit+0xc0>)
 800a3fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a402:	601a      	str	r2, [r3, #0]
}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	20000fa0 	.word	0x20000fa0
 800a414:	20001ba0 	.word	0x20001ba0
 800a418:	20001ba8 	.word	0x20001ba8
 800a41c:	20001bb0 	.word	0x20001bb0
 800a420:	20001bac 	.word	0x20001bac
 800a424:	20001bbc 	.word	0x20001bbc

0800a428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a430:	4b28      	ldr	r3, [pc, #160]	; (800a4d4 <prvInsertBlockIntoFreeList+0xac>)
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e002      	b.n	800a43c <prvInsertBlockIntoFreeList+0x14>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d8f7      	bhi.n	800a436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	4413      	add	r3, r2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d108      	bne.n	800a46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	441a      	add	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d118      	bne.n	800a4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d00d      	beq.n	800a4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	441a      	add	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e008      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	e003      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d002      	beq.n	800a4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4c6:	bf00      	nop
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	20001ba0 	.word	0x20001ba0
 800a4d8:	20001ba8 	.word	0x20001ba8

0800a4dc <memset>:
 800a4dc:	4402      	add	r2, r0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d100      	bne.n	800a4e6 <memset+0xa>
 800a4e4:	4770      	bx	lr
 800a4e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ea:	e7f9      	b.n	800a4e0 <memset+0x4>

0800a4ec <_reclaim_reent>:
 800a4ec:	4b29      	ldr	r3, [pc, #164]	; (800a594 <_reclaim_reent+0xa8>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4283      	cmp	r3, r0
 800a4f2:	b570      	push	{r4, r5, r6, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	d04b      	beq.n	800a590 <_reclaim_reent+0xa4>
 800a4f8:	69c3      	ldr	r3, [r0, #28]
 800a4fa:	b143      	cbz	r3, 800a50e <_reclaim_reent+0x22>
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d144      	bne.n	800a58c <_reclaim_reent+0xa0>
 800a502:	69e3      	ldr	r3, [r4, #28]
 800a504:	6819      	ldr	r1, [r3, #0]
 800a506:	b111      	cbz	r1, 800a50e <_reclaim_reent+0x22>
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 f879 	bl	800a600 <_free_r>
 800a50e:	6961      	ldr	r1, [r4, #20]
 800a510:	b111      	cbz	r1, 800a518 <_reclaim_reent+0x2c>
 800a512:	4620      	mov	r0, r4
 800a514:	f000 f874 	bl	800a600 <_free_r>
 800a518:	69e1      	ldr	r1, [r4, #28]
 800a51a:	b111      	cbz	r1, 800a522 <_reclaim_reent+0x36>
 800a51c:	4620      	mov	r0, r4
 800a51e:	f000 f86f 	bl	800a600 <_free_r>
 800a522:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a524:	b111      	cbz	r1, 800a52c <_reclaim_reent+0x40>
 800a526:	4620      	mov	r0, r4
 800a528:	f000 f86a 	bl	800a600 <_free_r>
 800a52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52e:	b111      	cbz	r1, 800a536 <_reclaim_reent+0x4a>
 800a530:	4620      	mov	r0, r4
 800a532:	f000 f865 	bl	800a600 <_free_r>
 800a536:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a538:	b111      	cbz	r1, 800a540 <_reclaim_reent+0x54>
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f860 	bl	800a600 <_free_r>
 800a540:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a542:	b111      	cbz	r1, 800a54a <_reclaim_reent+0x5e>
 800a544:	4620      	mov	r0, r4
 800a546:	f000 f85b 	bl	800a600 <_free_r>
 800a54a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a54c:	b111      	cbz	r1, 800a554 <_reclaim_reent+0x68>
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 f856 	bl	800a600 <_free_r>
 800a554:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a556:	b111      	cbz	r1, 800a55e <_reclaim_reent+0x72>
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 f851 	bl	800a600 <_free_r>
 800a55e:	6a23      	ldr	r3, [r4, #32]
 800a560:	b1b3      	cbz	r3, 800a590 <_reclaim_reent+0xa4>
 800a562:	4620      	mov	r0, r4
 800a564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a568:	4718      	bx	r3
 800a56a:	5949      	ldr	r1, [r1, r5]
 800a56c:	b941      	cbnz	r1, 800a580 <_reclaim_reent+0x94>
 800a56e:	3504      	adds	r5, #4
 800a570:	69e3      	ldr	r3, [r4, #28]
 800a572:	2d80      	cmp	r5, #128	; 0x80
 800a574:	68d9      	ldr	r1, [r3, #12]
 800a576:	d1f8      	bne.n	800a56a <_reclaim_reent+0x7e>
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 f841 	bl	800a600 <_free_r>
 800a57e:	e7c0      	b.n	800a502 <_reclaim_reent+0x16>
 800a580:	680e      	ldr	r6, [r1, #0]
 800a582:	4620      	mov	r0, r4
 800a584:	f000 f83c 	bl	800a600 <_free_r>
 800a588:	4631      	mov	r1, r6
 800a58a:	e7ef      	b.n	800a56c <_reclaim_reent+0x80>
 800a58c:	2500      	movs	r5, #0
 800a58e:	e7ef      	b.n	800a570 <_reclaim_reent+0x84>
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	bf00      	nop
 800a594:	2000005c 	.word	0x2000005c

0800a598 <__libc_init_array>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	4d0d      	ldr	r5, [pc, #52]	; (800a5d0 <__libc_init_array+0x38>)
 800a59c:	4c0d      	ldr	r4, [pc, #52]	; (800a5d4 <__libc_init_array+0x3c>)
 800a59e:	1b64      	subs	r4, r4, r5
 800a5a0:	10a4      	asrs	r4, r4, #2
 800a5a2:	2600      	movs	r6, #0
 800a5a4:	42a6      	cmp	r6, r4
 800a5a6:	d109      	bne.n	800a5bc <__libc_init_array+0x24>
 800a5a8:	4d0b      	ldr	r5, [pc, #44]	; (800a5d8 <__libc_init_array+0x40>)
 800a5aa:	4c0c      	ldr	r4, [pc, #48]	; (800a5dc <__libc_init_array+0x44>)
 800a5ac:	f000 f880 	bl	800a6b0 <_init>
 800a5b0:	1b64      	subs	r4, r4, r5
 800a5b2:	10a4      	asrs	r4, r4, #2
 800a5b4:	2600      	movs	r6, #0
 800a5b6:	42a6      	cmp	r6, r4
 800a5b8:	d105      	bne.n	800a5c6 <__libc_init_array+0x2e>
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
 800a5bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c0:	4798      	blx	r3
 800a5c2:	3601      	adds	r6, #1
 800a5c4:	e7ee      	b.n	800a5a4 <__libc_init_array+0xc>
 800a5c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ca:	4798      	blx	r3
 800a5cc:	3601      	adds	r6, #1
 800a5ce:	e7f2      	b.n	800a5b6 <__libc_init_array+0x1e>
 800a5d0:	0800a828 	.word	0x0800a828
 800a5d4:	0800a828 	.word	0x0800a828
 800a5d8:	0800a828 	.word	0x0800a828
 800a5dc:	0800a82c 	.word	0x0800a82c

0800a5e0 <__retarget_lock_acquire_recursive>:
 800a5e0:	4770      	bx	lr

0800a5e2 <__retarget_lock_release_recursive>:
 800a5e2:	4770      	bx	lr

0800a5e4 <memcpy>:
 800a5e4:	440a      	add	r2, r1
 800a5e6:	4291      	cmp	r1, r2
 800a5e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5ec:	d100      	bne.n	800a5f0 <memcpy+0xc>
 800a5ee:	4770      	bx	lr
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5fa:	4291      	cmp	r1, r2
 800a5fc:	d1f9      	bne.n	800a5f2 <memcpy+0xe>
 800a5fe:	bd10      	pop	{r4, pc}

0800a600 <_free_r>:
 800a600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a602:	2900      	cmp	r1, #0
 800a604:	d044      	beq.n	800a690 <_free_r+0x90>
 800a606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60a:	9001      	str	r0, [sp, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f1a1 0404 	sub.w	r4, r1, #4
 800a612:	bfb8      	it	lt
 800a614:	18e4      	addlt	r4, r4, r3
 800a616:	f000 f83f 	bl	800a698 <__malloc_lock>
 800a61a:	4a1e      	ldr	r2, [pc, #120]	; (800a694 <_free_r+0x94>)
 800a61c:	9801      	ldr	r0, [sp, #4]
 800a61e:	6813      	ldr	r3, [r2, #0]
 800a620:	b933      	cbnz	r3, 800a630 <_free_r+0x30>
 800a622:	6063      	str	r3, [r4, #4]
 800a624:	6014      	str	r4, [r2, #0]
 800a626:	b003      	add	sp, #12
 800a628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a62c:	f000 b83a 	b.w	800a6a4 <__malloc_unlock>
 800a630:	42a3      	cmp	r3, r4
 800a632:	d908      	bls.n	800a646 <_free_r+0x46>
 800a634:	6825      	ldr	r5, [r4, #0]
 800a636:	1961      	adds	r1, r4, r5
 800a638:	428b      	cmp	r3, r1
 800a63a:	bf01      	itttt	eq
 800a63c:	6819      	ldreq	r1, [r3, #0]
 800a63e:	685b      	ldreq	r3, [r3, #4]
 800a640:	1949      	addeq	r1, r1, r5
 800a642:	6021      	streq	r1, [r4, #0]
 800a644:	e7ed      	b.n	800a622 <_free_r+0x22>
 800a646:	461a      	mov	r2, r3
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	b10b      	cbz	r3, 800a650 <_free_r+0x50>
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	d9fa      	bls.n	800a646 <_free_r+0x46>
 800a650:	6811      	ldr	r1, [r2, #0]
 800a652:	1855      	adds	r5, r2, r1
 800a654:	42a5      	cmp	r5, r4
 800a656:	d10b      	bne.n	800a670 <_free_r+0x70>
 800a658:	6824      	ldr	r4, [r4, #0]
 800a65a:	4421      	add	r1, r4
 800a65c:	1854      	adds	r4, r2, r1
 800a65e:	42a3      	cmp	r3, r4
 800a660:	6011      	str	r1, [r2, #0]
 800a662:	d1e0      	bne.n	800a626 <_free_r+0x26>
 800a664:	681c      	ldr	r4, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	6053      	str	r3, [r2, #4]
 800a66a:	440c      	add	r4, r1
 800a66c:	6014      	str	r4, [r2, #0]
 800a66e:	e7da      	b.n	800a626 <_free_r+0x26>
 800a670:	d902      	bls.n	800a678 <_free_r+0x78>
 800a672:	230c      	movs	r3, #12
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	e7d6      	b.n	800a626 <_free_r+0x26>
 800a678:	6825      	ldr	r5, [r4, #0]
 800a67a:	1961      	adds	r1, r4, r5
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf04      	itt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	6063      	str	r3, [r4, #4]
 800a686:	bf04      	itt	eq
 800a688:	1949      	addeq	r1, r1, r5
 800a68a:	6021      	streq	r1, [r4, #0]
 800a68c:	6054      	str	r4, [r2, #4]
 800a68e:	e7ca      	b.n	800a626 <_free_r+0x26>
 800a690:	b003      	add	sp, #12
 800a692:	bd30      	pop	{r4, r5, pc}
 800a694:	20001cfc 	.word	0x20001cfc

0800a698 <__malloc_lock>:
 800a698:	4801      	ldr	r0, [pc, #4]	; (800a6a0 <__malloc_lock+0x8>)
 800a69a:	f7ff bfa1 	b.w	800a5e0 <__retarget_lock_acquire_recursive>
 800a69e:	bf00      	nop
 800a6a0:	20001cf8 	.word	0x20001cf8

0800a6a4 <__malloc_unlock>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	; (800a6ac <__malloc_unlock+0x8>)
 800a6a6:	f7ff bf9c 	b.w	800a5e2 <__retarget_lock_release_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	20001cf8 	.word	0x20001cf8

0800a6b0 <_init>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	bf00      	nop
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr

0800a6bc <_fini>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	bf00      	nop
 800a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c2:	bc08      	pop	{r3}
 800a6c4:	469e      	mov	lr, r3
 800a6c6:	4770      	bx	lr
