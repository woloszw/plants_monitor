
Wifi_module_simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004ff0  08004ff0  00014ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005008  08005008  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005010  08005010  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005010  08005010  00015010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005024  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080050c4  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000734  2000014c  08005164  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000880  08005164  00020880  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY
 15 .debug_info   00012989  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002c97  00000000  00000000  00032b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e20  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000ac9  00000000  00000000  00036600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028ff0  00000000  00000000  000370c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00012b1e  00000000  00000000  000600b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9a7c  00000000  00000000  00072bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003958  00000000  00000000  0016c654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000072  00000000  00000000  0016ffac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004fd8 	.word	0x08004fd8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004fd8 	.word	0x08004fd8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_ETH_Init+0x84>)
 800053a:	4a20      	ldr	r2, [pc, #128]	; (80005bc <MX_ETH_Init+0x88>)
 800053c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <MX_ETH_Init+0x8c>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_ETH_Init+0x8c>)
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_ETH_Init+0x8c>)
 800054c:	22e1      	movs	r2, #225	; 0xe1
 800054e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_ETH_Init+0x8c>)
 8000552:	2200      	movs	r2, #0
 8000554:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_ETH_Init+0x8c>)
 8000558:	2200      	movs	r2, #0
 800055a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_ETH_Init+0x8c>)
 800055e:	2200      	movs	r2, #0
 8000560:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_ETH_Init+0x84>)
 8000564:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <MX_ETH_Init+0x8c>)
 8000566:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MX_ETH_Init+0x84>)
 800056a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800056e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_ETH_Init+0x84>)
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <MX_ETH_Init+0x90>)
 8000574:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_ETH_Init+0x84>)
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <MX_ETH_Init+0x94>)
 800057a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_ETH_Init+0x84>)
 800057e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000582:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_ETH_Init+0x84>)
 8000586:	f000 fecf 	bl	8001328 <HAL_ETH_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000590:	f000 fa24 	bl	80009dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000594:	2238      	movs	r2, #56	; 0x38
 8000596:	2100      	movs	r1, #0
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <MX_ETH_Init+0x98>)
 800059a:	f004 fcf1 	bl	8004f80 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_ETH_Init+0x98>)
 80005a0:	2221      	movs	r2, #33	; 0x21
 80005a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_ETH_Init+0x98>)
 80005a6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_ETH_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200001a0 	.word	0x200001a0
 80005bc:	40028000 	.word	0x40028000
 80005c0:	20000250 	.word	0x20000250
 80005c4:	200000ac 	.word	0x200000ac
 80005c8:	2000000c 	.word	0x2000000c
 80005cc:	20000168 	.word	0x20000168

080005d0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a4e      	ldr	r2, [pc, #312]	; (8000728 <HAL_ETH_MspInit+0x158>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	f040 8096 	bne.w	8000720 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005f4:	4b4d      	ldr	r3, [pc, #308]	; (800072c <HAL_ETH_MspInit+0x15c>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a4c      	ldr	r2, [pc, #304]	; (800072c <HAL_ETH_MspInit+0x15c>)
 80005fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000600:	4b4a      	ldr	r3, [pc, #296]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000608:	623b      	str	r3, [r7, #32]
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	4b47      	ldr	r3, [pc, #284]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a46      	ldr	r2, [pc, #280]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
 8000618:	4b44      	ldr	r3, [pc, #272]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000620:	61fb      	str	r3, [r7, #28]
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	4b41      	ldr	r3, [pc, #260]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a40      	ldr	r2, [pc, #256]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800062a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b3e      	ldr	r3, [pc, #248]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000638:	61bb      	str	r3, [r7, #24]
 800063a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800063c:	4b3b      	ldr	r3, [pc, #236]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a3a      	ldr	r2, [pc, #232]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
 8000648:	4b38      	ldr	r3, [pc, #224]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	4a34      	ldr	r2, [pc, #208]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6313      	str	r3, [r2, #48]	; 0x30
 8000660:	4b32      	ldr	r3, [pc, #200]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a2e      	ldr	r2, [pc, #184]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <HAL_ETH_MspInit+0x15c>)
 800068a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068e:	6313      	str	r3, [r2, #48]	; 0x30
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <HAL_ETH_MspInit+0x15c>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800069c:	2332      	movs	r3, #50	; 0x32
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ac:	230b      	movs	r3, #11
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	481e      	ldr	r0, [pc, #120]	; (8000730 <HAL_ETH_MspInit+0x160>)
 80006b8:	f001 f95c 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006bc:	2386      	movs	r3, #134	; 0x86
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006cc:	230b      	movs	r3, #11
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d4:	4619      	mov	r1, r3
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <HAL_ETH_MspInit+0x164>)
 80006d8:	f001 f94c 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ee:	230b      	movs	r3, #11
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	4619      	mov	r1, r3
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <HAL_ETH_MspInit+0x168>)
 80006fa:	f001 f93b 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000710:	230b      	movs	r3, #11
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000718:	4619      	mov	r1, r3
 800071a:	4808      	ldr	r0, [pc, #32]	; (800073c <HAL_ETH_MspInit+0x16c>)
 800071c:	f001 f92a 	bl	8001974 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	3738      	adds	r7, #56	; 0x38
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40028000 	.word	0x40028000
 800072c:	40023800 	.word	0x40023800
 8000730:	40020800 	.word	0x40020800
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400
 800073c:	40021800 	.word	0x40021800

08000740 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b47      	ldr	r3, [pc, #284]	; (8000874 <MX_GPIO_Init+0x134>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a46      	ldr	r2, [pc, #280]	; (8000874 <MX_GPIO_Init+0x134>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b44      	ldr	r3, [pc, #272]	; (8000874 <MX_GPIO_Init+0x134>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b41      	ldr	r3, [pc, #260]	; (8000874 <MX_GPIO_Init+0x134>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a40      	ldr	r2, [pc, #256]	; (8000874 <MX_GPIO_Init+0x134>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <MX_GPIO_Init+0x134>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <MX_GPIO_Init+0x134>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a3a      	ldr	r2, [pc, #232]	; (8000874 <MX_GPIO_Init+0x134>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_GPIO_Init+0x134>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b35      	ldr	r3, [pc, #212]	; (8000874 <MX_GPIO_Init+0x134>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a34      	ldr	r2, [pc, #208]	; (8000874 <MX_GPIO_Init+0x134>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b32      	ldr	r3, [pc, #200]	; (8000874 <MX_GPIO_Init+0x134>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <MX_GPIO_Init+0x134>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a2e      	ldr	r2, [pc, #184]	; (8000874 <MX_GPIO_Init+0x134>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <MX_GPIO_Init+0x134>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_GPIO_Init+0x134>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a28      	ldr	r2, [pc, #160]	; (8000874 <MX_GPIO_Init+0x134>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_GPIO_Init+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007ec:	4822      	ldr	r0, [pc, #136]	; (8000878 <MX_GPIO_Init+0x138>)
 80007ee:	f001 fa6d 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4821      	ldr	r0, [pc, #132]	; (800087c <MX_GPIO_Init+0x13c>)
 80007f8:	f001 fa68 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000802:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	481b      	ldr	r0, [pc, #108]	; (8000880 <MX_GPIO_Init+0x140>)
 8000814:	f001 f8ae 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000818:	f244 0381 	movw	r3, #16513	; 0x4081
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_GPIO_Init+0x138>)
 8000832:	f001 f89f 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0x13c>)
 800084e:	f001 f891 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x13c>)
 8000866:	f001 f885 	bl	8001974 <HAL_GPIO_Init>

}
 800086a:	bf00      	nop
 800086c:	3730      	adds	r7, #48	; 0x30
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400
 800087c:	40021800 	.word	0x40021800
 8000880:	40020800 	.word	0x40020800

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fb29 	bl	8000ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f81c 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f7ff ff56 	bl	8000740 <MX_GPIO_Init>
  MX_ETH_Init();
 8000894:	f7ff fe4e 	bl	8000534 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000898:	f000 f94a 	bl	8000b30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800089c:	f000 fa4e 	bl	8000d3c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80008a0:	f000 f916 	bl	8000ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, Rx_data, 4);
 80008a4:	2204      	movs	r2, #4
 80008a6:	4905      	ldr	r1, [pc, #20]	; (80008bc <main+0x38>)
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <main+0x3c>)
 80008aa:	f002 fd79 	bl	80033a0 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart3, Rx_data, 4);
 80008ae:	2204      	movs	r2, #4
 80008b0:	4902      	ldr	r1, [pc, #8]	; (80008bc <main+0x38>)
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <main+0x40>)
 80008b4:	f002 fd16 	bl	80032e4 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <main+0x34>
 80008ba:	bf00      	nop
 80008bc:	20000258 	.word	0x20000258
 80008c0:	20000264 	.word	0x20000264
 80008c4:	200002ec 	.word	0x200002ec

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2234      	movs	r2, #52	; 0x34
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fb52 	bl	8004f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008ec:	f001 fb50 	bl	8001f90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <SystemClock_Config+0xdc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <SystemClock_Config+0xdc>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <SystemClock_Config+0xdc>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <SystemClock_Config+0xe0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000910:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <SystemClock_Config+0xe0>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <SystemClock_Config+0xe0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000928:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800093c:	2360      	movs	r3, #96	; 0x60
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000944:	2304      	movs	r3, #4
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4618      	mov	r0, r3
 8000952:	f001 fb7d 	bl	8002050 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800095c:	f000 f83e 	bl	80009dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000960:	f001 fb26 	bl	8001fb0 <HAL_PWREx_EnableOverDrive>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800096a:	f000 f837 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2103      	movs	r1, #3
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fe0e 	bl	80025ac <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000996:	f000 f821 	bl	80009dc <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, Rx_data, 4);
 80009b4:	2204      	movs	r2, #4
 80009b6:	4906      	ldr	r1, [pc, #24]	; (80009d0 <HAL_UART_RxCpltCallback+0x24>)
 80009b8:	4806      	ldr	r0, [pc, #24]	; (80009d4 <HAL_UART_RxCpltCallback+0x28>)
 80009ba:	f002 fcf1 	bl	80033a0 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart3, Rx_data, 4);
 80009be:	2204      	movs	r2, #4
 80009c0:	4903      	ldr	r1, [pc, #12]	; (80009d0 <HAL_UART_RxCpltCallback+0x24>)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_UART_RxCpltCallback+0x2c>)
 80009c4:	f002 fc8e 	bl	80032e4 <HAL_UART_Transmit_IT>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000258 	.word	0x20000258
 80009d4:	20000264 	.word	0x20000264
 80009d8:	200002ec 	.word	0x200002ec

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 fa6c 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <USART2_IRQHandler+0x10>)
 8000a8a:	f002 fccd 	bl	8003428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000264 	.word	0x20000264

08000a98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <USART3_IRQHandler+0x10>)
 8000a9e:	f002 fcc3 	bl	8003428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200002ec 	.word	0x200002ec

08000aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <MX_USART2_UART_Init+0x5c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b14:	f002 fb98 	bl	8003248 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b1e:	f7ff ff5d 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000264 	.word	0x20000264
 8000b2c:	40004400 	.word	0x40004400

08000b30 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <MX_USART3_UART_Init+0x5c>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b74:	f002 fb68 	bl	8003248 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f7ff ff2d 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002ec 	.word	0x200002ec
 8000b8c:	40004800 	.word	0x40004800

08000b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0b0      	sub	sp, #192	; 0xc0
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2290      	movs	r2, #144	; 0x90
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 f9e5 	bl	8004f80 <memset>
  if(uartHandle->Instance==USART2)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a5b      	ldr	r2, [pc, #364]	; (8000d28 <HAL_UART_MspInit+0x198>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d164      	bne.n	8000c8a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 ff13 	bl	80029f8 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd8:	f7ff ff00 	bl	80009dc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bdc:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0c:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a46      	ldr	r2, [pc, #280]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c24:	2308      	movs	r3, #8
 8000c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c46:	4619      	mov	r1, r3
 8000c48:	4839      	ldr	r0, [pc, #228]	; (8000d30 <HAL_UART_MspInit+0x1a0>)
 8000c4a:	f000 fe93 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c66:	2307      	movs	r3, #7
 8000c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c70:	4619      	mov	r1, r3
 8000c72:	4830      	ldr	r0, [pc, #192]	; (8000d34 <HAL_UART_MspInit+0x1a4>)
 8000c74:	f000 fe7e 	bl	8001974 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2026      	movs	r0, #38	; 0x26
 8000c7e:	f000 fa8a 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c82:	2026      	movs	r0, #38	; 0x26
 8000c84:	f000 faa3 	bl	80011ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c88:	e049      	b.n	8000d1e <HAL_UART_MspInit+0x18e>
  else if(uartHandle->Instance==USART3)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <HAL_UART_MspInit+0x1a8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d144      	bne.n	8000d1e <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fea8 	bl	80029f8 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8000cae:	f7ff fe95 	bl	80009dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ce2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d06:	4619      	mov	r1, r3
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <HAL_UART_MspInit+0x1a4>)
 8000d0a:	f000 fe33 	bl	8001974 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2027      	movs	r0, #39	; 0x27
 8000d14:	f000 fa3f 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d18:	2027      	movs	r0, #39	; 0x27
 8000d1a:	f000 fa58 	bl	80011ce <HAL_NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	37c0      	adds	r7, #192	; 0xc0
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	40004800 	.word	0x40004800

08000d3c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4a:	2206      	movs	r2, #6
 8000d4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d80:	f000 ffbd 	bl	8001cfe <HAL_PCD_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f7ff fe27 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000374 	.word	0x20000374

08000d98 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0ae      	sub	sp, #184	; 0xb8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2290      	movs	r2, #144	; 0x90
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 f8e1 	bl	8004f80 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc6:	d159      	bne.n	8000e7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fe0d 	bl	80029f8 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000de4:	f7ff fdfa 	bl	80009dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e00:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <HAL_PCD_MspInit+0xf0>)
 8000e28:	f000 fda4 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4810      	ldr	r0, [pc, #64]	; (8000e88 <HAL_PCD_MspInit+0xf0>)
 8000e48:	f000 fd94 	bl	8001974 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e56:	6353      	str	r3, [r2, #52]	; 0x34
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	37b8      	adds	r7, #184	; 0xb8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb6:	f7ff fdf9 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f004 f869 	bl	8004f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fce1 	bl	8000884 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ed0:	08005018 	.word	0x08005018
  ldr r2, =_sbss
 8000ed4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000ed8:	20000880 	.word	0x20000880

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>

08000ede <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f94c 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 f805 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eee:	f7ff fd7b 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f967 	bl	80011ea <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f92f 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	2000087c 	.word	0x2000087c

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2000087c 	.word	0x2000087c

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	4313      	orrs	r3, r2
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x40>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	05fa0000 	.word	0x05fa0000

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <__NVIC_EnableIRQ+0x38>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff29 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff3e 	bl	8001028 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff31 	bl	8001044 <__NVIC_EnableIRQ>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffa2 	bl	800113c <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff feb6 	bl	8000f80 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d008      	beq.n	8001234 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e052      	b.n	80012da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0216 	bic.w	r2, r2, #22
 8001242:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001252:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	2b00      	cmp	r3, #0
 800125a:	d103      	bne.n	8001264 <HAL_DMA_Abort+0x62>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001260:	2b00      	cmp	r3, #0
 8001262:	d007      	beq.n	8001274 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0208 	bic.w	r2, r2, #8
 8001272:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001284:	e013      	b.n	80012ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001286:	f7ff fe7b 	bl	8000f80 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b05      	cmp	r3, #5
 8001292:	d90c      	bls.n	80012ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2220      	movs	r2, #32
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2203      	movs	r2, #3
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e015      	b.n	80012da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e4      	bne.n	8001286 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	223f      	movs	r2, #63	; 0x3f
 80012c2:	409a      	lsls	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d004      	beq.n	8001300 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e00c      	b.n	800131a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2205      	movs	r2, #5
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e06a      	b.n	8001410 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001340:	2b00      	cmp	r3, #0
 8001342:	d106      	bne.n	8001352 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2223      	movs	r2, #35	; 0x23
 8001348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff f93f 	bl	80005d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <HAL_ETH_Init+0xf0>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a30      	ldr	r2, [pc, #192]	; (8001418 <HAL_ETH_Init+0xf0>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_ETH_Init+0xf0>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <HAL_ETH_Init+0xf4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_ETH_Init+0xf4>)
 8001370:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001374:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_ETH_Init+0xf4>)
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	4927      	ldr	r1, [pc, #156]	; (800141c <HAL_ETH_Init+0xf4>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <HAL_ETH_Init+0xf4>)
 8001386:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800139e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a0:	f7ff fdee 	bl	8000f80 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013a6:	e011      	b.n	80013cc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013a8:	f7ff fdea 	bl	8000f80 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b6:	d909      	bls.n	80013cc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2204      	movs	r2, #4
 80013bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	22e0      	movs	r2, #224	; 0xe0
 80013c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e021      	b.n	8001410 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e4      	bne.n	80013a8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f958 	bl	8001694 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f9ff 	bl	80017e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 fa55 	bl	800189a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	461a      	mov	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f9bd 	bl	8001778 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2210      	movs	r2, #16
 800140a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40013800 	.word	0x40013800

08001420 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4b51      	ldr	r3, [pc, #324]	; (800157c <ETH_SetMACConfig+0x15c>)
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7c1b      	ldrb	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <ETH_SetMACConfig+0x28>
 8001442:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001446:	e000      	b.n	800144a <ETH_SetMACConfig+0x2a>
 8001448:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	7c5b      	ldrb	r3, [r3, #17]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <ETH_SetMACConfig+0x38>
 8001452:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001456:	e000      	b.n	800145a <ETH_SetMACConfig+0x3a>
 8001458:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800145a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001460:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	7fdb      	ldrb	r3, [r3, #31]
 8001466:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001468:	431a      	orrs	r2, r3
                        macconf->Speed |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800146e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	7f92      	ldrb	r2, [r2, #30]
 8001474:	2a00      	cmp	r2, #0
 8001476:	d102      	bne.n	800147e <ETH_SetMACConfig+0x5e>
 8001478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147c:	e000      	b.n	8001480 <ETH_SetMACConfig+0x60>
 800147e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001480:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	7f1b      	ldrb	r3, [r3, #28]
 8001486:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001488:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800148e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	791b      	ldrb	r3, [r3, #4]
 8001494:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001496:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d102      	bne.n	80014a8 <ETH_SetMACConfig+0x88>
 80014a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a6:	e000      	b.n	80014aa <ETH_SetMACConfig+0x8a>
 80014a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	7bdb      	ldrb	r3, [r3, #15]
 80014b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014c2:	4313      	orrs	r3, r2
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fd5c 	bl	8000f98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001506:	2a00      	cmp	r2, #0
 8001508:	d101      	bne.n	800150e <ETH_SetMACConfig+0xee>
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	e000      	b.n	8001510 <ETH_SetMACConfig+0xf0>
 800150e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001510:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001516:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800151e:	2a01      	cmp	r2, #1
 8001520:	d101      	bne.n	8001526 <ETH_SetMACConfig+0x106>
 8001522:	2208      	movs	r2, #8
 8001524:	e000      	b.n	8001528 <ETH_SetMACConfig+0x108>
 8001526:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001528:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001530:	2a01      	cmp	r2, #1
 8001532:	d101      	bne.n	8001538 <ETH_SetMACConfig+0x118>
 8001534:	2204      	movs	r2, #4
 8001536:	e000      	b.n	800153a <ETH_SetMACConfig+0x11a>
 8001538:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800153a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001542:	2a01      	cmp	r2, #1
 8001544:	d101      	bne.n	800154a <ETH_SetMACConfig+0x12a>
 8001546:	2202      	movs	r2, #2
 8001548:	e000      	b.n	800154c <ETH_SetMACConfig+0x12c>
 800154a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800154c:	4313      	orrs	r3, r2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff fd17 	bl	8000f98 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	ff20810f 	.word	0xff20810f

08001580 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <ETH_SetDMAConfig+0x110>)
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	7b1b      	ldrb	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <ETH_SetDMAConfig+0x2c>
 80015a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015aa:	e000      	b.n	80015ae <ETH_SetDMAConfig+0x2e>
 80015ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	7b5b      	ldrb	r3, [r3, #13]
 80015b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	7f52      	ldrb	r2, [r2, #29]
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	d102      	bne.n	80015c4 <ETH_SetDMAConfig+0x44>
 80015be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015c2:	e000      	b.n	80015c6 <ETH_SetDMAConfig+0x46>
 80015c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	7b9b      	ldrb	r3, [r3, #14]
 80015cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	7f1b      	ldrb	r3, [r3, #28]
 80015da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	7f9b      	ldrb	r3, [r3, #30]
 80015e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015f4:	4313      	orrs	r3, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff fcbe 	bl	8000f98 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	791b      	ldrb	r3, [r3, #4]
 800162e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001634:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800163a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001640:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001648:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800164a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001652:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001658:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001666:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff fc8f 	bl	8000f98 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	f8de3f23 	.word	0xf8de3f23

08001694 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0a6      	sub	sp, #152	; 0x98
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800169c:	2301      	movs	r3, #1
 800169e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016d0:	2300      	movs	r3, #0
 80016d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001700:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fe86 	bl	8001420 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001714:	2301      	movs	r3, #1
 8001716:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001718:	2301      	movs	r3, #1
 800171a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001722:	2301      	movs	r3, #1
 8001724:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800173a:	2301      	movs	r3, #1
 800173c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001740:	2301      	movs	r3, #1
 8001742:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001748:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800174a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff08 	bl	8001580 <ETH_SetDMAConfig>
}
 8001770:	bf00      	nop
 8001772:	3798      	adds	r7, #152	; 0x98
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3305      	adds	r3, #5
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	3204      	adds	r2, #4
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <ETH_MACAddressConfig+0x68>)
 800179a:	4413      	add	r3, r2
 800179c:	461a      	mov	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3303      	adds	r3, #3
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	061a      	lsls	r2, r3, #24
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3302      	adds	r3, #2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3301      	adds	r3, #1
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	4313      	orrs	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <ETH_MACAddressConfig+0x6c>)
 80017ca:	4413      	add	r3, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40028040 	.word	0x40028040
 80017e4:	40028044 	.word	0x40028044

080017e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e03e      	b.n	8001874 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	3206      	adds	r2, #6
 8001828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d80c      	bhi.n	8001858 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68d9      	ldr	r1, [r3, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	e004      	b.n	8001862 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	461a      	mov	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d9bd      	bls.n	80017f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188c:	611a      	str	r2, [r3, #16]
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	e046      	b.n	8001936 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6919      	ldr	r1, [r3, #16]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	3212      	adds	r2, #18
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d80c      	bhi.n	8001926 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6919      	ldr	r1, [r3, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	461a      	mov	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	e004      	b.n	8001930 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3301      	adds	r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d9b5      	bls.n	80018a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001966:	60da      	str	r2, [r3, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e175      	b.n	8001c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8164 	bne.w	8001c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_GPIO_Init+0x56>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d130      	bne.n	8001a2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0201 	and.w	r2, r3, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d017      	beq.n	8001a68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d123      	bne.n	8001abc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	69b9      	ldr	r1, [r7, #24]
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80be 	beq.w	8001c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <HAL_GPIO_Init+0x324>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a65      	ldr	r2, [pc, #404]	; (8001c98 <HAL_GPIO_Init+0x324>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_GPIO_Init+0x324>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b16:	4a61      	ldr	r2, [pc, #388]	; (8001c9c <HAL_GPIO_Init+0x328>)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_GPIO_Init+0x32c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d037      	beq.n	8001bb2 <HAL_GPIO_Init+0x23e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a57      	ldr	r2, [pc, #348]	; (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d031      	beq.n	8001bae <HAL_GPIO_Init+0x23a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a56      	ldr	r2, [pc, #344]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02b      	beq.n	8001baa <HAL_GPIO_Init+0x236>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a55      	ldr	r2, [pc, #340]	; (8001cac <HAL_GPIO_Init+0x338>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d025      	beq.n	8001ba6 <HAL_GPIO_Init+0x232>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_GPIO_Init+0x33c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01f      	beq.n	8001ba2 <HAL_GPIO_Init+0x22e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a53      	ldr	r2, [pc, #332]	; (8001cb4 <HAL_GPIO_Init+0x340>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x22a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_GPIO_Init+0x344>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x226>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <HAL_GPIO_Init+0x348>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x222>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_GPIO_Init+0x34c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x21e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x21a>
 8001b8a:	2309      	movs	r3, #9
 8001b8c:	e012      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b8e:	230a      	movs	r3, #10
 8001b90:	e010      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b92:	2308      	movs	r3, #8
 8001b94:	e00e      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b96:	2307      	movs	r3, #7
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	; (8001c9c <HAL_GPIO_Init+0x328>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a34      	ldr	r2, [pc, #208]	; (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f ae86 	bls.w	8001994 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40021c00 	.word	0x40021c00
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40022400 	.word	0x40022400
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ce8:	e003      	b.n	8001cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	041a      	lsls	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d00:	b08f      	sub	sp, #60	; 0x3c
 8001d02:	af0a      	add	r7, sp, #40	; 0x28
 8001d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e116      	b.n	8001f3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff f834 	bl	8000d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fe7a 	bl	8004a48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	687e      	ldr	r6, [r7, #4]
 8001d5c:	466d      	mov	r5, sp
 8001d5e:	f106 0410 	add.w	r4, r6, #16
 8001d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d72:	1d33      	adds	r3, r6, #4
 8001d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f002 fe0e 	bl	8004998 <USB_CoreInit>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0d7      	b.n	8001f3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 fe68 	bl	8004a6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]
 8001d9e:	e04a      	b.n	8001e36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	333d      	adds	r3, #61	; 0x3d
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	333c      	adds	r3, #60	; 0x3c
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	b298      	uxth	r0, r3
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	3344      	adds	r3, #68	; 0x44
 8001ddc:	4602      	mov	r2, r0
 8001dde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3340      	adds	r3, #64	; 0x40
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	3348      	adds	r3, #72	; 0x48
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	334c      	adds	r3, #76	; 0x4c
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3354      	adds	r3, #84	; 0x54
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	3301      	adds	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3af      	bcc.n	8001da0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e044      	b.n	8001ed0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3b5      	bcc.n	8001e46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	687e      	ldr	r6, [r7, #4]
 8001ee2:	466d      	mov	r5, sp
 8001ee4:	f106 0410 	add.w	r4, r6, #16
 8001ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef8:	1d33      	adds	r3, r6, #4
 8001efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efc:	6838      	ldr	r0, [r7, #0]
 8001efe:	f002 fe01 	bl	8004b04 <USB_DevInit>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e014      	b.n	8001f3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f80b 	bl	8001f48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 ffbf 	bl	8004eba <USB_DevDisconnect>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_PCDEx_ActivateLPM+0x44>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	10000003 	.word	0x10000003

08001f90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000

08001fb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b23      	ldr	r3, [pc, #140]	; (8002048 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a22      	ldr	r2, [pc, #136]	; (8002048 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fde:	f7fe ffcf 	bl	8000f80 <HAL_GetTick>
 8001fe2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fe4:	e009      	b.n	8001ffa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fe6:	f7fe ffcb 	bl	8000f80 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ff4:	d901      	bls.n	8001ffa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e022      	b.n	8002040 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002006:	d1ee      	bne.n	8001fe6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_PWREx_EnableOverDrive+0x9c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_PWREx_EnableOverDrive+0x9c>)
 800200e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002012:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002014:	f7fe ffb4 	bl	8000f80 <HAL_GetTick>
 8002018:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800201a:	e009      	b.n	8002030 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800201c:	f7fe ffb0 	bl	8000f80 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800202a:	d901      	bls.n	8002030 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e007      	b.n	8002040 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800203c:	d1ee      	bne.n	800201c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	40007000 	.word	0x40007000

08002050 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e29b      	b.n	800259e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8087 	beq.w	8002182 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002074:	4b96      	ldr	r3, [pc, #600]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b04      	cmp	r3, #4
 800207e:	d00c      	beq.n	800209a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002080:	4b93      	ldr	r3, [pc, #588]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d112      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62>
 800208c:	4b90      	ldr	r3, [pc, #576]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002098:	d10b      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209a:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d06c      	beq.n	8002180 <HAL_RCC_OscConfig+0x130>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d168      	bne.n	8002180 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e275      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x7a>
 80020bc:	4b84      	ldr	r3, [pc, #528]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a83      	ldr	r2, [pc, #524]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e02e      	b.n	8002128 <HAL_RCC_OscConfig+0xd8>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x9c>
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b7c      	ldr	r3, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7b      	ldr	r2, [pc, #492]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80020e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e01d      	b.n	8002128 <HAL_RCC_OscConfig+0xd8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0xc0>
 80020f6:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a75      	ldr	r2, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80020fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b73      	ldr	r3, [pc, #460]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a72      	ldr	r2, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0xd8>
 8002110:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a6e      	ldr	r2, [pc, #440]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a6b      	ldr	r2, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe ff26 	bl	8000f80 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7fe ff22 	bl	8000f80 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e229      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0xe8>
 8002156:	e014      	b.n	8002182 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe ff12 	bl	8000f80 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7fe ff0e 	bl	8000f80 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e215      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x110>
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d069      	beq.n	8002262 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218e:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219a:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d11c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x190>
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d116      	bne.n	80021e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_RCC_OscConfig+0x17a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e1e9      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	493d      	ldr	r1, [pc, #244]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	e040      	b.n	8002262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d023      	beq.n	8002230 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a38      	ldr	r2, [pc, #224]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fec4 	bl	8000f80 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7fe fec0 	bl	8000f80 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e1c7      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4929      	ldr	r1, [pc, #164]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
 800222e:	e018      	b.n	8002262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fea0 	bl	8000f80 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002244:	f7fe fe9c 	bl	8000f80 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1a3      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d038      	beq.n	80022e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d019      	beq.n	80022aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe fe7d 	bl	8000f80 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228a:	f7fe fe79 	bl	8000f80 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e180      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x23a>
 80022a8:	e01a      	b.n	80022e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80022ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_RCC_OscConfig+0x280>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7fe fe63 	bl	8000f80 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022be:	f7fe fe5f 	bl	8000f80 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d903      	bls.n	80022d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e166      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
 80022d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b92      	ldr	r3, [pc, #584]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ee      	bne.n	80022be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a4 	beq.w	8002436 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b8c      	ldr	r3, [pc, #560]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10d      	bne.n	8002316 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a88      	ldr	r2, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b86      	ldr	r3, [pc, #536]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002316:	4b83      	ldr	r3, [pc, #524]	; (8002524 <HAL_RCC_OscConfig+0x4d4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002322:	4b80      	ldr	r3, [pc, #512]	; (8002524 <HAL_RCC_OscConfig+0x4d4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7f      	ldr	r2, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x4d4>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7fe fe27 	bl	8000f80 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7fe fe23 	bl	8000f80 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e12a      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002348:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x4d4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x31a>
 800235c:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	e02d      	b.n	80023c6 <HAL_RCC_OscConfig+0x376>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x33c>
 8002372:	4b6b      	ldr	r3, [pc, #428]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6713      	str	r3, [r2, #112]	; 0x70
 800237e:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a67      	ldr	r2, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	e01c      	b.n	80023c6 <HAL_RCC_OscConfig+0x376>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x35e>
 8002394:	4b62      	ldr	r3, [pc, #392]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a61      	ldr	r2, [pc, #388]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a5e      	ldr	r2, [pc, #376]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
 80023ac:	e00b      	b.n	80023c6 <HAL_RCC_OscConfig+0x376>
 80023ae:	4b5c      	ldr	r3, [pc, #368]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	4a5b      	ldr	r2, [pc, #364]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ba:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d015      	beq.n	80023fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ce:	f7fe fdd7 	bl	8000f80 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe fdd3 	bl	8000f80 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0d8      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ee      	beq.n	80023d6 <HAL_RCC_OscConfig+0x386>
 80023f8:	e014      	b.n	8002424 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7fe fdc1 	bl	8000f80 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe fdbd 	bl	8000f80 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0c2      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ee      	bne.n	8002402 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a3c      	ldr	r2, [pc, #240]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80ae 	beq.w	800259c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d06d      	beq.n	8002528 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d14b      	bne.n	80024ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a31      	ldr	r2, [pc, #196]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fd8e 	bl	8000f80 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fd8a 	bl	8000f80 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e091      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	019b      	lsls	r3, r3, #6
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	3b01      	subs	r3, #1
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	071b      	lsls	r3, r3, #28
 80024b2:	491b      	ldr	r1, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a18      	ldr	r2, [pc, #96]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fd5c 	bl	8000f80 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fd58 	bl	8000f80 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e05f      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x47c>
 80024ea:	e057      	b.n	800259c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fd42 	bl	8000f80 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe fd3e 	bl	8000f80 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e045      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x4b0>
 800251e:	e03d      	b.n	800259c <HAL_RCC_OscConfig+0x54c>
 8002520:	40023800 	.word	0x40023800
 8002524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_RCC_OscConfig+0x558>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d030      	beq.n	8002598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d129      	bne.n	8002598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d122      	bne.n	8002598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800255e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002560:	4293      	cmp	r3, r2
 8002562:	d119      	bne.n	8002598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d10f      	bne.n	8002598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d107      	bne.n	8002598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800

080025ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0d0      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d910      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 020f 	bic.w	r2, r3, #15
 80025da:	4965      	ldr	r1, [pc, #404]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800262a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d040      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d115      	bne.n	800268e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e073      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4936      	ldr	r1, [pc, #216]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a0:	f7fe fc6e 	bl	8000f80 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7fe fc6a 	bl	8000f80 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e053      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d210      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 020f 	bic.w	r2, r3, #15
 80026e6:	4922      	ldr	r1, [pc, #136]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273e:	f000 f821 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	490a      	ldr	r1, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x1cc>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1d0>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1d4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fbca 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023c00 	.word	0x40023c00
 8002774:	40023800 	.word	0x40023800
 8002778:	08004ff0 	.word	0x08004ff0
 800277c:	20000000 	.word	0x20000000
 8002780:	20000004 	.word	0x20000004

08002784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b094      	sub	sp, #80	; 0x50
 800278a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	647b      	str	r3, [r7, #68]	; 0x44
 8002790:	2300      	movs	r3, #0
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002794:	2300      	movs	r3, #0
 8002796:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279c:	4b79      	ldr	r3, [pc, #484]	; (8002984 <HAL_RCC_GetSysClockFreq+0x200>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d00d      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x40>
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	f200 80e1 	bhi.w	8002970 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x34>
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x3a>
 80027b6:	e0db      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b8:	4b73      	ldr	r3, [pc, #460]	; (8002988 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027bc:	e0db      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027be:	4b73      	ldr	r3, [pc, #460]	; (800298c <HAL_RCC_GetSysClockFreq+0x208>)
 80027c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c2:	e0d8      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c4:	4b6f      	ldr	r3, [pc, #444]	; (8002984 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027ce:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d063      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027da:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <HAL_RCC_GetSysClockFreq+0x200>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	099b      	lsrs	r3, r3, #6
 80027e0:	2200      	movs	r2, #0
 80027e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ec:	633b      	str	r3, [r7, #48]	; 0x30
 80027ee:	2300      	movs	r3, #0
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
 80027f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027f6:	4622      	mov	r2, r4
 80027f8:	462b      	mov	r3, r5
 80027fa:	f04f 0000 	mov.w	r0, #0
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	0159      	lsls	r1, r3, #5
 8002804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002808:	0150      	lsls	r0, r2, #5
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4621      	mov	r1, r4
 8002810:	1a51      	subs	r1, r2, r1
 8002812:	6139      	str	r1, [r7, #16]
 8002814:	4629      	mov	r1, r5
 8002816:	eb63 0301 	sbc.w	r3, r3, r1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002828:	4659      	mov	r1, fp
 800282a:	018b      	lsls	r3, r1, #6
 800282c:	4651      	mov	r1, sl
 800282e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002832:	4651      	mov	r1, sl
 8002834:	018a      	lsls	r2, r1, #6
 8002836:	4651      	mov	r1, sl
 8002838:	ebb2 0801 	subs.w	r8, r2, r1
 800283c:	4659      	mov	r1, fp
 800283e:	eb63 0901 	sbc.w	r9, r3, r1
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800284e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002856:	4690      	mov	r8, r2
 8002858:	4699      	mov	r9, r3
 800285a:	4623      	mov	r3, r4
 800285c:	eb18 0303 	adds.w	r3, r8, r3
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	462b      	mov	r3, r5
 8002864:	eb49 0303 	adc.w	r3, r9, r3
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002876:	4629      	mov	r1, r5
 8002878:	024b      	lsls	r3, r1, #9
 800287a:	4621      	mov	r1, r4
 800287c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002880:	4621      	mov	r1, r4
 8002882:	024a      	lsls	r2, r1, #9
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288a:	2200      	movs	r2, #0
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
 800288e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002894:	f7fd fcd0 	bl	8000238 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4613      	mov	r3, r2
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028a0:	e058      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	2200      	movs	r2, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	4611      	mov	r1, r2
 80028ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028b2:	623b      	str	r3, [r7, #32]
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
 80028b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028bc:	4642      	mov	r2, r8
 80028be:	464b      	mov	r3, r9
 80028c0:	f04f 0000 	mov.w	r0, #0
 80028c4:	f04f 0100 	mov.w	r1, #0
 80028c8:	0159      	lsls	r1, r3, #5
 80028ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ce:	0150      	lsls	r0, r2, #5
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4641      	mov	r1, r8
 80028d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028da:	4649      	mov	r1, r9
 80028dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028f4:	ebb2 040a 	subs.w	r4, r2, sl
 80028f8:	eb63 050b 	sbc.w	r5, r3, fp
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	00eb      	lsls	r3, r5, #3
 8002906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290a:	00e2      	lsls	r2, r4, #3
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	4643      	mov	r3, r8
 8002912:	18e3      	adds	r3, r4, r3
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	464b      	mov	r3, r9
 8002918:	eb45 0303 	adc.w	r3, r5, r3
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800292a:	4629      	mov	r1, r5
 800292c:	028b      	lsls	r3, r1, #10
 800292e:	4621      	mov	r1, r4
 8002930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002934:	4621      	mov	r1, r4
 8002936:	028a      	lsls	r2, r1, #10
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293e:	2200      	movs	r2, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	61fa      	str	r2, [r7, #28]
 8002944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002948:	f7fd fc76 	bl	8000238 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_GetSysClockFreq+0x200>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetSysClockFreq+0x204>)
 8002972:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002978:	4618      	mov	r0, r3
 800297a:	3750      	adds	r7, #80	; 0x50
 800297c:	46bd      	mov	sp, r7
 800297e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	00f42400 	.word	0x00f42400
 800298c:	007a1200 	.word	0x007a1200

08002990 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff0 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0a9b      	lsrs	r3, r3, #10
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	08005000 	.word	0x08005000

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d4:	f7ff ffdc 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	0b5b      	lsrs	r3, r3, #13
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4903      	ldr	r1, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	08005000 	.word	0x08005000

080029f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a20:	4b69      	ldr	r3, [pc, #420]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a68      	ldr	r2, [pc, #416]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a2a:	6093      	str	r3, [r2, #8]
 8002a2c:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	4964      	ldr	r1, [pc, #400]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d017      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a52:	4b5d      	ldr	r3, [pc, #372]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	4959      	ldr	r1, [pc, #356]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a70:	d101      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d017      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	494a      	ldr	r1, [pc, #296]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 808b 	beq.w	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b00:	f7fe fa3e 	bl	8000f80 <HAL_GetTick>
 8002b04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b08:	f7fe fa3a 	bl	8000f80 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e38f      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b26:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d035      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d02e      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a1a      	ldr	r2, [pc, #104]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d114      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fa02 	bl	8000f80 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe f9fe 	bl	8000f80 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e351      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ee      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bae:	d111      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	4901      	ldr	r1, [pc, #4]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	0ffffcff 	.word	0x0ffffcff
 8002bd4:	4bac      	ldr	r3, [pc, #688]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4aab      	ldr	r2, [pc, #684]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	4ba9      	ldr	r3, [pc, #676]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	49a6      	ldr	r1, [pc, #664]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bfe:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c04:	4aa0      	ldr	r2, [pc, #640]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c0e:	4b9e      	ldr	r3, [pc, #632]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	499b      	ldr	r1, [pc, #620]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2c:	4b96      	ldr	r3, [pc, #600]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3a:	4993      	ldr	r1, [pc, #588]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4e:	4b8e      	ldr	r3, [pc, #568]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5c:	498a      	ldr	r1, [pc, #552]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c70:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7e:	4982      	ldr	r1, [pc, #520]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c92:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4979      	ldr	r1, [pc, #484]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb4:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	4971      	ldr	r1, [pc, #452]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd6:	4b6c      	ldr	r3, [pc, #432]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f023 020c 	bic.w	r2, r3, #12
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce4:	4968      	ldr	r1, [pc, #416]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf8:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	4960      	ldr	r1, [pc, #384]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	4957      	ldr	r1, [pc, #348]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d3c:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	494f      	ldr	r1, [pc, #316]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	4946      	ldr	r1, [pc, #280]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d80:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	493e      	ldr	r1, [pc, #248]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	4935      	ldr	r1, [pc, #212]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dc4:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd2:	492d      	ldr	r1, [pc, #180]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d011      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002de6:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df4:	4924      	ldr	r1, [pc, #144]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e04:	d101      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e26:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	4914      	ldr	r1, [pc, #80]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e58:	490b      	ldr	r1, [pc, #44]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00f      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7c:	4902      	ldr	r1, [pc, #8]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e84:	e002      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e98:	4b8a      	ldr	r3, [pc, #552]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	4986      	ldr	r1, [pc, #536]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ebc:	4b81      	ldr	r3, [pc, #516]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ecc:	497d      	ldr	r1, [pc, #500]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d006      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80d6 	beq.w	8003094 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee8:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef4:	f7fe f844 	bl	8000f80 <HAL_GetTick>
 8002ef8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002efc:	f7fe f840 	bl	8000f80 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e195      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d021      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11d      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f3c:	4b61      	ldr	r3, [pc, #388]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f42:	0e1b      	lsrs	r3, r3, #24
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	019a      	lsls	r2, r3, #6
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	071b      	lsls	r3, r3, #28
 8002f62:	4958      	ldr	r1, [pc, #352]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02e      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f94:	d129      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f96:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002faa:	0f1b      	lsrs	r3, r3, #28
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	019a      	lsls	r2, r3, #6
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	493e      	ldr	r1, [pc, #248]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fd2:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd8:	f023 021f 	bic.w	r2, r3, #31
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	4938      	ldr	r1, [pc, #224]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01d      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ff6:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffc:	0e1b      	lsrs	r3, r3, #24
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003004:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300a:	0f1b      	lsrs	r3, r3, #28
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	019a      	lsls	r2, r3, #6
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	071b      	lsls	r3, r3, #28
 800302a:	4926      	ldr	r1, [pc, #152]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d011      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	019a      	lsls	r2, r3, #6
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	071b      	lsls	r3, r3, #28
 800305a:	491a      	ldr	r1, [pc, #104]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003062:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800306c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306e:	f7fd ff87 	bl	8000f80 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003076:	f7fd ff83 	bl	8000f80 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d901      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0d8      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 80ce 	bne.w	8003238 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a8:	f7fd ff6a 	bl	8000f80 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030ae:	e00b      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030b0:	f7fd ff66 	bl	8000f80 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d904      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0bb      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d4:	d0ec      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d02e      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d12a      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800310c:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	0f1b      	lsrs	r3, r3, #28
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	019a      	lsls	r2, r3, #6
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	431a      	orrs	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	4944      	ldr	r1, [pc, #272]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800313a:	4b42      	ldr	r3, [pc, #264]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003140:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	3b01      	subs	r3, #1
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	493d      	ldr	r1, [pc, #244]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d022      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003168:	d11d      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	0f1b      	lsrs	r3, r3, #28
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	019a      	lsls	r2, r3, #6
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	041b      	lsls	r3, r3, #16
 8003192:	431a      	orrs	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	431a      	orrs	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	071b      	lsls	r3, r3, #28
 800319e:	4929      	ldr	r1, [pc, #164]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d028      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	0e1b      	lsrs	r3, r3, #24
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c0:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	019a      	lsls	r2, r3, #6
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	431a      	orrs	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	071b      	lsls	r3, r3, #28
 80031e6:	4917      	ldr	r1, [pc, #92]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4911      	ldr	r1, [pc, #68]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003210:	f7fd feb6 	bl	8000f80 <HAL_GetTick>
 8003214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003218:	f7fd feb2 	bl	8000f80 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e007      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003236:	d1ef      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e040      	b.n	80032dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fc90 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fbe0 	bl	8003a4c <UART_SetConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e022      	b.n	80032dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fe38 	bl	8003f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 febf 	bl	8004058 <UART_CheckIdleState>
 80032da:	4603      	mov	r3, r0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b08b      	sub	sp, #44	; 0x2c
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d147      	bne.n	800338a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_UART_Transmit_IT+0x22>
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e040      	b.n	800338c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	88fa      	ldrh	r2, [r7, #6]
 800331c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2221      	movs	r2, #33	; 0x21
 8003332:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d107      	bne.n	800334e <HAL_UART_Transmit_IT+0x6a>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <HAL_UART_Transmit_IT+0xb4>)
 800334a:	66da      	str	r2, [r3, #108]	; 0x6c
 800334c:	e002      	b.n	8003354 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <HAL_UART_Transmit_IT+0xb8>)
 8003352:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	613b      	str	r3, [r7, #16]
   return(result);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	69f9      	ldr	r1, [r7, #28]
 8003378:	6a3a      	ldr	r2, [r7, #32]
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e6      	bne.n	8003354 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	372c      	adds	r7, #44	; 0x2c
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	080045b7 	.word	0x080045b7
 800339c:	08004501 	.word	0x08004501

080033a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d132      	bne.n	800341e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_UART_Receive_IT+0x24>
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e02b      	b.n	8003420 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d018      	beq.n	800340e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	613b      	str	r3, [r7, #16]
   return(result);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	623b      	str	r3, [r7, #32]
 80033fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	69f9      	ldr	r1, [r7, #28]
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	61bb      	str	r3, [r7, #24]
   return(result);
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e6      	bne.n	80033dc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	461a      	mov	r2, r3
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 ff33 	bl	8004280 <UART_Start_Receive_IT>
 800341a:	4603      	mov	r3, r0
 800341c:	e000      	b.n	8003420 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b0ba      	sub	sp, #232	; 0xe8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800344e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003452:	f640 030f 	movw	r3, #2063	; 0x80f
 8003456:	4013      	ands	r3, r2
 8003458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800345c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d115      	bne.n	8003490 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 82ac 	beq.w	80039de <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
      }
      return;
 800348e:	e2a6      	b.n	80039de <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8117 	beq.w	80036c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800349a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034aa:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_UART_IRQHandler+0x298>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 810a 	beq.w	80036c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d011      	beq.n	80034e4 <HAL_UART_IRQHandler+0xbc>
 80034c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00b      	beq.n	80034e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2201      	movs	r2, #1
 80034d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d011      	beq.n	8003514 <HAL_UART_IRQHandler+0xec>
 80034f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2202      	movs	r2, #2
 8003502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350a:	f043 0204 	orr.w	r2, r3, #4
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d011      	beq.n	8003544 <HAL_UART_IRQHandler+0x11c>
 8003520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2204      	movs	r2, #4
 8003532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353a:	f043 0202 	orr.w	r2, r3, #2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d017      	beq.n	8003580 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800355c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003560:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2208      	movs	r2, #8
 800356e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003576:	f043 0208 	orr.w	r2, r3, #8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <HAL_UART_IRQHandler+0x18a>
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00c      	beq.n	80035b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8212 	beq.w	80039e2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	d005      	beq.n	800360a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003602:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003606:	2b00      	cmp	r3, #0
 8003608:	d04f      	beq.n	80036aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fefe 	bl	800440c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d141      	bne.n	80036a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3308      	adds	r3, #8
 8003624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800363c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3308      	adds	r3, #8
 8003646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800364a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800364e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1d9      	bne.n	800361e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366e:	2b00      	cmp	r3, #0
 8003670:	d013      	beq.n	800369a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003676:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <HAL_UART_IRQHandler+0x29c>)
 8003678:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fe2f 	bl	80012e2 <HAL_DMA_Abort_IT>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d017      	beq.n	80036ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e00f      	b.n	80036ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f9b6 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e00b      	b.n	80036ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9b2 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	e007      	b.n	80036ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f9ae 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80036b8:	e193      	b.n	80039e2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ba:	bf00      	nop
    return;
 80036bc:	e191      	b.n	80039e2 <HAL_UART_IRQHandler+0x5ba>
 80036be:	bf00      	nop
 80036c0:	04000120 	.word	0x04000120
 80036c4:	080044d5 	.word	0x080044d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	f040 814c 	bne.w	800396a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8145 	beq.w	800396a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 813e 	beq.w	800396a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2210      	movs	r2, #16
 80036f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	f040 80b6 	bne.w	8003872 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003712:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8165 	beq.w	80039e6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003726:	429a      	cmp	r2, r3
 8003728:	f080 815d 	bcs.w	80039e6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003732:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003740:	f000 8086 	beq.w	8003850 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800376e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003772:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800377a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1da      	bne.n	8003744 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800379e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3308      	adds	r3, #8
 80037ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e1      	bne.n	800378e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3308      	adds	r3, #8
 80037d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3308      	adds	r3, #8
 80037ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e3      	bne.n	80037ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800381e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003820:	f023 0310 	bic.w	r3, r3, #16
 8003824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003832:	65bb      	str	r3, [r7, #88]	; 0x58
 8003834:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e4      	bne.n	8003810 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fcd9 	bl	8001202 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003862:	b29b      	uxth	r3, r3
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	b29b      	uxth	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8d8 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003870:	e0b9      	b.n	80039e6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800387e:	b29b      	uxth	r3, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80ab 	beq.w	80039ea <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80a6 	beq.w	80039ea <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038c0:	647b      	str	r3, [r7, #68]	; 0x44
 80038c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e4      	bne.n	800389e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	623b      	str	r3, [r7, #32]
   return(result);
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3308      	adds	r3, #8
 80038f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038f8:	633a      	str	r2, [r7, #48]	; 0x30
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e3      	bne.n	80038d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	60fb      	str	r3, [r7, #12]
   return(result);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f023 0310 	bic.w	r3, r3, #16
 8003934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	617b      	str	r3, [r7, #20]
   return(result);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e4      	bne.n	8003920 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800395c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f85c 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003968:	e03f      	b.n	80039ea <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <HAL_UART_IRQHandler+0x56c>
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800398a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f853 	bl	8003a38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003992:	e02d      	b.n	80039f0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01c      	beq.n	80039ee <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
    }
    return;
 80039bc:	e017      	b.n	80039ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d012      	beq.n	80039f0 <HAL_UART_IRQHandler+0x5c8>
 80039ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fe4d 	bl	8004676 <UART_EndTransmit_IT>
    return;
 80039dc:	e008      	b.n	80039f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039de:	bf00      	nop
 80039e0:	e006      	b.n	80039f0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80039e2:	bf00      	nop
 80039e4:	e004      	b.n	80039f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80039ee:	bf00      	nop
  }

}
 80039f0:	37e8      	adds	r7, #232	; 0xe8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop

080039f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4ba6      	ldr	r3, [pc, #664]	; (8003d10 <UART_SetConfig+0x2c4>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a94      	ldr	r2, [pc, #592]	; (8003d14 <UART_SetConfig+0x2c8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d120      	bne.n	8003b0a <UART_SetConfig+0xbe>
 8003ac8:	4b93      	ldr	r3, [pc, #588]	; (8003d18 <UART_SetConfig+0x2cc>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d816      	bhi.n	8003b04 <UART_SetConfig+0xb8>
 8003ad6:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <UART_SetConfig+0x90>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003aed 	.word	0x08003aed
 8003ae0:	08003af9 	.word	0x08003af9
 8003ae4:	08003af3 	.word	0x08003af3
 8003ae8:	08003aff 	.word	0x08003aff
 8003aec:	2301      	movs	r3, #1
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e150      	b.n	8003d94 <UART_SetConfig+0x348>
 8003af2:	2302      	movs	r3, #2
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e14d      	b.n	8003d94 <UART_SetConfig+0x348>
 8003af8:	2304      	movs	r3, #4
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e14a      	b.n	8003d94 <UART_SetConfig+0x348>
 8003afe:	2308      	movs	r3, #8
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e147      	b.n	8003d94 <UART_SetConfig+0x348>
 8003b04:	2310      	movs	r3, #16
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e144      	b.n	8003d94 <UART_SetConfig+0x348>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a83      	ldr	r2, [pc, #524]	; (8003d1c <UART_SetConfig+0x2d0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d132      	bne.n	8003b7a <UART_SetConfig+0x12e>
 8003b14:	4b80      	ldr	r3, [pc, #512]	; (8003d18 <UART_SetConfig+0x2cc>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d828      	bhi.n	8003b74 <UART_SetConfig+0x128>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0xdc>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003b75 	.word	0x08003b75
 8003b30:	08003b75 	.word	0x08003b75
 8003b34:	08003b75 	.word	0x08003b75
 8003b38:	08003b69 	.word	0x08003b69
 8003b3c:	08003b75 	.word	0x08003b75
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003b75 	.word	0x08003b75
 8003b48:	08003b63 	.word	0x08003b63
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b75 	.word	0x08003b75
 8003b58:	08003b6f 	.word	0x08003b6f
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e118      	b.n	8003d94 <UART_SetConfig+0x348>
 8003b62:	2302      	movs	r3, #2
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e115      	b.n	8003d94 <UART_SetConfig+0x348>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e112      	b.n	8003d94 <UART_SetConfig+0x348>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e10f      	b.n	8003d94 <UART_SetConfig+0x348>
 8003b74:	2310      	movs	r3, #16
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e10c      	b.n	8003d94 <UART_SetConfig+0x348>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a68      	ldr	r2, [pc, #416]	; (8003d20 <UART_SetConfig+0x2d4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d120      	bne.n	8003bc6 <UART_SetConfig+0x17a>
 8003b84:	4b64      	ldr	r3, [pc, #400]	; (8003d18 <UART_SetConfig+0x2cc>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b8e:	2b30      	cmp	r3, #48	; 0x30
 8003b90:	d013      	beq.n	8003bba <UART_SetConfig+0x16e>
 8003b92:	2b30      	cmp	r3, #48	; 0x30
 8003b94:	d814      	bhi.n	8003bc0 <UART_SetConfig+0x174>
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d009      	beq.n	8003bae <UART_SetConfig+0x162>
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d810      	bhi.n	8003bc0 <UART_SetConfig+0x174>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <UART_SetConfig+0x15c>
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d006      	beq.n	8003bb4 <UART_SetConfig+0x168>
 8003ba6:	e00b      	b.n	8003bc0 <UART_SetConfig+0x174>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e0f2      	b.n	8003d94 <UART_SetConfig+0x348>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	e0ef      	b.n	8003d94 <UART_SetConfig+0x348>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	77fb      	strb	r3, [r7, #31]
 8003bb8:	e0ec      	b.n	8003d94 <UART_SetConfig+0x348>
 8003bba:	2308      	movs	r3, #8
 8003bbc:	77fb      	strb	r3, [r7, #31]
 8003bbe:	e0e9      	b.n	8003d94 <UART_SetConfig+0x348>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	e0e6      	b.n	8003d94 <UART_SetConfig+0x348>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a56      	ldr	r2, [pc, #344]	; (8003d24 <UART_SetConfig+0x2d8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d120      	bne.n	8003c12 <UART_SetConfig+0x1c6>
 8003bd0:	4b51      	ldr	r3, [pc, #324]	; (8003d18 <UART_SetConfig+0x2cc>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bda:	2bc0      	cmp	r3, #192	; 0xc0
 8003bdc:	d013      	beq.n	8003c06 <UART_SetConfig+0x1ba>
 8003bde:	2bc0      	cmp	r3, #192	; 0xc0
 8003be0:	d814      	bhi.n	8003c0c <UART_SetConfig+0x1c0>
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d009      	beq.n	8003bfa <UART_SetConfig+0x1ae>
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d810      	bhi.n	8003c0c <UART_SetConfig+0x1c0>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <UART_SetConfig+0x1a8>
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d006      	beq.n	8003c00 <UART_SetConfig+0x1b4>
 8003bf2:	e00b      	b.n	8003c0c <UART_SetConfig+0x1c0>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e0cc      	b.n	8003d94 <UART_SetConfig+0x348>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e0c9      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c00:	2304      	movs	r3, #4
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e0c6      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c06:	2308      	movs	r3, #8
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e0c3      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e0c0      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a44      	ldr	r2, [pc, #272]	; (8003d28 <UART_SetConfig+0x2dc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d125      	bne.n	8003c68 <UART_SetConfig+0x21c>
 8003c1c:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <UART_SetConfig+0x2cc>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2a:	d017      	beq.n	8003c5c <UART_SetConfig+0x210>
 8003c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c30:	d817      	bhi.n	8003c62 <UART_SetConfig+0x216>
 8003c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c36:	d00b      	beq.n	8003c50 <UART_SetConfig+0x204>
 8003c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3c:	d811      	bhi.n	8003c62 <UART_SetConfig+0x216>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <UART_SetConfig+0x1fe>
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c46:	d006      	beq.n	8003c56 <UART_SetConfig+0x20a>
 8003c48:	e00b      	b.n	8003c62 <UART_SetConfig+0x216>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e0a1      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c50:	2302      	movs	r3, #2
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e09e      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c56:	2304      	movs	r3, #4
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e09b      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e098      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c62:	2310      	movs	r3, #16
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e095      	b.n	8003d94 <UART_SetConfig+0x348>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2f      	ldr	r2, [pc, #188]	; (8003d2c <UART_SetConfig+0x2e0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d125      	bne.n	8003cbe <UART_SetConfig+0x272>
 8003c72:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <UART_SetConfig+0x2cc>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c80:	d017      	beq.n	8003cb2 <UART_SetConfig+0x266>
 8003c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c86:	d817      	bhi.n	8003cb8 <UART_SetConfig+0x26c>
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8c:	d00b      	beq.n	8003ca6 <UART_SetConfig+0x25a>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d811      	bhi.n	8003cb8 <UART_SetConfig+0x26c>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <UART_SetConfig+0x254>
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9c:	d006      	beq.n	8003cac <UART_SetConfig+0x260>
 8003c9e:	e00b      	b.n	8003cb8 <UART_SetConfig+0x26c>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e076      	b.n	8003d94 <UART_SetConfig+0x348>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e073      	b.n	8003d94 <UART_SetConfig+0x348>
 8003cac:	2304      	movs	r3, #4
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e070      	b.n	8003d94 <UART_SetConfig+0x348>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e06d      	b.n	8003d94 <UART_SetConfig+0x348>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e06a      	b.n	8003d94 <UART_SetConfig+0x348>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <UART_SetConfig+0x2e4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d138      	bne.n	8003d3a <UART_SetConfig+0x2ee>
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <UART_SetConfig+0x2cc>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cd6:	d017      	beq.n	8003d08 <UART_SetConfig+0x2bc>
 8003cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cdc:	d82a      	bhi.n	8003d34 <UART_SetConfig+0x2e8>
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce2:	d00b      	beq.n	8003cfc <UART_SetConfig+0x2b0>
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce8:	d824      	bhi.n	8003d34 <UART_SetConfig+0x2e8>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <UART_SetConfig+0x2aa>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	d006      	beq.n	8003d02 <UART_SetConfig+0x2b6>
 8003cf4:	e01e      	b.n	8003d34 <UART_SetConfig+0x2e8>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e04b      	b.n	8003d94 <UART_SetConfig+0x348>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e048      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d02:	2304      	movs	r3, #4
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e045      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e042      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d0e:	bf00      	nop
 8003d10:	efff69f3 	.word	0xefff69f3
 8003d14:	40011000 	.word	0x40011000
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40004400 	.word	0x40004400
 8003d20:	40004800 	.word	0x40004800
 8003d24:	40004c00 	.word	0x40004c00
 8003d28:	40005000 	.word	0x40005000
 8003d2c:	40011400 	.word	0x40011400
 8003d30:	40007800 	.word	0x40007800
 8003d34:	2310      	movs	r3, #16
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e02c      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a72      	ldr	r2, [pc, #456]	; (8003f08 <UART_SetConfig+0x4bc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d125      	bne.n	8003d90 <UART_SetConfig+0x344>
 8003d44:	4b71      	ldr	r3, [pc, #452]	; (8003f0c <UART_SetConfig+0x4c0>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d52:	d017      	beq.n	8003d84 <UART_SetConfig+0x338>
 8003d54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d58:	d817      	bhi.n	8003d8a <UART_SetConfig+0x33e>
 8003d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5e:	d00b      	beq.n	8003d78 <UART_SetConfig+0x32c>
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d64:	d811      	bhi.n	8003d8a <UART_SetConfig+0x33e>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <UART_SetConfig+0x326>
 8003d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d6e:	d006      	beq.n	8003d7e <UART_SetConfig+0x332>
 8003d70:	e00b      	b.n	8003d8a <UART_SetConfig+0x33e>
 8003d72:	2300      	movs	r3, #0
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e00d      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e00a      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e007      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d84:	2308      	movs	r3, #8
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e004      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e001      	b.n	8003d94 <UART_SetConfig+0x348>
 8003d90:	2310      	movs	r3, #16
 8003d92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9c:	d15b      	bne.n	8003e56 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d9e:	7ffb      	ldrb	r3, [r7, #31]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d828      	bhi.n	8003df6 <UART_SetConfig+0x3aa>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <UART_SetConfig+0x360>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003de1 	.word	0x08003de1
 8003db8:	08003df7 	.word	0x08003df7
 8003dbc:	08003de7 	.word	0x08003de7
 8003dc0:	08003df7 	.word	0x08003df7
 8003dc4:	08003df7 	.word	0x08003df7
 8003dc8:	08003df7 	.word	0x08003df7
 8003dcc:	08003def 	.word	0x08003def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f7fe fdea 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	61b8      	str	r0, [r7, #24]
        break;
 8003dd6:	e013      	b.n	8003e00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7fe fdfa 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	61b8      	str	r0, [r7, #24]
        break;
 8003dde:	e00f      	b.n	8003e00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de0:	4b4b      	ldr	r3, [pc, #300]	; (8003f10 <UART_SetConfig+0x4c4>)
 8003de2:	61bb      	str	r3, [r7, #24]
        break;
 8003de4:	e00c      	b.n	8003e00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de6:	f7fe fccd 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8003dea:	61b8      	str	r0, [r7, #24]
        break;
 8003dec:	e008      	b.n	8003e00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	61bb      	str	r3, [r7, #24]
        break;
 8003df4:	e004      	b.n	8003e00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	77bb      	strb	r3, [r7, #30]
        break;
 8003dfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d074      	beq.n	8003ef0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	005a      	lsls	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	441a      	add	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b0f      	cmp	r3, #15
 8003e20:	d916      	bls.n	8003e50 <UART_SetConfig+0x404>
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e28:	d212      	bcs.n	8003e50 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f023 030f 	bic.w	r3, r3, #15
 8003e32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	89fb      	ldrh	r3, [r7, #14]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	89fa      	ldrh	r2, [r7, #14]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	e04f      	b.n	8003ef0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	77bb      	strb	r3, [r7, #30]
 8003e54:	e04c      	b.n	8003ef0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d828      	bhi.n	8003eae <UART_SetConfig+0x462>
 8003e5c:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0x418>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08003eaf 	.word	0x08003eaf
 8003e74:	08003e9f 	.word	0x08003e9f
 8003e78:	08003eaf 	.word	0x08003eaf
 8003e7c:	08003eaf 	.word	0x08003eaf
 8003e80:	08003eaf 	.word	0x08003eaf
 8003e84:	08003ea7 	.word	0x08003ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e88:	f7fe fd8e 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8003e8c:	61b8      	str	r0, [r7, #24]
        break;
 8003e8e:	e013      	b.n	8003eb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e90:	f7fe fd9e 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8003e94:	61b8      	str	r0, [r7, #24]
        break;
 8003e96:	e00f      	b.n	8003eb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <UART_SetConfig+0x4c4>)
 8003e9a:	61bb      	str	r3, [r7, #24]
        break;
 8003e9c:	e00c      	b.n	8003eb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9e:	f7fe fc71 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8003ea2:	61b8      	str	r0, [r7, #24]
        break;
 8003ea4:	e008      	b.n	8003eb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eaa:	61bb      	str	r3, [r7, #24]
        break;
 8003eac:	e004      	b.n	8003eb8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	77bb      	strb	r3, [r7, #30]
        break;
 8003eb6:	bf00      	nop
    }

    if (pclk != 0U)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	085a      	lsrs	r2, r3, #1
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	441a      	add	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b0f      	cmp	r3, #15
 8003ed6:	d909      	bls.n	8003eec <UART_SetConfig+0x4a0>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ede:	d205      	bcs.n	8003eec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	e001      	b.n	8003ef0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003efc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40007c00 	.word	0x40007c00
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	00f42400 	.word	0x00f42400

08003f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01a      	beq.n	800402a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004012:	d10a      	bne.n	800402a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af02      	add	r7, sp, #8
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004068:	f7fc ff8a 	bl	8000f80 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b08      	cmp	r3, #8
 800407a:	d10e      	bne.n	800409a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800407c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f831 	bl	80040f2 <UART_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e027      	b.n	80040ea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d10e      	bne.n	80040c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f81b 	bl	80040f2 <UART_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e011      	b.n	80040ea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b09c      	sub	sp, #112	; 0x70
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004102:	e0a7      	b.n	8004254 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	f000 80a3 	beq.w	8004254 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fc ff37 	bl	8000f80 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <UART_WaitOnFlagUntilTimeout+0x32>
 800411e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004120:	2b00      	cmp	r3, #0
 8004122:	d13f      	bne.n	80041a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004138:	667b      	str	r3, [r7, #100]	; 0x64
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004144:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004148:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e6      	bne.n	8004124 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3308      	adds	r3, #8
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	663b      	str	r3, [r7, #96]	; 0x60
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3308      	adds	r3, #8
 8004174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004176:	64ba      	str	r2, [r7, #72]	; 0x48
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800417c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e068      	b.n	8004276 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d050      	beq.n	8004254 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c0:	d148      	bne.n	8004254 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
 80041ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e6      	bne.n	80041cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3308      	adds	r3, #8
 8004204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	613b      	str	r3, [r7, #16]
   return(result);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f023 0301 	bic.w	r3, r3, #1
 8004214:	66bb      	str	r3, [r7, #104]	; 0x68
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3308      	adds	r3, #8
 800421c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800421e:	623a      	str	r2, [r7, #32]
 8004220:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	69f9      	ldr	r1, [r7, #28]
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	61bb      	str	r3, [r7, #24]
   return(result);
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e5      	bne.n	80041fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e010      	b.n	8004276 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4013      	ands	r3, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	429a      	cmp	r2, r3
 8004270:	f43f af48 	beq.w	8004104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3770      	adds	r7, #112	; 0x70
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004280:	b480      	push	{r7}
 8004282:	b097      	sub	sp, #92	; 0x5c
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b2:	d10e      	bne.n	80042d2 <UART_Start_Receive_IT+0x52>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <UART_Start_Receive_IT+0x48>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042c6:	e02d      	b.n	8004324 <UART_Start_Receive_IT+0xa4>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	22ff      	movs	r2, #255	; 0xff
 80042cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042d0:	e028      	b.n	8004324 <UART_Start_Receive_IT+0xa4>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10d      	bne.n	80042f6 <UART_Start_Receive_IT+0x76>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <UART_Start_Receive_IT+0x6c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	22ff      	movs	r2, #255	; 0xff
 80042e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042ea:	e01b      	b.n	8004324 <UART_Start_Receive_IT+0xa4>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	227f      	movs	r2, #127	; 0x7f
 80042f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f4:	e016      	b.n	8004324 <UART_Start_Receive_IT+0xa4>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fe:	d10d      	bne.n	800431c <UART_Start_Receive_IT+0x9c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <UART_Start_Receive_IT+0x92>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	227f      	movs	r2, #127	; 0x7f
 800430c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004310:	e008      	b.n	8004324 <UART_Start_Receive_IT+0xa4>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	223f      	movs	r2, #63	; 0x3f
 8004316:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800431a:	e003      	b.n	8004324 <UART_Start_Receive_IT+0xa4>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2222      	movs	r2, #34	; 0x22
 8004330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	657b      	str	r3, [r7, #84]	; 0x54
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004354:	64ba      	str	r2, [r7, #72]	; 0x48
 8004356:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800435a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d107      	bne.n	8004382 <UART_Start_Receive_IT+0x102>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a21      	ldr	r2, [pc, #132]	; (8004404 <UART_Start_Receive_IT+0x184>)
 800437e:	669a      	str	r2, [r3, #104]	; 0x68
 8004380:	e002      	b.n	8004388 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <UART_Start_Receive_IT+0x188>)
 8004386:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d019      	beq.n	80043c4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80043a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
 80043b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e6      	bne.n	8004390 <UART_Start_Receive_IT+0x110>
 80043c2:	e018      	b.n	80043f6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	613b      	str	r3, [r7, #16]
   return(result);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f043 0320 	orr.w	r3, r3, #32
 80043d8:	653b      	str	r3, [r7, #80]	; 0x50
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e2:	623b      	str	r3, [r7, #32]
 80043e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	69f9      	ldr	r1, [r7, #28]
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	375c      	adds	r7, #92	; 0x5c
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	08004831 	.word	0x08004831
 8004408:	080046cb 	.word	0x080046cb

0800440c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b095      	sub	sp, #84	; 0x54
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
 8004434:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e6      	bne.n	8004414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3308      	adds	r3, #8
 800444c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	61fb      	str	r3, [r7, #28]
   return(result);
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447e:	2b01      	cmp	r3, #1
 8004480:	d118      	bne.n	80044b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f023 0310 	bic.w	r3, r3, #16
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6979      	ldr	r1, [r7, #20]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	613b      	str	r3, [r7, #16]
   return(result);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e6      	bne.n	8004482 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044c8:	bf00      	nop
 80044ca:	3754      	adds	r7, #84	; 0x54
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7ff fa8a 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b08f      	sub	sp, #60	; 0x3c
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800450c:	2b21      	cmp	r3, #33	; 0x21
 800450e:	d14c      	bne.n	80045aa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d132      	bne.n	8004582 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	61fb      	str	r3, [r7, #28]
   return(result);
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e6      	bne.n	800451c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	60bb      	str	r3, [r7, #8]
   return(result);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	613b      	str	r3, [r7, #16]
   return(result);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e6      	bne.n	800454e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004580:	e013      	b.n	80045aa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80045aa:	bf00      	nop
 80045ac:	373c      	adds	r7, #60	; 0x3c
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b091      	sub	sp, #68	; 0x44
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c2:	2b21      	cmp	r3, #33	; 0x21
 80045c4:	d151      	bne.n	800466a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d132      	bne.n	8004638 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	623b      	str	r3, [r7, #32]
   return(result);
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
 80045f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e6      	bne.n	80045d2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	60fb      	str	r3, [r7, #12]
   return(result);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	69b9      	ldr	r1, [r7, #24]
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	617b      	str	r3, [r7, #20]
   return(result);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e6      	bne.n	8004604 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004636:	e018      	b.n	800466a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800463e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	1c9a      	adds	r2, r3, #2
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800466a:	bf00      	nop
 800466c:	3744      	adds	r7, #68	; 0x44
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b088      	sub	sp, #32
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	60bb      	str	r3, [r7, #8]
   return(result);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	613b      	str	r3, [r7, #16]
   return(result);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e6      	bne.n	800467e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff f99b 	bl	80039f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c2:	bf00      	nop
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b096      	sub	sp, #88	; 0x58
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	2b22      	cmp	r3, #34	; 0x22
 80046e4:	f040 8098 	bne.w	8004818 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80046f6:	b2d9      	uxtb	r1, r3
 80046f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	400a      	ands	r2, r1
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d17b      	bne.n	8004828 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004744:	653b      	str	r3, [r7, #80]	; 0x50
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474e:	647b      	str	r3, [r7, #68]	; 0x44
 8004750:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800475c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e6      	bne.n	8004730 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3308      	adds	r3, #8
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	623b      	str	r3, [r7, #32]
   return(result);
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3308      	adds	r3, #8
 8004780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004782:	633a      	str	r2, [r7, #48]	; 0x30
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e5      	bne.n	8004762 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d12e      	bne.n	8004810 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f023 0310 	bic.w	r3, r3, #16
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	617b      	str	r3, [r7, #20]
   return(result);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e6      	bne.n	80047b8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d103      	bne.n	8004800 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2210      	movs	r2, #16
 80047fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff f909 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800480e:	e00b      	b.n	8004828 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7fc f8cb 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 8004816:	e007      	b.n	8004828 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	619a      	str	r2, [r3, #24]
}
 8004828:	bf00      	nop
 800482a:	3758      	adds	r7, #88	; 0x58
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b096      	sub	sp, #88	; 0x58
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800483e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004848:	2b22      	cmp	r3, #34	; 0x22
 800484a:	f040 8098 	bne.w	800497e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800485e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004862:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004866:	4013      	ands	r3, r2
 8004868:	b29a      	uxth	r2, r3
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	1c9a      	adds	r2, r3, #2
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d17b      	bne.n	800498e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
 80048b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e6      	bne.n	8004896 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3308      	adds	r3, #8
 80048e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e5      	bne.n	80048c8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	2b01      	cmp	r3, #1
 8004916:	d12e      	bne.n	8004976 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	60bb      	str	r3, [r7, #8]
   return(result);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	647b      	str	r3, [r7, #68]	; 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6979      	ldr	r1, [r7, #20]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	613b      	str	r3, [r7, #16]
   return(result);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e6      	bne.n	800491e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b10      	cmp	r3, #16
 800495c:	d103      	bne.n	8004966 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2210      	movs	r2, #16
 8004964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff f856 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004974:	e00b      	b.n	800498e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc f818 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 800497c:	e007      	b.n	800498e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0208 	orr.w	r2, r2, #8
 800498c:	619a      	str	r2, [r3, #24]
}
 800498e:	bf00      	nop
 8004990:	3758      	adds	r7, #88	; 0x58
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004998:	b084      	sub	sp, #16
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	f107 001c 	add.w	r0, r7, #28
 80049a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d120      	bne.n	80049f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <USB_CoreInit+0xac>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa96 	bl	8004f18 <USB_CoreReset>
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]
 80049f0:	e010      	b.n	8004a14 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa8a 	bl	8004f18 <USB_CoreReset>
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10b      	bne.n	8004a32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f043 0206 	orr.w	r2, r3, #6
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a3e:	b004      	add	sp, #16
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	ffbdffbf 	.word	0xffbdffbf

08004a48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f023 0201 	bic.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d115      	bne.n	8004ab8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f7fc fa7d 	bl	8000f98 <HAL_Delay>
      ms++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa29 	bl	8004efc <USB_GetMode>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d01e      	beq.n	8004aee <USB_SetCurrentMode+0x84>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b31      	cmp	r3, #49	; 0x31
 8004ab4:	d9f0      	bls.n	8004a98 <USB_SetCurrentMode+0x2e>
 8004ab6:	e01a      	b.n	8004aee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d115      	bne.n	8004aea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004aca:	2001      	movs	r0, #1
 8004acc:	f7fc fa64 	bl	8000f98 <HAL_Delay>
      ms++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa10 	bl	8004efc <USB_GetMode>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <USB_SetCurrentMode+0x84>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b31      	cmp	r3, #49	; 0x31
 8004ae6:	d9f0      	bls.n	8004aca <USB_SetCurrentMode+0x60>
 8004ae8:	e001      	b.n	8004aee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e005      	b.n	8004afa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b32      	cmp	r3, #50	; 0x32
 8004af2:	d101      	bne.n	8004af8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b04:	b084      	sub	sp, #16
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	e009      	b.n	8004b38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3340      	adds	r3, #64	; 0x40
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	3301      	adds	r3, #1
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b0e      	cmp	r3, #14
 8004b3c:	d9f2      	bls.n	8004b24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11c      	bne.n	8004b7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b52:	f043 0302 	orr.w	r3, r3, #2
 8004b56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e005      	b.n	8004b8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	680b      	ldr	r3, [r1, #0]
 8004ba8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10c      	bne.n	8004bca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f965 	bl	8004e88 <USB_SetDevSpeed>
 8004bbe:	e008      	b.n	8004bd2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f960 	bl	8004e88 <USB_SetDevSpeed>
 8004bc8:	e003      	b.n	8004bd2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bca:	2103      	movs	r1, #3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f95b 	bl	8004e88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f8f3 	bl	8004dc0 <USB_FlushTxFifo>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f91f 	bl	8004e28 <USB_FlushRxFifo>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	461a      	mov	r2, r3
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	461a      	mov	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	e043      	b.n	8004ca6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c34:	d118      	bne.n	8004c68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e013      	b.n	8004c7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e008      	b.n	8004c7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	461a      	mov	r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	461a      	mov	r2, r3
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d3b7      	bcc.n	8004c1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e043      	b.n	8004d3c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cca:	d118      	bne.n	8004cfe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e013      	b.n	8004d10 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e008      	b.n	8004d10 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d3b7      	bcc.n	8004cb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f043 0210 	orr.w	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <USB_DevInit+0x2b4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f043 0208 	orr.w	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <USB_DevInit+0x2b8>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db4:	b004      	add	sp, #16
 8004db6:	4770      	bx	lr
 8004db8:	803c3800 	.word	0x803c3800
 8004dbc:	40000004 	.word	0x40000004

08004dc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <USB_FlushTxFifo+0x64>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e01b      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	daf2      	bge.n	8004dce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	019b      	lsls	r3, r3, #6
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <USB_FlushTxFifo+0x64>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d0f0      	beq.n	8004df8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	00030d40 	.word	0x00030d40

08004e28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <USB_FlushRxFifo+0x5c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e018      	b.n	8004e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	daf2      	bge.n	8004e34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2210      	movs	r2, #16
 8004e56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <USB_FlushRxFifo+0x5c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e006      	b.n	8004e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d0f0      	beq.n	8004e58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	00030d40 	.word	0x00030d40

08004e88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ed4:	f023 0303 	bic.w	r3, r3, #3
 8004ed8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee8:	f043 0302 	orr.w	r3, r3, #2
 8004eec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0301 	and.w	r3, r3, #1
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3301      	adds	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <USB_CoreReset+0x64>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e01b      	b.n	8004f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	daf2      	bge.n	8004f24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f043 0201 	orr.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <USB_CoreReset+0x64>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e006      	b.n	8004f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d0f0      	beq.n	8004f4e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	00030d40 	.word	0x00030d40

08004f80 <memset>:
 8004f80:	4402      	add	r2, r0
 8004f82:	4603      	mov	r3, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <__libc_init_array>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	4d0d      	ldr	r5, [pc, #52]	; (8004fc8 <__libc_init_array+0x38>)
 8004f94:	4c0d      	ldr	r4, [pc, #52]	; (8004fcc <__libc_init_array+0x3c>)
 8004f96:	1b64      	subs	r4, r4, r5
 8004f98:	10a4      	asrs	r4, r4, #2
 8004f9a:	2600      	movs	r6, #0
 8004f9c:	42a6      	cmp	r6, r4
 8004f9e:	d109      	bne.n	8004fb4 <__libc_init_array+0x24>
 8004fa0:	4d0b      	ldr	r5, [pc, #44]	; (8004fd0 <__libc_init_array+0x40>)
 8004fa2:	4c0c      	ldr	r4, [pc, #48]	; (8004fd4 <__libc_init_array+0x44>)
 8004fa4:	f000 f818 	bl	8004fd8 <_init>
 8004fa8:	1b64      	subs	r4, r4, r5
 8004faa:	10a4      	asrs	r4, r4, #2
 8004fac:	2600      	movs	r6, #0
 8004fae:	42a6      	cmp	r6, r4
 8004fb0:	d105      	bne.n	8004fbe <__libc_init_array+0x2e>
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb8:	4798      	blx	r3
 8004fba:	3601      	adds	r6, #1
 8004fbc:	e7ee      	b.n	8004f9c <__libc_init_array+0xc>
 8004fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc2:	4798      	blx	r3
 8004fc4:	3601      	adds	r6, #1
 8004fc6:	e7f2      	b.n	8004fae <__libc_init_array+0x1e>
 8004fc8:	08005010 	.word	0x08005010
 8004fcc:	08005010 	.word	0x08005010
 8004fd0:	08005010 	.word	0x08005010
 8004fd4:	08005014 	.word	0x08005014

08004fd8 <_init>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr

08004fe4 <_fini>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr
